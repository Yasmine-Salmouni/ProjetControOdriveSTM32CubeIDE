
ProjetControlOdriveBis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd98  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  0800df28  0800df28  0000ef28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e52c  0800e52c  000101f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e52c  0800e52c  0000f52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e534  0800e534  000101f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e534  0800e534  0000f534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e538  0800e538  0000f538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800e53c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101f8  2**0
                  CONTENTS
 10 .bss          00000abc  200001f8  200001f8  000101f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000cb4  20000cb4  000101f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fc1f  00000000  00000000  00010228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b4e  00000000  00000000  0002fe47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001730  00000000  00000000  00034998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011c7  00000000  00000000  000360c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028eea  00000000  00000000  0003728f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020051  00000000  00000000  00060179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d456f  00000000  00000000  000801ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00154739  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000072ac  00000000  00000000  0015477c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0015ba28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800df10 	.word	0x0800df10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800df10 	.word	0x0800df10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <_ZN17MotorComputationsC1Ef>:

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

MotorComputations::MotorComputations(float torqueConstant)
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	ed87 0a00 	vstr	s0, [r7]
    : torqueConstant(torqueConstant) {}
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_ZN13VESCInterface9getValuesEv>:
private:
    UART_HandleTypeDef *uart;   // handle UART utilisé pour communiquer
    VESCValues values;          // dernières valeurs reçues

    // Méthode interne pour envoyer un paquet et attendre une réponse (pour GET_VALUES)
    int getValues() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b0ce      	sub	sp, #312	@ 0x138
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000efe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f02:	6018      	str	r0, [r3, #0]
        // Construire la requête COMM_GET_VALUES
        uint8_t txBuf[6];  // 6 octets: start, len, id, CRC16(2B), stop
        uint16_t crc;
        txBuf[0] = 0x02;       // Start byte (short packet)
 8000f04:	2302      	movs	r3, #2
 8000f06:	f887 3118 	strb.w	r3, [r7, #280]	@ 0x118
        txBuf[1] = 0x01;       // Length = 1 (payload size)
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
        txBuf[2] = COMM_GET_VALUES;  // Payload: command ID
 8000f10:	2304      	movs	r3, #4
 8000f12:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
        crc = crc16(&txBuf[2], 1);   // CRC16 sur 1 octet (0x04)
 8000f16:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f1a:	1c99      	adds	r1, r3, #2
 8000f1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f20:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f24:	2201      	movs	r2, #1
 8000f26:	6818      	ldr	r0, [r3, #0]
 8000f28:	f000 f9fa 	bl	8001320 <_ZN13VESCInterface5crc16EPKht>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
        txBuf[3] = (crc >> 8) & 0xFF;  // CRC high byte
 8000f32:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8000f36:	0a1b      	lsrs	r3, r3, #8
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        txBuf[4] = crc & 0xFF;        // CRC low byte
 8000f40:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
        txBuf[5] = 0x03;       // End byte
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d

        // Envoyer la requête
        if (HAL_UART_Transmit(uart, txBuf, sizeof(txBuf), 100) != HAL_OK) {
 8000f50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f54:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6818      	ldr	r0, [r3, #0]
 8000f5c:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000f60:	2364      	movs	r3, #100	@ 0x64
 8000f62:	2206      	movs	r2, #6
 8000f64:	f005 fc0f 	bl	8006786 <HAL_UART_Transmit>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	bf14      	ite	ne
 8000f6e:	2301      	movne	r3, #1
 8000f70:	2300      	moveq	r3, #0
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <_ZN13VESCInterface9getValuesEv+0x88>
            return 0;  // échec envoi
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e1b3      	b.n	80012e4 <_ZN13VESCInterface9getValuesEv+0x3f0>
        }

        // Lire l'octet de départ de la réponse
        uint8_t startByte;
        if (HAL_UART_Receive(uart, &startByte, 1, 100) != HAL_OK) {
 8000f7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f80:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6818      	ldr	r0, [r3, #0]
 8000f88:	f207 1117 	addw	r1, r7, #279	@ 0x117
 8000f8c:	2364      	movs	r3, #100	@ 0x64
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f005 fc84 	bl	800689c <HAL_UART_Receive>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	bf14      	ite	ne
 8000f9a:	2301      	movne	r3, #1
 8000f9c:	2300      	moveq	r3, #0
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <_ZN13VESCInterface9getValuesEv+0xb4>
            return 0;  // timeout ou pas de réponse
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	e19d      	b.n	80012e4 <_ZN13VESCInterface9getValuesEv+0x3f0>
        }
        if (startByte != 0x02 && startByte != 0x03) {
 8000fa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d005      	beq.n	8000fbc <_ZN13VESCInterface9getValuesEv+0xc8>
 8000fb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d001      	beq.n	8000fbc <_ZN13VESCInterface9getValuesEv+0xc8>
            return 0;  // octet de start invalide
 8000fb8:	2300      	movs	r3, #0
 8000fba:	e193      	b.n	80012e4 <_ZN13VESCInterface9getValuesEv+0x3f0>
        }

        // Lire la longueur
        uint16_t payloadLen = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
        if (startByte == 0x02) {
 8000fc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d11d      	bne.n	8001006 <_ZN13VESCInterface9getValuesEv+0x112>
            // paquet court -> 1 octet de longueur
            uint8_t lenByte;
            if (HAL_UART_Receive(uart, &lenByte, 1, 100) != HAL_OK) return 0;
 8000fca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fce:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6818      	ldr	r0, [r3, #0]
 8000fd6:	f107 010e 	add.w	r1, r7, #14
 8000fda:	2364      	movs	r3, #100	@ 0x64
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f005 fc5d 	bl	800689c <HAL_UART_Receive>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	bf14      	ite	ne
 8000fe8:	2301      	movne	r3, #1
 8000fea:	2300      	moveq	r3, #0
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <_ZN13VESCInterface9getValuesEv+0x102>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e176      	b.n	80012e4 <_ZN13VESCInterface9getValuesEv+0x3f0>
            payloadLen = lenByte;
 8000ff6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ffa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8001004:	e027      	b.n	8001056 <_ZN13VESCInterface9getValuesEv+0x162>
        } else {
            // paquet long -> 2 octets de longueur
            uint8_t lenBytes[2];
            if (HAL_UART_Receive(uart, lenBytes, 2, 100) != HAL_OK) return 0;
 8001006:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800100a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	f107 010c 	add.w	r1, r7, #12
 8001016:	2364      	movs	r3, #100	@ 0x64
 8001018:	2202      	movs	r2, #2
 800101a:	f005 fc3f 	bl	800689c <HAL_UART_Receive>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	bf14      	ite	ne
 8001024:	2301      	movne	r3, #1
 8001026:	2300      	moveq	r3, #0
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <_ZN13VESCInterface9getValuesEv+0x13e>
 800102e:	2300      	movs	r3, #0
 8001030:	e158      	b.n	80012e4 <_ZN13VESCInterface9getValuesEv+0x3f0>
            payloadLen = ((uint16_t)lenBytes[0] << 8) | lenBytes[1];
 8001032:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001036:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b21b      	sxth	r3, r3
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001046:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800104a:	785b      	ldrb	r3, [r3, #1]
 800104c:	b21b      	sxth	r3, r3
 800104e:	4313      	orrs	r3, r2
 8001050:	b21b      	sxth	r3, r3
 8001052:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
        }

        // Lire tout le payload de longueur connue
        uint8_t rxPayload[256];  // buffer assez grand (adapter si besoin)
        if (payloadLen > sizeof(rxPayload)) {
 8001056:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 800105a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800105e:	d91d      	bls.n	800109c <_ZN13VESCInterface9getValuesEv+0x1a8>
            // Si la longueur annoncée dépasse le buffer prévu, on évite le dépassement
            // On pourrait lire et jeter les octets, mais on retourne erreur par sûreté
            for (uint16_t i = 0; i < payloadLen + 3; ++i) {
 8001060:	2300      	movs	r3, #0
 8001062:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 8001066:	e010      	b.n	800108a <_ZN13VESCInterface9getValuesEv+0x196>
                uint8_t dump;
                HAL_UART_Receive(uart, &dump, 1, 10); // flush
 8001068:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800106c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	f107 010b 	add.w	r1, r7, #11
 8001078:	230a      	movs	r3, #10
 800107a:	2201      	movs	r2, #1
 800107c:	f005 fc0e 	bl	800689c <HAL_UART_Receive>
            for (uint16_t i = 0; i < payloadLen + 3; ++i) {
 8001080:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8001084:	3301      	adds	r3, #1
 8001086:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 800108a:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 800108e:	1c9a      	adds	r2, r3, #2
 8001090:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8001094:	429a      	cmp	r2, r3
 8001096:	dae7      	bge.n	8001068 <_ZN13VESCInterface9getValuesEv+0x174>
            }
            return 0;
 8001098:	2300      	movs	r3, #0
 800109a:	e123      	b.n	80012e4 <_ZN13VESCInterface9getValuesEv+0x3f0>
        }
        if (HAL_UART_Receive(uart, rxPayload, payloadLen, 100) != HAL_OK) {
 800109c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010a0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 80010ac:	f107 0114 	add.w	r1, r7, #20
 80010b0:	2364      	movs	r3, #100	@ 0x64
 80010b2:	f005 fbf3 	bl	800689c <HAL_UART_Receive>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	bf14      	ite	ne
 80010bc:	2301      	movne	r3, #1
 80010be:	2300      	moveq	r3, #0
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <_ZN13VESCInterface9getValuesEv+0x1d6>
            return 0;  // échec lecture payload
 80010c6:	2300      	movs	r3, #0
 80010c8:	e10c      	b.n	80012e4 <_ZN13VESCInterface9getValuesEv+0x3f0>
        }

        // Lire CRC16 (2 octets) et l'octet de fin
        uint8_t crcBytes[2];
        uint8_t endByte;
        if (HAL_UART_Receive(uart, crcBytes, 2, 100) != HAL_OK) return 0;
 80010ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010ce:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	f107 0110 	add.w	r1, r7, #16
 80010da:	2364      	movs	r3, #100	@ 0x64
 80010dc:	2202      	movs	r2, #2
 80010de:	f005 fbdd 	bl	800689c <HAL_UART_Receive>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	bf14      	ite	ne
 80010e8:	2301      	movne	r3, #1
 80010ea:	2300      	moveq	r3, #0
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <_ZN13VESCInterface9getValuesEv+0x202>
 80010f2:	2300      	movs	r3, #0
 80010f4:	e0f6      	b.n	80012e4 <_ZN13VESCInterface9getValuesEv+0x3f0>
        if (HAL_UART_Receive(uart, &endByte, 1, 100) != HAL_OK) return 0;
 80010f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010fa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	f107 010f 	add.w	r1, r7, #15
 8001106:	2364      	movs	r3, #100	@ 0x64
 8001108:	2201      	movs	r2, #1
 800110a:	f005 fbc7 	bl	800689c <HAL_UART_Receive>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	bf14      	ite	ne
 8001114:	2301      	movne	r3, #1
 8001116:	2300      	moveq	r3, #0
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <_ZN13VESCInterface9getValuesEv+0x22e>
 800111e:	2300      	movs	r3, #0
 8001120:	e0e0      	b.n	80012e4 <_ZN13VESCInterface9getValuesEv+0x3f0>
        if (endByte != 0x03) {
 8001122:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001126:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b03      	cmp	r3, #3
 800112e:	d001      	beq.n	8001134 <_ZN13VESCInterface9getValuesEv+0x240>
            return 0;  // mauvais octet de fin
 8001130:	2300      	movs	r3, #0
 8001132:	e0d7      	b.n	80012e4 <_ZN13VESCInterface9getValuesEv+0x3f0>
        }

        // Vérifier le CRC
        uint16_t crcReceived = ((uint16_t)crcBytes[0] << 8) | crcBytes[1];
 8001134:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001138:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b21b      	sxth	r3, r3
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b21a      	sxth	r2, r3
 8001144:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001148:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800114c:	785b      	ldrb	r3, [r3, #1]
 800114e:	b21b      	sxth	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b21b      	sxth	r3, r3
 8001154:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
        uint16_t crcCalc = crc16(rxPayload, payloadLen);
 8001158:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 800115c:	f107 0114 	add.w	r1, r7, #20
 8001160:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001164:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001168:	6818      	ldr	r0, [r3, #0]
 800116a:	f000 f8d9 	bl	8001320 <_ZN13VESCInterface5crc16EPKht>
 800116e:	4603      	mov	r3, r0
 8001170:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
        if (crcReceived != crcCalc) {
 8001174:	f8b7 2130 	ldrh.w	r2, [r7, #304]	@ 0x130
 8001178:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 800117c:	429a      	cmp	r2, r3
 800117e:	d001      	beq.n	8001184 <_ZN13VESCInterface9getValuesEv+0x290>
            return 0;  // CRC invalide
 8001180:	2300      	movs	r3, #0
 8001182:	e0af      	b.n	80012e4 <_ZN13VESCInterface9getValuesEv+0x3f0>
        }

        // Vérifier l'ID de commande dans le payload
        if (payloadLen < 1 || rxPayload[0] != COMM_GET_VALUES) {
 8001184:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8001188:	2b00      	cmp	r3, #0
 800118a:	d006      	beq.n	800119a <_ZN13VESCInterface9getValuesEv+0x2a6>
 800118c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001190:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b04      	cmp	r3, #4
 8001198:	d001      	beq.n	800119e <_ZN13VESCInterface9getValuesEv+0x2aa>
            return 0;  // pas le bon paquet de réponse
 800119a:	2300      	movs	r3, #0
 800119c:	e0a2      	b.n	80012e4 <_ZN13VESCInterface9getValuesEv+0x3f0>
        // rxPayload[1-2] = temp_fet (int16)
        // rxPayload[3-4] = temp_motor (int16)
        // rxPayload[5-8] = avg_motor_current (int32, échelle x100)
        // rxPayload[21-22] = duty_now (int16, échelle x1000)
        // rxPayload[23-26] = rpm (int32)
        if (payloadLen >= 27) {
 800119e:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80011a2:	2b1a      	cmp	r3, #26
 80011a4:	f240 809d 	bls.w	80012e2 <_ZN13VESCInterface9getValuesEv+0x3ee>
            // Courant moteur (float en A)
            int32_t current_int = (rxPayload[5] << 24) | (rxPayload[6] << 16) |
 80011a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80011b0:	795b      	ldrb	r3, [r3, #5]
 80011b2:	061a      	lsls	r2, r3, #24
 80011b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011b8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80011bc:	799b      	ldrb	r3, [r3, #6]
 80011be:	041b      	lsls	r3, r3, #16
 80011c0:	431a      	orrs	r2, r3
                                   (rxPayload[7] << 8) | rxPayload[8];
 80011c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011c6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80011ca:	79db      	ldrb	r3, [r3, #7]
 80011cc:	021b      	lsls	r3, r3, #8
            int32_t current_int = (rxPayload[5] << 24) | (rxPayload[6] << 16) |
 80011ce:	4313      	orrs	r3, r2
                                   (rxPayload[7] << 8) | rxPayload[8];
 80011d0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80011d4:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 80011d8:	7a12      	ldrb	r2, [r2, #8]
            int32_t current_int = (rxPayload[5] << 24) | (rxPayload[6] << 16) |
 80011da:	4313      	orrs	r3, r2
 80011dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            values.current = current_int / 100.0f;  // échelle 100 -> A
 80011e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ec:	eddf 6a40 	vldr	s13, [pc, #256]	@ 80012f0 <_ZN13VESCInterface9getValuesEv+0x3fc>
 80011f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011f8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	edc3 7a02 	vstr	s15, [r3, #8]

            // Duty cycle (ratio)
            int16_t duty_int = (int16_t)((rxPayload[21] << 8) | rxPayload[22]);
 8001202:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001206:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800120a:	7d5b      	ldrb	r3, [r3, #21]
 800120c:	b21b      	sxth	r3, r3
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b21a      	sxth	r2, r3
 8001212:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001216:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800121a:	7d9b      	ldrb	r3, [r3, #22]
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
            values.dutyCycle = duty_int / 1000.0f;   // échelle 1000 -> [0,1] (ou 0-100%)
 8001224:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	@ 0x126
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001230:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80012f4 <_ZN13VESCInterface9getValuesEv+0x400>
 8001234:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001238:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800123c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	edc3 7a03 	vstr	s15, [r3, #12]

            // RPM
            int32_t rpm_int = (rxPayload[23] << 24) | (rxPayload[24] << 16) |
 8001246:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800124a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800124e:	7ddb      	ldrb	r3, [r3, #23]
 8001250:	061a      	lsls	r2, r3, #24
 8001252:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001256:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800125a:	7e1b      	ldrb	r3, [r3, #24]
 800125c:	041b      	lsls	r3, r3, #16
 800125e:	431a      	orrs	r2, r3
                               (rxPayload[25] << 8) | rxPayload[26];
 8001260:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001264:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001268:	7e5b      	ldrb	r3, [r3, #25]
 800126a:	021b      	lsls	r3, r3, #8
            int32_t rpm_int = (rxPayload[23] << 24) | (rxPayload[24] << 16) |
 800126c:	4313      	orrs	r3, r2
                               (rxPayload[25] << 8) | rxPayload[26];
 800126e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8001272:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8001276:	7e92      	ldrb	r2, [r2, #26]
            int32_t rpm_int = (rxPayload[23] << 24) | (rxPayload[24] << 16) |
 8001278:	4313      	orrs	r3, r2
 800127a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            values.rpm = (float)rpm_int;
 800127e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001282:	ee07 3a90 	vmov	s15, r3
 8001286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800128a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800128e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	edc3 7a01 	vstr	s15, [r3, #4]

            // Voltage (float en V)
            uint16_t rawV = ((uint16_t)rxPayload[27] << 8) | rxPayload[28];
 8001298:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800129c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012a0:	7edb      	ldrb	r3, [r3, #27]
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012b0:	7f1b      	ldrb	r3, [r3, #28]
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
            values.voltage = rawV / 10.0f;  // division par 10 pour avoir la tension en volts
 80012bc:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80012c0:	ee07 3a90 	vmov	s15, r3
 80012c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80012cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012d4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	edc3 7a04 	vstr	s15, [r3, #16]

        } else {
            return 0;  // payload trop court pour contenir les valeurs attendues
        }

        return 1;  // succès
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <_ZN13VESCInterface9getValuesEv+0x3f0>
            return 0;  // payload trop court pour contenir les valeurs attendues
 80012e2:	2300      	movs	r3, #0
    }
 80012e4:	4618      	mov	r0, r3
 80012e6:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	42c80000 	.word	0x42c80000
 80012f4:	447a0000 	.word	0x447a0000

080012f8 <_ZN13VESCInterfaceC1EP20__UART_HandleTypeDef>:

public:
    VESCInterface(UART_HandleTypeDef *huart) : uart(huart) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	601a      	str	r2, [r3, #0]
        memset(&values, 0, sizeof(values));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3304      	adds	r3, #4
 800130c:	2210      	movs	r2, #16
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f00a fdea 	bl	800beea <memset>
    }
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <_ZN13VESCInterface5crc16EPKht>:

    uint16_t crc16(const uint8_t *data, uint16_t len) {
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	4613      	mov	r3, r2
 800132c:	80fb      	strh	r3, [r7, #6]
        uint16_t crc = 0x0000;
 800132e:	2300      	movs	r3, #0
 8001330:	82fb      	strh	r3, [r7, #22]
        for (uint16_t i = 0; i < len; ++i) {
 8001332:	2300      	movs	r3, #0
 8001334:	82bb      	strh	r3, [r7, #20]
 8001336:	e028      	b.n	800138a <_ZN13VESCInterface5crc16EPKht+0x6a>
            crc ^= (uint16_t)data[i] << 8;
 8001338:	8abb      	ldrh	r3, [r7, #20]
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b21b      	sxth	r3, r3
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	b21a      	sxth	r2, r3
 8001346:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800134a:	4053      	eors	r3, r2
 800134c:	b21b      	sxth	r3, r3
 800134e:	82fb      	strh	r3, [r7, #22]
            for (uint8_t bit = 0; bit < 8; ++bit) {
 8001350:	2300      	movs	r3, #0
 8001352:	74fb      	strb	r3, [r7, #19]
 8001354:	e013      	b.n	800137e <_ZN13VESCInterface5crc16EPKht+0x5e>
                if (crc & 0x8000) {
 8001356:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800135a:	2b00      	cmp	r3, #0
 800135c:	da09      	bge.n	8001372 <_ZN13VESCInterface5crc16EPKht+0x52>
                    crc <<= 1;
 800135e:	8afb      	ldrh	r3, [r7, #22]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	82fb      	strh	r3, [r7, #22]
                    crc ^= 0x1021;
 8001364:	8afb      	ldrh	r3, [r7, #22]
 8001366:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 800136a:	f083 0301 	eor.w	r3, r3, #1
 800136e:	82fb      	strh	r3, [r7, #22]
 8001370:	e002      	b.n	8001378 <_ZN13VESCInterface5crc16EPKht+0x58>
                } else {
                    crc <<= 1;
 8001372:	8afb      	ldrh	r3, [r7, #22]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	82fb      	strh	r3, [r7, #22]
            for (uint8_t bit = 0; bit < 8; ++bit) {
 8001378:	7cfb      	ldrb	r3, [r7, #19]
 800137a:	3301      	adds	r3, #1
 800137c:	74fb      	strb	r3, [r7, #19]
 800137e:	7cfb      	ldrb	r3, [r7, #19]
 8001380:	2b07      	cmp	r3, #7
 8001382:	d9e8      	bls.n	8001356 <_ZN13VESCInterface5crc16EPKht+0x36>
        for (uint16_t i = 0; i < len; ++i) {
 8001384:	8abb      	ldrh	r3, [r7, #20]
 8001386:	3301      	adds	r3, #1
 8001388:	82bb      	strh	r3, [r7, #20]
 800138a:	8aba      	ldrh	r2, [r7, #20]
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	429a      	cmp	r2, r3
 8001390:	d3d2      	bcc.n	8001338 <_ZN13VESCInterface5crc16EPKht+0x18>
                }
            }
        }
        return crc;
 8001392:	8afb      	ldrh	r3, [r7, #22]
    }
 8001394:	4618      	mov	r0, r3
 8001396:	371c      	adds	r7, #28
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <_ZN13VESCInterface6setRPMEl>:
        buf[9] = 0x03;
        // Envoyer (on ignore le retour car pas de réponse attendue)
        HAL_UART_Transmit(uart, buf, 10, 100);
    }

    void setRPM(int32_t rpm) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
        uint8_t buf[11];
        uint16_t crc;
        buf[0] = 0x02;
 80013aa:	2302      	movs	r3, #2
 80013ac:	723b      	strb	r3, [r7, #8]
        buf[1] = 0x05;            // payload 5 octets
 80013ae:	2305      	movs	r3, #5
 80013b0:	727b      	strb	r3, [r7, #9]
        buf[2] = COMM_SET_RPM;
 80013b2:	2308      	movs	r3, #8
 80013b4:	72bb      	strb	r3, [r7, #10]
        buf[3] = (rpm >> 24) & 0xFF;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	0e1b      	lsrs	r3, r3, #24
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	72fb      	strb	r3, [r7, #11]
        buf[4] = (rpm >> 16) & 0xFF;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	141b      	asrs	r3, r3, #16
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	733b      	strb	r3, [r7, #12]
        buf[5] = (rpm >> 8) & 0xFF;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	121b      	asrs	r3, r3, #8
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	737b      	strb	r3, [r7, #13]
        buf[6] = rpm & 0xFF;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	73bb      	strb	r3, [r7, #14]
        crc = crc16(&buf[2], 5);
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	3302      	adds	r3, #2
 80013da:	2205      	movs	r2, #5
 80013dc:	4619      	mov	r1, r3
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ff9e 	bl	8001320 <_ZN13VESCInterface5crc16EPKht>
 80013e4:	4603      	mov	r3, r0
 80013e6:	82fb      	strh	r3, [r7, #22]
        buf[7] = (crc >> 8) & 0xFF;
 80013e8:	8afb      	ldrh	r3, [r7, #22]
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	73fb      	strb	r3, [r7, #15]
        buf[8] = crc & 0xFF;
 80013f2:	8afb      	ldrh	r3, [r7, #22]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	743b      	strb	r3, [r7, #16]
        buf[9] = 0x03;
 80013f8:	2303      	movs	r3, #3
 80013fa:	747b      	strb	r3, [r7, #17]
        HAL_UART_Transmit(uart, buf, 10, 100);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	f107 0108 	add.w	r1, r7, #8
 8001404:	2364      	movs	r3, #100	@ 0x64
 8001406:	220a      	movs	r2, #10
 8001408:	f005 f9bd 	bl	8006786 <HAL_UART_Transmit>
    }
 800140c:	bf00      	nop
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <_ZN13VESCInterface10getVoltageEv>:
            return -1.0f;
        }
        return values.dutyCycle;
    }

    float getVoltage() {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
        getValues();
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff fd69 	bl	8000ef4 <_ZN13VESCInterface9getValuesEv>
        return values.voltage;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	ee07 3a90 	vmov	s15, r3
    }
 800142a:	eeb0 0a67 	vmov.f32	s0, s15
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <_ZN15MotorControllerC1EP20__UART_HandleTypeDefS1_f>:
#include "../Inc/MotorComputations.hpp"

#include <stdio.h>
#include <cmath>

MotorController::MotorController(UART_HandleTypeDef* controlUart, UART_HandleTypeDef* screenUart, float torquecst)
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	ed87 0a00 	vstr	s0, [r7]
    : control_uart(controlUart),
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	601a      	str	r2, [r3, #0]
      screen_uart(screenUart),
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	605a      	str	r2, [r3, #4]
      direction(DirectionMode::FORWARD),
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
      controlMode(ControlMode::CADENCE),
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2201      	movs	r2, #1
 800145a:	60da      	str	r2, [r3, #12]
      instruction(0.0f),
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
      linearGain(0.05f),
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4a19      	ldr	r2, [pc, #100]	@ (80014cc <_ZN15MotorControllerC1EP20__UART_HandleTypeDefS1_f+0x98>)
 8001468:	615a      	str	r2, [r3, #20]
      torqueConstant(torquecst),
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	619a      	str	r2, [r3, #24]
      lastAppliedCurrent(0.0f),
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	61da      	str	r2, [r3, #28]
      ramp(6.0f),
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4a15      	ldr	r2, [pc, #84]	@ (80014d0 <_ZN15MotorControllerC1EP20__UART_HandleTypeDefS1_f+0x9c>)
 800147c:	621a      	str	r2, [r3, #32]
      computations(torquecst)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	3324      	adds	r3, #36	@ 0x24
 8001482:	ed97 0a00 	vldr	s0, [r7]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fd24 	bl	8000ed4 <_ZN17MotorComputationsC1Ef>
{
    screen = new ScreenDisplay(screen_uart);
 800148c:	2004      	movs	r0, #4
 800148e:	f009 febb 	bl	800b208 <_Znwj>
 8001492:	4603      	mov	r3, r0
 8001494:	461c      	mov	r4, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4619      	mov	r1, r3
 800149c:	4620      	mov	r0, r4
 800149e:	f000 f939 	bl	8001714 <_ZN13ScreenDisplayC1EP20__UART_HandleTypeDef>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	649c      	str	r4, [r3, #72]	@ 0x48
    vesc = new VESCInterface(control_uart);
 80014a6:	2014      	movs	r0, #20
 80014a8:	f009 feae 	bl	800b208 <_Znwj>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461c      	mov	r4, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7ff ff1e 	bl	80012f8 <_ZN13VESCInterfaceC1EP20__UART_HandleTypeDef>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	64dc      	str	r4, [r3, #76]	@ 0x4c
}
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4618      	mov	r0, r3
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd90      	pop	{r4, r7, pc}
 80014ca:	bf00      	nop
 80014cc:	3d4ccccd 	.word	0x3d4ccccd
 80014d0:	40c00000 	.word	0x40c00000

080014d4 <_ZN15MotorController14setControlModeE11ControlMode>:
    if (screen) screen->sendText("t0", (direction == DirectionMode::REVERSE) ? "REVERSE" : "FORWARD");
    return direction;
}
//________________________________________________________________________________________________

void MotorController::setControlMode(ControlMode mode) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
    controlMode = mode;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	60da      	str	r2, [r3, #12]
    if (screen) {
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d027      	beq.n	800153c <_ZN15MotorController14setControlModeE11ControlMode+0x68>
        const char* modeName = "UNKNOWN";
 80014ec:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <_ZN15MotorController14setControlModeE11ControlMode+0x70>)
 80014ee:	60fb      	str	r3, [r7, #12]
        switch (mode) {
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d81b      	bhi.n	800152e <_ZN15MotorController14setControlModeE11ControlMode+0x5a>
 80014f6:	a201      	add	r2, pc, #4	@ (adr r2, 80014fc <_ZN15MotorController14setControlModeE11ControlMode+0x28>)
 80014f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fc:	08001517 	.word	0x08001517
 8001500:	08001511 	.word	0x08001511
 8001504:	0800151d 	.word	0x0800151d
 8001508:	08001523 	.word	0x08001523
 800150c:	08001529 	.word	0x08001529
            case ControlMode::CADENCE: modeName = "Cadence"; break;
 8001510:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <_ZN15MotorController14setControlModeE11ControlMode+0x74>)
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	e00b      	b.n	800152e <_ZN15MotorController14setControlModeE11ControlMode+0x5a>
            case ControlMode::TORQUE: modeName = "Torque"; break;
 8001516:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <_ZN15MotorController14setControlModeE11ControlMode+0x78>)
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	e008      	b.n	800152e <_ZN15MotorController14setControlModeE11ControlMode+0x5a>
            case ControlMode::POWER_CONCENTRIC: modeName = "Power Concentric"; break;
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <_ZN15MotorController14setControlModeE11ControlMode+0x7c>)
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	e005      	b.n	800152e <_ZN15MotorController14setControlModeE11ControlMode+0x5a>
            case ControlMode::POWER_ECCENTRIC: modeName = "Power Eccentric"; break;
 8001522:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <_ZN15MotorController14setControlModeE11ControlMode+0x80>)
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	e002      	b.n	800152e <_ZN15MotorController14setControlModeE11ControlMode+0x5a>
            case ControlMode::LINEAR: modeName = "Linear"; break;
 8001528:	4b0b      	ldr	r3, [pc, #44]	@ (8001558 <_ZN15MotorController14setControlModeE11ControlMode+0x84>)
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	bf00      	nop
        }
        screen->sendText("t0", modeName);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	4909      	ldr	r1, [pc, #36]	@ (800155c <_ZN15MotorController14setControlModeE11ControlMode+0x88>)
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f926 	bl	8001788 <_ZN13ScreenDisplay8sendTextEPKcS1_>
    }
}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	0800df60 	.word	0x0800df60
 8001548:	0800df68 	.word	0x0800df68
 800154c:	0800df70 	.word	0x0800df70
 8001550:	0800df78 	.word	0x0800df78
 8001554:	0800df8c 	.word	0x0800df8c
 8001558:	0800df9c 	.word	0x0800df9c
 800155c:	0800df44 	.word	0x0800df44

08001560 <_ZN15MotorController10setCadenceEf>:
}

//_______________________________________________________________________________________________

void MotorController::setCadence(float rpm)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	ed87 0a00 	vstr	s0, [r7]
    float value = applyDirection(rpm);
 800156c:	ed97 0a00 	vldr	s0, [r7]
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f8b7 	bl	80016e4 <_ZN15MotorController14applyDirectionEf>
 8001576:	ed87 0a03 	vstr	s0, [r7, #12]
    vesc->setRPM(value);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001582:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001586:	ee17 1a90 	vmov	r1, s15
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff08 	bl	80013a0 <_ZN13VESCInterface6setRPMEl>
    //if (screen) screen->sendValue("n0", rpm, "%.1f");
}
 8001590:	bf00      	nop
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <_ZNK15MotorController10getVoltageEv>:
}
//_________________________________________________________________________
// Gestion de la batterie

float MotorController::getVoltage() const
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b09a      	sub	sp, #104	@ 0x68
 800159c:	af04      	add	r7, sp, #16
 800159e:	6078      	str	r0, [r7, #4]
    float voltage = vesc->getVoltage();
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff35 	bl	8001414 <_ZN13VESCInterface10getVoltageEv>
 80015aa:	ed87 0a14 	vstr	s0, [r7, #80]	@ 0x50
    screen->sendValue("n0", voltage, "%.4f");
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015b2:	4a3f      	ldr	r2, [pc, #252]	@ (80016b0 <_ZNK15MotorController10getVoltageEv+0x118>)
 80015b4:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 80015b8:	493e      	ldr	r1, [pc, #248]	@ (80016b4 <_ZNK15MotorController10getVoltageEv+0x11c>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f900 	bl	80017c0 <_ZN13ScreenDisplay9sendValueEPKcfS1_>

    // Estimation du pourcentage de charge (entre 42.0V et 54.6 V)
    const float minV = 40.3f; // le moteur s’arrête complètement
 80015c0:	4b3d      	ldr	r3, [pc, #244]	@ (80016b8 <_ZNK15MotorController10getVoltageEv+0x120>)
 80015c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const float maxV = 54.6f; //tension maximale en pleine charge pour batterie Li-ion 13S
 80015c4:	4b3d      	ldr	r3, [pc, #244]	@ (80016bc <_ZNK15MotorController10getVoltageEv+0x124>)
 80015c6:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint8_t percent = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    if (voltage >= maxV) {
 80015ce:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80015d2:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80016c0 <_ZNK15MotorController10getVoltageEv+0x128>
 80015d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015de:	db03      	blt.n	80015e8 <_ZNK15MotorController10getVoltageEv+0x50>
        percent = 100;
 80015e0:	2364      	movs	r3, #100	@ 0x64
 80015e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80015e6:	e021      	b.n	800162c <_ZNK15MotorController10getVoltageEv+0x94>
    } else if (voltage <= minV) {
 80015e8:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80015ec:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80016c4 <_ZNK15MotorController10getVoltageEv+0x12c>
 80015f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f8:	d803      	bhi.n	8001602 <_ZNK15MotorController10getVoltageEv+0x6a>
        percent = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8001600:	e014      	b.n	800162c <_ZNK15MotorController10getVoltageEv+0x94>
    } else {
        percent = static_cast<uint8_t>(((voltage - minV) / (maxV - minV)) * 100.0f);
 8001602:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001606:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80016c4 <_ZNK15MotorController10getVoltageEv+0x12c>
 800160a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800160e:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80016c8 <_ZNK15MotorController10getVoltageEv+0x130>
 8001612:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001616:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80016cc <_ZNK15MotorController10getVoltageEv+0x134>
 800161a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800161e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001622:	edc7 7a00 	vstr	s15, [r7]
 8001626:	783b      	ldrb	r3, [r7, #0]
 8001628:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    // Alerte selon le niveau
    if (voltage < 40.3f) // le moteur s’arrête complètement
 800162c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001630:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80016c4 <_ZNK15MotorController10getVoltageEv+0x12c>
 8001634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	d507      	bpl.n	800164e <_ZNK15MotorController10getVoltageEv+0xb6>
    {
        screen->sendText("t0", "Recharge immediate");
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001642:	4a23      	ldr	r2, [pc, #140]	@ (80016d0 <_ZNK15MotorController10getVoltageEv+0x138>)
 8001644:	4923      	ldr	r1, [pc, #140]	@ (80016d4 <_ZNK15MotorController10getVoltageEv+0x13c>)
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f89e 	bl	8001788 <_ZN13ScreenDisplay8sendTextEPKcS1_>
 800164c:	e028      	b.n	80016a0 <_ZNK15MotorController10getVoltageEv+0x108>
    }
    else if (voltage < 44.2f) // le VESC commence à réduire la puissance
 800164e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001652:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80016d8 <_ZNK15MotorController10getVoltageEv+0x140>
 8001656:	eef4 7ac7 	vcmpe.f32	s15, s14
 800165a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165e:	d507      	bpl.n	8001670 <_ZNK15MotorController10getVoltageEv+0xd8>
    {
        screen->sendText("t0", "Batterie faible");
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001664:	4a1d      	ldr	r2, [pc, #116]	@ (80016dc <_ZNK15MotorController10getVoltageEv+0x144>)
 8001666:	491b      	ldr	r1, [pc, #108]	@ (80016d4 <_ZNK15MotorController10getVoltageEv+0x13c>)
 8001668:	4618      	mov	r0, r3
 800166a:	f000 f88d 	bl	8001788 <_ZN13ScreenDisplay8sendTextEPKcS1_>
 800166e:	e017      	b.n	80016a0 <_ZNK15MotorController10getVoltageEv+0x108>
    }
    else
    {
        char text[64];
        snprintf(text, sizeof(text), " %.1f V | %d%%", voltage, percent);
 8001670:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001672:	f7fe ff69 	bl	8000548 <__aeabi_f2d>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	f897 1057 	ldrb.w	r1, [r7, #87]	@ 0x57
 800167e:	f107 0008 	add.w	r0, r7, #8
 8001682:	9102      	str	r1, [sp, #8]
 8001684:	e9cd 2300 	strd	r2, r3, [sp]
 8001688:	4a15      	ldr	r2, [pc, #84]	@ (80016e0 <_ZNK15MotorController10getVoltageEv+0x148>)
 800168a:	2140      	movs	r1, #64	@ 0x40
 800168c:	f00a fbb4 	bl	800bdf8 <sniprintf>
        screen->sendText("t0", text);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001694:	f107 0208 	add.w	r2, r7, #8
 8001698:	490e      	ldr	r1, [pc, #56]	@ (80016d4 <_ZNK15MotorController10getVoltageEv+0x13c>)
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f874 	bl	8001788 <_ZN13ScreenDisplay8sendTextEPKcS1_>
    }
    return voltage;
 80016a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016a2:	ee07 3a90 	vmov	s15, r3
}
 80016a6:	eeb0 0a67 	vmov.f32	s0, s15
 80016aa:	3758      	adds	r7, #88	@ 0x58
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	0800df28 	.word	0x0800df28
 80016b4:	0800df30 	.word	0x0800df30
 80016b8:	42213333 	.word	0x42213333
 80016bc:	425a6666 	.word	0x425a6666
 80016c0:	425a6666 	.word	0x425a6666
 80016c4:	42213333 	.word	0x42213333
 80016c8:	4164cccc 	.word	0x4164cccc
 80016cc:	42c80000 	.word	0x42c80000
 80016d0:	0800dfc0 	.word	0x0800dfc0
 80016d4:	0800df44 	.word	0x0800df44
 80016d8:	4230cccd 	.word	0x4230cccd
 80016dc:	0800dfd4 	.word	0x0800dfd4
 80016e0:	0800dfe4 	.word	0x0800dfe4

080016e4 <_ZN15MotorController14applyDirectionEf>:

//_________________________________________________________________________

float MotorController::applyDirection(float value) {
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	ed87 0a00 	vstr	s0, [r7]
    return (direction == DirectionMode::REVERSE) ? -value : value;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d104      	bne.n	8001702 <_ZN15MotorController14applyDirectionEf+0x1e>
 80016f8:	edd7 7a00 	vldr	s15, [r7]
 80016fc:	eef1 7a67 	vneg.f32	s15, s15
 8001700:	e001      	b.n	8001706 <_ZN15MotorController14applyDirectionEf+0x22>
 8001702:	edd7 7a00 	vldr	s15, [r7]
}
 8001706:	eeb0 0a67 	vmov.f32	s0, s15
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <_ZN13ScreenDisplayC1EP20__UART_HandleTypeDef>:


 #include "../Inc/ScreenDisplay.hpp"
 #include "../Inc/MotorController.hpp"

 ScreenDisplay::ScreenDisplay(UART_HandleTypeDef* EcranUart) : ecran_uart(EcranUart) {}
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <_ZN13ScreenDisplay11sendCommandEPKc>:

 void ScreenDisplay::sendCommand(const char* cmd) {
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
     HAL_UART_Transmit(ecran_uart, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681c      	ldr	r4, [r3, #0]
 8001742:	6838      	ldr	r0, [r7, #0]
 8001744:	f7fe fd94 	bl	8000270 <strlen>
 8001748:	4603      	mov	r3, r0
 800174a:	b29a      	uxth	r2, r3
 800174c:	f04f 33ff 	mov.w	r3, #4294967295
 8001750:	6839      	ldr	r1, [r7, #0]
 8001752:	4620      	mov	r0, r4
 8001754:	f005 f817 	bl	8006786 <HAL_UART_Transmit>
     uint8_t end[3] = {0xFF, 0xFF, 0xFF};
 8001758:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <_ZN13ScreenDisplay11sendCommandEPKc+0x50>)
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	4611      	mov	r1, r2
 8001762:	8019      	strh	r1, [r3, #0]
 8001764:	3302      	adds	r3, #2
 8001766:	0c12      	lsrs	r2, r2, #16
 8001768:	701a      	strb	r2, [r3, #0]
     HAL_UART_Transmit(ecran_uart, end, 3, HAL_MAX_DELAY);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	f107 010c 	add.w	r1, r7, #12
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	2203      	movs	r2, #3
 8001778:	f005 f805 	bl	8006786 <HAL_UART_Transmit>
 }
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bd90      	pop	{r4, r7, pc}
 8001784:	0800dff4 	.word	0x0800dff4

08001788 <_ZN13ScreenDisplay8sendTextEPKcS1_>:

 void ScreenDisplay::sendText(const char* component, const char* message) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b096      	sub	sp, #88	@ 0x58
 800178c:	af02      	add	r7, sp, #8
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
     char buffer[64];
     snprintf(buffer, sizeof(buffer), "%s.txt=\"%s\"", component, message);
 8001794:	f107 0010 	add.w	r0, r7, #16
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4a07      	ldr	r2, [pc, #28]	@ (80017bc <_ZN13ScreenDisplay8sendTextEPKcS1_+0x34>)
 80017a0:	2140      	movs	r1, #64	@ 0x40
 80017a2:	f00a fb29 	bl	800bdf8 <sniprintf>
     sendCommand(buffer);
 80017a6:	f107 0310 	add.w	r3, r7, #16
 80017aa:	4619      	mov	r1, r3
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f7ff ffc1 	bl	8001734 <_ZN13ScreenDisplay11sendCommandEPKc>
 }
 80017b2:	bf00      	nop
 80017b4:	3750      	adds	r7, #80	@ 0x50
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	0800dff8 	.word	0x0800dff8

080017c0 <_ZN13ScreenDisplay9sendValueEPKcfS1_>:

 void ScreenDisplay::sendValue(const char* component, float value, const char* format)
 // Afficher un nombre (float) dans un champ texte (t1, cad, pow, etc.) sur l’écran Nextion,
 //en utilisant un format personnalisé (ex : %.1f ou %.2f).
 {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b09e      	sub	sp, #120	@ 0x78
 80017c4:	af02      	add	r7, sp, #8
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80017ce:	603a      	str	r2, [r7, #0]
     char valueStr[32];
     snprintf(valueStr, sizeof(valueStr), format, value);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7fe feb9 	bl	8000548 <__aeabi_f2d>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80017de:	e9cd 2300 	strd	r2, r3, [sp]
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	2120      	movs	r1, #32
 80017e6:	f00a fb07 	bl	800bdf8 <sniprintf>

     char buffer[64];
     snprintf(buffer, sizeof(buffer), "%s.txt=\"%s\"", component, valueStr);
 80017ea:	f107 0010 	add.w	r0, r7, #16
 80017ee:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	4a07      	ldr	r2, [pc, #28]	@ (8001814 <_ZN13ScreenDisplay9sendValueEPKcfS1_+0x54>)
 80017f8:	2140      	movs	r1, #64	@ 0x40
 80017fa:	f00a fafd 	bl	800bdf8 <sniprintf>
     sendCommand(buffer);
 80017fe:	f107 0310 	add.w	r3, r7, #16
 8001802:	4619      	mov	r1, r3
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f7ff ff95 	bl	8001734 <_ZN13ScreenDisplay11sendCommandEPKc>
 }
 800180a:	bf00      	nop
 800180c:	3770      	adds	r7, #112	@ 0x70
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	0800dff8 	.word	0x0800dff8

08001818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001818:	b598      	push	{r3, r4, r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800181c:	f000 fdf8 	bl	8002410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001820:	f000 f858 	bl	80018d4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001824:	f000 f9ca 	bl	8001bbc <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8001828:	f000 f8c8 	bl	80019bc <_ZL12MX_I2C1_Initv>
  MX_I2S3_Init();
 800182c:	f000 f8fa 	bl	8001a24 <_ZL12MX_I2S3_Initv>
  MX_SPI1_Init();
 8001830:	f000 f92c 	bl	8001a8c <_ZL12MX_SPI1_Initv>
  MX_USB_HOST_Init();
 8001834:	f009 f9de 	bl	800abf4 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8001838:	f000 f964 	bl	8001b04 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 800183c:	f000 f990 	bl	8001b60 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  screen = new ScreenDisplay(&huart2);
 8001840:	2004      	movs	r0, #4
 8001842:	f009 fce1 	bl	800b208 <_Znwj>
 8001846:	4603      	mov	r3, r0
 8001848:	461c      	mov	r4, r3
 800184a:	491a      	ldr	r1, [pc, #104]	@ (80018b4 <main+0x9c>)
 800184c:	4620      	mov	r0, r4
 800184e:	f7ff ff61 	bl	8001714 <_ZN13ScreenDisplayC1EP20__UART_HandleTypeDef>
 8001852:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <main+0xa0>)
 8001854:	601c      	str	r4, [r3, #0]
    screen->sendText("t0", "Hello STM32");
 8001856:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <main+0xa0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a18      	ldr	r2, [pc, #96]	@ (80018bc <main+0xa4>)
 800185c:	4918      	ldr	r1, [pc, #96]	@ (80018c0 <main+0xa8>)
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ff92 	bl	8001788 <_ZN13ScreenDisplay8sendTextEPKcS1_>

    //Création du contrôleur moteur : USART2 = VESC, USART3 = Ecran
    motor = new MotorController(&huart3, &huart2, initialTorqueConstant);
 8001864:	2050      	movs	r0, #80	@ 0x50
 8001866:	f009 fccf 	bl	800b208 <_Znwj>
 800186a:	4603      	mov	r3, r0
 800186c:	461c      	mov	r4, r3
 800186e:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <main+0xac>)
 8001870:	edd3 7a00 	vldr	s15, [r3]
 8001874:	eeb0 0a67 	vmov.f32	s0, s15
 8001878:	4a0e      	ldr	r2, [pc, #56]	@ (80018b4 <main+0x9c>)
 800187a:	4913      	ldr	r1, [pc, #76]	@ (80018c8 <main+0xb0>)
 800187c:	4620      	mov	r0, r4
 800187e:	f7ff fdd9 	bl	8001434 <_ZN15MotorControllerC1EP20__UART_HandleTypeDefS1_f>
 8001882:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <main+0xb4>)
 8001884:	601c      	str	r4, [r3, #0]
    //______________________________________________________________________________

    //Test sur le mode de contrôle

    //motor->getControlMode(); //réussi
    motor->setControlMode(ControlMode::TORQUE);
 8001886:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <main+0xb4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fe21 	bl	80014d4 <_ZN15MotorController14setControlModeE11ControlMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  motor->getVoltage();
 8001892:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <main+0xb4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fe7e 	bl	8001598 <_ZNK15MotorController10getVoltageEv>
	  //motor->getPower();
	  //motor->getTorque();
	  //HAL_Delay(5000); // 5000 ms pour un 60000 ms de timout
	  //motor->stop();
	  //HAL_Delay(5000); // 5000 ms pour un 60000 ms de timout
	  motor->setCadence(000);
 800189c:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <main+0xb4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80018d0 <main+0xb8>
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fe5b 	bl	8001560 <_ZN15MotorController10setCadenceEf>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80018aa:	f009 f9c9 	bl	800ac40 <MX_USB_HOST_Process>
	  motor->getVoltage();
 80018ae:	bf00      	nop
 80018b0:	e7ef      	b.n	8001892 <main+0x7a>
 80018b2:	bf00      	nop
 80018b4:	20000308 	.word	0x20000308
 80018b8:	20000398 	.word	0x20000398
 80018bc:	0800e188 	.word	0x0800e188
 80018c0:	0800e194 	.word	0x0800e194
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000350 	.word	0x20000350
 80018cc:	2000039c 	.word	0x2000039c
 80018d0:	00000000 	.word	0x00000000

080018d4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b094      	sub	sp, #80	@ 0x50
 80018d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018da:	f107 0320 	add.w	r3, r7, #32
 80018de:	2230      	movs	r2, #48	@ 0x30
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f00a fb01 	bl	800beea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	4b2d      	ldr	r3, [pc, #180]	@ (80019b4 <_Z18SystemClock_Configv+0xe0>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001900:	4a2c      	ldr	r2, [pc, #176]	@ (80019b4 <_Z18SystemClock_Configv+0xe0>)
 8001902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001906:	6413      	str	r3, [r2, #64]	@ 0x40
 8001908:	4b2a      	ldr	r3, [pc, #168]	@ (80019b4 <_Z18SystemClock_Configv+0xe0>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001914:	2300      	movs	r3, #0
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <_Z18SystemClock_Configv+0xe4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a26      	ldr	r2, [pc, #152]	@ (80019b8 <_Z18SystemClock_Configv+0xe4>)
 800191e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b24      	ldr	r3, [pc, #144]	@ (80019b8 <_Z18SystemClock_Configv+0xe4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001930:	2301      	movs	r3, #1
 8001932:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001934:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193a:	2302      	movs	r3, #2
 800193c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800193e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001942:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001944:	2308      	movs	r3, #8
 8001946:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001948:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800194c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800194e:	2302      	movs	r3, #2
 8001950:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001952:	2307      	movs	r3, #7
 8001954:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001956:	f107 0320 	add.w	r3, r7, #32
 800195a:	4618      	mov	r0, r3
 800195c:	f004 f860 	bl	8005a20 <HAL_RCC_OscConfig>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	bf14      	ite	ne
 8001966:	2301      	movne	r3, #1
 8001968:	2300      	moveq	r3, #0
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8001970:	f000 fa22 	bl	8001db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001974:	230f      	movs	r3, #15
 8001976:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001978:	2302      	movs	r3, #2
 800197a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001980:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001984:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001986:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800198a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	2105      	movs	r1, #5
 8001992:	4618      	mov	r0, r3
 8001994:	f004 fabc 	bl	8005f10 <HAL_RCC_ClockConfig>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	bf14      	ite	ne
 800199e:	2301      	movne	r3, #1
 80019a0:	2300      	moveq	r3, #0
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 80019a8:	f000 fa06 	bl	8001db8 <Error_Handler>
  }
}
 80019ac:	bf00      	nop
 80019ae:	3750      	adds	r7, #80	@ 0x50
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40007000 	.word	0x40007000

080019bc <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019c0:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <_ZL12MX_I2C1_Initv+0x5c>)
 80019c2:	4a16      	ldr	r2, [pc, #88]	@ (8001a1c <_ZL12MX_I2C1_Initv+0x60>)
 80019c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019c6:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <_ZL12MX_I2C1_Initv+0x5c>)
 80019c8:	4a15      	ldr	r2, [pc, #84]	@ (8001a20 <_ZL12MX_I2C1_Initv+0x64>)
 80019ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019cc:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <_ZL12MX_I2C1_Initv+0x5c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019d2:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <_ZL12MX_I2C1_Initv+0x5c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <_ZL12MX_I2C1_Initv+0x5c>)
 80019da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a18 <_ZL12MX_I2C1_Initv+0x5c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <_ZL12MX_I2C1_Initv+0x5c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001a18 <_ZL12MX_I2C1_Initv+0x5c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019f2:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <_ZL12MX_I2C1_Initv+0x5c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019f8:	4807      	ldr	r0, [pc, #28]	@ (8001a18 <_ZL12MX_I2C1_Initv+0x5c>)
 80019fa:	f003 fa2d 	bl	8004e58 <HAL_I2C_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bf14      	ite	ne
 8001a04:	2301      	movne	r3, #1
 8001a06:	2300      	moveq	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001a0e:	f000 f9d3 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000214 	.word	0x20000214
 8001a1c:	40005400 	.word	0x40005400
 8001a20:	000186a0 	.word	0x000186a0

08001a24 <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001a28:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <_ZL12MX_I2S3_Initv+0x5c>)
 8001a2a:	4a16      	ldr	r2, [pc, #88]	@ (8001a84 <_ZL12MX_I2S3_Initv+0x60>)
 8001a2c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001a2e:	4b14      	ldr	r3, [pc, #80]	@ (8001a80 <_ZL12MX_I2S3_Initv+0x5c>)
 8001a30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a34:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001a36:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <_ZL12MX_I2S3_Initv+0x5c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001a3c:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <_ZL12MX_I2S3_Initv+0x5c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001a42:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <_ZL12MX_I2S3_Initv+0x5c>)
 8001a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a48:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <_ZL12MX_I2S3_Initv+0x5c>)
 8001a4c:	4a0e      	ldr	r2, [pc, #56]	@ (8001a88 <_ZL12MX_I2S3_Initv+0x64>)
 8001a4e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001a50:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <_ZL12MX_I2S3_Initv+0x5c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001a56:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <_ZL12MX_I2S3_Initv+0x5c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001a5c:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <_ZL12MX_I2S3_Initv+0x5c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001a62:	4807      	ldr	r0, [pc, #28]	@ (8001a80 <_ZL12MX_I2S3_Initv+0x5c>)
 8001a64:	f003 fb3c 	bl	80050e0 <HAL_I2S_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	bf14      	ite	ne
 8001a6e:	2301      	movne	r3, #1
 8001a70:	2300      	moveq	r3, #0
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <_ZL12MX_I2S3_Initv+0x58>
  {
    Error_Handler();
 8001a78:	f000 f99e 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000268 	.word	0x20000268
 8001a84:	40003c00 	.word	0x40003c00
 8001a88:	00017700 	.word	0x00017700

08001a8c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a90:	4b1a      	ldr	r3, [pc, #104]	@ (8001afc <_ZL12MX_SPI1_Initv+0x70>)
 8001a92:	4a1b      	ldr	r2, [pc, #108]	@ (8001b00 <_ZL12MX_SPI1_Initv+0x74>)
 8001a94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a96:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <_ZL12MX_SPI1_Initv+0x70>)
 8001a98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a9e:	4b17      	ldr	r3, [pc, #92]	@ (8001afc <_ZL12MX_SPI1_Initv+0x70>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001aa4:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <_ZL12MX_SPI1_Initv+0x70>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aaa:	4b14      	ldr	r3, [pc, #80]	@ (8001afc <_ZL12MX_SPI1_Initv+0x70>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ab0:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <_ZL12MX_SPI1_Initv+0x70>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ab6:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <_ZL12MX_SPI1_Initv+0x70>)
 8001ab8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001abc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001abe:	4b0f      	ldr	r3, [pc, #60]	@ (8001afc <_ZL12MX_SPI1_Initv+0x70>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8001afc <_ZL12MX_SPI1_Initv+0x70>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aca:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <_ZL12MX_SPI1_Initv+0x70>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8001afc <_ZL12MX_SPI1_Initv+0x70>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <_ZL12MX_SPI1_Initv+0x70>)
 8001ad8:	220a      	movs	r2, #10
 8001ada:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001adc:	4807      	ldr	r0, [pc, #28]	@ (8001afc <_ZL12MX_SPI1_Initv+0x70>)
 8001ade:	f004 fd79 	bl	80065d4 <HAL_SPI_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	bf14      	ite	ne
 8001ae8:	2301      	movne	r3, #1
 8001aea:	2300      	moveq	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8001af2:	f000 f961 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200002b0 	.word	0x200002b0
 8001b00:	40013000 	.word	0x40013000

08001b04 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b08:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b0a:	4a14      	ldr	r2, [pc, #80]	@ (8001b5c <_ZL19MX_USART2_UART_Initv+0x58>)
 8001b0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b0e:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b10:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001b14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b16:	4b10      	ldr	r3, [pc, #64]	@ (8001b58 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b22:	4b0d      	ldr	r3, [pc, #52]	@ (8001b58 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b34:	4b08      	ldr	r3, [pc, #32]	@ (8001b58 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b3a:	4807      	ldr	r0, [pc, #28]	@ (8001b58 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b3c:	f004 fdd3 	bl	80066e6 <HAL_UART_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	bf14      	ite	ne
 8001b46:	2301      	movne	r3, #1
 8001b48:	2300      	moveq	r3, #0
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001b50:	f000 f932 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000308 	.word	0x20000308
 8001b5c:	40004400 	.word	0x40004400

08001b60 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b64:	4b13      	ldr	r3, [pc, #76]	@ (8001bb4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b66:	4a14      	ldr	r2, [pc, #80]	@ (8001bb8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001b68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b6a:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b72:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b78:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b84:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b86:	220c      	movs	r2, #12
 8001b88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b90:	4b08      	ldr	r3, [pc, #32]	@ (8001bb4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b96:	4807      	ldr	r0, [pc, #28]	@ (8001bb4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b98:	f004 fda5 	bl	80066e6 <HAL_UART_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	bf14      	ite	ne
 8001ba2:	2301      	movne	r3, #1
 8001ba4:	2300      	moveq	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8001bac:	f000 f904 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000350 	.word	0x20000350
 8001bb8:	40004800 	.word	0x40004800

08001bbc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08c      	sub	sp, #48	@ 0x30
 8001bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	4b72      	ldr	r3, [pc, #456]	@ (8001da0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	4a71      	ldr	r2, [pc, #452]	@ (8001da0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001bdc:	f043 0310 	orr.w	r3, r3, #16
 8001be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be2:	4b6f      	ldr	r3, [pc, #444]	@ (8001da0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	61bb      	str	r3, [r7, #24]
 8001bec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	4b6b      	ldr	r3, [pc, #428]	@ (8001da0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	4a6a      	ldr	r2, [pc, #424]	@ (8001da0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfe:	4b68      	ldr	r3, [pc, #416]	@ (8001da0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b64      	ldr	r3, [pc, #400]	@ (8001da0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	4a63      	ldr	r2, [pc, #396]	@ (8001da0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1a:	4b61      	ldr	r3, [pc, #388]	@ (8001da0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b5d      	ldr	r3, [pc, #372]	@ (8001da0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	4a5c      	ldr	r2, [pc, #368]	@ (8001da0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c36:	4b5a      	ldr	r3, [pc, #360]	@ (8001da0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	4b56      	ldr	r3, [pc, #344]	@ (8001da0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	4a55      	ldr	r2, [pc, #340]	@ (8001da0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c52:	4b53      	ldr	r3, [pc, #332]	@ (8001da0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	4b4f      	ldr	r3, [pc, #316]	@ (8001da0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	4a4e      	ldr	r2, [pc, #312]	@ (8001da0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001c68:	f043 0308 	orr.w	r3, r3, #8
 8001c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6e:	4b4c      	ldr	r3, [pc, #304]	@ (8001da0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2108      	movs	r1, #8
 8001c7e:	4849      	ldr	r0, [pc, #292]	@ (8001da4 <_ZL12MX_GPIO_Initv+0x1e8>)
 8001c80:	f000 ff9c 	bl	8002bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001c84:	2201      	movs	r2, #1
 8001c86:	2101      	movs	r1, #1
 8001c88:	4847      	ldr	r0, [pc, #284]	@ (8001da8 <_ZL12MX_GPIO_Initv+0x1ec>)
 8001c8a:	f000 ff97 	bl	8002bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001c94:	4845      	ldr	r0, [pc, #276]	@ (8001dac <_ZL12MX_GPIO_Initv+0x1f0>)
 8001c96:	f000 ff91 	bl	8002bbc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001caa:	f107 031c 	add.w	r3, r7, #28
 8001cae:	4619      	mov	r1, r3
 8001cb0:	483c      	ldr	r0, [pc, #240]	@ (8001da4 <_ZL12MX_GPIO_Initv+0x1e8>)
 8001cb2:	f000 fde7 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001cc6:	f107 031c 	add.w	r3, r7, #28
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4836      	ldr	r0, [pc, #216]	@ (8001da8 <_ZL12MX_GPIO_Initv+0x1ec>)
 8001cce:	f000 fdd9 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001cd2:	2308      	movs	r3, #8
 8001cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ce2:	2305      	movs	r3, #5
 8001ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001ce6:	f107 031c 	add.w	r3, r7, #28
 8001cea:	4619      	mov	r1, r3
 8001cec:	482e      	ldr	r0, [pc, #184]	@ (8001da8 <_ZL12MX_GPIO_Initv+0x1ec>)
 8001cee:	f000 fdc9 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001cf6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001cfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d00:	f107 031c 	add.w	r3, r7, #28
 8001d04:	4619      	mov	r1, r3
 8001d06:	482a      	ldr	r0, [pc, #168]	@ (8001db0 <_ZL12MX_GPIO_Initv+0x1f4>)
 8001d08:	f000 fdbc 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001d0c:	2304      	movs	r3, #4
 8001d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001d18:	f107 031c 	add.w	r3, r7, #28
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4825      	ldr	r0, [pc, #148]	@ (8001db4 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001d20:	f000 fdb0 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001d24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d36:	2305      	movs	r3, #5
 8001d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001d3a:	f107 031c 	add.w	r3, r7, #28
 8001d3e:	4619      	mov	r1, r3
 8001d40:	481c      	ldr	r0, [pc, #112]	@ (8001db4 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001d42:	f000 fd9f 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001d46:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001d4a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d58:	f107 031c 	add.w	r3, r7, #28
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4813      	ldr	r0, [pc, #76]	@ (8001dac <_ZL12MX_GPIO_Initv+0x1f0>)
 8001d60:	f000 fd90 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001d64:	2320      	movs	r3, #32
 8001d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d70:	f107 031c 	add.w	r3, r7, #28
 8001d74:	4619      	mov	r1, r3
 8001d76:	480d      	ldr	r0, [pc, #52]	@ (8001dac <_ZL12MX_GPIO_Initv+0x1f0>)
 8001d78:	f000 fd84 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d80:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001d8a:	f107 031c 	add.w	r3, r7, #28
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4804      	ldr	r0, [pc, #16]	@ (8001da4 <_ZL12MX_GPIO_Initv+0x1e8>)
 8001d92:	f000 fd77 	bl	8002884 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d96:	bf00      	nop
 8001d98:	3730      	adds	r7, #48	@ 0x30
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40020c00 	.word	0x40020c00
 8001db0:	40020000 	.word	0x40020000
 8001db4:	40020400 	.word	0x40020400

08001db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dbc:	b672      	cpsid	i
}
 8001dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <Error_Handler+0x8>

08001dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	4b10      	ldr	r3, [pc, #64]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	4a0f      	ldr	r2, [pc, #60]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001dd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dda:	4b0d      	ldr	r3, [pc, #52]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	4a08      	ldr	r2, [pc, #32]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df6:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e02:	2007      	movs	r0, #7
 8001e04:	f000 fc6a 	bl	80026dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800

08001e14 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	@ 0x28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a19      	ldr	r2, [pc, #100]	@ (8001e98 <HAL_I2C_MspInit+0x84>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d12c      	bne.n	8001e90 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	4b18      	ldr	r3, [pc, #96]	@ (8001e9c <HAL_I2C_MspInit+0x88>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	4a17      	ldr	r2, [pc, #92]	@ (8001e9c <HAL_I2C_MspInit+0x88>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e46:	4b15      	ldr	r3, [pc, #84]	@ (8001e9c <HAL_I2C_MspInit+0x88>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001e52:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e58:	2312      	movs	r3, #18
 8001e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e64:	2304      	movs	r3, #4
 8001e66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	480c      	ldr	r0, [pc, #48]	@ (8001ea0 <HAL_I2C_MspInit+0x8c>)
 8001e70:	f000 fd08 	bl	8002884 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <HAL_I2C_MspInit+0x88>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7c:	4a07      	ldr	r2, [pc, #28]	@ (8001e9c <HAL_I2C_MspInit+0x88>)
 8001e7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e82:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <HAL_I2C_MspInit+0x88>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e90:	bf00      	nop
 8001e92:	3728      	adds	r7, #40	@ 0x28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40005400 	.word	0x40005400
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40020400 	.word	0x40020400

08001ea4 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08e      	sub	sp, #56	@ 0x38
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a31      	ldr	r2, [pc, #196]	@ (8001f94 <HAL_I2S_MspInit+0xf0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d15a      	bne.n	8001f8a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001ed8:	23c0      	movs	r3, #192	@ 0xc0
 8001eda:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001edc:	2302      	movs	r3, #2
 8001ede:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f004 fa33 	bl	8006350 <HAL_RCCEx_PeriphCLKConfig>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001ef0:	f7ff ff62 	bl	8001db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	4b27      	ldr	r3, [pc, #156]	@ (8001f98 <HAL_I2S_MspInit+0xf4>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	4a26      	ldr	r2, [pc, #152]	@ (8001f98 <HAL_I2S_MspInit+0xf4>)
 8001efe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f04:	4b24      	ldr	r3, [pc, #144]	@ (8001f98 <HAL_I2S_MspInit+0xf4>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	4b20      	ldr	r3, [pc, #128]	@ (8001f98 <HAL_I2S_MspInit+0xf4>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f18:	4a1f      	ldr	r2, [pc, #124]	@ (8001f98 <HAL_I2S_MspInit+0xf4>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f20:	4b1d      	ldr	r3, [pc, #116]	@ (8001f98 <HAL_I2S_MspInit+0xf4>)
 8001f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <HAL_I2S_MspInit+0xf4>)
 8001f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f34:	4a18      	ldr	r2, [pc, #96]	@ (8001f98 <HAL_I2S_MspInit+0xf4>)
 8001f36:	f043 0304 	orr.w	r3, r3, #4
 8001f3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3c:	4b16      	ldr	r3, [pc, #88]	@ (8001f98 <HAL_I2S_MspInit+0xf4>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001f48:	2310      	movs	r3, #16
 8001f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f54:	2300      	movs	r3, #0
 8001f56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f58:	2306      	movs	r3, #6
 8001f5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001f5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f60:	4619      	mov	r1, r3
 8001f62:	480e      	ldr	r0, [pc, #56]	@ (8001f9c <HAL_I2S_MspInit+0xf8>)
 8001f64:	f000 fc8e 	bl	8002884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001f68:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f7a:	2306      	movs	r3, #6
 8001f7c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f82:	4619      	mov	r1, r3
 8001f84:	4806      	ldr	r0, [pc, #24]	@ (8001fa0 <HAL_I2S_MspInit+0xfc>)
 8001f86:	f000 fc7d 	bl	8002884 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001f8a:	bf00      	nop
 8001f8c:	3738      	adds	r7, #56	@ 0x38
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40003c00 	.word	0x40003c00
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	40020800 	.word	0x40020800

08001fa4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	@ 0x28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a19      	ldr	r2, [pc, #100]	@ (8002028 <HAL_SPI_MspInit+0x84>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d12b      	bne.n	800201e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	4b18      	ldr	r3, [pc, #96]	@ (800202c <HAL_SPI_MspInit+0x88>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	4a17      	ldr	r2, [pc, #92]	@ (800202c <HAL_SPI_MspInit+0x88>)
 8001fd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fd6:	4b15      	ldr	r3, [pc, #84]	@ (800202c <HAL_SPI_MspInit+0x88>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	4b11      	ldr	r3, [pc, #68]	@ (800202c <HAL_SPI_MspInit+0x88>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	4a10      	ldr	r2, [pc, #64]	@ (800202c <HAL_SPI_MspInit+0x88>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <HAL_SPI_MspInit+0x88>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001ffe:	23e0      	movs	r3, #224	@ 0xe0
 8002000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800200e:	2305      	movs	r3, #5
 8002010:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4619      	mov	r1, r3
 8002018:	4805      	ldr	r0, [pc, #20]	@ (8002030 <HAL_SPI_MspInit+0x8c>)
 800201a:	f000 fc33 	bl	8002884 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800201e:	bf00      	nop
 8002020:	3728      	adds	r7, #40	@ 0x28
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40013000 	.word	0x40013000
 800202c:	40023800 	.word	0x40023800
 8002030:	40020000 	.word	0x40020000

08002034 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08c      	sub	sp, #48	@ 0x30
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 031c 	add.w	r3, r7, #28
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a46      	ldr	r2, [pc, #280]	@ (800216c <HAL_UART_MspInit+0x138>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d12c      	bne.n	80020b0 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
 800205a:	4b45      	ldr	r3, [pc, #276]	@ (8002170 <HAL_UART_MspInit+0x13c>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	4a44      	ldr	r2, [pc, #272]	@ (8002170 <HAL_UART_MspInit+0x13c>)
 8002060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002064:	6413      	str	r3, [r2, #64]	@ 0x40
 8002066:	4b42      	ldr	r3, [pc, #264]	@ (8002170 <HAL_UART_MspInit+0x13c>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206e:	61bb      	str	r3, [r7, #24]
 8002070:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	4b3e      	ldr	r3, [pc, #248]	@ (8002170 <HAL_UART_MspInit+0x13c>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	4a3d      	ldr	r2, [pc, #244]	@ (8002170 <HAL_UART_MspInit+0x13c>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6313      	str	r3, [r2, #48]	@ 0x30
 8002082:	4b3b      	ldr	r3, [pc, #236]	@ (8002170 <HAL_UART_MspInit+0x13c>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = Ecran_TX_Pin|Ecran_RX_Pin;
 800208e:	230c      	movs	r3, #12
 8002090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209a:	2303      	movs	r3, #3
 800209c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800209e:	2307      	movs	r3, #7
 80020a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a2:	f107 031c 	add.w	r3, r7, #28
 80020a6:	4619      	mov	r1, r3
 80020a8:	4832      	ldr	r0, [pc, #200]	@ (8002174 <HAL_UART_MspInit+0x140>)
 80020aa:	f000 fbeb 	bl	8002884 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80020ae:	e058      	b.n	8002162 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a30      	ldr	r2, [pc, #192]	@ (8002178 <HAL_UART_MspInit+0x144>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d153      	bne.n	8002162 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	4b2c      	ldr	r3, [pc, #176]	@ (8002170 <HAL_UART_MspInit+0x13c>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	4a2b      	ldr	r2, [pc, #172]	@ (8002170 <HAL_UART_MspInit+0x13c>)
 80020c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ca:	4b29      	ldr	r3, [pc, #164]	@ (8002170 <HAL_UART_MspInit+0x13c>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4b25      	ldr	r3, [pc, #148]	@ (8002170 <HAL_UART_MspInit+0x13c>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	4a24      	ldr	r2, [pc, #144]	@ (8002170 <HAL_UART_MspInit+0x13c>)
 80020e0:	f043 0302 	orr.w	r3, r3, #2
 80020e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e6:	4b22      	ldr	r3, [pc, #136]	@ (8002170 <HAL_UART_MspInit+0x13c>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002170 <HAL_UART_MspInit+0x13c>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002170 <HAL_UART_MspInit+0x13c>)
 80020fc:	f043 0308 	orr.w	r3, r3, #8
 8002100:	6313      	str	r3, [r2, #48]	@ 0x30
 8002102:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <HAL_UART_MspInit+0x13c>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Cntroller_RX_Pin;
 800210e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211c:	2303      	movs	r3, #3
 800211e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002120:	2307      	movs	r3, #7
 8002122:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Cntroller_RX_GPIO_Port, &GPIO_InitStruct);
 8002124:	f107 031c 	add.w	r3, r7, #28
 8002128:	4619      	mov	r1, r3
 800212a:	4814      	ldr	r0, [pc, #80]	@ (800217c <HAL_UART_MspInit+0x148>)
 800212c:	f000 fbaa 	bl	8002884 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Controller_TX_Pin;
 8002130:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002142:	2307      	movs	r3, #7
 8002144:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Controller_TX_GPIO_Port, &GPIO_InitStruct);
 8002146:	f107 031c 	add.w	r3, r7, #28
 800214a:	4619      	mov	r1, r3
 800214c:	480c      	ldr	r0, [pc, #48]	@ (8002180 <HAL_UART_MspInit+0x14c>)
 800214e:	f000 fb99 	bl	8002884 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002152:	2200      	movs	r2, #0
 8002154:	2100      	movs	r1, #0
 8002156:	2027      	movs	r0, #39	@ 0x27
 8002158:	f000 facb 	bl	80026f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800215c:	2027      	movs	r0, #39	@ 0x27
 800215e:	f000 fae4 	bl	800272a <HAL_NVIC_EnableIRQ>
}
 8002162:	bf00      	nop
 8002164:	3730      	adds	r7, #48	@ 0x30
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40004400 	.word	0x40004400
 8002170:	40023800 	.word	0x40023800
 8002174:	40020000 	.word	0x40020000
 8002178:	40004800 	.word	0x40004800
 800217c:	40020400 	.word	0x40020400
 8002180:	40020c00 	.word	0x40020c00

08002184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <NMI_Handler+0x4>

0800218c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002190:	bf00      	nop
 8002192:	e7fd      	b.n	8002190 <HardFault_Handler+0x4>

08002194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <MemManage_Handler+0x4>

0800219c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a0:	bf00      	nop
 80021a2:	e7fd      	b.n	80021a0 <BusFault_Handler+0x4>

080021a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a8:	bf00      	nop
 80021aa:	e7fd      	b.n	80021a8 <UsageFault_Handler+0x4>

080021ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021da:	f000 f96b 	bl	80024b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021e8:	4802      	ldr	r0, [pc, #8]	@ (80021f4 <USART3_IRQHandler+0x10>)
 80021ea:	f004 fbef 	bl	80069cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000350 	.word	0x20000350

080021f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80021fc:	4802      	ldr	r0, [pc, #8]	@ (8002208 <OTG_FS_IRQHandler+0x10>)
 80021fe:	f000 ffd7 	bl	80031b0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000784 	.word	0x20000784

0800220c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return 1;
 8002210:	2301      	movs	r3, #1
}
 8002212:	4618      	mov	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <_kill>:

int _kill(int pid, int sig)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002226:	f009 ff07 	bl	800c038 <__errno>
 800222a:	4603      	mov	r3, r0
 800222c:	2216      	movs	r2, #22
 800222e:	601a      	str	r2, [r3, #0]
  return -1;
 8002230:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <_exit>:

void _exit (int status)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff ffe7 	bl	800221c <_kill>
  while (1) {}    /* Make sure we hang here */
 800224e:	bf00      	nop
 8002250:	e7fd      	b.n	800224e <_exit+0x12>

08002252 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	e00a      	b.n	800227a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002264:	f3af 8000 	nop.w
 8002268:	4601      	mov	r1, r0
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	60ba      	str	r2, [r7, #8]
 8002270:	b2ca      	uxtb	r2, r1
 8002272:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	3301      	adds	r3, #1
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	429a      	cmp	r2, r3
 8002280:	dbf0      	blt.n	8002264 <_read+0x12>
  }

  return len;
 8002282:	687b      	ldr	r3, [r7, #4]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	e009      	b.n	80022b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	60ba      	str	r2, [r7, #8]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	3301      	adds	r3, #1
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	dbf1      	blt.n	800229e <_write+0x12>
  }
  return len;
 80022ba:	687b      	ldr	r3, [r7, #4]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_close>:

int _close(int file)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022ec:	605a      	str	r2, [r3, #4]
  return 0;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <_isatty>:

int _isatty(int file)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002304:	2301      	movs	r3, #1
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002334:	4a14      	ldr	r2, [pc, #80]	@ (8002388 <_sbrk+0x5c>)
 8002336:	4b15      	ldr	r3, [pc, #84]	@ (800238c <_sbrk+0x60>)
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002340:	4b13      	ldr	r3, [pc, #76]	@ (8002390 <_sbrk+0x64>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d102      	bne.n	800234e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002348:	4b11      	ldr	r3, [pc, #68]	@ (8002390 <_sbrk+0x64>)
 800234a:	4a12      	ldr	r2, [pc, #72]	@ (8002394 <_sbrk+0x68>)
 800234c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800234e:	4b10      	ldr	r3, [pc, #64]	@ (8002390 <_sbrk+0x64>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	429a      	cmp	r2, r3
 800235a:	d207      	bcs.n	800236c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800235c:	f009 fe6c 	bl	800c038 <__errno>
 8002360:	4603      	mov	r3, r0
 8002362:	220c      	movs	r2, #12
 8002364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002366:	f04f 33ff 	mov.w	r3, #4294967295
 800236a:	e009      	b.n	8002380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800236c:	4b08      	ldr	r3, [pc, #32]	@ (8002390 <_sbrk+0x64>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002372:	4b07      	ldr	r3, [pc, #28]	@ (8002390 <_sbrk+0x64>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	4a05      	ldr	r2, [pc, #20]	@ (8002390 <_sbrk+0x64>)
 800237c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800237e:	68fb      	ldr	r3, [r7, #12]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20020000 	.word	0x20020000
 800238c:	00000400 	.word	0x00000400
 8002390:	200003a0 	.word	0x200003a0
 8002394:	20000cb8 	.word	0x20000cb8

08002398 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800239c:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <SystemInit+0x20>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a2:	4a05      	ldr	r2, [pc, #20]	@ (80023b8 <SystemInit+0x20>)
 80023a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023c0:	f7ff ffea 	bl	8002398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023c4:	480c      	ldr	r0, [pc, #48]	@ (80023f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023c6:	490d      	ldr	r1, [pc, #52]	@ (80023fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002400 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023cc:	e002      	b.n	80023d4 <LoopCopyDataInit>

080023ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d2:	3304      	adds	r3, #4

080023d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d8:	d3f9      	bcc.n	80023ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023da:	4a0a      	ldr	r2, [pc, #40]	@ (8002404 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002408 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e0:	e001      	b.n	80023e6 <LoopFillZerobss>

080023e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e4:	3204      	adds	r2, #4

080023e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e8:	d3fb      	bcc.n	80023e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ea:	f009 fe2b 	bl	800c044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ee:	f7ff fa13 	bl	8001818 <main>
  bx  lr    
 80023f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023fc:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002400:	0800e53c 	.word	0x0800e53c
  ldr r2, =_sbss
 8002404:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002408:	20000cb4 	.word	0x20000cb4

0800240c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800240c:	e7fe      	b.n	800240c <ADC_IRQHandler>
	...

08002410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002414:	4b0e      	ldr	r3, [pc, #56]	@ (8002450 <HAL_Init+0x40>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0d      	ldr	r2, [pc, #52]	@ (8002450 <HAL_Init+0x40>)
 800241a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800241e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002420:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <HAL_Init+0x40>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0a      	ldr	r2, [pc, #40]	@ (8002450 <HAL_Init+0x40>)
 8002426:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800242a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800242c:	4b08      	ldr	r3, [pc, #32]	@ (8002450 <HAL_Init+0x40>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a07      	ldr	r2, [pc, #28]	@ (8002450 <HAL_Init+0x40>)
 8002432:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002436:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002438:	2003      	movs	r0, #3
 800243a:	f000 f94f 	bl	80026dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800243e:	2000      	movs	r0, #0
 8002440:	f000 f808 	bl	8002454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002444:	f7ff fcbe 	bl	8001dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023c00 	.word	0x40023c00

08002454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800245c:	4b12      	ldr	r3, [pc, #72]	@ (80024a8 <HAL_InitTick+0x54>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b12      	ldr	r3, [pc, #72]	@ (80024ac <HAL_InitTick+0x58>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800246a:	fbb3 f3f1 	udiv	r3, r3, r1
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f967 	bl	8002746 <HAL_SYSTICK_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e00e      	b.n	80024a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b0f      	cmp	r3, #15
 8002486:	d80a      	bhi.n	800249e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002488:	2200      	movs	r2, #0
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	f000 f92f 	bl	80026f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002494:	4a06      	ldr	r2, [pc, #24]	@ (80024b0 <HAL_InitTick+0x5c>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	e000      	b.n	80024a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000004 	.word	0x20000004
 80024ac:	2000000c 	.word	0x2000000c
 80024b0:	20000008 	.word	0x20000008

080024b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b8:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_IncTick+0x20>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <HAL_IncTick+0x24>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	4a04      	ldr	r2, [pc, #16]	@ (80024d8 <HAL_IncTick+0x24>)
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	2000000c 	.word	0x2000000c
 80024d8:	200003a4 	.word	0x200003a4

080024dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return uwTick;
 80024e0:	4b03      	ldr	r3, [pc, #12]	@ (80024f0 <HAL_GetTick+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	200003a4 	.word	0x200003a4

080024f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff ffee 	bl	80024dc <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d005      	beq.n	800251a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800250e:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <HAL_Delay+0x44>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800251a:	bf00      	nop
 800251c:	f7ff ffde 	bl	80024dc <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d8f7      	bhi.n	800251c <HAL_Delay+0x28>
  {
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	2000000c 	.word	0x2000000c

0800253c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800254c:	4b0c      	ldr	r3, [pc, #48]	@ (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002558:	4013      	ands	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002564:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800256c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256e:	4a04      	ldr	r2, [pc, #16]	@ (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	60d3      	str	r3, [r2, #12]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002588:	4b04      	ldr	r3, [pc, #16]	@ (800259c <__NVIC_GetPriorityGrouping+0x18>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	f003 0307 	and.w	r3, r3, #7
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	db0b      	blt.n	80025ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	f003 021f 	and.w	r2, r3, #31
 80025b8:	4907      	ldr	r1, [pc, #28]	@ (80025d8 <__NVIC_EnableIRQ+0x38>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	2001      	movs	r0, #1
 80025c2:	fa00 f202 	lsl.w	r2, r0, r2
 80025c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000e100 	.word	0xe000e100

080025dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	6039      	str	r1, [r7, #0]
 80025e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	db0a      	blt.n	8002606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	490c      	ldr	r1, [pc, #48]	@ (8002628 <__NVIC_SetPriority+0x4c>)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	0112      	lsls	r2, r2, #4
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	440b      	add	r3, r1
 8002600:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002604:	e00a      	b.n	800261c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	b2da      	uxtb	r2, r3
 800260a:	4908      	ldr	r1, [pc, #32]	@ (800262c <__NVIC_SetPriority+0x50>)
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	3b04      	subs	r3, #4
 8002614:	0112      	lsls	r2, r2, #4
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	440b      	add	r3, r1
 800261a:	761a      	strb	r2, [r3, #24]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000e100 	.word	0xe000e100
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002630:	b480      	push	{r7}
 8002632:	b089      	sub	sp, #36	@ 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f1c3 0307 	rsb	r3, r3, #7
 800264a:	2b04      	cmp	r3, #4
 800264c:	bf28      	it	cs
 800264e:	2304      	movcs	r3, #4
 8002650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3304      	adds	r3, #4
 8002656:	2b06      	cmp	r3, #6
 8002658:	d902      	bls.n	8002660 <NVIC_EncodePriority+0x30>
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3b03      	subs	r3, #3
 800265e:	e000      	b.n	8002662 <NVIC_EncodePriority+0x32>
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002664:	f04f 32ff 	mov.w	r2, #4294967295
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43da      	mvns	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	401a      	ands	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002678:	f04f 31ff 	mov.w	r1, #4294967295
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	43d9      	mvns	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	4313      	orrs	r3, r2
         );
}
 800268a:	4618      	mov	r0, r3
 800268c:	3724      	adds	r7, #36	@ 0x24
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
	...

08002698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026a8:	d301      	bcc.n	80026ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026aa:	2301      	movs	r3, #1
 80026ac:	e00f      	b.n	80026ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ae:	4a0a      	ldr	r2, [pc, #40]	@ (80026d8 <SysTick_Config+0x40>)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026b6:	210f      	movs	r1, #15
 80026b8:	f04f 30ff 	mov.w	r0, #4294967295
 80026bc:	f7ff ff8e 	bl	80025dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c0:	4b05      	ldr	r3, [pc, #20]	@ (80026d8 <SysTick_Config+0x40>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c6:	4b04      	ldr	r3, [pc, #16]	@ (80026d8 <SysTick_Config+0x40>)
 80026c8:	2207      	movs	r2, #7
 80026ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	e000e010 	.word	0xe000e010

080026dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff ff29 	bl	800253c <__NVIC_SetPriorityGrouping>
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b086      	sub	sp, #24
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	4603      	mov	r3, r0
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
 80026fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002704:	f7ff ff3e 	bl	8002584 <__NVIC_GetPriorityGrouping>
 8002708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	6978      	ldr	r0, [r7, #20]
 8002710:	f7ff ff8e 	bl	8002630 <NVIC_EncodePriority>
 8002714:	4602      	mov	r2, r0
 8002716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff5d 	bl	80025dc <__NVIC_SetPriority>
}
 8002722:	bf00      	nop
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff31 	bl	80025a0 <__NVIC_EnableIRQ>
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff ffa2 	bl	8002698 <SysTick_Config>
 8002754:	4603      	mov	r3, r0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800276c:	f7ff feb6 	bl	80024dc <HAL_GetTick>
 8002770:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d008      	beq.n	8002790 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2280      	movs	r2, #128	@ 0x80
 8002782:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e052      	b.n	8002836 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0216 	bic.w	r2, r2, #22
 800279e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d103      	bne.n	80027c0 <HAL_DMA_Abort+0x62>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d007      	beq.n	80027d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0208 	bic.w	r2, r2, #8
 80027ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027e0:	e013      	b.n	800280a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027e2:	f7ff fe7b 	bl	80024dc <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b05      	cmp	r3, #5
 80027ee:	d90c      	bls.n	800280a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2220      	movs	r2, #32
 80027f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2203      	movs	r2, #3
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e015      	b.n	8002836 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1e4      	bne.n	80027e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281c:	223f      	movs	r2, #63	@ 0x3f
 800281e:	409a      	lsls	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d004      	beq.n	800285c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2280      	movs	r2, #128	@ 0x80
 8002856:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e00c      	b.n	8002876 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2205      	movs	r2, #5
 8002860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0201 	bic.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002884:	b480      	push	{r7}
 8002886:	b089      	sub	sp, #36	@ 0x24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002896:	2300      	movs	r3, #0
 8002898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	e16b      	b.n	8002b78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028a0:	2201      	movs	r2, #1
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	f040 815a 	bne.w	8002b72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d005      	beq.n	80028d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d130      	bne.n	8002938 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	2203      	movs	r2, #3
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800290c:	2201      	movs	r2, #1
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	f003 0201 	and.w	r2, r3, #1
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	2b03      	cmp	r3, #3
 8002942:	d017      	beq.n	8002974 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d123      	bne.n	80029c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	08da      	lsrs	r2, r3, #3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3208      	adds	r2, #8
 8002988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800298c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	220f      	movs	r2, #15
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	08da      	lsrs	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3208      	adds	r2, #8
 80029c2:	69b9      	ldr	r1, [r7, #24]
 80029c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2203      	movs	r2, #3
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0203 	and.w	r2, r3, #3
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80b4 	beq.w	8002b72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	4b60      	ldr	r3, [pc, #384]	@ (8002b90 <HAL_GPIO_Init+0x30c>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a12:	4a5f      	ldr	r2, [pc, #380]	@ (8002b90 <HAL_GPIO_Init+0x30c>)
 8002a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a1a:	4b5d      	ldr	r3, [pc, #372]	@ (8002b90 <HAL_GPIO_Init+0x30c>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a26:	4a5b      	ldr	r2, [pc, #364]	@ (8002b94 <HAL_GPIO_Init+0x310>)
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	089b      	lsrs	r3, r3, #2
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	220f      	movs	r2, #15
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4013      	ands	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a52      	ldr	r2, [pc, #328]	@ (8002b98 <HAL_GPIO_Init+0x314>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d02b      	beq.n	8002aaa <HAL_GPIO_Init+0x226>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a51      	ldr	r2, [pc, #324]	@ (8002b9c <HAL_GPIO_Init+0x318>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d025      	beq.n	8002aa6 <HAL_GPIO_Init+0x222>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a50      	ldr	r2, [pc, #320]	@ (8002ba0 <HAL_GPIO_Init+0x31c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d01f      	beq.n	8002aa2 <HAL_GPIO_Init+0x21e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a4f      	ldr	r2, [pc, #316]	@ (8002ba4 <HAL_GPIO_Init+0x320>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d019      	beq.n	8002a9e <HAL_GPIO_Init+0x21a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4e      	ldr	r2, [pc, #312]	@ (8002ba8 <HAL_GPIO_Init+0x324>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d013      	beq.n	8002a9a <HAL_GPIO_Init+0x216>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a4d      	ldr	r2, [pc, #308]	@ (8002bac <HAL_GPIO_Init+0x328>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00d      	beq.n	8002a96 <HAL_GPIO_Init+0x212>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a4c      	ldr	r2, [pc, #304]	@ (8002bb0 <HAL_GPIO_Init+0x32c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d007      	beq.n	8002a92 <HAL_GPIO_Init+0x20e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a4b      	ldr	r2, [pc, #300]	@ (8002bb4 <HAL_GPIO_Init+0x330>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d101      	bne.n	8002a8e <HAL_GPIO_Init+0x20a>
 8002a8a:	2307      	movs	r3, #7
 8002a8c:	e00e      	b.n	8002aac <HAL_GPIO_Init+0x228>
 8002a8e:	2308      	movs	r3, #8
 8002a90:	e00c      	b.n	8002aac <HAL_GPIO_Init+0x228>
 8002a92:	2306      	movs	r3, #6
 8002a94:	e00a      	b.n	8002aac <HAL_GPIO_Init+0x228>
 8002a96:	2305      	movs	r3, #5
 8002a98:	e008      	b.n	8002aac <HAL_GPIO_Init+0x228>
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	e006      	b.n	8002aac <HAL_GPIO_Init+0x228>
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e004      	b.n	8002aac <HAL_GPIO_Init+0x228>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e002      	b.n	8002aac <HAL_GPIO_Init+0x228>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <HAL_GPIO_Init+0x228>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	f002 0203 	and.w	r2, r2, #3
 8002ab2:	0092      	lsls	r2, r2, #2
 8002ab4:	4093      	lsls	r3, r2
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002abc:	4935      	ldr	r1, [pc, #212]	@ (8002b94 <HAL_GPIO_Init+0x310>)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	089b      	lsrs	r3, r3, #2
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aca:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb8 <HAL_GPIO_Init+0x334>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aee:	4a32      	ldr	r2, [pc, #200]	@ (8002bb8 <HAL_GPIO_Init+0x334>)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002af4:	4b30      	ldr	r3, [pc, #192]	@ (8002bb8 <HAL_GPIO_Init+0x334>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b18:	4a27      	ldr	r2, [pc, #156]	@ (8002bb8 <HAL_GPIO_Init+0x334>)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b1e:	4b26      	ldr	r3, [pc, #152]	@ (8002bb8 <HAL_GPIO_Init+0x334>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b42:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb8 <HAL_GPIO_Init+0x334>)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b48:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb8 <HAL_GPIO_Init+0x334>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b6c:	4a12      	ldr	r2, [pc, #72]	@ (8002bb8 <HAL_GPIO_Init+0x334>)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3301      	adds	r3, #1
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	2b0f      	cmp	r3, #15
 8002b7c:	f67f ae90 	bls.w	80028a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	3724      	adds	r7, #36	@ 0x24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40013800 	.word	0x40013800
 8002b98:	40020000 	.word	0x40020000
 8002b9c:	40020400 	.word	0x40020400
 8002ba0:	40020800 	.word	0x40020800
 8002ba4:	40020c00 	.word	0x40020c00
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40021400 	.word	0x40021400
 8002bb0:	40021800 	.word	0x40021800
 8002bb4:	40021c00 	.word	0x40021c00
 8002bb8:	40013c00 	.word	0x40013c00

08002bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	807b      	strh	r3, [r7, #2]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bcc:	787b      	ldrb	r3, [r7, #1]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bd2:	887a      	ldrh	r2, [r7, #2]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bd8:	e003      	b.n	8002be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bda:	887b      	ldrh	r3, [r7, #2]
 8002bdc:	041a      	lsls	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	619a      	str	r2, [r3, #24]
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b086      	sub	sp, #24
 8002bf2:	af02      	add	r7, sp, #8
 8002bf4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e059      	b.n	8002cb4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f008 f848 	bl	800acb0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2203      	movs	r2, #3
 8002c24:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c2e:	d102      	bne.n	8002c36 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f004 fe61 	bl	8007902 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	7c1a      	ldrb	r2, [r3, #16]
 8002c48:	f88d 2000 	strb.w	r2, [sp]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c50:	f004 fde2 	bl	8007818 <USB_CoreInit>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d005      	beq.n	8002c66 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e026      	b.n	8002cb4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f004 fe59 	bl	8007924 <USB_SetCurrentMode>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e017      	b.n	8002cb4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	7c1a      	ldrb	r2, [r3, #16]
 8002c8c:	f88d 2000 	strb.w	r2, [sp]
 8002c90:	3304      	adds	r3, #4
 8002c92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c94:	f004 fffc 	bl	8007c90 <USB_HostInit>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e004      	b.n	8002cb4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002cbc:	b590      	push	{r4, r7, lr}
 8002cbe:	b08b      	sub	sp, #44	@ 0x2c
 8002cc0:	af04      	add	r7, sp, #16
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	4608      	mov	r0, r1
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4603      	mov	r3, r0
 8002ccc:	70fb      	strb	r3, [r7, #3]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	70bb      	strb	r3, [r7, #2]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002cd6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002cd8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_HCD_HC_Init+0x2c>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e09d      	b.n	8002e24 <HAL_HCD_HC_Init+0x168>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	3319      	adds	r3, #25
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002d04:	78fa      	ldrb	r2, [r7, #3]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	3314      	adds	r3, #20
 8002d14:	787a      	ldrb	r2, [r7, #1]
 8002d16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	3315      	adds	r3, #21
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002d2c:	78fa      	ldrb	r2, [r7, #3]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	3326      	adds	r3, #38	@ 0x26
 8002d3c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002d40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	78bb      	ldrb	r3, [r7, #2]
 8002d46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d4a:	b2d8      	uxtb	r0, r3
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	3316      	adds	r3, #22
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002d5e:	78fb      	ldrb	r3, [r7, #3]
 8002d60:	4619      	mov	r1, r3
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fbc8 	bl	80034f8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002d68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	da0a      	bge.n	8002d86 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002d70:	78fa      	ldrb	r2, [r7, #3]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	3317      	adds	r3, #23
 8002d80:	2201      	movs	r2, #1
 8002d82:	701a      	strb	r2, [r3, #0]
 8002d84:	e009      	b.n	8002d9a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002d86:	78fa      	ldrb	r2, [r7, #3]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	3317      	adds	r3, #23
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f005 f8da 	bl	8007f58 <USB_GetHostSpeed>
 8002da4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002da6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d10b      	bne.n	8002dc6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002dae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d107      	bne.n	8002dc6 <HAL_HCD_HC_Init+0x10a>
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d104      	bne.n	8002dc6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2bbc      	cmp	r3, #188	@ 0xbc
 8002dc0:	d901      	bls.n	8002dc6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002dc2:	23bc      	movs	r3, #188	@ 0xbc
 8002dc4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	3318      	adds	r3, #24
 8002dd6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002dda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002ddc:	78fa      	ldrb	r2, [r7, #3]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	b298      	uxth	r0, r3
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	3328      	adds	r3, #40	@ 0x28
 8002df0:	4602      	mov	r2, r0
 8002df2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	787c      	ldrb	r4, [r7, #1]
 8002dfe:	78ba      	ldrb	r2, [r7, #2]
 8002e00:	78f9      	ldrb	r1, [r7, #3]
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002e08:	9301      	str	r3, [sp, #4]
 8002e0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	4623      	mov	r3, r4
 8002e12:	f005 f8c9 	bl	8007fa8 <USB_HC_Init>
 8002e16:	4603      	mov	r3, r0
 8002e18:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd90      	pop	{r4, r7, pc}

08002e2c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_HCD_HC_Halt+0x1e>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e00f      	b.n	8002e6a <HAL_HCD_HC_Halt+0x3e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	78fa      	ldrb	r2, [r7, #3]
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f005 fc5b 	bl	8008716 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	4608      	mov	r0, r1
 8002e7e:	4611      	mov	r1, r2
 8002e80:	461a      	mov	r2, r3
 8002e82:	4603      	mov	r3, r0
 8002e84:	70fb      	strb	r3, [r7, #3]
 8002e86:	460b      	mov	r3, r1
 8002e88:	70bb      	strb	r3, [r7, #2]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3317      	adds	r3, #23
 8002e9e:	78ba      	ldrb	r2, [r7, #2]
 8002ea0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	3326      	adds	r3, #38	@ 0x26
 8002eb2:	787a      	ldrb	r2, [r7, #1]
 8002eb4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002eb6:	7c3b      	ldrb	r3, [r7, #16]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d114      	bne.n	8002ee6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	332a      	adds	r3, #42	@ 0x2a
 8002ecc:	2203      	movs	r2, #3
 8002ece:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	3319      	adds	r3, #25
 8002ee0:	7f3a      	ldrb	r2, [r7, #28]
 8002ee2:	701a      	strb	r2, [r3, #0]
 8002ee4:	e009      	b.n	8002efa <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	332a      	adds	r3, #42	@ 0x2a
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002efa:	787b      	ldrb	r3, [r7, #1]
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	f200 8102 	bhi.w	8003106 <HAL_HCD_HC_SubmitRequest+0x292>
 8002f02:	a201      	add	r2, pc, #4	@ (adr r2, 8002f08 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f08:	08002f19 	.word	0x08002f19
 8002f0c:	080030f1 	.word	0x080030f1
 8002f10:	08002fdd 	.word	0x08002fdd
 8002f14:	08003067 	.word	0x08003067
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002f18:	7c3b      	ldrb	r3, [r7, #16]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	f040 80f5 	bne.w	800310a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002f20:	78bb      	ldrb	r3, [r7, #2]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d12d      	bne.n	8002f82 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002f26:	8b3b      	ldrh	r3, [r7, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d109      	bne.n	8002f40 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002f2c:	78fa      	ldrb	r2, [r7, #3]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	333d      	adds	r3, #61	@ 0x3d
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	333d      	adds	r3, #61	@ 0x3d
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10a      	bne.n	8002f6c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	332a      	adds	r3, #42	@ 0x2a
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002f6a:	e0ce      	b.n	800310a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	332a      	adds	r3, #42	@ 0x2a
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	701a      	strb	r2, [r3, #0]
      break;
 8002f80:	e0c3      	b.n	800310a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	331a      	adds	r3, #26
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	f040 80b8 	bne.w	800310a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	333c      	adds	r3, #60	@ 0x3c
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10a      	bne.n	8002fc6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	332a      	adds	r3, #42	@ 0x2a
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
      break;
 8002fc4:	e0a1      	b.n	800310a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	332a      	adds	r3, #42	@ 0x2a
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	701a      	strb	r2, [r3, #0]
      break;
 8002fda:	e096      	b.n	800310a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002fdc:	78bb      	ldrb	r3, [r7, #2]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d120      	bne.n	8003024 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	333d      	adds	r3, #61	@ 0x3d
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10a      	bne.n	800300e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	332a      	adds	r3, #42	@ 0x2a
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800300c:	e07e      	b.n	800310c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	1a9b      	subs	r3, r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	332a      	adds	r3, #42	@ 0x2a
 800301e:	2202      	movs	r2, #2
 8003020:	701a      	strb	r2, [r3, #0]
      break;
 8003022:	e073      	b.n	800310c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	333c      	adds	r3, #60	@ 0x3c
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	332a      	adds	r3, #42	@ 0x2a
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]
      break;
 800304e:	e05d      	b.n	800310c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003050:	78fa      	ldrb	r2, [r7, #3]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	1a9b      	subs	r3, r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	332a      	adds	r3, #42	@ 0x2a
 8003060:	2202      	movs	r2, #2
 8003062:	701a      	strb	r2, [r3, #0]
      break;
 8003064:	e052      	b.n	800310c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003066:	78bb      	ldrb	r3, [r7, #2]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d120      	bne.n	80030ae <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	333d      	adds	r3, #61	@ 0x3d
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10a      	bne.n	8003098 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	332a      	adds	r3, #42	@ 0x2a
 8003092:	2200      	movs	r2, #0
 8003094:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003096:	e039      	b.n	800310c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	332a      	adds	r3, #42	@ 0x2a
 80030a8:	2202      	movs	r2, #2
 80030aa:	701a      	strb	r2, [r3, #0]
      break;
 80030ac:	e02e      	b.n	800310c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	333c      	adds	r3, #60	@ 0x3c
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	332a      	adds	r3, #42	@ 0x2a
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
      break;
 80030d8:	e018      	b.n	800310c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	332a      	adds	r3, #42	@ 0x2a
 80030ea:	2202      	movs	r2, #2
 80030ec:	701a      	strb	r2, [r3, #0]
      break;
 80030ee:	e00d      	b.n	800310c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	332a      	adds	r3, #42	@ 0x2a
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
      break;
 8003104:	e002      	b.n	800310c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003106:	bf00      	nop
 8003108:	e000      	b.n	800310c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800310a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	332c      	adds	r3, #44	@ 0x2c
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	8b39      	ldrh	r1, [r7, #24]
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4403      	add	r3, r0
 8003130:	3334      	adds	r3, #52	@ 0x34
 8003132:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	334c      	adds	r3, #76	@ 0x4c
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003148:	78fa      	ldrb	r2, [r7, #3]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	1a9b      	subs	r3, r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	3338      	adds	r3, #56	@ 0x38
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	3315      	adds	r3, #21
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	334d      	adds	r3, #77	@ 0x4d
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	3310      	adds	r3, #16
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	1d19      	adds	r1, r3, #4
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	799b      	ldrb	r3, [r3, #6]
 800319e:	461a      	mov	r2, r3
 80031a0:	f005 f82e 	bl	8008200 <USB_HC_StartXfer>
 80031a4:	4603      	mov	r3, r0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop

080031b0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f004 fd22 	bl	8007c10 <USB_GetMode>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	f040 80fb 	bne.w	80033ca <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f004 fce5 	bl	8007ba8 <USB_ReadInterrupts>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 80f1 	beq.w	80033c8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f004 fcdc 	bl	8007ba8 <USB_ReadInterrupts>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031fa:	d104      	bne.n	8003206 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003204:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f004 fccc 	bl	8007ba8 <USB_ReadInterrupts>
 8003210:	4603      	mov	r3, r0
 8003212:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003216:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800321a:	d104      	bne.n	8003226 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003224:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f004 fcbc 	bl	8007ba8 <USB_ReadInterrupts>
 8003230:	4603      	mov	r3, r0
 8003232:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003236:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800323a:	d104      	bne.n	8003246 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003244:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f004 fcac 	bl	8007ba8 <USB_ReadInterrupts>
 8003250:	4603      	mov	r3, r0
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b02      	cmp	r3, #2
 8003258:	d103      	bne.n	8003262 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2202      	movs	r2, #2
 8003260:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f004 fc9e 	bl	8007ba8 <USB_ReadInterrupts>
 800326c:	4603      	mov	r3, r0
 800326e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003272:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003276:	d120      	bne.n	80032ba <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003280:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d113      	bne.n	80032ba <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003292:	2110      	movs	r1, #16
 8003294:	6938      	ldr	r0, [r7, #16]
 8003296:	f004 fb91 	bl	80079bc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800329a:	6938      	ldr	r0, [r7, #16]
 800329c:	f004 fbc0 	bl	8007a20 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	7a5b      	ldrb	r3, [r3, #9]
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d105      	bne.n	80032b4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2101      	movs	r1, #1
 80032ae:	4618      	mov	r0, r3
 80032b0:	f004 fdb2 	bl	8007e18 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f007 fd79 	bl	800adac <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f004 fc72 	bl	8007ba8 <USB_ReadInterrupts>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032ce:	d102      	bne.n	80032d6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f001 fd4d 	bl	8004d70 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f004 fc64 	bl	8007ba8 <USB_ReadInterrupts>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d106      	bne.n	80032f8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f007 fd42 	bl	800ad74 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2208      	movs	r2, #8
 80032f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f004 fc53 	bl	8007ba8 <USB_ReadInterrupts>
 8003302:	4603      	mov	r3, r0
 8003304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003308:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800330c:	d139      	bne.n	8003382 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f005 f9ee 	bl	80086f4 <USB_HC_ReadInterrupt>
 8003318:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	e025      	b.n	800336c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	fa22 f303 	lsr.w	r3, r2, r3
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d018      	beq.n	8003366 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800334a:	d106      	bne.n	800335a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	4619      	mov	r1, r3
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f905 	bl	8003562 <HCD_HC_IN_IRQHandler>
 8003358:	e005      	b.n	8003366 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	4619      	mov	r1, r3
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 ff67 	bl	8004234 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	3301      	adds	r3, #1
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	795b      	ldrb	r3, [r3, #5]
 8003370:	461a      	mov	r2, r3
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	4293      	cmp	r3, r2
 8003376:	d3d3      	bcc.n	8003320 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003380:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f004 fc0e 	bl	8007ba8 <USB_ReadInterrupts>
 800338c:	4603      	mov	r3, r0
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b10      	cmp	r3, #16
 8003394:	d101      	bne.n	800339a <HAL_HCD_IRQHandler+0x1ea>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <HAL_HCD_IRQHandler+0x1ec>
 800339a:	2300      	movs	r3, #0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d014      	beq.n	80033ca <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699a      	ldr	r2, [r3, #24]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0210 	bic.w	r2, r2, #16
 80033ae:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f001 fbfe 	bl	8004bb2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699a      	ldr	r2, [r3, #24]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0210 	orr.w	r2, r2, #16
 80033c4:	619a      	str	r2, [r3, #24]
 80033c6:	e000      	b.n	80033ca <HAL_HCD_IRQHandler+0x21a>
      return;
 80033c8:	bf00      	nop
    }
  }
}
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_HCD_Start+0x16>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e013      	b.n	800340e <HAL_HCD_Start+0x3e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2101      	movs	r1, #1
 80033f4:	4618      	mov	r0, r3
 80033f6:	f004 fd76 	bl	8007ee6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f004 fa6e 	bl	80078e0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_HCD_Stop+0x16>
 8003428:	2302      	movs	r3, #2
 800342a:	e00d      	b.n	8003448 <HAL_HCD_Stop+0x32>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f005 fac9 	bl	80089d0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f004 fd18 	bl	8007e92 <USB_ResetPort>
 8003462:	4603      	mov	r3, r0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003478:	78fa      	ldrb	r2, [r7, #3]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	334c      	adds	r3, #76	@ 0x4c
 8003488:	781b      	ldrb	r3, [r3, #0]
}
 800348a:	4618      	mov	r0, r3
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80034a2:	78fa      	ldrb	r2, [r7, #3]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	3338      	adds	r3, #56	@ 0x38
 80034b2:	681b      	ldr	r3, [r3, #0]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f004 fd5a 	bl	8007f86 <USB_GetCurrentFrame>
 80034d2:	4603      	mov	r3, r0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f004 fd35 	bl	8007f58 <USB_GetHostSpeed>
 80034ee:	4603      	mov	r3, r0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	331a      	adds	r3, #26
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	331b      	adds	r3, #27
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	3325      	adds	r3, #37	@ 0x25
 800353c:	2200      	movs	r2, #0
 800353e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003540:	78fa      	ldrb	r2, [r7, #3]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	3324      	adds	r3, #36	@ 0x24
 8003550:	2200      	movs	r2, #0
 8003552:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b086      	sub	sp, #24
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	460b      	mov	r3, r1
 800356c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	4611      	mov	r1, r2
 8003580:	4618      	mov	r0, r3
 8003582:	f004 fb24 	bl	8007bce <USB_ReadChInterrupts>
 8003586:	4603      	mov	r3, r0
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b04      	cmp	r3, #4
 800358e:	d11a      	bne.n	80035c6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4413      	add	r3, r2
 8003598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800359c:	461a      	mov	r2, r3
 800359e:	2304      	movs	r3, #4
 80035a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80035a2:	78fa      	ldrb	r2, [r7, #3]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	334d      	adds	r3, #77	@ 0x4d
 80035b2:	2207      	movs	r2, #7
 80035b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	78fa      	ldrb	r2, [r7, #3]
 80035bc:	4611      	mov	r1, r2
 80035be:	4618      	mov	r0, r3
 80035c0:	f005 f8a9 	bl	8008716 <USB_HC_Halt>
 80035c4:	e09e      	b.n	8003704 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	4611      	mov	r1, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f004 fafd 	bl	8007bce <USB_ReadChInterrupts>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035de:	d11b      	bne.n	8003618 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ec:	461a      	mov	r2, r3
 80035ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	334d      	adds	r3, #77	@ 0x4d
 8003604:	2208      	movs	r2, #8
 8003606:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	78fa      	ldrb	r2, [r7, #3]
 800360e:	4611      	mov	r1, r2
 8003610:	4618      	mov	r0, r3
 8003612:	f005 f880 	bl	8008716 <USB_HC_Halt>
 8003616:	e075      	b.n	8003704 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	78fa      	ldrb	r2, [r7, #3]
 800361e:	4611      	mov	r1, r2
 8003620:	4618      	mov	r0, r3
 8003622:	f004 fad4 	bl	8007bce <USB_ReadChInterrupts>
 8003626:	4603      	mov	r3, r0
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b08      	cmp	r3, #8
 800362e:	d11a      	bne.n	8003666 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4413      	add	r3, r2
 8003638:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800363c:	461a      	mov	r2, r3
 800363e:	2308      	movs	r3, #8
 8003640:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	334d      	adds	r3, #77	@ 0x4d
 8003652:	2206      	movs	r2, #6
 8003654:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	4611      	mov	r1, r2
 800365e:	4618      	mov	r0, r3
 8003660:	f005 f859 	bl	8008716 <USB_HC_Halt>
 8003664:	e04e      	b.n	8003704 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	4611      	mov	r1, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f004 faad 	bl	8007bce <USB_ReadChInterrupts>
 8003674:	4603      	mov	r3, r0
 8003676:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800367a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800367e:	d11b      	bne.n	80036b8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003680:	78fb      	ldrb	r3, [r7, #3]
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	4413      	add	r3, r2
 8003688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800368c:	461a      	mov	r2, r3
 800368e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003692:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	334d      	adds	r3, #77	@ 0x4d
 80036a4:	2209      	movs	r2, #9
 80036a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	78fa      	ldrb	r2, [r7, #3]
 80036ae:	4611      	mov	r1, r2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f005 f830 	bl	8008716 <USB_HC_Halt>
 80036b6:	e025      	b.n	8003704 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	4611      	mov	r1, r2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f004 fa84 	bl	8007bce <USB_ReadChInterrupts>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036cc:	2b80      	cmp	r3, #128	@ 0x80
 80036ce:	d119      	bne.n	8003704 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036dc:	461a      	mov	r2, r3
 80036de:	2380      	movs	r3, #128	@ 0x80
 80036e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80036e2:	78fa      	ldrb	r2, [r7, #3]
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	1a9b      	subs	r3, r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	334d      	adds	r3, #77	@ 0x4d
 80036f2:	2207      	movs	r2, #7
 80036f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	4611      	mov	r1, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	f005 f809 	bl	8008716 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	4611      	mov	r1, r2
 800370c:	4618      	mov	r0, r3
 800370e:	f004 fa5e 	bl	8007bce <USB_ReadChInterrupts>
 8003712:	4603      	mov	r3, r0
 8003714:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800371c:	d112      	bne.n	8003744 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	78fa      	ldrb	r2, [r7, #3]
 8003724:	4611      	mov	r1, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f004 fff5 	bl	8008716 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4413      	add	r3, r2
 8003734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003738:	461a      	mov	r2, r3
 800373a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800373e:	6093      	str	r3, [r2, #8]
 8003740:	f000 bd75 	b.w	800422e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	4611      	mov	r1, r2
 800374c:	4618      	mov	r0, r3
 800374e:	f004 fa3e 	bl	8007bce <USB_ReadChInterrupts>
 8003752:	4603      	mov	r3, r0
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b01      	cmp	r3, #1
 800375a:	f040 8128 	bne.w	80039ae <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800375e:	78fb      	ldrb	r3, [r7, #3]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4413      	add	r3, r2
 8003766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800376a:	461a      	mov	r2, r3
 800376c:	2320      	movs	r3, #32
 800376e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003770:	78fa      	ldrb	r2, [r7, #3]
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	1a9b      	subs	r3, r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	331b      	adds	r3, #27
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d119      	bne.n	80037ba <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003786:	78fa      	ldrb	r2, [r7, #3]
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	331b      	adds	r3, #27
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800379a:	78fb      	ldrb	r3, [r7, #3]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	0151      	lsls	r1, r2, #5
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	440a      	add	r2, r1
 80037b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037b8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	799b      	ldrb	r3, [r3, #6]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d01b      	beq.n	80037fa <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	3330      	adds	r3, #48	@ 0x30
 80037d2:	6819      	ldr	r1, [r3, #0]
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e6:	78fa      	ldrb	r2, [r7, #3]
 80037e8:	1ac9      	subs	r1, r1, r3
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4403      	add	r3, r0
 80037f6:	3338      	adds	r3, #56	@ 0x38
 80037f8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80037fa:	78fa      	ldrb	r2, [r7, #3]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	334d      	adds	r3, #77	@ 0x4d
 800380a:	2201      	movs	r2, #1
 800380c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	3344      	adds	r3, #68	@ 0x44
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003822:	78fb      	ldrb	r3, [r7, #3]
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	4413      	add	r3, r2
 800382a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800382e:	461a      	mov	r2, r3
 8003830:	2301      	movs	r3, #1
 8003832:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003834:	78fa      	ldrb	r2, [r7, #3]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	3326      	adds	r3, #38	@ 0x26
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	3326      	adds	r3, #38	@ 0x26
 800385a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800385c:	2b02      	cmp	r3, #2
 800385e:	d110      	bne.n	8003882 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	4611      	mov	r1, r2
 8003868:	4618      	mov	r0, r3
 800386a:	f004 ff54 	bl	8008716 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4413      	add	r3, r2
 8003876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800387a:	461a      	mov	r2, r3
 800387c:	2310      	movs	r3, #16
 800387e:	6093      	str	r3, [r2, #8]
 8003880:	e03d      	b.n	80038fe <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003882:	78fa      	ldrb	r2, [r7, #3]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	3326      	adds	r3, #38	@ 0x26
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b03      	cmp	r3, #3
 8003896:	d00a      	beq.n	80038ae <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003898:	78fa      	ldrb	r2, [r7, #3]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	3326      	adds	r3, #38	@ 0x26
 80038a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d127      	bne.n	80038fe <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80038ae:	78fb      	ldrb	r3, [r7, #3]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	78fa      	ldrb	r2, [r7, #3]
 80038be:	0151      	lsls	r1, r2, #5
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	440a      	add	r2, r1
 80038c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80038cc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80038ce:	78fa      	ldrb	r2, [r7, #3]
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	1a9b      	subs	r3, r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	440b      	add	r3, r1
 80038dc:	334c      	adds	r3, #76	@ 0x4c
 80038de:	2201      	movs	r2, #1
 80038e0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80038e2:	78fa      	ldrb	r2, [r7, #3]
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	334c      	adds	r3, #76	@ 0x4c
 80038f2:	781a      	ldrb	r2, [r3, #0]
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	4619      	mov	r1, r3
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f007 fa65 	bl	800adc8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	799b      	ldrb	r3, [r3, #6]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d13b      	bne.n	800397e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003906:	78fa      	ldrb	r2, [r7, #3]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	3338      	adds	r3, #56	@ 0x38
 8003916:	6819      	ldr	r1, [r3, #0]
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	1a9b      	subs	r3, r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4403      	add	r3, r0
 8003926:	3328      	adds	r3, #40	@ 0x28
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	440b      	add	r3, r1
 800392c:	1e59      	subs	r1, r3, #1
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4403      	add	r3, r0
 800393c:	3328      	adds	r3, #40	@ 0x28
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	fbb1 f3f3 	udiv	r3, r1, r3
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8470 	beq.w	800422e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	333c      	adds	r3, #60	@ 0x3c
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	78fa      	ldrb	r2, [r7, #3]
 8003962:	f083 0301 	eor.w	r3, r3, #1
 8003966:	b2d8      	uxtb	r0, r3
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	333c      	adds	r3, #60	@ 0x3c
 8003976:	4602      	mov	r2, r0
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	f000 bc58 	b.w	800422e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800397e:	78fa      	ldrb	r2, [r7, #3]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	333c      	adds	r3, #60	@ 0x3c
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	f083 0301 	eor.w	r3, r3, #1
 8003996:	b2d8      	uxtb	r0, r3
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	333c      	adds	r3, #60	@ 0x3c
 80039a6:	4602      	mov	r2, r0
 80039a8:	701a      	strb	r2, [r3, #0]
 80039aa:	f000 bc40 	b.w	800422e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	78fa      	ldrb	r2, [r7, #3]
 80039b4:	4611      	mov	r1, r2
 80039b6:	4618      	mov	r0, r3
 80039b8:	f004 f909 	bl	8007bce <USB_ReadChInterrupts>
 80039bc:	4603      	mov	r3, r0
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d131      	bne.n	8003a2a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80039c6:	78fb      	ldrb	r3, [r7, #3]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039d2:	461a      	mov	r2, r3
 80039d4:	2320      	movs	r3, #32
 80039d6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	331a      	adds	r3, #26
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	f040 841f 	bne.w	800422e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	331b      	adds	r3, #27
 8003a00:	2201      	movs	r2, #1
 8003a02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003a04:	78fa      	ldrb	r2, [r7, #3]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	334d      	adds	r3, #77	@ 0x4d
 8003a14:	2203      	movs	r2, #3
 8003a16:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	4611      	mov	r1, r2
 8003a20:	4618      	mov	r0, r3
 8003a22:	f004 fe78 	bl	8008716 <USB_HC_Halt>
 8003a26:	f000 bc02 	b.w	800422e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	78fa      	ldrb	r2, [r7, #3]
 8003a30:	4611      	mov	r1, r2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f004 f8cb 	bl	8007bce <USB_ReadChInterrupts>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	f040 8305 	bne.w	800404e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a50:	461a      	mov	r2, r3
 8003a52:	2302      	movs	r3, #2
 8003a54:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003a56:	78fa      	ldrb	r2, [r7, #3]
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	334d      	adds	r3, #77	@ 0x4d
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d114      	bne.n	8003a96 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a6c:	78fa      	ldrb	r2, [r7, #3]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	334d      	adds	r3, #77	@ 0x4d
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003a80:	78fa      	ldrb	r2, [r7, #3]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	334c      	adds	r3, #76	@ 0x4c
 8003a90:	2201      	movs	r2, #1
 8003a92:	701a      	strb	r2, [r3, #0]
 8003a94:	e2cc      	b.n	8004030 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	334d      	adds	r3, #77	@ 0x4d
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b06      	cmp	r3, #6
 8003aaa:	d114      	bne.n	8003ad6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	334d      	adds	r3, #77	@ 0x4d
 8003abc:	2202      	movs	r2, #2
 8003abe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	334c      	adds	r3, #76	@ 0x4c
 8003ad0:	2205      	movs	r2, #5
 8003ad2:	701a      	strb	r2, [r3, #0]
 8003ad4:	e2ac      	b.n	8004030 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	334d      	adds	r3, #77	@ 0x4d
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b07      	cmp	r3, #7
 8003aea:	d00b      	beq.n	8003b04 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	334d      	adds	r3, #77	@ 0x4d
 8003afc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003afe:	2b09      	cmp	r3, #9
 8003b00:	f040 80a6 	bne.w	8003c50 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	334d      	adds	r3, #77	@ 0x4d
 8003b14:	2202      	movs	r2, #2
 8003b16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003b18:	78fa      	ldrb	r2, [r7, #3]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	3344      	adds	r3, #68	@ 0x44
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	1c59      	adds	r1, r3, #1
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4403      	add	r3, r0
 8003b38:	3344      	adds	r3, #68	@ 0x44
 8003b3a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b3c:	78fa      	ldrb	r2, [r7, #3]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	3344      	adds	r3, #68	@ 0x44
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d943      	bls.n	8003bda <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b52:	78fa      	ldrb	r2, [r7, #3]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	3344      	adds	r3, #68	@ 0x44
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	331a      	adds	r3, #26
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d123      	bne.n	8003bc4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	331b      	adds	r3, #27
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003b90:	78fa      	ldrb	r2, [r7, #3]
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	4613      	mov	r3, r2
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	1a9b      	subs	r3, r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	331c      	adds	r3, #28
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	0151      	lsls	r1, r2, #5
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	440a      	add	r2, r1
 8003bba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003bbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bc2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	334c      	adds	r3, #76	@ 0x4c
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003bd8:	e229      	b.n	800402e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	334c      	adds	r3, #76	@ 0x4c
 8003bea:	2202      	movs	r2, #2
 8003bec:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bee:	78fa      	ldrb	r2, [r7, #3]
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	1a9b      	subs	r3, r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	3326      	adds	r3, #38	@ 0x26
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00b      	beq.n	8003c1c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c04:	78fa      	ldrb	r2, [r7, #3]
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	3326      	adds	r3, #38	@ 0x26
 8003c14:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	f040 8209 	bne.w	800402e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c32:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c3a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c48:	461a      	mov	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c4e:	e1ee      	b.n	800402e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	334d      	adds	r3, #77	@ 0x4d
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2b05      	cmp	r3, #5
 8003c64:	f040 80c8 	bne.w	8003df8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c68:	78fa      	ldrb	r2, [r7, #3]
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	1a9b      	subs	r3, r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	334d      	adds	r3, #77	@ 0x4d
 8003c78:	2202      	movs	r2, #2
 8003c7a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003c7c:	78fa      	ldrb	r2, [r7, #3]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	331b      	adds	r3, #27
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	f040 81ce 	bne.w	8004030 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3326      	adds	r3, #38	@ 0x26
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d16b      	bne.n	8003d82 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	3348      	adds	r3, #72	@ 0x48
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	1c59      	adds	r1, r3, #1
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4403      	add	r3, r0
 8003cca:	3348      	adds	r3, #72	@ 0x48
 8003ccc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003cce:	78fa      	ldrb	r2, [r7, #3]
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	3348      	adds	r3, #72	@ 0x48
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d943      	bls.n	8003d6c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003ce4:	78fa      	ldrb	r2, [r7, #3]
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	1a9b      	subs	r3, r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	3348      	adds	r3, #72	@ 0x48
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003cf8:	78fa      	ldrb	r2, [r7, #3]
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	331b      	adds	r3, #27
 8003d08:	2200      	movs	r2, #0
 8003d0a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003d0c:	78fa      	ldrb	r2, [r7, #3]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	3344      	adds	r3, #68	@ 0x44
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d809      	bhi.n	8003d36 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003d22:	78fa      	ldrb	r2, [r7, #3]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	1a9b      	subs	r3, r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	331c      	adds	r3, #28
 8003d32:	2201      	movs	r2, #1
 8003d34:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d36:	78fb      	ldrb	r3, [r7, #3]
 8003d38:	015a      	lsls	r2, r3, #5
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	78fa      	ldrb	r2, [r7, #3]
 8003d46:	0151      	lsls	r1, r2, #5
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	440a      	add	r2, r1
 8003d4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d54:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d56:	78fa      	ldrb	r2, [r7, #3]
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	1a9b      	subs	r3, r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	334c      	adds	r3, #76	@ 0x4c
 8003d66:	2204      	movs	r2, #4
 8003d68:	701a      	strb	r2, [r3, #0]
 8003d6a:	e014      	b.n	8003d96 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d6c:	78fa      	ldrb	r2, [r7, #3]
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	4613      	mov	r3, r2
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	1a9b      	subs	r3, r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	334c      	adds	r3, #76	@ 0x4c
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	701a      	strb	r2, [r3, #0]
 8003d80:	e009      	b.n	8003d96 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d82:	78fa      	ldrb	r2, [r7, #3]
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	1a9b      	subs	r3, r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	440b      	add	r3, r1
 8003d90:	334c      	adds	r3, #76	@ 0x4c
 8003d92:	2202      	movs	r2, #2
 8003d94:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d96:	78fa      	ldrb	r2, [r7, #3]
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	3326      	adds	r3, #38	@ 0x26
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00b      	beq.n	8003dc4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003dac:	78fa      	ldrb	r2, [r7, #3]
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	4613      	mov	r3, r2
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	1a9b      	subs	r3, r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	3326      	adds	r3, #38	@ 0x26
 8003dbc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	f040 8136 	bne.w	8004030 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003dda:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003de2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003df0:	461a      	mov	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	e11b      	b.n	8004030 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	334d      	adds	r3, #77	@ 0x4d
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	f040 8081 	bne.w	8003f12 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e10:	78fa      	ldrb	r2, [r7, #3]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	334d      	adds	r3, #77	@ 0x4d
 8003e20:	2202      	movs	r2, #2
 8003e22:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e24:	78fa      	ldrb	r2, [r7, #3]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	1a9b      	subs	r3, r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	331b      	adds	r3, #27
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	f040 80fa 	bne.w	8004030 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e3c:	78fa      	ldrb	r2, [r7, #3]
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	334c      	adds	r3, #76	@ 0x4c
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	78fa      	ldrb	r2, [r7, #3]
 8003e60:	0151      	lsls	r1, r2, #5
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	440a      	add	r2, r1
 8003e66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e6e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	78fa      	ldrb	r2, [r7, #3]
 8003e80:	0151      	lsls	r1, r2, #5
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	440a      	add	r2, r1
 8003e86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e8e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	78fa      	ldrb	r2, [r7, #3]
 8003ea0:	0151      	lsls	r1, r2, #5
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	440a      	add	r2, r1
 8003ea6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003eaa:	f023 0320 	bic.w	r3, r3, #32
 8003eae:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003eb0:	78fa      	ldrb	r2, [r7, #3]
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	3326      	adds	r3, #38	@ 0x26
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00b      	beq.n	8003ede <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ec6:	78fa      	ldrb	r2, [r7, #3]
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	3326      	adds	r3, #38	@ 0x26
 8003ed6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	f040 80a9 	bne.w	8004030 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ede:	78fb      	ldrb	r3, [r7, #3]
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ef4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003efc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	e08e      	b.n	8004030 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003f12:	78fa      	ldrb	r2, [r7, #3]
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	1a9b      	subs	r3, r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	334d      	adds	r3, #77	@ 0x4d
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d143      	bne.n	8003fb0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	334d      	adds	r3, #77	@ 0x4d
 8003f38:	2202      	movs	r2, #2
 8003f3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	334c      	adds	r3, #76	@ 0x4c
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	3326      	adds	r3, #38	@ 0x26
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f66:	78fa      	ldrb	r2, [r7, #3]
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	1a9b      	subs	r3, r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	3326      	adds	r3, #38	@ 0x26
 8003f76:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d159      	bne.n	8004030 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f92:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f9a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fa8:	461a      	mov	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	e03f      	b.n	8004030 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	334d      	adds	r3, #77	@ 0x4d
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d126      	bne.n	8004014 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fc6:	78fa      	ldrb	r2, [r7, #3]
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	1a9b      	subs	r3, r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	334d      	adds	r3, #77	@ 0x4d
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	3344      	adds	r3, #68	@ 0x44
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	1c59      	adds	r1, r3, #1
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4403      	add	r3, r0
 8003ffa:	3344      	adds	r3, #68	@ 0x44
 8003ffc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ffe:	78fa      	ldrb	r2, [r7, #3]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	334c      	adds	r3, #76	@ 0x4c
 800400e:	2204      	movs	r2, #4
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	e00d      	b.n	8004030 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004014:	78fa      	ldrb	r2, [r7, #3]
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	334d      	adds	r3, #77	@ 0x4d
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b02      	cmp	r3, #2
 8004028:	f000 8100 	beq.w	800422c <HCD_HC_IN_IRQHandler+0xcca>
 800402c:	e000      	b.n	8004030 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800402e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004030:	78fa      	ldrb	r2, [r7, #3]
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	4613      	mov	r3, r2
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	334c      	adds	r3, #76	@ 0x4c
 8004040:	781a      	ldrb	r2, [r3, #0]
 8004042:	78fb      	ldrb	r3, [r7, #3]
 8004044:	4619      	mov	r1, r3
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f006 febe 	bl	800adc8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800404c:	e0ef      	b.n	800422e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	78fa      	ldrb	r2, [r7, #3]
 8004054:	4611      	mov	r1, r2
 8004056:	4618      	mov	r0, r3
 8004058:	f003 fdb9 	bl	8007bce <USB_ReadChInterrupts>
 800405c:	4603      	mov	r3, r0
 800405e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004062:	2b40      	cmp	r3, #64	@ 0x40
 8004064:	d12f      	bne.n	80040c6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004066:	78fb      	ldrb	r3, [r7, #3]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4413      	add	r3, r2
 800406e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004072:	461a      	mov	r2, r3
 8004074:	2340      	movs	r3, #64	@ 0x40
 8004076:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004078:	78fa      	ldrb	r2, [r7, #3]
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	4613      	mov	r3, r2
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	1a9b      	subs	r3, r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	334d      	adds	r3, #77	@ 0x4d
 8004088:	2205      	movs	r2, #5
 800408a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800408c:	78fa      	ldrb	r2, [r7, #3]
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	331a      	adds	r3, #26
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d109      	bne.n	80040b6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80040a2:	78fa      	ldrb	r2, [r7, #3]
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	3344      	adds	r3, #68	@ 0x44
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	78fa      	ldrb	r2, [r7, #3]
 80040bc:	4611      	mov	r1, r2
 80040be:	4618      	mov	r0, r3
 80040c0:	f004 fb29 	bl	8008716 <USB_HC_Halt>
 80040c4:	e0b3      	b.n	800422e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	78fa      	ldrb	r2, [r7, #3]
 80040cc:	4611      	mov	r1, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f003 fd7d 	bl	8007bce <USB_ReadChInterrupts>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	2b10      	cmp	r3, #16
 80040dc:	f040 80a7 	bne.w	800422e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80040e0:	78fa      	ldrb	r2, [r7, #3]
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	3326      	adds	r3, #38	@ 0x26
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b03      	cmp	r3, #3
 80040f4:	d11b      	bne.n	800412e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80040f6:	78fa      	ldrb	r2, [r7, #3]
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	3344      	adds	r3, #68	@ 0x44
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800410a:	78fa      	ldrb	r2, [r7, #3]
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	4613      	mov	r3, r2
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	1a9b      	subs	r3, r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	440b      	add	r3, r1
 8004118:	334d      	adds	r3, #77	@ 0x4d
 800411a:	2204      	movs	r2, #4
 800411c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	78fa      	ldrb	r2, [r7, #3]
 8004124:	4611      	mov	r1, r2
 8004126:	4618      	mov	r0, r3
 8004128:	f004 faf5 	bl	8008716 <USB_HC_Halt>
 800412c:	e03f      	b.n	80041ae <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	1a9b      	subs	r3, r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	3326      	adds	r3, #38	@ 0x26
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00a      	beq.n	800415a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004144:	78fa      	ldrb	r2, [r7, #3]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	3326      	adds	r3, #38	@ 0x26
 8004154:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004156:	2b02      	cmp	r3, #2
 8004158:	d129      	bne.n	80041ae <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800415a:	78fa      	ldrb	r2, [r7, #3]
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	3344      	adds	r3, #68	@ 0x44
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	799b      	ldrb	r3, [r3, #6]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <HCD_HC_IN_IRQHandler+0xc2a>
 8004176:	78fa      	ldrb	r2, [r7, #3]
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	1a9b      	subs	r3, r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	331b      	adds	r3, #27
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d110      	bne.n	80041ae <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800418c:	78fa      	ldrb	r2, [r7, #3]
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	4613      	mov	r3, r2
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	1a9b      	subs	r3, r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	334d      	adds	r3, #77	@ 0x4d
 800419c:	2204      	movs	r2, #4
 800419e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	4611      	mov	r1, r2
 80041a8:	4618      	mov	r0, r3
 80041aa:	f004 fab4 	bl	8008716 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	331b      	adds	r3, #27
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d129      	bne.n	8004218 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80041c4:	78fa      	ldrb	r2, [r7, #3]
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	331b      	adds	r3, #27
 80041d4:	2200      	movs	r2, #0
 80041d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	78fa      	ldrb	r2, [r7, #3]
 80041e8:	0151      	lsls	r1, r2, #5
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	440a      	add	r2, r1
 80041ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041f6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	78fa      	ldrb	r2, [r7, #3]
 8004208:	0151      	lsls	r1, r2, #5
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	440a      	add	r2, r1
 800420e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004212:	f043 0320 	orr.w	r3, r3, #32
 8004216:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4413      	add	r3, r2
 8004220:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004224:	461a      	mov	r2, r3
 8004226:	2310      	movs	r3, #16
 8004228:	6093      	str	r3, [r2, #8]
 800422a:	e000      	b.n	800422e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800422c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	4611      	mov	r1, r2
 8004252:	4618      	mov	r0, r3
 8004254:	f003 fcbb 	bl	8007bce <USB_ReadChInterrupts>
 8004258:	4603      	mov	r3, r0
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b04      	cmp	r3, #4
 8004260:	d11b      	bne.n	800429a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4413      	add	r3, r2
 800426a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800426e:	461a      	mov	r2, r3
 8004270:	2304      	movs	r3, #4
 8004272:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004274:	78fa      	ldrb	r2, [r7, #3]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	334d      	adds	r3, #77	@ 0x4d
 8004284:	2207      	movs	r2, #7
 8004286:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	4611      	mov	r1, r2
 8004290:	4618      	mov	r0, r3
 8004292:	f004 fa40 	bl	8008716 <USB_HC_Halt>
 8004296:	f000 bc89 	b.w	8004bac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	4611      	mov	r1, r2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f003 fc93 	bl	8007bce <USB_ReadChInterrupts>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	f040 8082 	bne.w	80043b8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042c0:	461a      	mov	r2, r3
 80042c2:	2320      	movs	r3, #32
 80042c4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80042c6:	78fa      	ldrb	r2, [r7, #3]
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	4613      	mov	r3, r2
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	1a9b      	subs	r3, r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	440b      	add	r3, r1
 80042d4:	3319      	adds	r3, #25
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d124      	bne.n	8004326 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80042dc:	78fa      	ldrb	r2, [r7, #3]
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	4613      	mov	r3, r2
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	440b      	add	r3, r1
 80042ea:	3319      	adds	r3, #25
 80042ec:	2200      	movs	r2, #0
 80042ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042f0:	78fa      	ldrb	r2, [r7, #3]
 80042f2:	6879      	ldr	r1, [r7, #4]
 80042f4:	4613      	mov	r3, r2
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	1a9b      	subs	r3, r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	334c      	adds	r3, #76	@ 0x4c
 8004300:	2202      	movs	r2, #2
 8004302:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004304:	78fa      	ldrb	r2, [r7, #3]
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	4613      	mov	r3, r2
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	1a9b      	subs	r3, r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	334d      	adds	r3, #77	@ 0x4d
 8004314:	2203      	movs	r2, #3
 8004316:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	78fa      	ldrb	r2, [r7, #3]
 800431e:	4611      	mov	r1, r2
 8004320:	4618      	mov	r0, r3
 8004322:	f004 f9f8 	bl	8008716 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004326:	78fa      	ldrb	r2, [r7, #3]
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	1a9b      	subs	r3, r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	440b      	add	r3, r1
 8004334:	331a      	adds	r3, #26
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b01      	cmp	r3, #1
 800433a:	f040 8437 	bne.w	8004bac <HCD_HC_OUT_IRQHandler+0x978>
 800433e:	78fa      	ldrb	r2, [r7, #3]
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	331b      	adds	r3, #27
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	f040 842b 	bne.w	8004bac <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004356:	78fa      	ldrb	r2, [r7, #3]
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	4613      	mov	r3, r2
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	1a9b      	subs	r3, r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	440b      	add	r3, r1
 8004364:	3326      	adds	r3, #38	@ 0x26
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d009      	beq.n	8004380 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800436c:	78fa      	ldrb	r2, [r7, #3]
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	331b      	adds	r3, #27
 800437c:	2201      	movs	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004380:	78fa      	ldrb	r2, [r7, #3]
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	4613      	mov	r3, r2
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	440b      	add	r3, r1
 800438e:	334d      	adds	r3, #77	@ 0x4d
 8004390:	2203      	movs	r2, #3
 8004392:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	4611      	mov	r1, r2
 800439c:	4618      	mov	r0, r3
 800439e:	f004 f9ba 	bl	8008716 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80043a2:	78fa      	ldrb	r2, [r7, #3]
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	3344      	adds	r3, #68	@ 0x44
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	e3f9      	b.n	8004bac <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	78fa      	ldrb	r2, [r7, #3]
 80043be:	4611      	mov	r1, r2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f003 fc04 	bl	8007bce <USB_ReadChInterrupts>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043d0:	d111      	bne.n	80043f6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80043d2:	78fb      	ldrb	r3, [r7, #3]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043de:	461a      	mov	r2, r3
 80043e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043e4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	78fa      	ldrb	r2, [r7, #3]
 80043ec:	4611      	mov	r1, r2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f004 f991 	bl	8008716 <USB_HC_Halt>
 80043f4:	e3da      	b.n	8004bac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	78fa      	ldrb	r2, [r7, #3]
 80043fc:	4611      	mov	r1, r2
 80043fe:	4618      	mov	r0, r3
 8004400:	f003 fbe5 	bl	8007bce <USB_ReadChInterrupts>
 8004404:	4603      	mov	r3, r0
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b01      	cmp	r3, #1
 800440c:	d168      	bne.n	80044e0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800440e:	78fa      	ldrb	r2, [r7, #3]
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	3344      	adds	r3, #68	@ 0x44
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	4611      	mov	r1, r2
 800442a:	4618      	mov	r0, r3
 800442c:	f003 fbcf 	bl	8007bce <USB_ReadChInterrupts>
 8004430:	4603      	mov	r3, r0
 8004432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004436:	2b40      	cmp	r3, #64	@ 0x40
 8004438:	d112      	bne.n	8004460 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800443a:	78fa      	ldrb	r2, [r7, #3]
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	4613      	mov	r3, r2
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	1a9b      	subs	r3, r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	3319      	adds	r3, #25
 800444a:	2201      	movs	r2, #1
 800444c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800444e:	78fb      	ldrb	r3, [r7, #3]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4413      	add	r3, r2
 8004456:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800445a:	461a      	mov	r2, r3
 800445c:	2340      	movs	r3, #64	@ 0x40
 800445e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004460:	78fa      	ldrb	r2, [r7, #3]
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	1a9b      	subs	r3, r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	331b      	adds	r3, #27
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d019      	beq.n	80044aa <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004476:	78fa      	ldrb	r2, [r7, #3]
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	4613      	mov	r3, r2
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	1a9b      	subs	r3, r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	440b      	add	r3, r1
 8004484:	331b      	adds	r3, #27
 8004486:	2200      	movs	r2, #0
 8004488:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800448a:	78fb      	ldrb	r3, [r7, #3]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4413      	add	r3, r2
 8004492:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	78fa      	ldrb	r2, [r7, #3]
 800449a:	0151      	lsls	r1, r2, #5
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	440a      	add	r2, r1
 80044a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044a8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80044aa:	78fb      	ldrb	r3, [r7, #3]
 80044ac:	015a      	lsls	r2, r3, #5
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044b6:	461a      	mov	r2, r3
 80044b8:	2301      	movs	r3, #1
 80044ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80044bc:	78fa      	ldrb	r2, [r7, #3]
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	334d      	adds	r3, #77	@ 0x4d
 80044cc:	2201      	movs	r2, #1
 80044ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	78fa      	ldrb	r2, [r7, #3]
 80044d6:	4611      	mov	r1, r2
 80044d8:	4618      	mov	r0, r3
 80044da:	f004 f91c 	bl	8008716 <USB_HC_Halt>
 80044de:	e365      	b.n	8004bac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	78fa      	ldrb	r2, [r7, #3]
 80044e6:	4611      	mov	r1, r2
 80044e8:	4618      	mov	r0, r3
 80044ea:	f003 fb70 	bl	8007bce <USB_ReadChInterrupts>
 80044ee:	4603      	mov	r3, r0
 80044f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f4:	2b40      	cmp	r3, #64	@ 0x40
 80044f6:	d139      	bne.n	800456c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80044f8:	78fa      	ldrb	r2, [r7, #3]
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	4613      	mov	r3, r2
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	334d      	adds	r3, #77	@ 0x4d
 8004508:	2205      	movs	r2, #5
 800450a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800450c:	78fa      	ldrb	r2, [r7, #3]
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	1a9b      	subs	r3, r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	331a      	adds	r3, #26
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d109      	bne.n	8004536 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004522:	78fa      	ldrb	r2, [r7, #3]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	1a9b      	subs	r3, r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	3319      	adds	r3, #25
 8004532:	2201      	movs	r2, #1
 8004534:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004536:	78fa      	ldrb	r2, [r7, #3]
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	1a9b      	subs	r3, r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	3344      	adds	r3, #68	@ 0x44
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	78fa      	ldrb	r2, [r7, #3]
 8004550:	4611      	mov	r1, r2
 8004552:	4618      	mov	r0, r3
 8004554:	f004 f8df 	bl	8008716 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004558:	78fb      	ldrb	r3, [r7, #3]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	4413      	add	r3, r2
 8004560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004564:	461a      	mov	r2, r3
 8004566:	2340      	movs	r3, #64	@ 0x40
 8004568:	6093      	str	r3, [r2, #8]
 800456a:	e31f      	b.n	8004bac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	78fa      	ldrb	r2, [r7, #3]
 8004572:	4611      	mov	r1, r2
 8004574:	4618      	mov	r0, r3
 8004576:	f003 fb2a 	bl	8007bce <USB_ReadChInterrupts>
 800457a:	4603      	mov	r3, r0
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b08      	cmp	r3, #8
 8004582:	d11a      	bne.n	80045ba <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	4413      	add	r3, r2
 800458c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004590:	461a      	mov	r2, r3
 8004592:	2308      	movs	r3, #8
 8004594:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	334d      	adds	r3, #77	@ 0x4d
 80045a6:	2206      	movs	r2, #6
 80045a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	78fa      	ldrb	r2, [r7, #3]
 80045b0:	4611      	mov	r1, r2
 80045b2:	4618      	mov	r0, r3
 80045b4:	f004 f8af 	bl	8008716 <USB_HC_Halt>
 80045b8:	e2f8      	b.n	8004bac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	78fa      	ldrb	r2, [r7, #3]
 80045c0:	4611      	mov	r1, r2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f003 fb03 	bl	8007bce <USB_ReadChInterrupts>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b10      	cmp	r3, #16
 80045d0:	d144      	bne.n	800465c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80045d2:	78fa      	ldrb	r2, [r7, #3]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	3344      	adds	r3, #68	@ 0x44
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80045e6:	78fa      	ldrb	r2, [r7, #3]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	334d      	adds	r3, #77	@ 0x4d
 80045f6:	2204      	movs	r2, #4
 80045f8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	3319      	adds	r3, #25
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d114      	bne.n	800463a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004610:	78fa      	ldrb	r2, [r7, #3]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	3318      	adds	r3, #24
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004626:	78fa      	ldrb	r2, [r7, #3]
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	4613      	mov	r3, r2
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	1a9b      	subs	r3, r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	3319      	adds	r3, #25
 8004636:	2201      	movs	r2, #1
 8004638:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	78fa      	ldrb	r2, [r7, #3]
 8004640:	4611      	mov	r1, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f004 f867 	bl	8008716 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	4413      	add	r3, r2
 8004650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004654:	461a      	mov	r2, r3
 8004656:	2310      	movs	r3, #16
 8004658:	6093      	str	r3, [r2, #8]
 800465a:	e2a7      	b.n	8004bac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	78fa      	ldrb	r2, [r7, #3]
 8004662:	4611      	mov	r1, r2
 8004664:	4618      	mov	r0, r3
 8004666:	f003 fab2 	bl	8007bce <USB_ReadChInterrupts>
 800466a:	4603      	mov	r3, r0
 800466c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004670:	2b80      	cmp	r3, #128	@ 0x80
 8004672:	f040 8083 	bne.w	800477c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	799b      	ldrb	r3, [r3, #6]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d111      	bne.n	80046a2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800467e:	78fa      	ldrb	r2, [r7, #3]
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	4613      	mov	r3, r2
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	1a9b      	subs	r3, r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	334d      	adds	r3, #77	@ 0x4d
 800468e:	2207      	movs	r2, #7
 8004690:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	78fa      	ldrb	r2, [r7, #3]
 8004698:	4611      	mov	r1, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f004 f83b 	bl	8008716 <USB_HC_Halt>
 80046a0:	e062      	b.n	8004768 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80046a2:	78fa      	ldrb	r2, [r7, #3]
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	4613      	mov	r3, r2
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	1a9b      	subs	r3, r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	3344      	adds	r3, #68	@ 0x44
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	1c59      	adds	r1, r3, #1
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4613      	mov	r3, r2
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	1a9b      	subs	r3, r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4403      	add	r3, r0
 80046c2:	3344      	adds	r3, #68	@ 0x44
 80046c4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	1a9b      	subs	r3, r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	3344      	adds	r3, #68	@ 0x44
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d922      	bls.n	8004722 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80046dc:	78fa      	ldrb	r2, [r7, #3]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	3344      	adds	r3, #68	@ 0x44
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80046f0:	78fa      	ldrb	r2, [r7, #3]
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	4613      	mov	r3, r2
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	1a9b      	subs	r3, r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	334c      	adds	r3, #76	@ 0x4c
 8004700:	2204      	movs	r2, #4
 8004702:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004704:	78fa      	ldrb	r2, [r7, #3]
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	4613      	mov	r3, r2
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	1a9b      	subs	r3, r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	440b      	add	r3, r1
 8004712:	334c      	adds	r3, #76	@ 0x4c
 8004714:	781a      	ldrb	r2, [r3, #0]
 8004716:	78fb      	ldrb	r3, [r7, #3]
 8004718:	4619      	mov	r1, r3
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f006 fb54 	bl	800adc8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004720:	e022      	b.n	8004768 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004722:	78fa      	ldrb	r2, [r7, #3]
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	1a9b      	subs	r3, r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	334c      	adds	r3, #76	@ 0x4c
 8004732:	2202      	movs	r2, #2
 8004734:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4413      	add	r3, r2
 800473e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800474c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004754:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004756:	78fb      	ldrb	r3, [r7, #3]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4413      	add	r3, r2
 800475e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004762:	461a      	mov	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	4413      	add	r3, r2
 8004770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004774:	461a      	mov	r2, r3
 8004776:	2380      	movs	r3, #128	@ 0x80
 8004778:	6093      	str	r3, [r2, #8]
 800477a:	e217      	b.n	8004bac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	78fa      	ldrb	r2, [r7, #3]
 8004782:	4611      	mov	r1, r2
 8004784:	4618      	mov	r0, r3
 8004786:	f003 fa22 	bl	8007bce <USB_ReadChInterrupts>
 800478a:	4603      	mov	r3, r0
 800478c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004790:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004794:	d11b      	bne.n	80047ce <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004796:	78fa      	ldrb	r2, [r7, #3]
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	1a9b      	subs	r3, r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	440b      	add	r3, r1
 80047a4:	334d      	adds	r3, #77	@ 0x4d
 80047a6:	2209      	movs	r2, #9
 80047a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	78fa      	ldrb	r2, [r7, #3]
 80047b0:	4611      	mov	r1, r2
 80047b2:	4618      	mov	r0, r3
 80047b4:	f003 ffaf 	bl	8008716 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047c4:	461a      	mov	r2, r3
 80047c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047ca:	6093      	str	r3, [r2, #8]
 80047cc:	e1ee      	b.n	8004bac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	78fa      	ldrb	r2, [r7, #3]
 80047d4:	4611      	mov	r1, r2
 80047d6:	4618      	mov	r0, r3
 80047d8:	f003 f9f9 	bl	8007bce <USB_ReadChInterrupts>
 80047dc:	4603      	mov	r3, r0
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	f040 81df 	bne.w	8004ba6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047f4:	461a      	mov	r2, r3
 80047f6:	2302      	movs	r3, #2
 80047f8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80047fa:	78fa      	ldrb	r2, [r7, #3]
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	334d      	adds	r3, #77	@ 0x4d
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b01      	cmp	r3, #1
 800480e:	f040 8093 	bne.w	8004938 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004812:	78fa      	ldrb	r2, [r7, #3]
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	334d      	adds	r3, #77	@ 0x4d
 8004822:	2202      	movs	r2, #2
 8004824:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004826:	78fa      	ldrb	r2, [r7, #3]
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	4613      	mov	r3, r2
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	1a9b      	subs	r3, r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	334c      	adds	r3, #76	@ 0x4c
 8004836:	2201      	movs	r2, #1
 8004838:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800483a:	78fa      	ldrb	r2, [r7, #3]
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	4613      	mov	r3, r2
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	1a9b      	subs	r3, r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	440b      	add	r3, r1
 8004848:	3326      	adds	r3, #38	@ 0x26
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b02      	cmp	r3, #2
 800484e:	d00b      	beq.n	8004868 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004850:	78fa      	ldrb	r2, [r7, #3]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	4613      	mov	r3, r2
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	1a9b      	subs	r3, r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	3326      	adds	r3, #38	@ 0x26
 8004860:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004862:	2b03      	cmp	r3, #3
 8004864:	f040 8190 	bne.w	8004b88 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	799b      	ldrb	r3, [r3, #6]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d115      	bne.n	800489c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004870:	78fa      	ldrb	r2, [r7, #3]
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	4613      	mov	r3, r2
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	333d      	adds	r3, #61	@ 0x3d
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	78fa      	ldrb	r2, [r7, #3]
 8004884:	f083 0301 	eor.w	r3, r3, #1
 8004888:	b2d8      	uxtb	r0, r3
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	1a9b      	subs	r3, r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	333d      	adds	r3, #61	@ 0x3d
 8004898:	4602      	mov	r2, r0
 800489a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	799b      	ldrb	r3, [r3, #6]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	f040 8171 	bne.w	8004b88 <HCD_HC_OUT_IRQHandler+0x954>
 80048a6:	78fa      	ldrb	r2, [r7, #3]
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	3334      	adds	r3, #52	@ 0x34
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 8165 	beq.w	8004b88 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80048be:	78fa      	ldrb	r2, [r7, #3]
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	1a9b      	subs	r3, r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	3334      	adds	r3, #52	@ 0x34
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	78fa      	ldrb	r2, [r7, #3]
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	1a9b      	subs	r3, r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4403      	add	r3, r0
 80048de:	3328      	adds	r3, #40	@ 0x28
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	440b      	add	r3, r1
 80048e4:	1e59      	subs	r1, r3, #1
 80048e6:	78fa      	ldrb	r2, [r7, #3]
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	4613      	mov	r3, r2
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4403      	add	r3, r0
 80048f4:	3328      	adds	r3, #40	@ 0x28
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80048fc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 813f 	beq.w	8004b88 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800490a:	78fa      	ldrb	r2, [r7, #3]
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	333d      	adds	r3, #61	@ 0x3d
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	78fa      	ldrb	r2, [r7, #3]
 800491e:	f083 0301 	eor.w	r3, r3, #1
 8004922:	b2d8      	uxtb	r0, r3
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	333d      	adds	r3, #61	@ 0x3d
 8004932:	4602      	mov	r2, r0
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	e127      	b.n	8004b88 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004938:	78fa      	ldrb	r2, [r7, #3]
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	4613      	mov	r3, r2
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	1a9b      	subs	r3, r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	334d      	adds	r3, #77	@ 0x4d
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b03      	cmp	r3, #3
 800494c:	d120      	bne.n	8004990 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800494e:	78fa      	ldrb	r2, [r7, #3]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	1a9b      	subs	r3, r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	440b      	add	r3, r1
 800495c:	334d      	adds	r3, #77	@ 0x4d
 800495e:	2202      	movs	r2, #2
 8004960:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004962:	78fa      	ldrb	r2, [r7, #3]
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	1a9b      	subs	r3, r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	331b      	adds	r3, #27
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b01      	cmp	r3, #1
 8004976:	f040 8107 	bne.w	8004b88 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800497a:	78fa      	ldrb	r2, [r7, #3]
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	4613      	mov	r3, r2
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	1a9b      	subs	r3, r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	440b      	add	r3, r1
 8004988:	334c      	adds	r3, #76	@ 0x4c
 800498a:	2202      	movs	r2, #2
 800498c:	701a      	strb	r2, [r3, #0]
 800498e:	e0fb      	b.n	8004b88 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004990:	78fa      	ldrb	r2, [r7, #3]
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	4613      	mov	r3, r2
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	334d      	adds	r3, #77	@ 0x4d
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d13a      	bne.n	8004a1c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049a6:	78fa      	ldrb	r2, [r7, #3]
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	1a9b      	subs	r3, r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	440b      	add	r3, r1
 80049b4:	334d      	adds	r3, #77	@ 0x4d
 80049b6:	2202      	movs	r2, #2
 80049b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049ba:	78fa      	ldrb	r2, [r7, #3]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	334c      	adds	r3, #76	@ 0x4c
 80049ca:	2202      	movs	r2, #2
 80049cc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80049ce:	78fa      	ldrb	r2, [r7, #3]
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	1a9b      	subs	r3, r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	440b      	add	r3, r1
 80049dc:	331b      	adds	r3, #27
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	f040 80d1 	bne.w	8004b88 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	440b      	add	r3, r1
 80049f4:	331b      	adds	r3, #27
 80049f6:	2200      	movs	r2, #0
 80049f8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	78fa      	ldrb	r2, [r7, #3]
 8004a0a:	0151      	lsls	r1, r2, #5
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	440a      	add	r2, r1
 8004a10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a18:	6053      	str	r3, [r2, #4]
 8004a1a:	e0b5      	b.n	8004b88 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004a1c:	78fa      	ldrb	r2, [r7, #3]
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	4613      	mov	r3, r2
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	1a9b      	subs	r3, r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	440b      	add	r3, r1
 8004a2a:	334d      	adds	r3, #77	@ 0x4d
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	2b05      	cmp	r3, #5
 8004a30:	d114      	bne.n	8004a5c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a32:	78fa      	ldrb	r2, [r7, #3]
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	1a9b      	subs	r3, r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	334d      	adds	r3, #77	@ 0x4d
 8004a42:	2202      	movs	r2, #2
 8004a44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004a46:	78fa      	ldrb	r2, [r7, #3]
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	334c      	adds	r3, #76	@ 0x4c
 8004a56:	2202      	movs	r2, #2
 8004a58:	701a      	strb	r2, [r3, #0]
 8004a5a:	e095      	b.n	8004b88 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004a5c:	78fa      	ldrb	r2, [r7, #3]
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	4613      	mov	r3, r2
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	1a9b      	subs	r3, r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	334d      	adds	r3, #77	@ 0x4d
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b06      	cmp	r3, #6
 8004a70:	d114      	bne.n	8004a9c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a72:	78fa      	ldrb	r2, [r7, #3]
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	334d      	adds	r3, #77	@ 0x4d
 8004a82:	2202      	movs	r2, #2
 8004a84:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004a86:	78fa      	ldrb	r2, [r7, #3]
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	1a9b      	subs	r3, r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	440b      	add	r3, r1
 8004a94:	334c      	adds	r3, #76	@ 0x4c
 8004a96:	2205      	movs	r2, #5
 8004a98:	701a      	strb	r2, [r3, #0]
 8004a9a:	e075      	b.n	8004b88 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a9c:	78fa      	ldrb	r2, [r7, #3]
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	334d      	adds	r3, #77	@ 0x4d
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b07      	cmp	r3, #7
 8004ab0:	d00a      	beq.n	8004ac8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004ab2:	78fa      	ldrb	r2, [r7, #3]
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	334d      	adds	r3, #77	@ 0x4d
 8004ac2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004ac4:	2b09      	cmp	r3, #9
 8004ac6:	d170      	bne.n	8004baa <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ac8:	78fa      	ldrb	r2, [r7, #3]
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	334d      	adds	r3, #77	@ 0x4d
 8004ad8:	2202      	movs	r2, #2
 8004ada:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004adc:	78fa      	ldrb	r2, [r7, #3]
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	440b      	add	r3, r1
 8004aea:	3344      	adds	r3, #68	@ 0x44
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	1c59      	adds	r1, r3, #1
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	1a9b      	subs	r3, r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4403      	add	r3, r0
 8004afc:	3344      	adds	r3, #68	@ 0x44
 8004afe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b00:	78fa      	ldrb	r2, [r7, #3]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	3344      	adds	r3, #68	@ 0x44
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d914      	bls.n	8004b40 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004b16:	78fa      	ldrb	r2, [r7, #3]
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	3344      	adds	r3, #68	@ 0x44
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b2a:	78fa      	ldrb	r2, [r7, #3]
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	440b      	add	r3, r1
 8004b38:	334c      	adds	r3, #76	@ 0x4c
 8004b3a:	2204      	movs	r2, #4
 8004b3c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b3e:	e022      	b.n	8004b86 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b40:	78fa      	ldrb	r2, [r7, #3]
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	4613      	mov	r3, r2
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	1a9b      	subs	r3, r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	334c      	adds	r3, #76	@ 0x4c
 8004b50:	2202      	movs	r2, #2
 8004b52:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b6a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b72:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b74:	78fb      	ldrb	r3, [r7, #3]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b80:	461a      	mov	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b86:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b88:	78fa      	ldrb	r2, [r7, #3]
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	1a9b      	subs	r3, r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	334c      	adds	r3, #76	@ 0x4c
 8004b98:	781a      	ldrb	r2, [r3, #0]
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f006 f912 	bl	800adc8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004ba4:	e002      	b.n	8004bac <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004ba6:	bf00      	nop
 8004ba8:	e000      	b.n	8004bac <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004baa:	bf00      	nop
  }
}
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b08a      	sub	sp, #40	@ 0x28
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	0c5b      	lsrs	r3, r3, #17
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	091b      	lsrs	r3, r3, #4
 8004be2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004be6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d004      	beq.n	8004bf8 <HCD_RXQLVL_IRQHandler+0x46>
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b05      	cmp	r3, #5
 8004bf2:	f000 80b6 	beq.w	8004d62 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004bf6:	e0b7      	b.n	8004d68 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 80b3 	beq.w	8004d66 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	4613      	mov	r3, r2
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	1a9b      	subs	r3, r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	332c      	adds	r3, #44	@ 0x2c
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 80a7 	beq.w	8004d66 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	1a9b      	subs	r3, r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	3338      	adds	r3, #56	@ 0x38
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	18d1      	adds	r1, r2, r3
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4613      	mov	r3, r2
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	1a9b      	subs	r3, r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4403      	add	r3, r0
 8004c3c:	3334      	adds	r3, #52	@ 0x34
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4299      	cmp	r1, r3
 8004c42:	f200 8083 	bhi.w	8004d4c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	1a9b      	subs	r3, r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	332c      	adds	r3, #44	@ 0x2c
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	b292      	uxth	r2, r2
 8004c60:	4619      	mov	r1, r3
 8004c62:	f002 ff49 	bl	8007af8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	332c      	adds	r3, #44	@ 0x2c
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	18d1      	adds	r1, r2, r3
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	4613      	mov	r3, r2
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4403      	add	r3, r0
 8004c8a:	332c      	adds	r3, #44	@ 0x2c
 8004c8c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	4613      	mov	r3, r2
 8004c94:	011b      	lsls	r3, r3, #4
 8004c96:	1a9b      	subs	r3, r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	440b      	add	r3, r1
 8004c9c:	3338      	adds	r3, #56	@ 0x38
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	18d1      	adds	r1, r2, r3
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	1a9b      	subs	r3, r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4403      	add	r3, r0
 8004cb2:	3338      	adds	r3, #56	@ 0x38
 8004cb4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	0cdb      	lsrs	r3, r3, #19
 8004cc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cca:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	1a9b      	subs	r3, r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	3328      	adds	r3, #40	@ 0x28
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d13f      	bne.n	8004d66 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d03c      	beq.n	8004d66 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d02:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d0a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d18:	461a      	mov	r2, r3
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	4613      	mov	r3, r2
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	333c      	adds	r3, #60	@ 0x3c
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	f083 0301 	eor.w	r3, r3, #1
 8004d34:	b2d8      	uxtb	r0, r3
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	333c      	adds	r3, #60	@ 0x3c
 8004d46:	4602      	mov	r2, r0
 8004d48:	701a      	strb	r2, [r3, #0]
      break;
 8004d4a:	e00c      	b.n	8004d66 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	4613      	mov	r3, r2
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	334c      	adds	r3, #76	@ 0x4c
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	701a      	strb	r2, [r3, #0]
      break;
 8004d60:	e001      	b.n	8004d66 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004d62:	bf00      	nop
 8004d64:	e000      	b.n	8004d68 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004d66:	bf00      	nop
  }
}
 8004d68:	bf00      	nop
 8004d6a:	3728      	adds	r7, #40	@ 0x28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004d9c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d10b      	bne.n	8004dc0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d102      	bne.n	8004db8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f005 ffec 	bl	800ad90 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f043 0302 	orr.w	r3, r3, #2
 8004dbe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d132      	bne.n	8004e30 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f043 0308 	orr.w	r3, r3, #8
 8004dd0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d126      	bne.n	8004e2a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	7a5b      	ldrb	r3, [r3, #9]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d113      	bne.n	8004e0c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004dea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004dee:	d106      	bne.n	8004dfe <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2102      	movs	r1, #2
 8004df6:	4618      	mov	r0, r3
 8004df8:	f003 f80e 	bl	8007e18 <USB_InitFSLSPClkSel>
 8004dfc:	e011      	b.n	8004e22 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2101      	movs	r1, #1
 8004e04:	4618      	mov	r0, r3
 8004e06:	f003 f807 	bl	8007e18 <USB_InitFSLSPClkSel>
 8004e0a:	e00a      	b.n	8004e22 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	79db      	ldrb	r3, [r3, #7]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d106      	bne.n	8004e22 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004e20:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f005 ffde 	bl	800ade4 <HAL_HCD_PortEnabled_Callback>
 8004e28:	e002      	b.n	8004e30 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f005 ffe8 	bl	800ae00 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b20      	cmp	r3, #32
 8004e38:	d103      	bne.n	8004e42 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f043 0320 	orr.w	r3, r3, #32
 8004e40:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004e48:	461a      	mov	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	6013      	str	r3, [r2, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e12b      	b.n	80050c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d106      	bne.n	8004e84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fc ffc8 	bl	8001e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2224      	movs	r2, #36	@ 0x24
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0201 	bic.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004eaa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004eba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ebc:	f001 fa20 	bl	8006300 <HAL_RCC_GetPCLK1Freq>
 8004ec0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	4a81      	ldr	r2, [pc, #516]	@ (80050cc <HAL_I2C_Init+0x274>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d807      	bhi.n	8004edc <HAL_I2C_Init+0x84>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4a80      	ldr	r2, [pc, #512]	@ (80050d0 <HAL_I2C_Init+0x278>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	bf94      	ite	ls
 8004ed4:	2301      	movls	r3, #1
 8004ed6:	2300      	movhi	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	e006      	b.n	8004eea <HAL_I2C_Init+0x92>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4a7d      	ldr	r2, [pc, #500]	@ (80050d4 <HAL_I2C_Init+0x27c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	bf94      	ite	ls
 8004ee4:	2301      	movls	r3, #1
 8004ee6:	2300      	movhi	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e0e7      	b.n	80050c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4a78      	ldr	r2, [pc, #480]	@ (80050d8 <HAL_I2C_Init+0x280>)
 8004ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8004efa:	0c9b      	lsrs	r3, r3, #18
 8004efc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	4a6a      	ldr	r2, [pc, #424]	@ (80050cc <HAL_I2C_Init+0x274>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d802      	bhi.n	8004f2c <HAL_I2C_Init+0xd4>
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	e009      	b.n	8004f40 <HAL_I2C_Init+0xe8>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004f32:	fb02 f303 	mul.w	r3, r2, r3
 8004f36:	4a69      	ldr	r2, [pc, #420]	@ (80050dc <HAL_I2C_Init+0x284>)
 8004f38:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3c:	099b      	lsrs	r3, r3, #6
 8004f3e:	3301      	adds	r3, #1
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	430b      	orrs	r3, r1
 8004f46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004f52:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	495c      	ldr	r1, [pc, #368]	@ (80050cc <HAL_I2C_Init+0x274>)
 8004f5c:	428b      	cmp	r3, r1
 8004f5e:	d819      	bhi.n	8004f94 <HAL_I2C_Init+0x13c>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	1e59      	subs	r1, r3, #1
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f6e:	1c59      	adds	r1, r3, #1
 8004f70:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004f74:	400b      	ands	r3, r1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <HAL_I2C_Init+0x138>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	1e59      	subs	r1, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f88:	3301      	adds	r3, #1
 8004f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f8e:	e051      	b.n	8005034 <HAL_I2C_Init+0x1dc>
 8004f90:	2304      	movs	r3, #4
 8004f92:	e04f      	b.n	8005034 <HAL_I2C_Init+0x1dc>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d111      	bne.n	8004fc0 <HAL_I2C_Init+0x168>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	1e58      	subs	r0, r3, #1
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6859      	ldr	r1, [r3, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	440b      	add	r3, r1
 8004faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fae:	3301      	adds	r3, #1
 8004fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	bf0c      	ite	eq
 8004fb8:	2301      	moveq	r3, #1
 8004fba:	2300      	movne	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	e012      	b.n	8004fe6 <HAL_I2C_Init+0x18e>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	1e58      	subs	r0, r3, #1
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6859      	ldr	r1, [r3, #4]
 8004fc8:	460b      	mov	r3, r1
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	0099      	lsls	r1, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	bf0c      	ite	eq
 8004fe0:	2301      	moveq	r3, #1
 8004fe2:	2300      	movne	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <HAL_I2C_Init+0x196>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e022      	b.n	8005034 <HAL_I2C_Init+0x1dc>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10e      	bne.n	8005014 <HAL_I2C_Init+0x1bc>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	1e58      	subs	r0, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6859      	ldr	r1, [r3, #4]
 8004ffe:	460b      	mov	r3, r1
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	440b      	add	r3, r1
 8005004:	fbb0 f3f3 	udiv	r3, r0, r3
 8005008:	3301      	adds	r3, #1
 800500a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800500e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005012:	e00f      	b.n	8005034 <HAL_I2C_Init+0x1dc>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	1e58      	subs	r0, r3, #1
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6859      	ldr	r1, [r3, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	0099      	lsls	r1, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	fbb0 f3f3 	udiv	r3, r0, r3
 800502a:	3301      	adds	r3, #1
 800502c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005030:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	6809      	ldr	r1, [r1, #0]
 8005038:	4313      	orrs	r3, r2
 800503a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69da      	ldr	r2, [r3, #28]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005062:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6911      	ldr	r1, [r2, #16]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	68d2      	ldr	r2, [r2, #12]
 800506e:	4311      	orrs	r1, r2
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6812      	ldr	r2, [r2, #0]
 8005074:	430b      	orrs	r3, r1
 8005076:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695a      	ldr	r2, [r3, #20]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0201 	orr.w	r2, r2, #1
 80050a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	000186a0 	.word	0x000186a0
 80050d0:	001e847f 	.word	0x001e847f
 80050d4:	003d08ff 	.word	0x003d08ff
 80050d8:	431bde83 	.word	0x431bde83
 80050dc:	10624dd3 	.word	0x10624dd3

080050e0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e128      	b.n	8005344 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d109      	bne.n	8005112 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a90      	ldr	r2, [pc, #576]	@ (800534c <HAL_I2S_Init+0x26c>)
 800510a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7fc fec9 	bl	8001ea4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2202      	movs	r2, #2
 8005116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6812      	ldr	r2, [r2, #0]
 8005124:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005128:	f023 030f 	bic.w	r3, r3, #15
 800512c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2202      	movs	r2, #2
 8005134:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	2b02      	cmp	r3, #2
 800513c:	d060      	beq.n	8005200 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d102      	bne.n	800514c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005146:	2310      	movs	r3, #16
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	e001      	b.n	8005150 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800514c:	2320      	movs	r3, #32
 800514e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2b20      	cmp	r3, #32
 8005156:	d802      	bhi.n	800515e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800515e:	2001      	movs	r0, #1
 8005160:	f001 f9d8 	bl	8006514 <HAL_RCCEx_GetPeriphCLKFreq>
 8005164:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800516e:	d125      	bne.n	80051bc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d010      	beq.n	800519a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005182:	4613      	mov	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	461a      	mov	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	fbb2 f3f3 	udiv	r3, r2, r3
 8005194:	3305      	adds	r3, #5
 8005196:	613b      	str	r3, [r7, #16]
 8005198:	e01f      	b.n	80051da <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	461a      	mov	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b6:	3305      	adds	r3, #5
 80051b8:	613b      	str	r3, [r7, #16]
 80051ba:	e00e      	b.n	80051da <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80051c4:	4613      	mov	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	461a      	mov	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d6:	3305      	adds	r3, #5
 80051d8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	4a5c      	ldr	r2, [pc, #368]	@ (8005350 <HAL_I2S_Init+0x270>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	08db      	lsrs	r3, r3, #3
 80051e4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	085b      	lsrs	r3, r3, #1
 80051f6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	021b      	lsls	r3, r3, #8
 80051fc:	61bb      	str	r3, [r7, #24]
 80051fe:	e003      	b.n	8005208 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005200:	2302      	movs	r3, #2
 8005202:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d902      	bls.n	8005214 <HAL_I2S_Init+0x134>
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	2bff      	cmp	r3, #255	@ 0xff
 8005212:	d907      	bls.n	8005224 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005218:	f043 0210 	orr.w	r2, r3, #16
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e08f      	b.n	8005344 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	ea42 0103 	orr.w	r1, r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	430a      	orrs	r2, r1
 8005236:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005242:	f023 030f 	bic.w	r3, r3, #15
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6851      	ldr	r1, [r2, #4]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6892      	ldr	r2, [r2, #8]
 800524e:	4311      	orrs	r1, r2
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	68d2      	ldr	r2, [r2, #12]
 8005254:	4311      	orrs	r1, r2
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6992      	ldr	r2, [r2, #24]
 800525a:	430a      	orrs	r2, r1
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005266:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d161      	bne.n	8005334 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a38      	ldr	r2, [pc, #224]	@ (8005354 <HAL_I2S_Init+0x274>)
 8005274:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a37      	ldr	r2, [pc, #220]	@ (8005358 <HAL_I2S_Init+0x278>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d101      	bne.n	8005284 <HAL_I2S_Init+0x1a4>
 8005280:	4b36      	ldr	r3, [pc, #216]	@ (800535c <HAL_I2S_Init+0x27c>)
 8005282:	e001      	b.n	8005288 <HAL_I2S_Init+0x1a8>
 8005284:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6812      	ldr	r2, [r2, #0]
 800528e:	4932      	ldr	r1, [pc, #200]	@ (8005358 <HAL_I2S_Init+0x278>)
 8005290:	428a      	cmp	r2, r1
 8005292:	d101      	bne.n	8005298 <HAL_I2S_Init+0x1b8>
 8005294:	4a31      	ldr	r2, [pc, #196]	@ (800535c <HAL_I2S_Init+0x27c>)
 8005296:	e001      	b.n	800529c <HAL_I2S_Init+0x1bc>
 8005298:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800529c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80052a0:	f023 030f 	bic.w	r3, r3, #15
 80052a4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005358 <HAL_I2S_Init+0x278>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d101      	bne.n	80052b4 <HAL_I2S_Init+0x1d4>
 80052b0:	4b2a      	ldr	r3, [pc, #168]	@ (800535c <HAL_I2S_Init+0x27c>)
 80052b2:	e001      	b.n	80052b8 <HAL_I2S_Init+0x1d8>
 80052b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052b8:	2202      	movs	r2, #2
 80052ba:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a25      	ldr	r2, [pc, #148]	@ (8005358 <HAL_I2S_Init+0x278>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d101      	bne.n	80052ca <HAL_I2S_Init+0x1ea>
 80052c6:	4b25      	ldr	r3, [pc, #148]	@ (800535c <HAL_I2S_Init+0x27c>)
 80052c8:	e001      	b.n	80052ce <HAL_I2S_Init+0x1ee>
 80052ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052da:	d003      	beq.n	80052e4 <HAL_I2S_Init+0x204>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d103      	bne.n	80052ec <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80052e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80052e8:	613b      	str	r3, [r7, #16]
 80052ea:	e001      	b.n	80052f0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80052ec:	2300      	movs	r3, #0
 80052ee:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80052fa:	4313      	orrs	r3, r2
 80052fc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005304:	4313      	orrs	r3, r2
 8005306:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800530e:	4313      	orrs	r3, r2
 8005310:	b29a      	uxth	r2, r3
 8005312:	897b      	ldrh	r3, [r7, #10]
 8005314:	4313      	orrs	r3, r2
 8005316:	b29b      	uxth	r3, r3
 8005318:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800531c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a0d      	ldr	r2, [pc, #52]	@ (8005358 <HAL_I2S_Init+0x278>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d101      	bne.n	800532c <HAL_I2S_Init+0x24c>
 8005328:	4b0c      	ldr	r3, [pc, #48]	@ (800535c <HAL_I2S_Init+0x27c>)
 800532a:	e001      	b.n	8005330 <HAL_I2S_Init+0x250>
 800532c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005330:	897a      	ldrh	r2, [r7, #10]
 8005332:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3720      	adds	r7, #32
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	08005457 	.word	0x08005457
 8005350:	cccccccd 	.word	0xcccccccd
 8005354:	0800556d 	.word	0x0800556d
 8005358:	40003800 	.word	0x40003800
 800535c:	40003400 	.word	0x40003400

08005360 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a8:	881a      	ldrh	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b4:	1c9a      	adds	r2, r3, #2
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053be:	b29b      	uxth	r3, r3
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10e      	bne.n	80053f0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80053e0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7ff ffb8 	bl	8005360 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80053f0:	bf00      	nop
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540a:	b292      	uxth	r2, r2
 800540c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005412:	1c9a      	adds	r2, r3, #2
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800541c:	b29b      	uxth	r3, r3
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10e      	bne.n	800544e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800543e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7ff ff93 	bl	8005374 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800544e:	bf00      	nop
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b086      	sub	sp, #24
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b04      	cmp	r3, #4
 8005470:	d13a      	bne.n	80054e8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b01      	cmp	r3, #1
 800547a:	d109      	bne.n	8005490 <I2S_IRQHandler+0x3a>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005486:	2b40      	cmp	r3, #64	@ 0x40
 8005488:	d102      	bne.n	8005490 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff ffb4 	bl	80053f8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005496:	2b40      	cmp	r3, #64	@ 0x40
 8005498:	d126      	bne.n	80054e8 <I2S_IRQHandler+0x92>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	2b20      	cmp	r3, #32
 80054a6:	d11f      	bne.n	80054e8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80054b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80054b8:	2300      	movs	r3, #0
 80054ba:	613b      	str	r3, [r7, #16]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054da:	f043 0202 	orr.w	r2, r3, #2
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff ff50 	bl	8005388 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d136      	bne.n	8005562 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d109      	bne.n	8005512 <I2S_IRQHandler+0xbc>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005508:	2b80      	cmp	r3, #128	@ 0x80
 800550a:	d102      	bne.n	8005512 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff ff45 	bl	800539c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	2b08      	cmp	r3, #8
 800551a:	d122      	bne.n	8005562 <I2S_IRQHandler+0x10c>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b20      	cmp	r3, #32
 8005528:	d11b      	bne.n	8005562 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005538:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	60fb      	str	r3, [r7, #12]
 8005546:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005554:	f043 0204 	orr.w	r2, r3, #4
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff ff13 	bl	8005388 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005562:	bf00      	nop
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
	...

0800556c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a92      	ldr	r2, [pc, #584]	@ (80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d101      	bne.n	800558a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005586:	4b92      	ldr	r3, [pc, #584]	@ (80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005588:	e001      	b.n	800558e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800558a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a8b      	ldr	r2, [pc, #556]	@ (80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d101      	bne.n	80055a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80055a4:	4b8a      	ldr	r3, [pc, #552]	@ (80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055a6:	e001      	b.n	80055ac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80055a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055b8:	d004      	beq.n	80055c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f040 8099 	bne.w	80056f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d107      	bne.n	80055de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f925 	bl	8005828 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d107      	bne.n	80055f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f9c8 	bl	8005988 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055fe:	2b40      	cmp	r3, #64	@ 0x40
 8005600:	d13a      	bne.n	8005678 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f003 0320 	and.w	r3, r3, #32
 8005608:	2b00      	cmp	r3, #0
 800560a:	d035      	beq.n	8005678 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a6e      	ldr	r2, [pc, #440]	@ (80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d101      	bne.n	800561a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005616:	4b6e      	ldr	r3, [pc, #440]	@ (80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005618:	e001      	b.n	800561e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800561a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4969      	ldr	r1, [pc, #420]	@ (80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005626:	428b      	cmp	r3, r1
 8005628:	d101      	bne.n	800562e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800562a:	4b69      	ldr	r3, [pc, #420]	@ (80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800562c:	e001      	b.n	8005632 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800562e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005632:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005636:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005646:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800566a:	f043 0202 	orr.w	r2, r3, #2
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff fe88 	bl	8005388 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	f003 0308 	and.w	r3, r3, #8
 800567e:	2b08      	cmp	r3, #8
 8005680:	f040 80c3 	bne.w	800580a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 80bd 	beq.w	800580a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800569e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a49      	ldr	r2, [pc, #292]	@ (80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d101      	bne.n	80056ae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80056aa:	4b49      	ldr	r3, [pc, #292]	@ (80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056ac:	e001      	b.n	80056b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80056ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4944      	ldr	r1, [pc, #272]	@ (80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056ba:	428b      	cmp	r3, r1
 80056bc:	d101      	bne.n	80056c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80056be:	4b44      	ldr	r3, [pc, #272]	@ (80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056c0:	e001      	b.n	80056c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80056c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056c6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80056ca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80056cc:	2300      	movs	r3, #0
 80056ce:	60bb      	str	r3, [r7, #8]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	60bb      	str	r3, [r7, #8]
 80056d8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e6:	f043 0204 	orr.w	r2, r3, #4
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7ff fe4a 	bl	8005388 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80056f4:	e089      	b.n	800580a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d107      	bne.n	8005710 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f8be 	bl	800588c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b01      	cmp	r3, #1
 8005718:	d107      	bne.n	800572a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f8fd 	bl	8005924 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005730:	2b40      	cmp	r3, #64	@ 0x40
 8005732:	d12f      	bne.n	8005794 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f003 0320 	and.w	r3, r3, #32
 800573a:	2b00      	cmp	r3, #0
 800573c:	d02a      	beq.n	8005794 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800574c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a1e      	ldr	r2, [pc, #120]	@ (80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d101      	bne.n	800575c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005758:	4b1d      	ldr	r3, [pc, #116]	@ (80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800575a:	e001      	b.n	8005760 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800575c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4919      	ldr	r1, [pc, #100]	@ (80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005768:	428b      	cmp	r3, r1
 800576a:	d101      	bne.n	8005770 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800576c:	4b18      	ldr	r3, [pc, #96]	@ (80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800576e:	e001      	b.n	8005774 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005770:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005774:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005778:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005786:	f043 0202 	orr.w	r2, r3, #2
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff fdfa 	bl	8005388 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	f003 0308 	and.w	r3, r3, #8
 800579a:	2b08      	cmp	r3, #8
 800579c:	d136      	bne.n	800580c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d031      	beq.n	800580c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a07      	ldr	r2, [pc, #28]	@ (80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d101      	bne.n	80057b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80057b2:	4b07      	ldr	r3, [pc, #28]	@ (80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057b4:	e001      	b.n	80057ba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80057b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4902      	ldr	r1, [pc, #8]	@ (80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057c2:	428b      	cmp	r3, r1
 80057c4:	d106      	bne.n	80057d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80057c6:	4b02      	ldr	r3, [pc, #8]	@ (80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057c8:	e006      	b.n	80057d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80057ca:	bf00      	nop
 80057cc:	40003800 	.word	0x40003800
 80057d0:	40003400 	.word	0x40003400
 80057d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80057dc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80057ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fa:	f043 0204 	orr.w	r2, r3, #4
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7ff fdc0 	bl	8005388 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005808:	e000      	b.n	800580c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800580a:	bf00      	nop
}
 800580c:	bf00      	nop
 800580e:	3720      	adds	r7, #32
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005834:	1c99      	adds	r1, r3, #2
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6251      	str	r1, [r2, #36]	@ 0x24
 800583a:	881a      	ldrh	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005846:	b29b      	uxth	r3, r3
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005854:	b29b      	uxth	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d113      	bne.n	8005882 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005868:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800586e:	b29b      	uxth	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d106      	bne.n	8005882 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7ff ffc9 	bl	8005814 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005882:	bf00      	nop
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005898:	1c99      	adds	r1, r3, #2
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6251      	str	r1, [r2, #36]	@ 0x24
 800589e:	8819      	ldrh	r1, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a1d      	ldr	r2, [pc, #116]	@ (800591c <I2SEx_TxISR_I2SExt+0x90>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d101      	bne.n	80058ae <I2SEx_TxISR_I2SExt+0x22>
 80058aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005920 <I2SEx_TxISR_I2SExt+0x94>)
 80058ac:	e001      	b.n	80058b2 <I2SEx_TxISR_I2SExt+0x26>
 80058ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058b2:	460a      	mov	r2, r1
 80058b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	3b01      	subs	r3, #1
 80058be:	b29a      	uxth	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d121      	bne.n	8005912 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a12      	ldr	r2, [pc, #72]	@ (800591c <I2SEx_TxISR_I2SExt+0x90>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d101      	bne.n	80058dc <I2SEx_TxISR_I2SExt+0x50>
 80058d8:	4b11      	ldr	r3, [pc, #68]	@ (8005920 <I2SEx_TxISR_I2SExt+0x94>)
 80058da:	e001      	b.n	80058e0 <I2SEx_TxISR_I2SExt+0x54>
 80058dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	490d      	ldr	r1, [pc, #52]	@ (800591c <I2SEx_TxISR_I2SExt+0x90>)
 80058e8:	428b      	cmp	r3, r1
 80058ea:	d101      	bne.n	80058f0 <I2SEx_TxISR_I2SExt+0x64>
 80058ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005920 <I2SEx_TxISR_I2SExt+0x94>)
 80058ee:	e001      	b.n	80058f4 <I2SEx_TxISR_I2SExt+0x68>
 80058f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058f4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80058f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80058fe:	b29b      	uxth	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d106      	bne.n	8005912 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff ff81 	bl	8005814 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005912:	bf00      	nop
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	40003800 	.word	0x40003800
 8005920:	40003400 	.word	0x40003400

08005924 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68d8      	ldr	r0, [r3, #12]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005936:	1c99      	adds	r1, r3, #2
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800593c:	b282      	uxth	r2, r0
 800593e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005944:	b29b      	uxth	r3, r3
 8005946:	3b01      	subs	r3, #1
 8005948:	b29a      	uxth	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005952:	b29b      	uxth	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d113      	bne.n	8005980 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005966:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7ff ff4a 	bl	8005814 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005980:	bf00      	nop
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a20      	ldr	r2, [pc, #128]	@ (8005a18 <I2SEx_RxISR_I2SExt+0x90>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d101      	bne.n	800599e <I2SEx_RxISR_I2SExt+0x16>
 800599a:	4b20      	ldr	r3, [pc, #128]	@ (8005a1c <I2SEx_RxISR_I2SExt+0x94>)
 800599c:	e001      	b.n	80059a2 <I2SEx_RxISR_I2SExt+0x1a>
 800599e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059a2:	68d8      	ldr	r0, [r3, #12]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a8:	1c99      	adds	r1, r3, #2
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80059ae:	b282      	uxth	r2, r0
 80059b0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d121      	bne.n	8005a0e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a12      	ldr	r2, [pc, #72]	@ (8005a18 <I2SEx_RxISR_I2SExt+0x90>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d101      	bne.n	80059d8 <I2SEx_RxISR_I2SExt+0x50>
 80059d4:	4b11      	ldr	r3, [pc, #68]	@ (8005a1c <I2SEx_RxISR_I2SExt+0x94>)
 80059d6:	e001      	b.n	80059dc <I2SEx_RxISR_I2SExt+0x54>
 80059d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	490d      	ldr	r1, [pc, #52]	@ (8005a18 <I2SEx_RxISR_I2SExt+0x90>)
 80059e4:	428b      	cmp	r3, r1
 80059e6:	d101      	bne.n	80059ec <I2SEx_RxISR_I2SExt+0x64>
 80059e8:	4b0c      	ldr	r3, [pc, #48]	@ (8005a1c <I2SEx_RxISR_I2SExt+0x94>)
 80059ea:	e001      	b.n	80059f0 <I2SEx_RxISR_I2SExt+0x68>
 80059ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80059f4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d106      	bne.n	8005a0e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff ff03 	bl	8005814 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a0e:	bf00      	nop
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	40003800 	.word	0x40003800
 8005a1c:	40003400 	.word	0x40003400

08005a20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e267      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d075      	beq.n	8005b2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005a3e:	4b88      	ldr	r3, [pc, #544]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f003 030c 	and.w	r3, r3, #12
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d00c      	beq.n	8005a64 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a4a:	4b85      	ldr	r3, [pc, #532]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d112      	bne.n	8005a7c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a56:	4b82      	ldr	r3, [pc, #520]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a62:	d10b      	bne.n	8005a7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a64:	4b7e      	ldr	r3, [pc, #504]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d05b      	beq.n	8005b28 <HAL_RCC_OscConfig+0x108>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d157      	bne.n	8005b28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e242      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a84:	d106      	bne.n	8005a94 <HAL_RCC_OscConfig+0x74>
 8005a86:	4b76      	ldr	r3, [pc, #472]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a75      	ldr	r2, [pc, #468]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	e01d      	b.n	8005ad0 <HAL_RCC_OscConfig+0xb0>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a9c:	d10c      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x98>
 8005a9e:	4b70      	ldr	r3, [pc, #448]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a6f      	ldr	r2, [pc, #444]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	4b6d      	ldr	r3, [pc, #436]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a6c      	ldr	r2, [pc, #432]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	e00b      	b.n	8005ad0 <HAL_RCC_OscConfig+0xb0>
 8005ab8:	4b69      	ldr	r3, [pc, #420]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a68      	ldr	r2, [pc, #416]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	4b66      	ldr	r3, [pc, #408]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a65      	ldr	r2, [pc, #404]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005aca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d013      	beq.n	8005b00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad8:	f7fc fd00 	bl	80024dc <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ae0:	f7fc fcfc 	bl	80024dc <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b64      	cmp	r3, #100	@ 0x64
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e207      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005af2:	4b5b      	ldr	r3, [pc, #364]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0f0      	beq.n	8005ae0 <HAL_RCC_OscConfig+0xc0>
 8005afe:	e014      	b.n	8005b2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b00:	f7fc fcec 	bl	80024dc <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b08:	f7fc fce8 	bl	80024dc <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b64      	cmp	r3, #100	@ 0x64
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e1f3      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b1a:	4b51      	ldr	r3, [pc, #324]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1f0      	bne.n	8005b08 <HAL_RCC_OscConfig+0xe8>
 8005b26:	e000      	b.n	8005b2a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d063      	beq.n	8005bfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005b36:	4b4a      	ldr	r3, [pc, #296]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f003 030c 	and.w	r3, r3, #12
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00b      	beq.n	8005b5a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b42:	4b47      	ldr	r3, [pc, #284]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005b4a:	2b08      	cmp	r3, #8
 8005b4c:	d11c      	bne.n	8005b88 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b4e:	4b44      	ldr	r3, [pc, #272]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d116      	bne.n	8005b88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b5a:	4b41      	ldr	r3, [pc, #260]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d005      	beq.n	8005b72 <HAL_RCC_OscConfig+0x152>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d001      	beq.n	8005b72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e1c7      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b72:	4b3b      	ldr	r3, [pc, #236]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	4937      	ldr	r1, [pc, #220]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b86:	e03a      	b.n	8005bfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d020      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b90:	4b34      	ldr	r3, [pc, #208]	@ (8005c64 <HAL_RCC_OscConfig+0x244>)
 8005b92:	2201      	movs	r2, #1
 8005b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b96:	f7fc fca1 	bl	80024dc <HAL_GetTick>
 8005b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b9c:	e008      	b.n	8005bb0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b9e:	f7fc fc9d 	bl	80024dc <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e1a8      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0f0      	beq.n	8005b9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bbc:	4b28      	ldr	r3, [pc, #160]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	4925      	ldr	r1, [pc, #148]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	600b      	str	r3, [r1, #0]
 8005bd0:	e015      	b.n	8005bfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bd2:	4b24      	ldr	r3, [pc, #144]	@ (8005c64 <HAL_RCC_OscConfig+0x244>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd8:	f7fc fc80 	bl	80024dc <HAL_GetTick>
 8005bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bde:	e008      	b.n	8005bf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005be0:	f7fc fc7c 	bl	80024dc <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e187      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1f0      	bne.n	8005be0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0308 	and.w	r3, r3, #8
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d036      	beq.n	8005c78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d016      	beq.n	8005c40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c12:	4b15      	ldr	r3, [pc, #84]	@ (8005c68 <HAL_RCC_OscConfig+0x248>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c18:	f7fc fc60 	bl	80024dc <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c1e:	e008      	b.n	8005c32 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c20:	f7fc fc5c 	bl	80024dc <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e167      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c32:	4b0b      	ldr	r3, [pc, #44]	@ (8005c60 <HAL_RCC_OscConfig+0x240>)
 8005c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0f0      	beq.n	8005c20 <HAL_RCC_OscConfig+0x200>
 8005c3e:	e01b      	b.n	8005c78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c40:	4b09      	ldr	r3, [pc, #36]	@ (8005c68 <HAL_RCC_OscConfig+0x248>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c46:	f7fc fc49 	bl	80024dc <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c4c:	e00e      	b.n	8005c6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c4e:	f7fc fc45 	bl	80024dc <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d907      	bls.n	8005c6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e150      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
 8005c60:	40023800 	.word	0x40023800
 8005c64:	42470000 	.word	0x42470000
 8005c68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c6c:	4b88      	ldr	r3, [pc, #544]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005c6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1ea      	bne.n	8005c4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 8097 	beq.w	8005db4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c86:	2300      	movs	r3, #0
 8005c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c8a:	4b81      	ldr	r3, [pc, #516]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10f      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c96:	2300      	movs	r3, #0
 8005c98:	60bb      	str	r3, [r7, #8]
 8005c9a:	4b7d      	ldr	r3, [pc, #500]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9e:	4a7c      	ldr	r2, [pc, #496]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ca6:	4b7a      	ldr	r3, [pc, #488]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb6:	4b77      	ldr	r3, [pc, #476]	@ (8005e94 <HAL_RCC_OscConfig+0x474>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d118      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cc2:	4b74      	ldr	r3, [pc, #464]	@ (8005e94 <HAL_RCC_OscConfig+0x474>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a73      	ldr	r2, [pc, #460]	@ (8005e94 <HAL_RCC_OscConfig+0x474>)
 8005cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cce:	f7fc fc05 	bl	80024dc <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd4:	e008      	b.n	8005ce8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cd6:	f7fc fc01 	bl	80024dc <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e10c      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce8:	4b6a      	ldr	r3, [pc, #424]	@ (8005e94 <HAL_RCC_OscConfig+0x474>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d0f0      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d106      	bne.n	8005d0a <HAL_RCC_OscConfig+0x2ea>
 8005cfc:	4b64      	ldr	r3, [pc, #400]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d00:	4a63      	ldr	r2, [pc, #396]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d02:	f043 0301 	orr.w	r3, r3, #1
 8005d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d08:	e01c      	b.n	8005d44 <HAL_RCC_OscConfig+0x324>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	2b05      	cmp	r3, #5
 8005d10:	d10c      	bne.n	8005d2c <HAL_RCC_OscConfig+0x30c>
 8005d12:	4b5f      	ldr	r3, [pc, #380]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d16:	4a5e      	ldr	r2, [pc, #376]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d18:	f043 0304 	orr.w	r3, r3, #4
 8005d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d1e:	4b5c      	ldr	r3, [pc, #368]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d22:	4a5b      	ldr	r2, [pc, #364]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d24:	f043 0301 	orr.w	r3, r3, #1
 8005d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d2a:	e00b      	b.n	8005d44 <HAL_RCC_OscConfig+0x324>
 8005d2c:	4b58      	ldr	r3, [pc, #352]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d30:	4a57      	ldr	r2, [pc, #348]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d32:	f023 0301 	bic.w	r3, r3, #1
 8005d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d38:	4b55      	ldr	r3, [pc, #340]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d3c:	4a54      	ldr	r2, [pc, #336]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d3e:	f023 0304 	bic.w	r3, r3, #4
 8005d42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d015      	beq.n	8005d78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d4c:	f7fc fbc6 	bl	80024dc <HAL_GetTick>
 8005d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d52:	e00a      	b.n	8005d6a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d54:	f7fc fbc2 	bl	80024dc <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e0cb      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d6a:	4b49      	ldr	r3, [pc, #292]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0ee      	beq.n	8005d54 <HAL_RCC_OscConfig+0x334>
 8005d76:	e014      	b.n	8005da2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d78:	f7fc fbb0 	bl	80024dc <HAL_GetTick>
 8005d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d7e:	e00a      	b.n	8005d96 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d80:	f7fc fbac 	bl	80024dc <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e0b5      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d96:	4b3e      	ldr	r3, [pc, #248]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1ee      	bne.n	8005d80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d105      	bne.n	8005db4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005da8:	4b39      	ldr	r3, [pc, #228]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dac:	4a38      	ldr	r2, [pc, #224]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005db2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 80a1 	beq.w	8005f00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dbe:	4b34      	ldr	r3, [pc, #208]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 030c 	and.w	r3, r3, #12
 8005dc6:	2b08      	cmp	r3, #8
 8005dc8:	d05c      	beq.n	8005e84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d141      	bne.n	8005e56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dd2:	4b31      	ldr	r3, [pc, #196]	@ (8005e98 <HAL_RCC_OscConfig+0x478>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd8:	f7fc fb80 	bl	80024dc <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005de0:	f7fc fb7c 	bl	80024dc <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e087      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005df2:	4b27      	ldr	r3, [pc, #156]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f0      	bne.n	8005de0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	69da      	ldr	r2, [r3, #28]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	431a      	orrs	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0c:	019b      	lsls	r3, r3, #6
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e14:	085b      	lsrs	r3, r3, #1
 8005e16:	3b01      	subs	r3, #1
 8005e18:	041b      	lsls	r3, r3, #16
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e20:	061b      	lsls	r3, r3, #24
 8005e22:	491b      	ldr	r1, [pc, #108]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e28:	4b1b      	ldr	r3, [pc, #108]	@ (8005e98 <HAL_RCC_OscConfig+0x478>)
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e2e:	f7fc fb55 	bl	80024dc <HAL_GetTick>
 8005e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e34:	e008      	b.n	8005e48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e36:	f7fc fb51 	bl	80024dc <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e05c      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e48:	4b11      	ldr	r3, [pc, #68]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0f0      	beq.n	8005e36 <HAL_RCC_OscConfig+0x416>
 8005e54:	e054      	b.n	8005f00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e56:	4b10      	ldr	r3, [pc, #64]	@ (8005e98 <HAL_RCC_OscConfig+0x478>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e5c:	f7fc fb3e 	bl	80024dc <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e64:	f7fc fb3a 	bl	80024dc <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e045      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e76:	4b06      	ldr	r3, [pc, #24]	@ (8005e90 <HAL_RCC_OscConfig+0x470>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1f0      	bne.n	8005e64 <HAL_RCC_OscConfig+0x444>
 8005e82:	e03d      	b.n	8005f00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d107      	bne.n	8005e9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e038      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
 8005e90:	40023800 	.word	0x40023800
 8005e94:	40007000 	.word	0x40007000
 8005e98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8005f0c <HAL_RCC_OscConfig+0x4ec>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d028      	beq.n	8005efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d121      	bne.n	8005efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d11a      	bne.n	8005efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ecc:	4013      	ands	r3, r2
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ed2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d111      	bne.n	8005efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee2:	085b      	lsrs	r3, r3, #1
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d107      	bne.n	8005efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d001      	beq.n	8005f00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e000      	b.n	8005f02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3718      	adds	r7, #24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	40023800 	.word	0x40023800

08005f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e0cc      	b.n	80060be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f24:	4b68      	ldr	r3, [pc, #416]	@ (80060c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d90c      	bls.n	8005f4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f32:	4b65      	ldr	r3, [pc, #404]	@ (80060c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f3a:	4b63      	ldr	r3, [pc, #396]	@ (80060c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d001      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0b8      	b.n	80060be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d020      	beq.n	8005f9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d005      	beq.n	8005f70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f64:	4b59      	ldr	r3, [pc, #356]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	4a58      	ldr	r2, [pc, #352]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005f6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0308 	and.w	r3, r3, #8
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f7c:	4b53      	ldr	r3, [pc, #332]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	4a52      	ldr	r2, [pc, #328]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005f82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f88:	4b50      	ldr	r3, [pc, #320]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	494d      	ldr	r1, [pc, #308]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d044      	beq.n	8006030 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d107      	bne.n	8005fbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fae:	4b47      	ldr	r3, [pc, #284]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d119      	bne.n	8005fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e07f      	b.n	80060be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d003      	beq.n	8005fce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d107      	bne.n	8005fde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fce:	4b3f      	ldr	r3, [pc, #252]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e06f      	b.n	80060be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fde:	4b3b      	ldr	r3, [pc, #236]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e067      	b.n	80060be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fee:	4b37      	ldr	r3, [pc, #220]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f023 0203 	bic.w	r2, r3, #3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	4934      	ldr	r1, [pc, #208]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006000:	f7fc fa6c 	bl	80024dc <HAL_GetTick>
 8006004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006006:	e00a      	b.n	800601e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006008:	f7fc fa68 	bl	80024dc <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006016:	4293      	cmp	r3, r2
 8006018:	d901      	bls.n	800601e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e04f      	b.n	80060be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800601e:	4b2b      	ldr	r3, [pc, #172]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 020c 	and.w	r2, r3, #12
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	429a      	cmp	r2, r3
 800602e:	d1eb      	bne.n	8006008 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006030:	4b25      	ldr	r3, [pc, #148]	@ (80060c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	429a      	cmp	r2, r3
 800603c:	d20c      	bcs.n	8006058 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800603e:	4b22      	ldr	r3, [pc, #136]	@ (80060c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006046:	4b20      	ldr	r3, [pc, #128]	@ (80060c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	429a      	cmp	r2, r3
 8006052:	d001      	beq.n	8006058 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e032      	b.n	80060be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d008      	beq.n	8006076 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006064:	4b19      	ldr	r3, [pc, #100]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	4916      	ldr	r1, [pc, #88]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8006072:	4313      	orrs	r3, r2
 8006074:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0308 	and.w	r3, r3, #8
 800607e:	2b00      	cmp	r3, #0
 8006080:	d009      	beq.n	8006096 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006082:	4b12      	ldr	r3, [pc, #72]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	490e      	ldr	r1, [pc, #56]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 8006092:	4313      	orrs	r3, r2
 8006094:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006096:	f000 f821 	bl	80060dc <HAL_RCC_GetSysClockFreq>
 800609a:	4602      	mov	r2, r0
 800609c:	4b0b      	ldr	r3, [pc, #44]	@ (80060cc <HAL_RCC_ClockConfig+0x1bc>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	091b      	lsrs	r3, r3, #4
 80060a2:	f003 030f 	and.w	r3, r3, #15
 80060a6:	490a      	ldr	r1, [pc, #40]	@ (80060d0 <HAL_RCC_ClockConfig+0x1c0>)
 80060a8:	5ccb      	ldrb	r3, [r1, r3]
 80060aa:	fa22 f303 	lsr.w	r3, r2, r3
 80060ae:	4a09      	ldr	r2, [pc, #36]	@ (80060d4 <HAL_RCC_ClockConfig+0x1c4>)
 80060b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80060b2:	4b09      	ldr	r3, [pc, #36]	@ (80060d8 <HAL_RCC_ClockConfig+0x1c8>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fc f9cc 	bl	8002454 <HAL_InitTick>

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	40023c00 	.word	0x40023c00
 80060cc:	40023800 	.word	0x40023800
 80060d0:	0800e19c 	.word	0x0800e19c
 80060d4:	20000004 	.word	0x20000004
 80060d8:	20000008 	.word	0x20000008

080060dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060e0:	b094      	sub	sp, #80	@ 0x50
 80060e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060f4:	4b79      	ldr	r3, [pc, #484]	@ (80062dc <HAL_RCC_GetSysClockFreq+0x200>)
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f003 030c 	and.w	r3, r3, #12
 80060fc:	2b08      	cmp	r3, #8
 80060fe:	d00d      	beq.n	800611c <HAL_RCC_GetSysClockFreq+0x40>
 8006100:	2b08      	cmp	r3, #8
 8006102:	f200 80e1 	bhi.w	80062c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <HAL_RCC_GetSysClockFreq+0x34>
 800610a:	2b04      	cmp	r3, #4
 800610c:	d003      	beq.n	8006116 <HAL_RCC_GetSysClockFreq+0x3a>
 800610e:	e0db      	b.n	80062c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006110:	4b73      	ldr	r3, [pc, #460]	@ (80062e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006112:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006114:	e0db      	b.n	80062ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006116:	4b73      	ldr	r3, [pc, #460]	@ (80062e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006118:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800611a:	e0d8      	b.n	80062ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800611c:	4b6f      	ldr	r3, [pc, #444]	@ (80062dc <HAL_RCC_GetSysClockFreq+0x200>)
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006124:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006126:	4b6d      	ldr	r3, [pc, #436]	@ (80062dc <HAL_RCC_GetSysClockFreq+0x200>)
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d063      	beq.n	80061fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006132:	4b6a      	ldr	r3, [pc, #424]	@ (80062dc <HAL_RCC_GetSysClockFreq+0x200>)
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	099b      	lsrs	r3, r3, #6
 8006138:	2200      	movs	r2, #0
 800613a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800613c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800613e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006144:	633b      	str	r3, [r7, #48]	@ 0x30
 8006146:	2300      	movs	r3, #0
 8006148:	637b      	str	r3, [r7, #52]	@ 0x34
 800614a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800614e:	4622      	mov	r2, r4
 8006150:	462b      	mov	r3, r5
 8006152:	f04f 0000 	mov.w	r0, #0
 8006156:	f04f 0100 	mov.w	r1, #0
 800615a:	0159      	lsls	r1, r3, #5
 800615c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006160:	0150      	lsls	r0, r2, #5
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4621      	mov	r1, r4
 8006168:	1a51      	subs	r1, r2, r1
 800616a:	6139      	str	r1, [r7, #16]
 800616c:	4629      	mov	r1, r5
 800616e:	eb63 0301 	sbc.w	r3, r3, r1
 8006172:	617b      	str	r3, [r7, #20]
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006180:	4659      	mov	r1, fp
 8006182:	018b      	lsls	r3, r1, #6
 8006184:	4651      	mov	r1, sl
 8006186:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800618a:	4651      	mov	r1, sl
 800618c:	018a      	lsls	r2, r1, #6
 800618e:	4651      	mov	r1, sl
 8006190:	ebb2 0801 	subs.w	r8, r2, r1
 8006194:	4659      	mov	r1, fp
 8006196:	eb63 0901 	sbc.w	r9, r3, r1
 800619a:	f04f 0200 	mov.w	r2, #0
 800619e:	f04f 0300 	mov.w	r3, #0
 80061a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061ae:	4690      	mov	r8, r2
 80061b0:	4699      	mov	r9, r3
 80061b2:	4623      	mov	r3, r4
 80061b4:	eb18 0303 	adds.w	r3, r8, r3
 80061b8:	60bb      	str	r3, [r7, #8]
 80061ba:	462b      	mov	r3, r5
 80061bc:	eb49 0303 	adc.w	r3, r9, r3
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	f04f 0200 	mov.w	r2, #0
 80061c6:	f04f 0300 	mov.w	r3, #0
 80061ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80061ce:	4629      	mov	r1, r5
 80061d0:	024b      	lsls	r3, r1, #9
 80061d2:	4621      	mov	r1, r4
 80061d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80061d8:	4621      	mov	r1, r4
 80061da:	024a      	lsls	r2, r1, #9
 80061dc:	4610      	mov	r0, r2
 80061de:	4619      	mov	r1, r3
 80061e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061e2:	2200      	movs	r2, #0
 80061e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80061ec:	f7fa fcdc 	bl	8000ba8 <__aeabi_uldivmod>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	4613      	mov	r3, r2
 80061f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061f8:	e058      	b.n	80062ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061fa:	4b38      	ldr	r3, [pc, #224]	@ (80062dc <HAL_RCC_GetSysClockFreq+0x200>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	099b      	lsrs	r3, r3, #6
 8006200:	2200      	movs	r2, #0
 8006202:	4618      	mov	r0, r3
 8006204:	4611      	mov	r1, r2
 8006206:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800620a:	623b      	str	r3, [r7, #32]
 800620c:	2300      	movs	r3, #0
 800620e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006210:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006214:	4642      	mov	r2, r8
 8006216:	464b      	mov	r3, r9
 8006218:	f04f 0000 	mov.w	r0, #0
 800621c:	f04f 0100 	mov.w	r1, #0
 8006220:	0159      	lsls	r1, r3, #5
 8006222:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006226:	0150      	lsls	r0, r2, #5
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	4641      	mov	r1, r8
 800622e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006232:	4649      	mov	r1, r9
 8006234:	eb63 0b01 	sbc.w	fp, r3, r1
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006244:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006248:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800624c:	ebb2 040a 	subs.w	r4, r2, sl
 8006250:	eb63 050b 	sbc.w	r5, r3, fp
 8006254:	f04f 0200 	mov.w	r2, #0
 8006258:	f04f 0300 	mov.w	r3, #0
 800625c:	00eb      	lsls	r3, r5, #3
 800625e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006262:	00e2      	lsls	r2, r4, #3
 8006264:	4614      	mov	r4, r2
 8006266:	461d      	mov	r5, r3
 8006268:	4643      	mov	r3, r8
 800626a:	18e3      	adds	r3, r4, r3
 800626c:	603b      	str	r3, [r7, #0]
 800626e:	464b      	mov	r3, r9
 8006270:	eb45 0303 	adc.w	r3, r5, r3
 8006274:	607b      	str	r3, [r7, #4]
 8006276:	f04f 0200 	mov.w	r2, #0
 800627a:	f04f 0300 	mov.w	r3, #0
 800627e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006282:	4629      	mov	r1, r5
 8006284:	028b      	lsls	r3, r1, #10
 8006286:	4621      	mov	r1, r4
 8006288:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800628c:	4621      	mov	r1, r4
 800628e:	028a      	lsls	r2, r1, #10
 8006290:	4610      	mov	r0, r2
 8006292:	4619      	mov	r1, r3
 8006294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006296:	2200      	movs	r2, #0
 8006298:	61bb      	str	r3, [r7, #24]
 800629a:	61fa      	str	r2, [r7, #28]
 800629c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062a0:	f7fa fc82 	bl	8000ba8 <__aeabi_uldivmod>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4613      	mov	r3, r2
 80062aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80062ac:	4b0b      	ldr	r3, [pc, #44]	@ (80062dc <HAL_RCC_GetSysClockFreq+0x200>)
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	0c1b      	lsrs	r3, r3, #16
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	3301      	adds	r3, #1
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80062bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062c6:	e002      	b.n	80062ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062c8:	4b05      	ldr	r3, [pc, #20]	@ (80062e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80062ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3750      	adds	r7, #80	@ 0x50
 80062d4:	46bd      	mov	sp, r7
 80062d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062da:	bf00      	nop
 80062dc:	40023800 	.word	0x40023800
 80062e0:	00f42400 	.word	0x00f42400
 80062e4:	007a1200 	.word	0x007a1200

080062e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062ec:	4b03      	ldr	r3, [pc, #12]	@ (80062fc <HAL_RCC_GetHCLKFreq+0x14>)
 80062ee:	681b      	ldr	r3, [r3, #0]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	20000004 	.word	0x20000004

08006300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006304:	f7ff fff0 	bl	80062e8 <HAL_RCC_GetHCLKFreq>
 8006308:	4602      	mov	r2, r0
 800630a:	4b05      	ldr	r3, [pc, #20]	@ (8006320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	0a9b      	lsrs	r3, r3, #10
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	4903      	ldr	r1, [pc, #12]	@ (8006324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006316:	5ccb      	ldrb	r3, [r1, r3]
 8006318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800631c:	4618      	mov	r0, r3
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40023800 	.word	0x40023800
 8006324:	0800e1ac 	.word	0x0800e1ac

08006328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800632c:	f7ff ffdc 	bl	80062e8 <HAL_RCC_GetHCLKFreq>
 8006330:	4602      	mov	r2, r0
 8006332:	4b05      	ldr	r3, [pc, #20]	@ (8006348 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	0b5b      	lsrs	r3, r3, #13
 8006338:	f003 0307 	and.w	r3, r3, #7
 800633c:	4903      	ldr	r1, [pc, #12]	@ (800634c <HAL_RCC_GetPCLK2Freq+0x24>)
 800633e:	5ccb      	ldrb	r3, [r1, r3]
 8006340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006344:	4618      	mov	r0, r3
 8006346:	bd80      	pop	{r7, pc}
 8006348:	40023800 	.word	0x40023800
 800634c:	0800e1ac 	.word	0x0800e1ac

08006350 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b00      	cmp	r3, #0
 800636a:	d105      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006374:	2b00      	cmp	r3, #0
 8006376:	d035      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006378:	4b62      	ldr	r3, [pc, #392]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800637e:	f7fc f8ad 	bl	80024dc <HAL_GetTick>
 8006382:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006384:	e008      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006386:	f7fc f8a9 	bl	80024dc <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e0b0      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006398:	4b5b      	ldr	r3, [pc, #364]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1f0      	bne.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	019a      	lsls	r2, r3, #6
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	071b      	lsls	r3, r3, #28
 80063b0:	4955      	ldr	r1, [pc, #340]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80063b8:	4b52      	ldr	r3, [pc, #328]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80063ba:	2201      	movs	r2, #1
 80063bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063be:	f7fc f88d 	bl	80024dc <HAL_GetTick>
 80063c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80063c4:	e008      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80063c6:	f7fc f889 	bl	80024dc <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d901      	bls.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e090      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80063d8:	4b4b      	ldr	r3, [pc, #300]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0f0      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 8083 	beq.w	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80063f2:	2300      	movs	r3, #0
 80063f4:	60fb      	str	r3, [r7, #12]
 80063f6:	4b44      	ldr	r3, [pc, #272]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fa:	4a43      	ldr	r2, [pc, #268]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006400:	6413      	str	r3, [r2, #64]	@ 0x40
 8006402:	4b41      	ldr	r3, [pc, #260]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800640e:	4b3f      	ldr	r3, [pc, #252]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a3e      	ldr	r2, [pc, #248]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006418:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800641a:	f7fc f85f 	bl	80024dc <HAL_GetTick>
 800641e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006420:	e008      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006422:	f7fc f85b 	bl	80024dc <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	2b02      	cmp	r3, #2
 800642e:	d901      	bls.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e062      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006434:	4b35      	ldr	r3, [pc, #212]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800643c:	2b00      	cmp	r3, #0
 800643e:	d0f0      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006440:	4b31      	ldr	r3, [pc, #196]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006444:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006448:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d02f      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	429a      	cmp	r2, r3
 800645c:	d028      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800645e:	4b2a      	ldr	r3, [pc, #168]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006462:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006466:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006468:	4b29      	ldr	r3, [pc, #164]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800646a:	2201      	movs	r2, #1
 800646c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800646e:	4b28      	ldr	r3, [pc, #160]	@ (8006510 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006474:	4a24      	ldr	r2, [pc, #144]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800647a:	4b23      	ldr	r3, [pc, #140]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800647c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b01      	cmp	r3, #1
 8006484:	d114      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006486:	f7fc f829 	bl	80024dc <HAL_GetTick>
 800648a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800648c:	e00a      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800648e:	f7fc f825 	bl	80024dc <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800649c:	4293      	cmp	r3, r2
 800649e:	d901      	bls.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e02a      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064a4:	4b18      	ldr	r3, [pc, #96]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0ee      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064bc:	d10d      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80064be:	4b12      	ldr	r3, [pc, #72]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80064ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064d2:	490d      	ldr	r1, [pc, #52]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	608b      	str	r3, [r1, #8]
 80064d8:	e005      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80064da:	4b0b      	ldr	r3, [pc, #44]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	4a0a      	ldr	r2, [pc, #40]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064e0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80064e4:	6093      	str	r3, [r2, #8]
 80064e6:	4b08      	ldr	r3, [pc, #32]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064e8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064f2:	4905      	ldr	r1, [pc, #20]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	42470068 	.word	0x42470068
 8006508:	40023800 	.word	0x40023800
 800650c:	40007000 	.word	0x40007000
 8006510:	42470e40 	.word	0x42470e40

08006514 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d13f      	bne.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006532:	4b24      	ldr	r3, [pc, #144]	@ (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800653a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d006      	beq.n	8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006548:	d12f      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800654a:	4b1f      	ldr	r3, [pc, #124]	@ (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800654c:	617b      	str	r3, [r7, #20]
          break;
 800654e:	e02f      	b.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006550:	4b1c      	ldr	r3, [pc, #112]	@ (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006558:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800655c:	d108      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800655e:	4b19      	ldr	r3, [pc, #100]	@ (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006566:	4a19      	ldr	r2, [pc, #100]	@ (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006568:	fbb2 f3f3 	udiv	r3, r2, r3
 800656c:	613b      	str	r3, [r7, #16]
 800656e:	e007      	b.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006570:	4b14      	ldr	r3, [pc, #80]	@ (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006578:	4a15      	ldr	r2, [pc, #84]	@ (80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800657a:	fbb2 f3f3 	udiv	r3, r2, r3
 800657e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006580:	4b10      	ldr	r3, [pc, #64]	@ (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006582:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006586:	099b      	lsrs	r3, r3, #6
 8006588:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	fb02 f303 	mul.w	r3, r2, r3
 8006592:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006594:	4b0b      	ldr	r3, [pc, #44]	@ (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006596:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800659a:	0f1b      	lsrs	r3, r3, #28
 800659c:	f003 0307 	and.w	r3, r3, #7
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a6:	617b      	str	r3, [r7, #20]
          break;
 80065a8:	e002      	b.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	617b      	str	r3, [r7, #20]
          break;
 80065ae:	bf00      	nop
        }
      }
      break;
 80065b0:	e000      	b.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80065b2:	bf00      	nop
    }
  }
  return frequency;
 80065b4:	697b      	ldr	r3, [r7, #20]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	371c      	adds	r7, #28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	40023800 	.word	0x40023800
 80065c8:	00bb8000 	.word	0x00bb8000
 80065cc:	007a1200 	.word	0x007a1200
 80065d0:	00f42400 	.word	0x00f42400

080065d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e07b      	b.n	80066de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d108      	bne.n	8006600 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065f6:	d009      	beq.n	800660c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	61da      	str	r2, [r3, #28]
 80065fe:	e005      	b.n	800660c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d106      	bne.n	800662c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7fb fcbc 	bl	8001fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2202      	movs	r2, #2
 8006630:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006642:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006654:	431a      	orrs	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	431a      	orrs	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800667c:	431a      	orrs	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006690:	ea42 0103 	orr.w	r1, r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006698:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	0c1b      	lsrs	r3, r3, #16
 80066aa:	f003 0104 	and.w	r1, r3, #4
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b2:	f003 0210 	and.w	r2, r3, #16
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69da      	ldr	r2, [r3, #28]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b082      	sub	sp, #8
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e042      	b.n	800677e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d106      	bne.n	8006712 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7fb fc91 	bl	8002034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2224      	movs	r2, #36	@ 0x24
 8006716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68da      	ldr	r2, [r3, #12]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006728:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fe00 	bl	8007330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	691a      	ldr	r2, [r3, #16]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800673e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	695a      	ldr	r2, [r3, #20]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800674e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68da      	ldr	r2, [r3, #12]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800675e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2220      	movs	r2, #32
 8006772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b08a      	sub	sp, #40	@ 0x28
 800678a:	af02      	add	r7, sp, #8
 800678c:	60f8      	str	r0, [r7, #12]
 800678e:	60b9      	str	r1, [r7, #8]
 8006790:	603b      	str	r3, [r7, #0]
 8006792:	4613      	mov	r3, r2
 8006794:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b20      	cmp	r3, #32
 80067a4:	d175      	bne.n	8006892 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <HAL_UART_Transmit+0x2c>
 80067ac:	88fb      	ldrh	r3, [r7, #6]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e06e      	b.n	8006894 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2221      	movs	r2, #33	@ 0x21
 80067c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067c4:	f7fb fe8a 	bl	80024dc <HAL_GetTick>
 80067c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	88fa      	ldrh	r2, [r7, #6]
 80067ce:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	88fa      	ldrh	r2, [r7, #6]
 80067d4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067de:	d108      	bne.n	80067f2 <HAL_UART_Transmit+0x6c>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d104      	bne.n	80067f2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067e8:	2300      	movs	r3, #0
 80067ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	61bb      	str	r3, [r7, #24]
 80067f0:	e003      	b.n	80067fa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067f6:	2300      	movs	r3, #0
 80067f8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067fa:	e02e      	b.n	800685a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	2200      	movs	r2, #0
 8006804:	2180      	movs	r1, #128	@ 0x80
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 fb9c 	bl	8006f44 <UART_WaitOnFlagUntilTimeout>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d005      	beq.n	800681e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2220      	movs	r2, #32
 8006816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e03a      	b.n	8006894 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10b      	bne.n	800683c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	461a      	mov	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006832:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	3302      	adds	r3, #2
 8006838:	61bb      	str	r3, [r7, #24]
 800683a:	e007      	b.n	800684c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	781a      	ldrb	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	3301      	adds	r3, #1
 800684a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006850:	b29b      	uxth	r3, r3
 8006852:	3b01      	subs	r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800685e:	b29b      	uxth	r3, r3
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1cb      	bne.n	80067fc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2200      	movs	r2, #0
 800686c:	2140      	movs	r1, #64	@ 0x40
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 fb68 	bl	8006f44 <UART_WaitOnFlagUntilTimeout>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d005      	beq.n	8006886 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2220      	movs	r2, #32
 800687e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e006      	b.n	8006894 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2220      	movs	r2, #32
 800688a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	e000      	b.n	8006894 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006892:	2302      	movs	r3, #2
  }
}
 8006894:	4618      	mov	r0, r3
 8006896:	3720      	adds	r7, #32
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b08a      	sub	sp, #40	@ 0x28
 80068a0:	af02      	add	r7, sp, #8
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	4613      	mov	r3, r2
 80068aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b20      	cmp	r3, #32
 80068ba:	f040 8081 	bne.w	80069c0 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <HAL_UART_Receive+0x2e>
 80068c4:	88fb      	ldrh	r3, [r7, #6]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e079      	b.n	80069c2 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2222      	movs	r2, #34	@ 0x22
 80068d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068e2:	f7fb fdfb 	bl	80024dc <HAL_GetTick>
 80068e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	88fa      	ldrh	r2, [r7, #6]
 80068ec:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	88fa      	ldrh	r2, [r7, #6]
 80068f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068fc:	d108      	bne.n	8006910 <HAL_UART_Receive+0x74>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d104      	bne.n	8006910 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006906:	2300      	movs	r3, #0
 8006908:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	61bb      	str	r3, [r7, #24]
 800690e:	e003      	b.n	8006918 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006914:	2300      	movs	r3, #0
 8006916:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006918:	e047      	b.n	80069aa <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	2200      	movs	r2, #0
 8006922:	2120      	movs	r1, #32
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 fb0d 	bl	8006f44 <UART_WaitOnFlagUntilTimeout>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d005      	beq.n	800693c <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2220      	movs	r2, #32
 8006934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e042      	b.n	80069c2 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10c      	bne.n	800695c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	b29b      	uxth	r3, r3
 800694a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800694e:	b29a      	uxth	r2, r3
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	3302      	adds	r3, #2
 8006958:	61bb      	str	r3, [r7, #24]
 800695a:	e01f      	b.n	800699c <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006964:	d007      	beq.n	8006976 <HAL_UART_Receive+0xda>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10a      	bne.n	8006984 <HAL_UART_Receive+0xe8>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d106      	bne.n	8006984 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	b2da      	uxtb	r2, r3
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	701a      	strb	r2, [r3, #0]
 8006982:	e008      	b.n	8006996 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	b2db      	uxtb	r3, r3
 800698c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006990:	b2da      	uxtb	r2, r3
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	3301      	adds	r3, #1
 800699a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	3b01      	subs	r3, #1
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1b2      	bne.n	800691a <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	e000      	b.n	80069c2 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80069c0:	2302      	movs	r3, #2
  }
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3720      	adds	r7, #32
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
	...

080069cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b0ba      	sub	sp, #232	@ 0xe8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80069fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a02:	f003 030f 	and.w	r3, r3, #15
 8006a06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006a0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10f      	bne.n	8006a32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d009      	beq.n	8006a32 <HAL_UART_IRQHandler+0x66>
 8006a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fbc2 	bl	80071b4 <UART_Receive_IT>
      return;
 8006a30:	e25b      	b.n	8006eea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 80de 	beq.w	8006bf8 <HAL_UART_IRQHandler+0x22c>
 8006a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d106      	bne.n	8006a56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a4c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 80d1 	beq.w	8006bf8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00b      	beq.n	8006a7a <HAL_UART_IRQHandler+0xae>
 8006a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d005      	beq.n	8006a7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a72:	f043 0201 	orr.w	r2, r3, #1
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a7e:	f003 0304 	and.w	r3, r3, #4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00b      	beq.n	8006a9e <HAL_UART_IRQHandler+0xd2>
 8006a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d005      	beq.n	8006a9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a96:	f043 0202 	orr.w	r2, r3, #2
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00b      	beq.n	8006ac2 <HAL_UART_IRQHandler+0xf6>
 8006aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aba:	f043 0204 	orr.w	r2, r3, #4
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ac6:	f003 0308 	and.w	r3, r3, #8
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d011      	beq.n	8006af2 <HAL_UART_IRQHandler+0x126>
 8006ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d105      	bne.n	8006ae6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d005      	beq.n	8006af2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aea:	f043 0208 	orr.w	r2, r3, #8
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 81f2 	beq.w	8006ee0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b00:	f003 0320 	and.w	r3, r3, #32
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d008      	beq.n	8006b1a <HAL_UART_IRQHandler+0x14e>
 8006b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b0c:	f003 0320 	and.w	r3, r3, #32
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fb4d 	bl	80071b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b24:	2b40      	cmp	r3, #64	@ 0x40
 8006b26:	bf0c      	ite	eq
 8006b28:	2301      	moveq	r3, #1
 8006b2a:	2300      	movne	r3, #0
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b36:	f003 0308 	and.w	r3, r3, #8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d103      	bne.n	8006b46 <HAL_UART_IRQHandler+0x17a>
 8006b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d04f      	beq.n	8006be6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fa55 	bl	8006ff6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b56:	2b40      	cmp	r3, #64	@ 0x40
 8006b58:	d141      	bne.n	8006bde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3314      	adds	r3, #20
 8006b60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b68:	e853 3f00 	ldrex	r3, [r3]
 8006b6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3314      	adds	r3, #20
 8006b82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006b86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006b92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006b96:	e841 2300 	strex	r3, r2, [r1]
 8006b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006b9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1d9      	bne.n	8006b5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d013      	beq.n	8006bd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb2:	4a7e      	ldr	r2, [pc, #504]	@ (8006dac <HAL_UART_IRQHandler+0x3e0>)
 8006bb4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fb fe3f 	bl	800283e <HAL_DMA_Abort_IT>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d016      	beq.n	8006bf4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006bd0:	4610      	mov	r0, r2
 8006bd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd4:	e00e      	b.n	8006bf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f99e 	bl	8006f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bdc:	e00a      	b.n	8006bf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f99a 	bl	8006f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be4:	e006      	b.n	8006bf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f996 	bl	8006f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006bf2:	e175      	b.n	8006ee0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf4:	bf00      	nop
    return;
 8006bf6:	e173      	b.n	8006ee0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	f040 814f 	bne.w	8006ea0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c06:	f003 0310 	and.w	r3, r3, #16
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 8148 	beq.w	8006ea0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c14:	f003 0310 	and.w	r3, r3, #16
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 8141 	beq.w	8006ea0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60bb      	str	r3, [r7, #8]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	60bb      	str	r3, [r7, #8]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	60bb      	str	r3, [r7, #8]
 8006c32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c3e:	2b40      	cmp	r3, #64	@ 0x40
 8006c40:	f040 80b6 	bne.w	8006db0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 8145 	beq.w	8006ee4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c62:	429a      	cmp	r2, r3
 8006c64:	f080 813e 	bcs.w	8006ee4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c6e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c7a:	f000 8088 	beq.w	8006d8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	330c      	adds	r3, #12
 8006c84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c8c:	e853 3f00 	ldrex	r3, [r3]
 8006c90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006c94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	330c      	adds	r3, #12
 8006ca6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006caa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006cae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006cb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006cba:	e841 2300 	strex	r3, r2, [r1]
 8006cbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1d9      	bne.n	8006c7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	3314      	adds	r3, #20
 8006cd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006cda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006cdc:	f023 0301 	bic.w	r3, r3, #1
 8006ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3314      	adds	r3, #20
 8006cea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006cee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006cf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006cf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006cfa:	e841 2300 	strex	r3, r2, [r1]
 8006cfe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006d00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1e1      	bne.n	8006cca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3314      	adds	r3, #20
 8006d0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d10:	e853 3f00 	ldrex	r3, [r3]
 8006d14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006d16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3314      	adds	r3, #20
 8006d26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006d2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006d2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006d30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006d38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e3      	bne.n	8006d06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	330c      	adds	r3, #12
 8006d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d56:	e853 3f00 	ldrex	r3, [r3]
 8006d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d5e:	f023 0310 	bic.w	r3, r3, #16
 8006d62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	330c      	adds	r3, #12
 8006d6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006d70:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006d72:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d78:	e841 2300 	strex	r3, r2, [r1]
 8006d7c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1e3      	bne.n	8006d4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fb fce8 	bl	800275e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2202      	movs	r2, #2
 8006d92:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 f8c1 	bl	8006f2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006daa:	e09b      	b.n	8006ee4 <HAL_UART_IRQHandler+0x518>
 8006dac:	080070bd 	.word	0x080070bd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 808e 	beq.w	8006ee8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006dcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 8089 	beq.w	8006ee8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	330c      	adds	r3, #12
 8006ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de0:	e853 3f00 	ldrex	r3, [r3]
 8006de4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006de8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	330c      	adds	r3, #12
 8006df6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006dfa:	647a      	str	r2, [r7, #68]	@ 0x44
 8006dfc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e02:	e841 2300 	strex	r3, r2, [r1]
 8006e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e3      	bne.n	8006dd6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3314      	adds	r3, #20
 8006e14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	623b      	str	r3, [r7, #32]
   return(result);
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	f023 0301 	bic.w	r3, r3, #1
 8006e24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3314      	adds	r3, #20
 8006e2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006e32:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e3      	bne.n	8006e0e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	330c      	adds	r3, #12
 8006e5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	e853 3f00 	ldrex	r3, [r3]
 8006e62:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0310 	bic.w	r3, r3, #16
 8006e6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	330c      	adds	r3, #12
 8006e74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006e78:	61fa      	str	r2, [r7, #28]
 8006e7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7c:	69b9      	ldr	r1, [r7, #24]
 8006e7e:	69fa      	ldr	r2, [r7, #28]
 8006e80:	e841 2300 	strex	r3, r2, [r1]
 8006e84:	617b      	str	r3, [r7, #20]
   return(result);
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1e3      	bne.n	8006e54 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e96:	4619      	mov	r1, r3
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f847 	bl	8006f2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e9e:	e023      	b.n	8006ee8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d009      	beq.n	8006ec0 <HAL_UART_IRQHandler+0x4f4>
 8006eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f913 	bl	80070e4 <UART_Transmit_IT>
    return;
 8006ebe:	e014      	b.n	8006eea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00e      	beq.n	8006eea <HAL_UART_IRQHandler+0x51e>
 8006ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d008      	beq.n	8006eea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f953 	bl	8007184 <UART_EndTransmit_IT>
    return;
 8006ede:	e004      	b.n	8006eea <HAL_UART_IRQHandler+0x51e>
    return;
 8006ee0:	bf00      	nop
 8006ee2:	e002      	b.n	8006eea <HAL_UART_IRQHandler+0x51e>
      return;
 8006ee4:	bf00      	nop
 8006ee6:	e000      	b.n	8006eea <HAL_UART_IRQHandler+0x51e>
      return;
 8006ee8:	bf00      	nop
  }
}
 8006eea:	37e8      	adds	r7, #232	@ 0xe8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	603b      	str	r3, [r7, #0]
 8006f50:	4613      	mov	r3, r2
 8006f52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f54:	e03b      	b.n	8006fce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5c:	d037      	beq.n	8006fce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f5e:	f7fb fabd 	bl	80024dc <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	6a3a      	ldr	r2, [r7, #32]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d302      	bcc.n	8006f74 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f6e:	6a3b      	ldr	r3, [r7, #32]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e03a      	b.n	8006fee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f003 0304 	and.w	r3, r3, #4
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d023      	beq.n	8006fce <UART_WaitOnFlagUntilTimeout+0x8a>
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b80      	cmp	r3, #128	@ 0x80
 8006f8a:	d020      	beq.n	8006fce <UART_WaitOnFlagUntilTimeout+0x8a>
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2b40      	cmp	r3, #64	@ 0x40
 8006f90:	d01d      	beq.n	8006fce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0308 	and.w	r3, r3, #8
 8006f9c:	2b08      	cmp	r3, #8
 8006f9e:	d116      	bne.n	8006fce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 f81d 	bl	8006ff6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2208      	movs	r2, #8
 8006fc0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e00f      	b.n	8006fee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	bf0c      	ite	eq
 8006fde:	2301      	moveq	r3, #1
 8006fe0:	2300      	movne	r3, #0
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	79fb      	ldrb	r3, [r7, #7]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d0b4      	beq.n	8006f56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3718      	adds	r7, #24
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b095      	sub	sp, #84	@ 0x54
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	330c      	adds	r3, #12
 8007004:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800700e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007010:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007014:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	330c      	adds	r3, #12
 800701c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800701e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007020:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007022:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007024:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007026:	e841 2300 	strex	r3, r2, [r1]
 800702a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800702c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1e5      	bne.n	8006ffe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3314      	adds	r3, #20
 8007038:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	e853 3f00 	ldrex	r3, [r3]
 8007040:	61fb      	str	r3, [r7, #28]
   return(result);
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	f023 0301 	bic.w	r3, r3, #1
 8007048:	64bb      	str	r3, [r7, #72]	@ 0x48
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3314      	adds	r3, #20
 8007050:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007052:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007054:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007056:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800705a:	e841 2300 	strex	r3, r2, [r1]
 800705e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1e5      	bne.n	8007032 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706a:	2b01      	cmp	r3, #1
 800706c:	d119      	bne.n	80070a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	330c      	adds	r3, #12
 8007074:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	60bb      	str	r3, [r7, #8]
   return(result);
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f023 0310 	bic.w	r3, r3, #16
 8007084:	647b      	str	r3, [r7, #68]	@ 0x44
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	330c      	adds	r3, #12
 800708c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800708e:	61ba      	str	r2, [r7, #24]
 8007090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	6979      	ldr	r1, [r7, #20]
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	613b      	str	r3, [r7, #16]
   return(result);
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e5      	bne.n	800706e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2220      	movs	r2, #32
 80070a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80070b0:	bf00      	nop
 80070b2:	3754      	adds	r7, #84	@ 0x54
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f7ff ff1e 	bl	8006f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070dc:	bf00      	nop
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b21      	cmp	r3, #33	@ 0x21
 80070f6:	d13e      	bne.n	8007176 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007100:	d114      	bne.n	800712c <UART_Transmit_IT+0x48>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d110      	bne.n	800712c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	461a      	mov	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800711e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	1c9a      	adds	r2, r3, #2
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	621a      	str	r2, [r3, #32]
 800712a:	e008      	b.n	800713e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	1c59      	adds	r1, r3, #1
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	6211      	str	r1, [r2, #32]
 8007136:	781a      	ldrb	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007142:	b29b      	uxth	r3, r3
 8007144:	3b01      	subs	r3, #1
 8007146:	b29b      	uxth	r3, r3
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	4619      	mov	r1, r3
 800714c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10f      	bne.n	8007172 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68da      	ldr	r2, [r3, #12]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007160:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007170:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	e000      	b.n	8007178 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007176:	2302      	movs	r3, #2
  }
}
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68da      	ldr	r2, [r3, #12]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800719a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2220      	movs	r2, #32
 80071a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7ff fea3 	bl	8006ef0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08c      	sub	sp, #48	@ 0x30
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b22      	cmp	r3, #34	@ 0x22
 80071c6:	f040 80ae 	bne.w	8007326 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071d2:	d117      	bne.n	8007204 <UART_Receive_IT+0x50>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d113      	bne.n	8007204 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071dc:	2300      	movs	r3, #0
 80071de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fc:	1c9a      	adds	r2, r3, #2
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	629a      	str	r2, [r3, #40]	@ 0x28
 8007202:	e026      	b.n	8007252 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007208:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800720a:	2300      	movs	r3, #0
 800720c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007216:	d007      	beq.n	8007228 <UART_Receive_IT+0x74>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10a      	bne.n	8007236 <UART_Receive_IT+0x82>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d106      	bne.n	8007236 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	b2da      	uxtb	r2, r3
 8007230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007232:	701a      	strb	r2, [r3, #0]
 8007234:	e008      	b.n	8007248 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	b2db      	uxtb	r3, r3
 800723e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007242:	b2da      	uxtb	r2, r3
 8007244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007246:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724c:	1c5a      	adds	r2, r3, #1
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007256:	b29b      	uxth	r3, r3
 8007258:	3b01      	subs	r3, #1
 800725a:	b29b      	uxth	r3, r3
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	4619      	mov	r1, r3
 8007260:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007262:	2b00      	cmp	r3, #0
 8007264:	d15d      	bne.n	8007322 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68da      	ldr	r2, [r3, #12]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0220 	bic.w	r2, r2, #32
 8007274:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007284:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	695a      	ldr	r2, [r3, #20]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 0201 	bic.w	r2, r2, #1
 8007294:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2220      	movs	r2, #32
 800729a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d135      	bne.n	8007318 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	330c      	adds	r3, #12
 80072b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	e853 3f00 	ldrex	r3, [r3]
 80072c0:	613b      	str	r3, [r7, #16]
   return(result);
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	f023 0310 	bic.w	r3, r3, #16
 80072c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	330c      	adds	r3, #12
 80072d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072d2:	623a      	str	r2, [r7, #32]
 80072d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	69f9      	ldr	r1, [r7, #28]
 80072d8:	6a3a      	ldr	r2, [r7, #32]
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	61bb      	str	r3, [r7, #24]
   return(result);
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e5      	bne.n	80072b2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0310 	and.w	r3, r3, #16
 80072f0:	2b10      	cmp	r3, #16
 80072f2:	d10a      	bne.n	800730a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072f4:	2300      	movs	r3, #0
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f7ff fe0b 	bl	8006f2c <HAL_UARTEx_RxEventCallback>
 8007316:	e002      	b.n	800731e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7ff fdf3 	bl	8006f04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	e002      	b.n	8007328 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	e000      	b.n	8007328 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007326:	2302      	movs	r3, #2
  }
}
 8007328:	4618      	mov	r0, r3
 800732a:	3730      	adds	r7, #48	@ 0x30
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007334:	b0c0      	sub	sp, #256	@ 0x100
 8007336:	af00      	add	r7, sp, #0
 8007338:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800733c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800734c:	68d9      	ldr	r1, [r3, #12]
 800734e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	ea40 0301 	orr.w	r3, r0, r1
 8007358:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800735a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800735e:	689a      	ldr	r2, [r3, #8]
 8007360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	431a      	orrs	r2, r3
 8007368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	431a      	orrs	r2, r3
 8007370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	4313      	orrs	r3, r2
 8007378:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800737c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007388:	f021 010c 	bic.w	r1, r1, #12
 800738c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007396:	430b      	orrs	r3, r1
 8007398:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800739a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80073a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073aa:	6999      	ldr	r1, [r3, #24]
 80073ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	ea40 0301 	orr.w	r3, r0, r1
 80073b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	4b8f      	ldr	r3, [pc, #572]	@ (80075fc <UART_SetConfig+0x2cc>)
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d005      	beq.n	80073d0 <UART_SetConfig+0xa0>
 80073c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	4b8d      	ldr	r3, [pc, #564]	@ (8007600 <UART_SetConfig+0x2d0>)
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d104      	bne.n	80073da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073d0:	f7fe ffaa 	bl	8006328 <HAL_RCC_GetPCLK2Freq>
 80073d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80073d8:	e003      	b.n	80073e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073da:	f7fe ff91 	bl	8006300 <HAL_RCC_GetPCLK1Freq>
 80073de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073ec:	f040 810c 	bne.w	8007608 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073f4:	2200      	movs	r2, #0
 80073f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80073fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80073fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007402:	4622      	mov	r2, r4
 8007404:	462b      	mov	r3, r5
 8007406:	1891      	adds	r1, r2, r2
 8007408:	65b9      	str	r1, [r7, #88]	@ 0x58
 800740a:	415b      	adcs	r3, r3
 800740c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800740e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007412:	4621      	mov	r1, r4
 8007414:	eb12 0801 	adds.w	r8, r2, r1
 8007418:	4629      	mov	r1, r5
 800741a:	eb43 0901 	adc.w	r9, r3, r1
 800741e:	f04f 0200 	mov.w	r2, #0
 8007422:	f04f 0300 	mov.w	r3, #0
 8007426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800742a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800742e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007432:	4690      	mov	r8, r2
 8007434:	4699      	mov	r9, r3
 8007436:	4623      	mov	r3, r4
 8007438:	eb18 0303 	adds.w	r3, r8, r3
 800743c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007440:	462b      	mov	r3, r5
 8007442:	eb49 0303 	adc.w	r3, r9, r3
 8007446:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800744a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007456:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800745a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800745e:	460b      	mov	r3, r1
 8007460:	18db      	adds	r3, r3, r3
 8007462:	653b      	str	r3, [r7, #80]	@ 0x50
 8007464:	4613      	mov	r3, r2
 8007466:	eb42 0303 	adc.w	r3, r2, r3
 800746a:	657b      	str	r3, [r7, #84]	@ 0x54
 800746c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007470:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007474:	f7f9 fb98 	bl	8000ba8 <__aeabi_uldivmod>
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	4b61      	ldr	r3, [pc, #388]	@ (8007604 <UART_SetConfig+0x2d4>)
 800747e:	fba3 2302 	umull	r2, r3, r3, r2
 8007482:	095b      	lsrs	r3, r3, #5
 8007484:	011c      	lsls	r4, r3, #4
 8007486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800748a:	2200      	movs	r2, #0
 800748c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007490:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007494:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007498:	4642      	mov	r2, r8
 800749a:	464b      	mov	r3, r9
 800749c:	1891      	adds	r1, r2, r2
 800749e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80074a0:	415b      	adcs	r3, r3
 80074a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80074a8:	4641      	mov	r1, r8
 80074aa:	eb12 0a01 	adds.w	sl, r2, r1
 80074ae:	4649      	mov	r1, r9
 80074b0:	eb43 0b01 	adc.w	fp, r3, r1
 80074b4:	f04f 0200 	mov.w	r2, #0
 80074b8:	f04f 0300 	mov.w	r3, #0
 80074bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80074c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80074c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074c8:	4692      	mov	sl, r2
 80074ca:	469b      	mov	fp, r3
 80074cc:	4643      	mov	r3, r8
 80074ce:	eb1a 0303 	adds.w	r3, sl, r3
 80074d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074d6:	464b      	mov	r3, r9
 80074d8:	eb4b 0303 	adc.w	r3, fp, r3
 80074dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80074e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80074f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80074f4:	460b      	mov	r3, r1
 80074f6:	18db      	adds	r3, r3, r3
 80074f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80074fa:	4613      	mov	r3, r2
 80074fc:	eb42 0303 	adc.w	r3, r2, r3
 8007500:	647b      	str	r3, [r7, #68]	@ 0x44
 8007502:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007506:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800750a:	f7f9 fb4d 	bl	8000ba8 <__aeabi_uldivmod>
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	4611      	mov	r1, r2
 8007514:	4b3b      	ldr	r3, [pc, #236]	@ (8007604 <UART_SetConfig+0x2d4>)
 8007516:	fba3 2301 	umull	r2, r3, r3, r1
 800751a:	095b      	lsrs	r3, r3, #5
 800751c:	2264      	movs	r2, #100	@ 0x64
 800751e:	fb02 f303 	mul.w	r3, r2, r3
 8007522:	1acb      	subs	r3, r1, r3
 8007524:	00db      	lsls	r3, r3, #3
 8007526:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800752a:	4b36      	ldr	r3, [pc, #216]	@ (8007604 <UART_SetConfig+0x2d4>)
 800752c:	fba3 2302 	umull	r2, r3, r3, r2
 8007530:	095b      	lsrs	r3, r3, #5
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007538:	441c      	add	r4, r3
 800753a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800753e:	2200      	movs	r2, #0
 8007540:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007544:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007548:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800754c:	4642      	mov	r2, r8
 800754e:	464b      	mov	r3, r9
 8007550:	1891      	adds	r1, r2, r2
 8007552:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007554:	415b      	adcs	r3, r3
 8007556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007558:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800755c:	4641      	mov	r1, r8
 800755e:	1851      	adds	r1, r2, r1
 8007560:	6339      	str	r1, [r7, #48]	@ 0x30
 8007562:	4649      	mov	r1, r9
 8007564:	414b      	adcs	r3, r1
 8007566:	637b      	str	r3, [r7, #52]	@ 0x34
 8007568:	f04f 0200 	mov.w	r2, #0
 800756c:	f04f 0300 	mov.w	r3, #0
 8007570:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007574:	4659      	mov	r1, fp
 8007576:	00cb      	lsls	r3, r1, #3
 8007578:	4651      	mov	r1, sl
 800757a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800757e:	4651      	mov	r1, sl
 8007580:	00ca      	lsls	r2, r1, #3
 8007582:	4610      	mov	r0, r2
 8007584:	4619      	mov	r1, r3
 8007586:	4603      	mov	r3, r0
 8007588:	4642      	mov	r2, r8
 800758a:	189b      	adds	r3, r3, r2
 800758c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007590:	464b      	mov	r3, r9
 8007592:	460a      	mov	r2, r1
 8007594:	eb42 0303 	adc.w	r3, r2, r3
 8007598:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800759c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80075a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80075ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80075b0:	460b      	mov	r3, r1
 80075b2:	18db      	adds	r3, r3, r3
 80075b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075b6:	4613      	mov	r3, r2
 80075b8:	eb42 0303 	adc.w	r3, r2, r3
 80075bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80075c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80075c6:	f7f9 faef 	bl	8000ba8 <__aeabi_uldivmod>
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007604 <UART_SetConfig+0x2d4>)
 80075d0:	fba3 1302 	umull	r1, r3, r3, r2
 80075d4:	095b      	lsrs	r3, r3, #5
 80075d6:	2164      	movs	r1, #100	@ 0x64
 80075d8:	fb01 f303 	mul.w	r3, r1, r3
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	3332      	adds	r3, #50	@ 0x32
 80075e2:	4a08      	ldr	r2, [pc, #32]	@ (8007604 <UART_SetConfig+0x2d4>)
 80075e4:	fba2 2303 	umull	r2, r3, r2, r3
 80075e8:	095b      	lsrs	r3, r3, #5
 80075ea:	f003 0207 	and.w	r2, r3, #7
 80075ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4422      	add	r2, r4
 80075f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075f8:	e106      	b.n	8007808 <UART_SetConfig+0x4d8>
 80075fa:	bf00      	nop
 80075fc:	40011000 	.word	0x40011000
 8007600:	40011400 	.word	0x40011400
 8007604:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800760c:	2200      	movs	r2, #0
 800760e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007612:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007616:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800761a:	4642      	mov	r2, r8
 800761c:	464b      	mov	r3, r9
 800761e:	1891      	adds	r1, r2, r2
 8007620:	6239      	str	r1, [r7, #32]
 8007622:	415b      	adcs	r3, r3
 8007624:	627b      	str	r3, [r7, #36]	@ 0x24
 8007626:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800762a:	4641      	mov	r1, r8
 800762c:	1854      	adds	r4, r2, r1
 800762e:	4649      	mov	r1, r9
 8007630:	eb43 0501 	adc.w	r5, r3, r1
 8007634:	f04f 0200 	mov.w	r2, #0
 8007638:	f04f 0300 	mov.w	r3, #0
 800763c:	00eb      	lsls	r3, r5, #3
 800763e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007642:	00e2      	lsls	r2, r4, #3
 8007644:	4614      	mov	r4, r2
 8007646:	461d      	mov	r5, r3
 8007648:	4643      	mov	r3, r8
 800764a:	18e3      	adds	r3, r4, r3
 800764c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007650:	464b      	mov	r3, r9
 8007652:	eb45 0303 	adc.w	r3, r5, r3
 8007656:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800765a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007666:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800766a:	f04f 0200 	mov.w	r2, #0
 800766e:	f04f 0300 	mov.w	r3, #0
 8007672:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007676:	4629      	mov	r1, r5
 8007678:	008b      	lsls	r3, r1, #2
 800767a:	4621      	mov	r1, r4
 800767c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007680:	4621      	mov	r1, r4
 8007682:	008a      	lsls	r2, r1, #2
 8007684:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007688:	f7f9 fa8e 	bl	8000ba8 <__aeabi_uldivmod>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	4b60      	ldr	r3, [pc, #384]	@ (8007814 <UART_SetConfig+0x4e4>)
 8007692:	fba3 2302 	umull	r2, r3, r3, r2
 8007696:	095b      	lsrs	r3, r3, #5
 8007698:	011c      	lsls	r4, r3, #4
 800769a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800769e:	2200      	movs	r2, #0
 80076a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80076a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80076a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80076ac:	4642      	mov	r2, r8
 80076ae:	464b      	mov	r3, r9
 80076b0:	1891      	adds	r1, r2, r2
 80076b2:	61b9      	str	r1, [r7, #24]
 80076b4:	415b      	adcs	r3, r3
 80076b6:	61fb      	str	r3, [r7, #28]
 80076b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076bc:	4641      	mov	r1, r8
 80076be:	1851      	adds	r1, r2, r1
 80076c0:	6139      	str	r1, [r7, #16]
 80076c2:	4649      	mov	r1, r9
 80076c4:	414b      	adcs	r3, r1
 80076c6:	617b      	str	r3, [r7, #20]
 80076c8:	f04f 0200 	mov.w	r2, #0
 80076cc:	f04f 0300 	mov.w	r3, #0
 80076d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076d4:	4659      	mov	r1, fp
 80076d6:	00cb      	lsls	r3, r1, #3
 80076d8:	4651      	mov	r1, sl
 80076da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076de:	4651      	mov	r1, sl
 80076e0:	00ca      	lsls	r2, r1, #3
 80076e2:	4610      	mov	r0, r2
 80076e4:	4619      	mov	r1, r3
 80076e6:	4603      	mov	r3, r0
 80076e8:	4642      	mov	r2, r8
 80076ea:	189b      	adds	r3, r3, r2
 80076ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076f0:	464b      	mov	r3, r9
 80076f2:	460a      	mov	r2, r1
 80076f4:	eb42 0303 	adc.w	r3, r2, r3
 80076f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007706:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007708:	f04f 0200 	mov.w	r2, #0
 800770c:	f04f 0300 	mov.w	r3, #0
 8007710:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007714:	4649      	mov	r1, r9
 8007716:	008b      	lsls	r3, r1, #2
 8007718:	4641      	mov	r1, r8
 800771a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800771e:	4641      	mov	r1, r8
 8007720:	008a      	lsls	r2, r1, #2
 8007722:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007726:	f7f9 fa3f 	bl	8000ba8 <__aeabi_uldivmod>
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	4611      	mov	r1, r2
 8007730:	4b38      	ldr	r3, [pc, #224]	@ (8007814 <UART_SetConfig+0x4e4>)
 8007732:	fba3 2301 	umull	r2, r3, r3, r1
 8007736:	095b      	lsrs	r3, r3, #5
 8007738:	2264      	movs	r2, #100	@ 0x64
 800773a:	fb02 f303 	mul.w	r3, r2, r3
 800773e:	1acb      	subs	r3, r1, r3
 8007740:	011b      	lsls	r3, r3, #4
 8007742:	3332      	adds	r3, #50	@ 0x32
 8007744:	4a33      	ldr	r2, [pc, #204]	@ (8007814 <UART_SetConfig+0x4e4>)
 8007746:	fba2 2303 	umull	r2, r3, r2, r3
 800774a:	095b      	lsrs	r3, r3, #5
 800774c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007750:	441c      	add	r4, r3
 8007752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007756:	2200      	movs	r2, #0
 8007758:	673b      	str	r3, [r7, #112]	@ 0x70
 800775a:	677a      	str	r2, [r7, #116]	@ 0x74
 800775c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007760:	4642      	mov	r2, r8
 8007762:	464b      	mov	r3, r9
 8007764:	1891      	adds	r1, r2, r2
 8007766:	60b9      	str	r1, [r7, #8]
 8007768:	415b      	adcs	r3, r3
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007770:	4641      	mov	r1, r8
 8007772:	1851      	adds	r1, r2, r1
 8007774:	6039      	str	r1, [r7, #0]
 8007776:	4649      	mov	r1, r9
 8007778:	414b      	adcs	r3, r1
 800777a:	607b      	str	r3, [r7, #4]
 800777c:	f04f 0200 	mov.w	r2, #0
 8007780:	f04f 0300 	mov.w	r3, #0
 8007784:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007788:	4659      	mov	r1, fp
 800778a:	00cb      	lsls	r3, r1, #3
 800778c:	4651      	mov	r1, sl
 800778e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007792:	4651      	mov	r1, sl
 8007794:	00ca      	lsls	r2, r1, #3
 8007796:	4610      	mov	r0, r2
 8007798:	4619      	mov	r1, r3
 800779a:	4603      	mov	r3, r0
 800779c:	4642      	mov	r2, r8
 800779e:	189b      	adds	r3, r3, r2
 80077a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077a2:	464b      	mov	r3, r9
 80077a4:	460a      	mov	r2, r1
 80077a6:	eb42 0303 	adc.w	r3, r2, r3
 80077aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80077ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80077b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80077b8:	f04f 0200 	mov.w	r2, #0
 80077bc:	f04f 0300 	mov.w	r3, #0
 80077c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80077c4:	4649      	mov	r1, r9
 80077c6:	008b      	lsls	r3, r1, #2
 80077c8:	4641      	mov	r1, r8
 80077ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077ce:	4641      	mov	r1, r8
 80077d0:	008a      	lsls	r2, r1, #2
 80077d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80077d6:	f7f9 f9e7 	bl	8000ba8 <__aeabi_uldivmod>
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	4b0d      	ldr	r3, [pc, #52]	@ (8007814 <UART_SetConfig+0x4e4>)
 80077e0:	fba3 1302 	umull	r1, r3, r3, r2
 80077e4:	095b      	lsrs	r3, r3, #5
 80077e6:	2164      	movs	r1, #100	@ 0x64
 80077e8:	fb01 f303 	mul.w	r3, r1, r3
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	011b      	lsls	r3, r3, #4
 80077f0:	3332      	adds	r3, #50	@ 0x32
 80077f2:	4a08      	ldr	r2, [pc, #32]	@ (8007814 <UART_SetConfig+0x4e4>)
 80077f4:	fba2 2303 	umull	r2, r3, r2, r3
 80077f8:	095b      	lsrs	r3, r3, #5
 80077fa:	f003 020f 	and.w	r2, r3, #15
 80077fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4422      	add	r2, r4
 8007806:	609a      	str	r2, [r3, #8]
}
 8007808:	bf00      	nop
 800780a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800780e:	46bd      	mov	sp, r7
 8007810:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007814:	51eb851f 	.word	0x51eb851f

08007818 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007818:	b084      	sub	sp, #16
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	f107 001c 	add.w	r0, r7, #28
 8007826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800782a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800782e:	2b01      	cmp	r3, #1
 8007830:	d123      	bne.n	800787a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007836:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007846:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800785a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800785e:	2b01      	cmp	r3, #1
 8007860:	d105      	bne.n	800786e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f9dc 	bl	8007c2c <USB_CoreReset>
 8007874:	4603      	mov	r3, r0
 8007876:	73fb      	strb	r3, [r7, #15]
 8007878:	e01b      	b.n	80078b2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f9d0 	bl	8007c2c <USB_CoreReset>
 800788c:	4603      	mov	r3, r0
 800788e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007890:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007894:	2b00      	cmp	r3, #0
 8007896:	d106      	bne.n	80078a6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800789c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80078a4:	e005      	b.n	80078b2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80078b2:	7fbb      	ldrb	r3, [r7, #30]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d10b      	bne.n	80078d0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f043 0206 	orr.w	r2, r3, #6
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f043 0220 	orr.w	r2, r3, #32
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078dc:	b004      	add	sp, #16
 80078de:	4770      	bx	lr

080078e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f043 0201 	orr.w	r2, r3, #1
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f023 0201 	bic.w	r2, r3, #1
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	460b      	mov	r3, r1
 800792e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007930:	2300      	movs	r3, #0
 8007932:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007940:	78fb      	ldrb	r3, [r7, #3]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d115      	bne.n	8007972 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007952:	200a      	movs	r0, #10
 8007954:	f7fa fdce 	bl	80024f4 <HAL_Delay>
      ms += 10U;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	330a      	adds	r3, #10
 800795c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f956 	bl	8007c10 <USB_GetMode>
 8007964:	4603      	mov	r3, r0
 8007966:	2b01      	cmp	r3, #1
 8007968:	d01e      	beq.n	80079a8 <USB_SetCurrentMode+0x84>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2bc7      	cmp	r3, #199	@ 0xc7
 800796e:	d9f0      	bls.n	8007952 <USB_SetCurrentMode+0x2e>
 8007970:	e01a      	b.n	80079a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007972:	78fb      	ldrb	r3, [r7, #3]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d115      	bne.n	80079a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007984:	200a      	movs	r0, #10
 8007986:	f7fa fdb5 	bl	80024f4 <HAL_Delay>
      ms += 10U;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	330a      	adds	r3, #10
 800798e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f93d 	bl	8007c10 <USB_GetMode>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d005      	beq.n	80079a8 <USB_SetCurrentMode+0x84>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2bc7      	cmp	r3, #199	@ 0xc7
 80079a0:	d9f0      	bls.n	8007984 <USB_SetCurrentMode+0x60>
 80079a2:	e001      	b.n	80079a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e005      	b.n	80079b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2bc8      	cmp	r3, #200	@ 0xc8
 80079ac:	d101      	bne.n	80079b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e000      	b.n	80079b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	3301      	adds	r3, #1
 80079ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079d6:	d901      	bls.n	80079dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	e01b      	b.n	8007a14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	daf2      	bge.n	80079ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80079e4:	2300      	movs	r3, #0
 80079e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	019b      	lsls	r3, r3, #6
 80079ec:	f043 0220 	orr.w	r2, r3, #32
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	3301      	adds	r3, #1
 80079f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a00:	d901      	bls.n	8007a06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e006      	b.n	8007a14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	f003 0320 	and.w	r3, r3, #32
 8007a0e:	2b20      	cmp	r3, #32
 8007a10:	d0f0      	beq.n	80079f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a38:	d901      	bls.n	8007a3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e018      	b.n	8007a70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	daf2      	bge.n	8007a2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2210      	movs	r2, #16
 8007a4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	3301      	adds	r3, #1
 8007a54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a5c:	d901      	bls.n	8007a62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e006      	b.n	8007a70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	f003 0310 	and.w	r3, r3, #16
 8007a6a:	2b10      	cmp	r3, #16
 8007a6c:	d0f0      	beq.n	8007a50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3714      	adds	r7, #20
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b089      	sub	sp, #36	@ 0x24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	4611      	mov	r1, r2
 8007a88:	461a      	mov	r2, r3
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	71fb      	strb	r3, [r7, #7]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007a9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d123      	bne.n	8007aea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007aa2:	88bb      	ldrh	r3, [r7, #4]
 8007aa4:	3303      	adds	r3, #3
 8007aa6:	089b      	lsrs	r3, r3, #2
 8007aa8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007aaa:	2300      	movs	r3, #0
 8007aac:	61bb      	str	r3, [r7, #24]
 8007aae:	e018      	b.n	8007ae2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ab0:	79fb      	ldrb	r3, [r7, #7]
 8007ab2:	031a      	lsls	r2, r3, #12
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007abc:	461a      	mov	r2, r3
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	3301      	adds	r3, #1
 8007ace:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	61bb      	str	r3, [r7, #24]
 8007ae2:	69ba      	ldr	r2, [r7, #24]
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d3e2      	bcc.n	8007ab0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3724      	adds	r7, #36	@ 0x24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b08b      	sub	sp, #44	@ 0x2c
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	4613      	mov	r3, r2
 8007b04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b0e:	88fb      	ldrh	r3, [r7, #6]
 8007b10:	089b      	lsrs	r3, r3, #2
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b16:	88fb      	ldrh	r3, [r7, #6]
 8007b18:	f003 0303 	and.w	r3, r3, #3
 8007b1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b1e:	2300      	movs	r3, #0
 8007b20:	623b      	str	r3, [r7, #32]
 8007b22:	e014      	b.n	8007b4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b32:	3301      	adds	r3, #1
 8007b34:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b38:	3301      	adds	r3, #1
 8007b3a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3e:	3301      	adds	r3, #1
 8007b40:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b44:	3301      	adds	r3, #1
 8007b46:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	623b      	str	r3, [r7, #32]
 8007b4e:	6a3a      	ldr	r2, [r7, #32]
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d3e6      	bcc.n	8007b24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007b56:	8bfb      	ldrh	r3, [r7, #30]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d01e      	beq.n	8007b9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b66:	461a      	mov	r2, r3
 8007b68:	f107 0310 	add.w	r3, r7, #16
 8007b6c:	6812      	ldr	r2, [r2, #0]
 8007b6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	00db      	lsls	r3, r3, #3
 8007b78:	fa22 f303 	lsr.w	r3, r2, r3
 8007b7c:	b2da      	uxtb	r2, r3
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b80:	701a      	strb	r2, [r3, #0]
      i++;
 8007b82:	6a3b      	ldr	r3, [r7, #32]
 8007b84:	3301      	adds	r3, #1
 8007b86:	623b      	str	r3, [r7, #32]
      pDest++;
 8007b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007b8e:	8bfb      	ldrh	r3, [r7, #30]
 8007b90:	3b01      	subs	r3, #1
 8007b92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007b94:	8bfb      	ldrh	r3, [r7, #30]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1ea      	bne.n	8007b70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	372c      	adds	r7, #44	@ 0x2c
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b085      	sub	sp, #20
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007bde:	78fb      	ldrb	r3, [r7, #3]
 8007be0:	015a      	lsls	r2, r3, #5
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	4413      	add	r3, r2
 8007be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007bee:	78fb      	ldrb	r3, [r7, #3]
 8007bf0:	015a      	lsls	r2, r3, #5
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	4013      	ands	r3, r2
 8007c00:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c02:	68bb      	ldr	r3, [r7, #8]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3714      	adds	r7, #20
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	695b      	ldr	r3, [r3, #20]
 8007c1c:	f003 0301 	and.w	r3, r3, #1
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c44:	d901      	bls.n	8007c4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e01b      	b.n	8007c82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	daf2      	bge.n	8007c38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	f043 0201 	orr.w	r2, r3, #1
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	3301      	adds	r3, #1
 8007c66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c6e:	d901      	bls.n	8007c74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c70:	2303      	movs	r3, #3
 8007c72:	e006      	b.n	8007c82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d0f0      	beq.n	8007c62 <USB_CoreReset+0x36>

  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
	...

08007c90 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c90:	b084      	sub	sp, #16
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b086      	sub	sp, #24
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007c9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d119      	bne.n	8007d1a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d10a      	bne.n	8007d04 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007cfc:	f043 0304 	orr.w	r3, r3, #4
 8007d00:	6013      	str	r3, [r2, #0]
 8007d02:	e014      	b.n	8007d2e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007d12:	f023 0304 	bic.w	r3, r3, #4
 8007d16:	6013      	str	r3, [r2, #0]
 8007d18:	e009      	b.n	8007d2e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007d28:	f023 0304 	bic.w	r3, r3, #4
 8007d2c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d2e:	2110      	movs	r1, #16
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7ff fe43 	bl	80079bc <USB_FlushTxFifo>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d001      	beq.n	8007d40 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7ff fe6d 	bl	8007a20 <USB_FlushRxFifo>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007d50:	2300      	movs	r3, #0
 8007d52:	613b      	str	r3, [r7, #16]
 8007d54:	e015      	b.n	8007d82 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	015a      	lsls	r2, r3, #5
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d62:	461a      	mov	r2, r3
 8007d64:	f04f 33ff 	mov.w	r3, #4294967295
 8007d68:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d76:	461a      	mov	r2, r3
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	613b      	str	r3, [r7, #16]
 8007d82:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007d86:	461a      	mov	r2, r3
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d3e3      	bcc.n	8007d56 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f04f 32ff 	mov.w	r2, #4294967295
 8007d9a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a18      	ldr	r2, [pc, #96]	@ (8007e00 <USB_HostInit+0x170>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d10b      	bne.n	8007dbc <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007daa:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a15      	ldr	r2, [pc, #84]	@ (8007e04 <USB_HostInit+0x174>)
 8007db0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a14      	ldr	r2, [pc, #80]	@ (8007e08 <USB_HostInit+0x178>)
 8007db6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007dba:	e009      	b.n	8007dd0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2280      	movs	r2, #128	@ 0x80
 8007dc0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a11      	ldr	r2, [pc, #68]	@ (8007e0c <USB_HostInit+0x17c>)
 8007dc6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a11      	ldr	r2, [pc, #68]	@ (8007e10 <USB_HostInit+0x180>)
 8007dcc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007dd0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d105      	bne.n	8007de4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	f043 0210 	orr.w	r2, r3, #16
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	699a      	ldr	r2, [r3, #24]
 8007de8:	4b0a      	ldr	r3, [pc, #40]	@ (8007e14 <USB_HostInit+0x184>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3718      	adds	r7, #24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dfc:	b004      	add	sp, #16
 8007dfe:	4770      	bx	lr
 8007e00:	40040000 	.word	0x40040000
 8007e04:	01000200 	.word	0x01000200
 8007e08:	00e00300 	.word	0x00e00300
 8007e0c:	00600080 	.word	0x00600080
 8007e10:	004000e0 	.word	0x004000e0
 8007e14:	a3200008 	.word	0xa3200008

08007e18 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	460b      	mov	r3, r1
 8007e22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007e36:	f023 0303 	bic.w	r3, r3, #3
 8007e3a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	78fb      	ldrb	r3, [r7, #3]
 8007e46:	f003 0303 	and.w	r3, r3, #3
 8007e4a:	68f9      	ldr	r1, [r7, #12]
 8007e4c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007e50:	4313      	orrs	r3, r2
 8007e52:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007e54:	78fb      	ldrb	r3, [r7, #3]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d107      	bne.n	8007e6a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e60:	461a      	mov	r2, r3
 8007e62:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007e66:	6053      	str	r3, [r2, #4]
 8007e68:	e00c      	b.n	8007e84 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007e6a:	78fb      	ldrb	r3, [r7, #3]
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d107      	bne.n	8007e80 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e76:	461a      	mov	r2, r3
 8007e78:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007e7c:	6053      	str	r3, [r2, #4]
 8007e7e:	e001      	b.n	8007e84 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e000      	b.n	8007e86 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b084      	sub	sp, #16
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007eb2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ec0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007ec2:	2064      	movs	r0, #100	@ 0x64
 8007ec4:	f7fa fb16 	bl	80024f4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ed4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007ed6:	200a      	movs	r0, #10
 8007ed8:	f7fa fb0c 	bl	80024f4 <HAL_Delay>

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b085      	sub	sp, #20
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	460b      	mov	r3, r1
 8007ef0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007f0a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d109      	bne.n	8007f2a <USB_DriveVbus+0x44>
 8007f16:	78fb      	ldrb	r3, [r7, #3]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d106      	bne.n	8007f2a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007f28:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f34:	d109      	bne.n	8007f4a <USB_DriveVbus+0x64>
 8007f36:	78fb      	ldrb	r3, [r7, #3]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d106      	bne.n	8007f4a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f48:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	0c5b      	lsrs	r3, r3, #17
 8007f76:	f003 0303 	and.w	r3, r3, #3
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b085      	sub	sp, #20
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	b29b      	uxth	r3, r3
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3714      	adds	r7, #20
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b088      	sub	sp, #32
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	4608      	mov	r0, r1
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	70fb      	strb	r3, [r7, #3]
 8007fba:	460b      	mov	r3, r1
 8007fbc:	70bb      	strb	r3, [r7, #2]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007fca:	78fb      	ldrb	r3, [r7, #3]
 8007fcc:	015a      	lsls	r2, r3, #5
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fdc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007fde:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d87c      	bhi.n	80080e0 <USB_HC_Init+0x138>
 8007fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fec <USB_HC_Init+0x44>)
 8007fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fec:	08007ffd 	.word	0x08007ffd
 8007ff0:	080080a3 	.word	0x080080a3
 8007ff4:	08007ffd 	.word	0x08007ffd
 8007ff8:	08008065 	.word	0x08008065
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ffc:	78fb      	ldrb	r3, [r7, #3]
 8007ffe:	015a      	lsls	r2, r3, #5
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	4413      	add	r3, r2
 8008004:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008008:	461a      	mov	r2, r3
 800800a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800800e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008010:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008014:	2b00      	cmp	r3, #0
 8008016:	da10      	bge.n	800803a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008018:	78fb      	ldrb	r3, [r7, #3]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	4413      	add	r3, r2
 8008020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	78fa      	ldrb	r2, [r7, #3]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	440a      	add	r2, r1
 800802e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008032:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008036:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008038:	e055      	b.n	80080e6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a6f      	ldr	r2, [pc, #444]	@ (80081fc <USB_HC_Init+0x254>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d151      	bne.n	80080e6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008042:	78fb      	ldrb	r3, [r7, #3]
 8008044:	015a      	lsls	r2, r3, #5
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	4413      	add	r3, r2
 800804a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	78fa      	ldrb	r2, [r7, #3]
 8008052:	0151      	lsls	r1, r2, #5
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	440a      	add	r2, r1
 8008058:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800805c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008060:	60d3      	str	r3, [r2, #12]
      break;
 8008062:	e040      	b.n	80080e6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008064:	78fb      	ldrb	r3, [r7, #3]
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	4413      	add	r3, r2
 800806c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008070:	461a      	mov	r2, r3
 8008072:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008076:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008078:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800807c:	2b00      	cmp	r3, #0
 800807e:	da34      	bge.n	80080ea <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008080:	78fb      	ldrb	r3, [r7, #3]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	4413      	add	r3, r2
 8008088:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	78fa      	ldrb	r2, [r7, #3]
 8008090:	0151      	lsls	r1, r2, #5
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	440a      	add	r2, r1
 8008096:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800809a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800809e:	60d3      	str	r3, [r2, #12]
      }

      break;
 80080a0:	e023      	b.n	80080ea <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80080a2:	78fb      	ldrb	r3, [r7, #3]
 80080a4:	015a      	lsls	r2, r3, #5
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	4413      	add	r3, r2
 80080aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080ae:	461a      	mov	r2, r3
 80080b0:	f240 2325 	movw	r3, #549	@ 0x225
 80080b4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80080b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	da17      	bge.n	80080ee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80080be:	78fb      	ldrb	r3, [r7, #3]
 80080c0:	015a      	lsls	r2, r3, #5
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	4413      	add	r3, r2
 80080c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	78fa      	ldrb	r2, [r7, #3]
 80080ce:	0151      	lsls	r1, r2, #5
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	440a      	add	r2, r1
 80080d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080d8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80080dc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80080de:	e006      	b.n	80080ee <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	77fb      	strb	r3, [r7, #31]
      break;
 80080e4:	e004      	b.n	80080f0 <USB_HC_Init+0x148>
      break;
 80080e6:	bf00      	nop
 80080e8:	e002      	b.n	80080f0 <USB_HC_Init+0x148>
      break;
 80080ea:	bf00      	nop
 80080ec:	e000      	b.n	80080f0 <USB_HC_Init+0x148>
      break;
 80080ee:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80080f0:	78fb      	ldrb	r3, [r7, #3]
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080fc:	461a      	mov	r2, r3
 80080fe:	2300      	movs	r3, #0
 8008100:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008102:	78fb      	ldrb	r3, [r7, #3]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	4413      	add	r3, r2
 800810a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	78fa      	ldrb	r2, [r7, #3]
 8008112:	0151      	lsls	r1, r2, #5
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	440a      	add	r2, r1
 8008118:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800811c:	f043 0302 	orr.w	r3, r3, #2
 8008120:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008128:	699a      	ldr	r2, [r3, #24]
 800812a:	78fb      	ldrb	r3, [r7, #3]
 800812c:	f003 030f 	and.w	r3, r3, #15
 8008130:	2101      	movs	r1, #1
 8008132:	fa01 f303 	lsl.w	r3, r1, r3
 8008136:	6939      	ldr	r1, [r7, #16]
 8008138:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800813c:	4313      	orrs	r3, r2
 800813e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800814c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008150:	2b00      	cmp	r3, #0
 8008152:	da03      	bge.n	800815c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008154:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008158:	61bb      	str	r3, [r7, #24]
 800815a:	e001      	b.n	8008160 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7ff fef9 	bl	8007f58 <USB_GetHostSpeed>
 8008166:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008168:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800816c:	2b02      	cmp	r3, #2
 800816e:	d106      	bne.n	800817e <USB_HC_Init+0x1d6>
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2b02      	cmp	r3, #2
 8008174:	d003      	beq.n	800817e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008176:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800817a:	617b      	str	r3, [r7, #20]
 800817c:	e001      	b.n	8008182 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800817e:	2300      	movs	r3, #0
 8008180:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008182:	787b      	ldrb	r3, [r7, #1]
 8008184:	059b      	lsls	r3, r3, #22
 8008186:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800818a:	78bb      	ldrb	r3, [r7, #2]
 800818c:	02db      	lsls	r3, r3, #11
 800818e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008192:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008194:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008198:	049b      	lsls	r3, r3, #18
 800819a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800819e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80081a0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80081a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80081a6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	431a      	orrs	r2, r3
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081b0:	78fa      	ldrb	r2, [r7, #3]
 80081b2:	0151      	lsls	r1, r2, #5
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	440a      	add	r2, r1
 80081b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80081bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081c0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80081c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	d003      	beq.n	80081d2 <USB_HC_Init+0x22a>
 80081ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d10f      	bne.n	80081f2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80081d2:	78fb      	ldrb	r3, [r7, #3]
 80081d4:	015a      	lsls	r2, r3, #5
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	4413      	add	r3, r2
 80081da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	78fa      	ldrb	r2, [r7, #3]
 80081e2:	0151      	lsls	r1, r2, #5
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	440a      	add	r2, r1
 80081e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80081f0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80081f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3720      	adds	r7, #32
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	40040000 	.word	0x40040000

08008200 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b08c      	sub	sp, #48	@ 0x30
 8008204:	af02      	add	r7, sp, #8
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	4613      	mov	r3, r2
 800820c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	785b      	ldrb	r3, [r3, #1]
 8008216:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008218:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800821c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	4a5d      	ldr	r2, [pc, #372]	@ (8008398 <USB_HC_StartXfer+0x198>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d12f      	bne.n	8008286 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008226:	79fb      	ldrb	r3, [r7, #7]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d11c      	bne.n	8008266 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	7c9b      	ldrb	r3, [r3, #18]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d003      	beq.n	800823c <USB_HC_StartXfer+0x3c>
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	7c9b      	ldrb	r3, [r3, #18]
 8008238:	2b02      	cmp	r3, #2
 800823a:	d124      	bne.n	8008286 <USB_HC_StartXfer+0x86>
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	799b      	ldrb	r3, [r3, #6]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d120      	bne.n	8008286 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	015a      	lsls	r2, r3, #5
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	4413      	add	r3, r2
 800824c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	69fa      	ldr	r2, [r7, #28]
 8008254:	0151      	lsls	r1, r2, #5
 8008256:	6a3a      	ldr	r2, [r7, #32]
 8008258:	440a      	add	r2, r1
 800825a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800825e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008262:	60d3      	str	r3, [r2, #12]
 8008264:	e00f      	b.n	8008286 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	791b      	ldrb	r3, [r3, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10b      	bne.n	8008286 <USB_HC_StartXfer+0x86>
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	795b      	ldrb	r3, [r3, #5]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d107      	bne.n	8008286 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	785b      	ldrb	r3, [r3, #1]
 800827a:	4619      	mov	r1, r3
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f000 fb6b 	bl	8008958 <USB_DoPing>
        return HAL_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	e232      	b.n	80086ec <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	799b      	ldrb	r3, [r3, #6]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d158      	bne.n	8008340 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800828e:	2301      	movs	r3, #1
 8008290:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	78db      	ldrb	r3, [r3, #3]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d007      	beq.n	80082aa <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800829a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	8a92      	ldrh	r2, [r2, #20]
 80082a0:	fb03 f202 	mul.w	r2, r3, r2
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	61da      	str	r2, [r3, #28]
 80082a8:	e07c      	b.n	80083a4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	7c9b      	ldrb	r3, [r3, #18]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d130      	bne.n	8008314 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	2bbc      	cmp	r3, #188	@ 0xbc
 80082b8:	d918      	bls.n	80082ec <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	8a9b      	ldrh	r3, [r3, #20]
 80082be:	461a      	mov	r2, r3
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	69da      	ldr	r2, [r3, #28]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d003      	beq.n	80082dc <USB_HC_StartXfer+0xdc>
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d103      	bne.n	80082e4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2202      	movs	r2, #2
 80082e0:	60da      	str	r2, [r3, #12]
 80082e2:	e05f      	b.n	80083a4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2201      	movs	r2, #1
 80082e8:	60da      	str	r2, [r3, #12]
 80082ea:	e05b      	b.n	80083a4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	6a1a      	ldr	r2, [r3, #32]
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d007      	beq.n	800830c <USB_HC_StartXfer+0x10c>
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	2b02      	cmp	r3, #2
 8008302:	d003      	beq.n	800830c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2204      	movs	r2, #4
 8008308:	60da      	str	r2, [r3, #12]
 800830a:	e04b      	b.n	80083a4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2203      	movs	r2, #3
 8008310:	60da      	str	r2, [r3, #12]
 8008312:	e047      	b.n	80083a4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008314:	79fb      	ldrb	r3, [r7, #7]
 8008316:	2b01      	cmp	r3, #1
 8008318:	d10d      	bne.n	8008336 <USB_HC_StartXfer+0x136>
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	8a92      	ldrh	r2, [r2, #20]
 8008322:	4293      	cmp	r3, r2
 8008324:	d907      	bls.n	8008336 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008326:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	8a92      	ldrh	r2, [r2, #20]
 800832c:	fb03 f202 	mul.w	r2, r3, r2
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	61da      	str	r2, [r3, #28]
 8008334:	e036      	b.n	80083a4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	6a1a      	ldr	r2, [r3, #32]
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	61da      	str	r2, [r3, #28]
 800833e:	e031      	b.n	80083a4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	6a1b      	ldr	r3, [r3, #32]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d018      	beq.n	800837a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	6a1b      	ldr	r3, [r3, #32]
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	8a92      	ldrh	r2, [r2, #20]
 8008350:	4413      	add	r3, r2
 8008352:	3b01      	subs	r3, #1
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	8a92      	ldrh	r2, [r2, #20]
 8008358:	fbb3 f3f2 	udiv	r3, r3, r2
 800835c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800835e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008360:	8b7b      	ldrh	r3, [r7, #26]
 8008362:	429a      	cmp	r2, r3
 8008364:	d90b      	bls.n	800837e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008366:	8b7b      	ldrh	r3, [r7, #26]
 8008368:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800836a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	8a92      	ldrh	r2, [r2, #20]
 8008370:	fb03 f202 	mul.w	r2, r3, r2
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	61da      	str	r2, [r3, #28]
 8008378:	e001      	b.n	800837e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800837a:	2301      	movs	r3, #1
 800837c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	78db      	ldrb	r3, [r3, #3]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00a      	beq.n	800839c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008386:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	8a92      	ldrh	r2, [r2, #20]
 800838c:	fb03 f202 	mul.w	r2, r3, r2
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	61da      	str	r2, [r3, #28]
 8008394:	e006      	b.n	80083a4 <USB_HC_StartXfer+0x1a4>
 8008396:	bf00      	nop
 8008398:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	6a1a      	ldr	r2, [r3, #32]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	69db      	ldr	r3, [r3, #28]
 80083a8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80083ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80083ae:	04d9      	lsls	r1, r3, #19
 80083b0:	4ba3      	ldr	r3, [pc, #652]	@ (8008640 <USB_HC_StartXfer+0x440>)
 80083b2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80083b4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	7d9b      	ldrb	r3, [r3, #22]
 80083ba:	075b      	lsls	r3, r3, #29
 80083bc:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80083c0:	69f9      	ldr	r1, [r7, #28]
 80083c2:	0148      	lsls	r0, r1, #5
 80083c4:	6a39      	ldr	r1, [r7, #32]
 80083c6:	4401      	add	r1, r0
 80083c8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80083cc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80083ce:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80083d0:	79fb      	ldrb	r3, [r7, #7]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d009      	beq.n	80083ea <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	6999      	ldr	r1, [r3, #24]
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	015a      	lsls	r2, r3, #5
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083e6:	460a      	mov	r2, r1
 80083e8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80083ea:	6a3b      	ldr	r3, [r7, #32]
 80083ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f003 0301 	and.w	r3, r3, #1
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	bf0c      	ite	eq
 80083fa:	2301      	moveq	r3, #1
 80083fc:	2300      	movne	r3, #0
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	015a      	lsls	r2, r3, #5
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	4413      	add	r3, r2
 800840a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	69fa      	ldr	r2, [r7, #28]
 8008412:	0151      	lsls	r1, r2, #5
 8008414:	6a3a      	ldr	r2, [r7, #32]
 8008416:	440a      	add	r2, r1
 8008418:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800841c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008420:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	015a      	lsls	r2, r3, #5
 8008426:	6a3b      	ldr	r3, [r7, #32]
 8008428:	4413      	add	r3, r2
 800842a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	7e7b      	ldrb	r3, [r7, #25]
 8008432:	075b      	lsls	r3, r3, #29
 8008434:	69f9      	ldr	r1, [r7, #28]
 8008436:	0148      	lsls	r0, r1, #5
 8008438:	6a39      	ldr	r1, [r7, #32]
 800843a:	4401      	add	r1, r0
 800843c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008440:	4313      	orrs	r3, r2
 8008442:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	799b      	ldrb	r3, [r3, #6]
 8008448:	2b01      	cmp	r3, #1
 800844a:	f040 80c3 	bne.w	80085d4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	7c5b      	ldrb	r3, [r3, #17]
 8008452:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008458:	4313      	orrs	r3, r2
 800845a:	69fa      	ldr	r2, [r7, #28]
 800845c:	0151      	lsls	r1, r2, #5
 800845e:	6a3a      	ldr	r2, [r7, #32]
 8008460:	440a      	add	r2, r1
 8008462:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008466:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800846a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	4413      	add	r3, r2
 8008474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	69fa      	ldr	r2, [r7, #28]
 800847c:	0151      	lsls	r1, r2, #5
 800847e:	6a3a      	ldr	r2, [r7, #32]
 8008480:	440a      	add	r2, r1
 8008482:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008486:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800848a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	79db      	ldrb	r3, [r3, #7]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d123      	bne.n	80084dc <USB_HC_StartXfer+0x2dc>
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	78db      	ldrb	r3, [r3, #3]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d11f      	bne.n	80084dc <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	6a3b      	ldr	r3, [r7, #32]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	69fa      	ldr	r2, [r7, #28]
 80084ac:	0151      	lsls	r1, r2, #5
 80084ae:	6a3a      	ldr	r2, [r7, #32]
 80084b0:	440a      	add	r2, r1
 80084b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084ba:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	015a      	lsls	r2, r3, #5
 80084c0:	6a3b      	ldr	r3, [r7, #32]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	69fa      	ldr	r2, [r7, #28]
 80084cc:	0151      	lsls	r1, r2, #5
 80084ce:	6a3a      	ldr	r2, [r7, #32]
 80084d0:	440a      	add	r2, r1
 80084d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084da:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	7c9b      	ldrb	r3, [r3, #18]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d003      	beq.n	80084ec <USB_HC_StartXfer+0x2ec>
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	7c9b      	ldrb	r3, [r3, #18]
 80084e8:	2b03      	cmp	r3, #3
 80084ea:	d117      	bne.n	800851c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d113      	bne.n	800851c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	78db      	ldrb	r3, [r3, #3]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d10f      	bne.n	800851c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	015a      	lsls	r2, r3, #5
 8008500:	6a3b      	ldr	r3, [r7, #32]
 8008502:	4413      	add	r3, r2
 8008504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	69fa      	ldr	r2, [r7, #28]
 800850c:	0151      	lsls	r1, r2, #5
 800850e:	6a3a      	ldr	r2, [r7, #32]
 8008510:	440a      	add	r2, r1
 8008512:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008516:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800851a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	7c9b      	ldrb	r3, [r3, #18]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d162      	bne.n	80085ea <USB_HC_StartXfer+0x3ea>
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	78db      	ldrb	r3, [r3, #3]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d15e      	bne.n	80085ea <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	3b01      	subs	r3, #1
 8008532:	2b03      	cmp	r3, #3
 8008534:	d858      	bhi.n	80085e8 <USB_HC_StartXfer+0x3e8>
 8008536:	a201      	add	r2, pc, #4	@ (adr r2, 800853c <USB_HC_StartXfer+0x33c>)
 8008538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853c:	0800854d 	.word	0x0800854d
 8008540:	0800856f 	.word	0x0800856f
 8008544:	08008591 	.word	0x08008591
 8008548:	080085b3 	.word	0x080085b3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	015a      	lsls	r2, r3, #5
 8008550:	6a3b      	ldr	r3, [r7, #32]
 8008552:	4413      	add	r3, r2
 8008554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	69fa      	ldr	r2, [r7, #28]
 800855c:	0151      	lsls	r1, r2, #5
 800855e:	6a3a      	ldr	r2, [r7, #32]
 8008560:	440a      	add	r2, r1
 8008562:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800856a:	6053      	str	r3, [r2, #4]
          break;
 800856c:	e03d      	b.n	80085ea <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	4413      	add	r3, r2
 8008576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	69fa      	ldr	r2, [r7, #28]
 800857e:	0151      	lsls	r1, r2, #5
 8008580:	6a3a      	ldr	r2, [r7, #32]
 8008582:	440a      	add	r2, r1
 8008584:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008588:	f043 030e 	orr.w	r3, r3, #14
 800858c:	6053      	str	r3, [r2, #4]
          break;
 800858e:	e02c      	b.n	80085ea <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	4413      	add	r3, r2
 8008598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	69fa      	ldr	r2, [r7, #28]
 80085a0:	0151      	lsls	r1, r2, #5
 80085a2:	6a3a      	ldr	r2, [r7, #32]
 80085a4:	440a      	add	r2, r1
 80085a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80085ae:	6053      	str	r3, [r2, #4]
          break;
 80085b0:	e01b      	b.n	80085ea <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	015a      	lsls	r2, r3, #5
 80085b6:	6a3b      	ldr	r3, [r7, #32]
 80085b8:	4413      	add	r3, r2
 80085ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	69fa      	ldr	r2, [r7, #28]
 80085c2:	0151      	lsls	r1, r2, #5
 80085c4:	6a3a      	ldr	r2, [r7, #32]
 80085c6:	440a      	add	r2, r1
 80085c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80085d0:	6053      	str	r3, [r2, #4]
          break;
 80085d2:	e00a      	b.n	80085ea <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	6a3b      	ldr	r3, [r7, #32]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085e0:	461a      	mov	r2, r3
 80085e2:	2300      	movs	r3, #0
 80085e4:	6053      	str	r3, [r2, #4]
 80085e6:	e000      	b.n	80085ea <USB_HC_StartXfer+0x3ea>
          break;
 80085e8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	015a      	lsls	r2, r3, #5
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	4413      	add	r3, r2
 80085f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008600:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	78db      	ldrb	r3, [r3, #3]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d004      	beq.n	8008614 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008610:	613b      	str	r3, [r7, #16]
 8008612:	e003      	b.n	800861c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800861a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008622:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	015a      	lsls	r2, r3, #5
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	4413      	add	r3, r2
 800862c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008630:	461a      	mov	r2, r3
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008636:	79fb      	ldrb	r3, [r7, #7]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d003      	beq.n	8008644 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800863c:	2300      	movs	r3, #0
 800863e:	e055      	b.n	80086ec <USB_HC_StartXfer+0x4ec>
 8008640:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	78db      	ldrb	r3, [r3, #3]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d14e      	bne.n	80086ea <USB_HC_StartXfer+0x4ea>
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	6a1b      	ldr	r3, [r3, #32]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d04a      	beq.n	80086ea <USB_HC_StartXfer+0x4ea>
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	79db      	ldrb	r3, [r3, #7]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d146      	bne.n	80086ea <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	7c9b      	ldrb	r3, [r3, #18]
 8008660:	2b03      	cmp	r3, #3
 8008662:	d831      	bhi.n	80086c8 <USB_HC_StartXfer+0x4c8>
 8008664:	a201      	add	r2, pc, #4	@ (adr r2, 800866c <USB_HC_StartXfer+0x46c>)
 8008666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866a:	bf00      	nop
 800866c:	0800867d 	.word	0x0800867d
 8008670:	080086a1 	.word	0x080086a1
 8008674:	0800867d 	.word	0x0800867d
 8008678:	080086a1 	.word	0x080086a1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	6a1b      	ldr	r3, [r3, #32]
 8008680:	3303      	adds	r3, #3
 8008682:	089b      	lsrs	r3, r3, #2
 8008684:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008686:	8afa      	ldrh	r2, [r7, #22]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800868c:	b29b      	uxth	r3, r3
 800868e:	429a      	cmp	r2, r3
 8008690:	d91c      	bls.n	80086cc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	f043 0220 	orr.w	r2, r3, #32
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	619a      	str	r2, [r3, #24]
        }
        break;
 800869e:	e015      	b.n	80086cc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	6a1b      	ldr	r3, [r3, #32]
 80086a4:	3303      	adds	r3, #3
 80086a6:	089b      	lsrs	r3, r3, #2
 80086a8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80086aa:	8afa      	ldrh	r2, [r7, #22]
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d90a      	bls.n	80086d0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80086c6:	e003      	b.n	80086d0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80086c8:	bf00      	nop
 80086ca:	e002      	b.n	80086d2 <USB_HC_StartXfer+0x4d2>
        break;
 80086cc:	bf00      	nop
 80086ce:	e000      	b.n	80086d2 <USB_HC_StartXfer+0x4d2>
        break;
 80086d0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	6999      	ldr	r1, [r3, #24]
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	785a      	ldrb	r2, [r3, #1]
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	b29b      	uxth	r3, r3
 80086e0:	2000      	movs	r0, #0
 80086e2:	9000      	str	r0, [sp, #0]
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f7ff f9c9 	bl	8007a7c <USB_WritePacket>
  }

  return HAL_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3728      	adds	r7, #40	@ 0x28
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	b29b      	uxth	r3, r3
}
 800870a:	4618      	mov	r0, r3
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008716:	b480      	push	{r7}
 8008718:	b089      	sub	sp, #36	@ 0x24
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	460b      	mov	r3, r1
 8008720:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008726:	78fb      	ldrb	r3, [r7, #3]
 8008728:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800872a:	2300      	movs	r3, #0
 800872c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	015a      	lsls	r2, r3, #5
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	4413      	add	r3, r2
 8008736:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	0c9b      	lsrs	r3, r3, #18
 800873e:	f003 0303 	and.w	r3, r3, #3
 8008742:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	015a      	lsls	r2, r3, #5
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	4413      	add	r3, r2
 800874c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	0fdb      	lsrs	r3, r3, #31
 8008754:	f003 0301 	and.w	r3, r3, #1
 8008758:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	4413      	add	r3, r2
 8008762:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	0fdb      	lsrs	r3, r3, #31
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f003 0320 	and.w	r3, r3, #32
 8008778:	2b20      	cmp	r3, #32
 800877a:	d10d      	bne.n	8008798 <USB_HC_Halt+0x82>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10a      	bne.n	8008798 <USB_HC_Halt+0x82>
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d005      	beq.n	8008794 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d002      	beq.n	8008794 <USB_HC_Halt+0x7e>
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	2b03      	cmp	r3, #3
 8008792:	d101      	bne.n	8008798 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	e0d8      	b.n	800894a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d002      	beq.n	80087a4 <USB_HC_Halt+0x8e>
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d173      	bne.n	800888c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	015a      	lsls	r2, r3, #5
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	4413      	add	r3, r2
 80087ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	69ba      	ldr	r2, [r7, #24]
 80087b4:	0151      	lsls	r1, r2, #5
 80087b6:	69fa      	ldr	r2, [r7, #28]
 80087b8:	440a      	add	r2, r1
 80087ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80087c2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	f003 0320 	and.w	r3, r3, #32
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d14a      	bne.n	8008866 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d133      	bne.n	8008844 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	015a      	lsls	r2, r3, #5
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	4413      	add	r3, r2
 80087e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	69ba      	ldr	r2, [r7, #24]
 80087ec:	0151      	lsls	r1, r2, #5
 80087ee:	69fa      	ldr	r2, [r7, #28]
 80087f0:	440a      	add	r2, r1
 80087f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80087fa:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	015a      	lsls	r2, r3, #5
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	4413      	add	r3, r2
 8008804:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	69ba      	ldr	r2, [r7, #24]
 800880c:	0151      	lsls	r1, r2, #5
 800880e:	69fa      	ldr	r2, [r7, #28]
 8008810:	440a      	add	r2, r1
 8008812:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008816:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800881a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	3301      	adds	r3, #1
 8008820:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008828:	d82e      	bhi.n	8008888 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	015a      	lsls	r2, r3, #5
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	4413      	add	r3, r2
 8008832:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800883c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008840:	d0ec      	beq.n	800881c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008842:	e081      	b.n	8008948 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	015a      	lsls	r2, r3, #5
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	4413      	add	r3, r2
 800884c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	69ba      	ldr	r2, [r7, #24]
 8008854:	0151      	lsls	r1, r2, #5
 8008856:	69fa      	ldr	r2, [r7, #28]
 8008858:	440a      	add	r2, r1
 800885a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800885e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008862:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008864:	e070      	b.n	8008948 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	015a      	lsls	r2, r3, #5
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	4413      	add	r3, r2
 800886e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	69ba      	ldr	r2, [r7, #24]
 8008876:	0151      	lsls	r1, r2, #5
 8008878:	69fa      	ldr	r2, [r7, #28]
 800887a:	440a      	add	r2, r1
 800887c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008880:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008884:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008886:	e05f      	b.n	8008948 <USB_HC_Halt+0x232>
            break;
 8008888:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800888a:	e05d      	b.n	8008948 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	4413      	add	r3, r2
 8008894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	69ba      	ldr	r2, [r7, #24]
 800889c:	0151      	lsls	r1, r2, #5
 800889e:	69fa      	ldr	r2, [r7, #28]
 80088a0:	440a      	add	r2, r1
 80088a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80088aa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d133      	bne.n	8008924 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	015a      	lsls	r2, r3, #5
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	4413      	add	r3, r2
 80088c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	69ba      	ldr	r2, [r7, #24]
 80088cc:	0151      	lsls	r1, r2, #5
 80088ce:	69fa      	ldr	r2, [r7, #28]
 80088d0:	440a      	add	r2, r1
 80088d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80088da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	69ba      	ldr	r2, [r7, #24]
 80088ec:	0151      	lsls	r1, r2, #5
 80088ee:	69fa      	ldr	r2, [r7, #28]
 80088f0:	440a      	add	r2, r1
 80088f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80088fa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	3301      	adds	r3, #1
 8008900:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008908:	d81d      	bhi.n	8008946 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	015a      	lsls	r2, r3, #5
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	4413      	add	r3, r2
 8008912:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800891c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008920:	d0ec      	beq.n	80088fc <USB_HC_Halt+0x1e6>
 8008922:	e011      	b.n	8008948 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	4413      	add	r3, r2
 800892c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	69ba      	ldr	r2, [r7, #24]
 8008934:	0151      	lsls	r1, r2, #5
 8008936:	69fa      	ldr	r2, [r7, #28]
 8008938:	440a      	add	r2, r1
 800893a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800893e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008942:	6013      	str	r3, [r2, #0]
 8008944:	e000      	b.n	8008948 <USB_HC_Halt+0x232>
          break;
 8008946:	bf00      	nop
    }
  }

  return HAL_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3724      	adds	r7, #36	@ 0x24
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr
	...

08008958 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008958:	b480      	push	{r7}
 800895a:	b087      	sub	sp, #28
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	460b      	mov	r3, r1
 8008962:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008968:	78fb      	ldrb	r3, [r7, #3]
 800896a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800896c:	2301      	movs	r3, #1
 800896e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	04da      	lsls	r2, r3, #19
 8008974:	4b15      	ldr	r3, [pc, #84]	@ (80089cc <USB_DoPing+0x74>)
 8008976:	4013      	ands	r3, r2
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	0151      	lsls	r1, r2, #5
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	440a      	add	r2, r1
 8008980:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008984:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008988:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	015a      	lsls	r2, r3, #5
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	4413      	add	r3, r2
 8008992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80089a0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80089a8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	015a      	lsls	r2, r3, #5
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089b6:	461a      	mov	r2, r3
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	371c      	adds	r7, #28
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	1ff80000 	.word	0x1ff80000

080089d0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b088      	sub	sp, #32
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80089d8:	2300      	movs	r3, #0
 80089da:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80089e0:	2300      	movs	r3, #0
 80089e2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7fe ff8c 	bl	8007902 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80089ea:	2110      	movs	r1, #16
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7fe ffe5 	bl	80079bc <USB_FlushTxFifo>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d001      	beq.n	80089fc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f7ff f80f 	bl	8007a20 <USB_FlushRxFifo>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d001      	beq.n	8008a0c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	61bb      	str	r3, [r7, #24]
 8008a10:	e01f      	b.n	8008a52 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008a28:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a30:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a38:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a46:	461a      	mov	r2, r3
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	61bb      	str	r3, [r7, #24]
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	2b0f      	cmp	r3, #15
 8008a56:	d9dc      	bls.n	8008a12 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008a58:	2300      	movs	r3, #0
 8008a5a:	61bb      	str	r3, [r7, #24]
 8008a5c:	e034      	b.n	8008ac8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008a74:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a7c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a84:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	015a      	lsls	r2, r3, #5
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a92:	461a      	mov	r2, r3
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008aa4:	d80c      	bhi.n	8008ac0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008abc:	d0ec      	beq.n	8008a98 <USB_StopHost+0xc8>
 8008abe:	e000      	b.n	8008ac2 <USB_StopHost+0xf2>
        break;
 8008ac0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	61bb      	str	r3, [r7, #24]
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	2b0f      	cmp	r3, #15
 8008acc:	d9c7      	bls.n	8008a5e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8008ada:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f7fe fefb 	bl	80078e0 <USB_EnableGlobalInt>

  return ret;
 8008aea:	7ffb      	ldrb	r3, [r7, #31]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3720      	adds	r7, #32
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008af4:	b590      	push	{r4, r7, lr}
 8008af6:	b089      	sub	sp, #36	@ 0x24
 8008af8:	af04      	add	r7, sp, #16
 8008afa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008afc:	2301      	movs	r3, #1
 8008afe:	2202      	movs	r2, #2
 8008b00:	2102      	movs	r1, #2
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fc85 	bl	8009412 <USBH_FindInterface>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	2bff      	cmp	r3, #255	@ 0xff
 8008b10:	d002      	beq.n	8008b18 <USBH_CDC_InterfaceInit+0x24>
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d901      	bls.n	8008b1c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008b18:	2302      	movs	r3, #2
 8008b1a:	e13d      	b.n	8008d98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fc5a 	bl	80093da <USBH_SelectInterface>
 8008b26:	4603      	mov	r3, r0
 8008b28:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008b2a:	7bbb      	ldrb	r3, [r7, #14]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d001      	beq.n	8008b34 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008b30:	2302      	movs	r3, #2
 8008b32:	e131      	b.n	8008d98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008b3a:	2050      	movs	r0, #80	@ 0x50
 8008b3c:	f002 fb86 	bl	800b24c <malloc>
 8008b40:	4603      	mov	r3, r0
 8008b42:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b4a:	69db      	ldr	r3, [r3, #28]
 8008b4c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d101      	bne.n	8008b58 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008b54:	2302      	movs	r3, #2
 8008b56:	e11f      	b.n	8008d98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008b58:	2250      	movs	r2, #80	@ 0x50
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	68b8      	ldr	r0, [r7, #8]
 8008b5e:	f003 f9c4 	bl	800beea <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008b62:	7bfb      	ldrb	r3, [r7, #15]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	211a      	movs	r1, #26
 8008b68:	fb01 f303 	mul.w	r3, r1, r3
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	b25b      	sxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	da15      	bge.n	8008ba6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008b7a:	7bfb      	ldrb	r3, [r7, #15]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	211a      	movs	r1, #26
 8008b80:	fb01 f303 	mul.w	r3, r1, r3
 8008b84:	4413      	add	r3, r2
 8008b86:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008b8a:	781a      	ldrb	r2, [r3, #0]
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	211a      	movs	r1, #26
 8008b96:	fb01 f303 	mul.w	r3, r1, r3
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008ba0:	881a      	ldrh	r2, [r3, #0]
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	785b      	ldrb	r3, [r3, #1]
 8008baa:	4619      	mov	r1, r3
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f001 ffbe 	bl	800ab2e <USBH_AllocPipe>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	7819      	ldrb	r1, [r3, #0]
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	7858      	ldrb	r0, [r3, #1]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	8952      	ldrh	r2, [r2, #10]
 8008bd2:	9202      	str	r2, [sp, #8]
 8008bd4:	2203      	movs	r2, #3
 8008bd6:	9201      	str	r2, [sp, #4]
 8008bd8:	9300      	str	r3, [sp, #0]
 8008bda:	4623      	mov	r3, r4
 8008bdc:	4602      	mov	r2, r0
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f001 ff76 	bl	800aad0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	2200      	movs	r2, #0
 8008bea:	4619      	mov	r1, r3
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f002 fa85 	bl	800b0fc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	210a      	movs	r1, #10
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fc0a 	bl	8009412 <USBH_FindInterface>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
 8008c04:	2bff      	cmp	r3, #255	@ 0xff
 8008c06:	d002      	beq.n	8008c0e <USBH_CDC_InterfaceInit+0x11a>
 8008c08:	7bfb      	ldrb	r3, [r7, #15]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d901      	bls.n	8008c12 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008c0e:	2302      	movs	r3, #2
 8008c10:	e0c2      	b.n	8008d98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	211a      	movs	r1, #26
 8008c18:	fb01 f303 	mul.w	r3, r1, r3
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	b25b      	sxtb	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	da16      	bge.n	8008c58 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	211a      	movs	r1, #26
 8008c30:	fb01 f303 	mul.w	r3, r1, r3
 8008c34:	4413      	add	r3, r2
 8008c36:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008c3a:	781a      	ldrb	r2, [r3, #0]
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	211a      	movs	r1, #26
 8008c46:	fb01 f303 	mul.w	r3, r1, r3
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008c50:	881a      	ldrh	r2, [r3, #0]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	835a      	strh	r2, [r3, #26]
 8008c56:	e015      	b.n	8008c84 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	211a      	movs	r1, #26
 8008c5e:	fb01 f303 	mul.w	r3, r1, r3
 8008c62:	4413      	add	r3, r2
 8008c64:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008c68:	781a      	ldrb	r2, [r3, #0]
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	211a      	movs	r1, #26
 8008c74:	fb01 f303 	mul.w	r3, r1, r3
 8008c78:	4413      	add	r3, r2
 8008c7a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008c7e:	881a      	ldrh	r2, [r3, #0]
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	211a      	movs	r1, #26
 8008c8a:	fb01 f303 	mul.w	r3, r1, r3
 8008c8e:	4413      	add	r3, r2
 8008c90:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	b25b      	sxtb	r3, r3
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	da16      	bge.n	8008cca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	211a      	movs	r1, #26
 8008ca2:	fb01 f303 	mul.w	r3, r1, r3
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008cac:	781a      	ldrb	r2, [r3, #0]
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	211a      	movs	r1, #26
 8008cb8:	fb01 f303 	mul.w	r3, r1, r3
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008cc2:	881a      	ldrh	r2, [r3, #0]
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	835a      	strh	r2, [r3, #26]
 8008cc8:	e015      	b.n	8008cf6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008cca:	7bfb      	ldrb	r3, [r7, #15]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	211a      	movs	r1, #26
 8008cd0:	fb01 f303 	mul.w	r3, r1, r3
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008cda:	781a      	ldrb	r2, [r3, #0]
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	211a      	movs	r1, #26
 8008ce6:	fb01 f303 	mul.w	r3, r1, r3
 8008cea:	4413      	add	r3, r2
 8008cec:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008cf0:	881a      	ldrh	r2, [r3, #0]
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	7b9b      	ldrb	r3, [r3, #14]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f001 ff16 	bl	800ab2e <USBH_AllocPipe>
 8008d02:	4603      	mov	r3, r0
 8008d04:	461a      	mov	r2, r3
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	7bdb      	ldrb	r3, [r3, #15]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f001 ff0c 	bl	800ab2e <USBH_AllocPipe>
 8008d16:	4603      	mov	r3, r0
 8008d18:	461a      	mov	r2, r3
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	7b59      	ldrb	r1, [r3, #13]
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	7b98      	ldrb	r0, [r3, #14]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d32:	68ba      	ldr	r2, [r7, #8]
 8008d34:	8b12      	ldrh	r2, [r2, #24]
 8008d36:	9202      	str	r2, [sp, #8]
 8008d38:	2202      	movs	r2, #2
 8008d3a:	9201      	str	r2, [sp, #4]
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	4623      	mov	r3, r4
 8008d40:	4602      	mov	r2, r0
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f001 fec4 	bl	800aad0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	7b19      	ldrb	r1, [r3, #12]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	7bd8      	ldrb	r0, [r3, #15]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	8b52      	ldrh	r2, [r2, #26]
 8008d60:	9202      	str	r2, [sp, #8]
 8008d62:	2202      	movs	r2, #2
 8008d64:	9201      	str	r2, [sp, #4]
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	4623      	mov	r3, r4
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f001 feaf 	bl	800aad0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	7b5b      	ldrb	r3, [r3, #13]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	4619      	mov	r1, r3
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f002 f9ba 	bl	800b0fc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	7b1b      	ldrb	r3, [r3, #12]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f002 f9b3 	bl	800b0fc <USBH_LL_SetToggle>

  return USBH_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd90      	pop	{r4, r7, pc}

08008da0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008dae:	69db      	ldr	r3, [r3, #28]
 8008db0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00e      	beq.n	8008dd8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f001 fea4 	bl	800ab0e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f001 fecf 	bl	800ab70 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	7b1b      	ldrb	r3, [r3, #12]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00e      	beq.n	8008dfe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	7b1b      	ldrb	r3, [r3, #12]
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f001 fe91 	bl	800ab0e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	7b1b      	ldrb	r3, [r3, #12]
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f001 febc 	bl	800ab70 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	7b5b      	ldrb	r3, [r3, #13]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00e      	beq.n	8008e24 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	7b5b      	ldrb	r3, [r3, #13]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f001 fe7e 	bl	800ab0e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	7b5b      	ldrb	r3, [r3, #13]
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f001 fea9 	bl	800ab70 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e2a:	69db      	ldr	r3, [r3, #28]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00b      	beq.n	8008e48 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f002 fa0f 	bl	800b25c <free>
    phost->pActiveClass->pData = 0U;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e44:	2200      	movs	r2, #0
 8008e46:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e60:	69db      	ldr	r3, [r3, #28]
 8008e62:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	3340      	adds	r3, #64	@ 0x40
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f8b1 	bl	8008fd2 <GetLineCoding>
 8008e70:	4603      	mov	r3, r0
 8008e72:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008e74:	7afb      	ldrb	r3, [r7, #11]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d105      	bne.n	8008e86 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e80:	2102      	movs	r1, #2
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008e86:	7afb      	ldrb	r3, [r7, #11]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ea6:	69db      	ldr	r3, [r3, #28]
 8008ea8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008eb0:	2b04      	cmp	r3, #4
 8008eb2:	d877      	bhi.n	8008fa4 <USBH_CDC_Process+0x114>
 8008eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8008ebc <USBH_CDC_Process+0x2c>)
 8008eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eba:	bf00      	nop
 8008ebc:	08008ed1 	.word	0x08008ed1
 8008ec0:	08008ed7 	.word	0x08008ed7
 8008ec4:	08008f07 	.word	0x08008f07
 8008ec8:	08008f7b 	.word	0x08008f7b
 8008ecc:	08008f89 	.word	0x08008f89
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ed4:	e06d      	b.n	8008fb2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008eda:	4619      	mov	r1, r3
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f897 	bl	8009010 <SetLineCoding>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d104      	bne.n	8008ef6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	2202      	movs	r2, #2
 8008ef0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008ef4:	e058      	b.n	8008fa8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008ef6:	7bbb      	ldrb	r3, [r7, #14]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d055      	beq.n	8008fa8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	2204      	movs	r2, #4
 8008f00:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008f04:	e050      	b.n	8008fa8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	3340      	adds	r3, #64	@ 0x40
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f860 	bl	8008fd2 <GetLineCoding>
 8008f12:	4603      	mov	r3, r0
 8008f14:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008f16:	7bbb      	ldrb	r3, [r7, #14]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d126      	bne.n	8008f6a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f2e:	791b      	ldrb	r3, [r3, #4]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d13b      	bne.n	8008fac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f3e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d133      	bne.n	8008fac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f4e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d12b      	bne.n	8008fac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f5c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d124      	bne.n	8008fac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 f958 	bl	8009218 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008f68:	e020      	b.n	8008fac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d01d      	beq.n	8008fac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2204      	movs	r2, #4
 8008f74:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008f78:	e018      	b.n	8008fac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f867 	bl	800904e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f8da 	bl	800913a <CDC_ProcessReception>
      break;
 8008f86:	e014      	b.n	8008fb2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008f88:	2100      	movs	r1, #0
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f001 f81a 	bl	8009fc4 <USBH_ClrFeature>
 8008f90:	4603      	mov	r3, r0
 8008f92:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10a      	bne.n	8008fb0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008fa2:	e005      	b.n	8008fb0 <USBH_CDC_Process+0x120>

    default:
      break;
 8008fa4:	bf00      	nop
 8008fa6:	e004      	b.n	8008fb2 <USBH_CDC_Process+0x122>
      break;
 8008fa8:	bf00      	nop
 8008faa:	e002      	b.n	8008fb2 <USBH_CDC_Process+0x122>
      break;
 8008fac:	bf00      	nop
 8008fae:	e000      	b.n	8008fb2 <USBH_CDC_Process+0x122>
      break;
 8008fb0:	bf00      	nop

  }

  return status;
 8008fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b082      	sub	sp, #8
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	22a1      	movs	r2, #161	@ 0xa1
 8008fe0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2221      	movs	r2, #33	@ 0x21
 8008fe6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2207      	movs	r2, #7
 8008ff8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	2207      	movs	r2, #7
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f001 fb14 	bl	800a62e <USBH_CtlReq>
 8009006:	4603      	mov	r3, r0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2221      	movs	r2, #33	@ 0x21
 800901e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2220      	movs	r2, #32
 8009024:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2207      	movs	r2, #7
 8009036:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	2207      	movs	r2, #7
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f001 faf5 	bl	800a62e <USBH_CtlReq>
 8009044:	4603      	mov	r3, r0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b086      	sub	sp, #24
 8009052:	af02      	add	r7, sp, #8
 8009054:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800905c:	69db      	ldr	r3, [r3, #28]
 800905e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009060:	2300      	movs	r3, #0
 8009062:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800906a:	2b01      	cmp	r3, #1
 800906c:	d002      	beq.n	8009074 <CDC_ProcessTransmission+0x26>
 800906e:	2b02      	cmp	r3, #2
 8009070:	d023      	beq.n	80090ba <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009072:	e05e      	b.n	8009132 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	8b12      	ldrh	r2, [r2, #24]
 800907c:	4293      	cmp	r3, r2
 800907e:	d90b      	bls.n	8009098 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	69d9      	ldr	r1, [r3, #28]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	8b1a      	ldrh	r2, [r3, #24]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	7b5b      	ldrb	r3, [r3, #13]
 800908c:	2001      	movs	r0, #1
 800908e:	9000      	str	r0, [sp, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f001 fcda 	bl	800aa4a <USBH_BulkSendData>
 8009096:	e00b      	b.n	80090b0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	7b5b      	ldrb	r3, [r3, #13]
 80090a6:	2001      	movs	r0, #1
 80090a8:	9000      	str	r0, [sp, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f001 fccd 	bl	800aa4a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2202      	movs	r2, #2
 80090b4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80090b8:	e03b      	b.n	8009132 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	7b5b      	ldrb	r3, [r3, #13]
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f001 fff1 	bl	800b0a8 <USBH_LL_GetURBState>
 80090c6:	4603      	mov	r3, r0
 80090c8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80090ca:	7afb      	ldrb	r3, [r7, #11]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d128      	bne.n	8009122 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	8b12      	ldrh	r2, [r2, #24]
 80090d8:	4293      	cmp	r3, r2
 80090da:	d90e      	bls.n	80090fa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	8b12      	ldrh	r2, [r2, #24]
 80090e4:	1a9a      	subs	r2, r3, r2
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	69db      	ldr	r3, [r3, #28]
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	8b12      	ldrh	r2, [r2, #24]
 80090f2:	441a      	add	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	61da      	str	r2, [r3, #28]
 80090f8:	e002      	b.n	8009100 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2200      	movs	r2, #0
 80090fe:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009104:	2b00      	cmp	r3, #0
 8009106:	d004      	beq.n	8009112 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009110:	e00e      	b.n	8009130 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f868 	bl	80091f0 <USBH_CDC_TransmitCallback>
      break;
 8009120:	e006      	b.n	8009130 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009122:	7afb      	ldrb	r3, [r7, #11]
 8009124:	2b02      	cmp	r3, #2
 8009126:	d103      	bne.n	8009130 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009130:	bf00      	nop
  }
}
 8009132:	bf00      	nop
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b086      	sub	sp, #24
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009148:	69db      	ldr	r3, [r3, #28]
 800914a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800914c:	2300      	movs	r3, #0
 800914e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009156:	2b03      	cmp	r3, #3
 8009158:	d002      	beq.n	8009160 <CDC_ProcessReception+0x26>
 800915a:	2b04      	cmp	r3, #4
 800915c:	d00e      	beq.n	800917c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800915e:	e043      	b.n	80091e8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	6a19      	ldr	r1, [r3, #32]
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	8b5a      	ldrh	r2, [r3, #26]
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	7b1b      	ldrb	r3, [r3, #12]
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f001 fc91 	bl	800aa94 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	2204      	movs	r2, #4
 8009176:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800917a:	e035      	b.n	80091e8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	7b1b      	ldrb	r3, [r3, #12]
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f001 ff90 	bl	800b0a8 <USBH_LL_GetURBState>
 8009188:	4603      	mov	r3, r0
 800918a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800918c:	7cfb      	ldrb	r3, [r7, #19]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d129      	bne.n	80091e6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	7b1b      	ldrb	r3, [r3, #12]
 8009196:	4619      	mov	r1, r3
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f001 fef3 	bl	800af84 <USBH_LL_GetLastXferSize>
 800919e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d016      	beq.n	80091d8 <CDC_ProcessReception+0x9e>
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	8b5b      	ldrh	r3, [r3, #26]
 80091ae:	461a      	mov	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d110      	bne.n	80091d8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	1ad2      	subs	r2, r2, r3
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	6a1a      	ldr	r2, [r3, #32]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	441a      	add	r2, r3
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	2203      	movs	r2, #3
 80091d2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80091d6:	e006      	b.n	80091e6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f80f 	bl	8009204 <USBH_CDC_ReceiveCallback>
      break;
 80091e6:	bf00      	nop
  }
}
 80091e8:	bf00      	nop
 80091ea:	3718      	adds	r7, #24
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80091f8:	bf00      	nop
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	4613      	mov	r3, r2
 8009238:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d101      	bne.n	8009244 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009240:	2302      	movs	r3, #2
 8009242:	e029      	b.n	8009298 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	79fa      	ldrb	r2, [r7, #7]
 8009248:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2200      	movs	r2, #0
 8009250:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f000 f81f 	bl	80092a0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2200      	movs	r2, #0
 8009276:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f001 fdc3 	bl	800ae1c <USBH_LL_Init>

  return USBH_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80092a8:	2300      	movs	r3, #0
 80092aa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80092ac:	2300      	movs	r3, #0
 80092ae:	60fb      	str	r3, [r7, #12]
 80092b0:	e009      	b.n	80092c6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	33e0      	adds	r3, #224	@ 0xe0
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	4413      	add	r3, r2
 80092bc:	2200      	movs	r2, #0
 80092be:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	3301      	adds	r3, #1
 80092c4:	60fb      	str	r3, [r7, #12]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2b0f      	cmp	r3, #15
 80092ca:	d9f2      	bls.n	80092b2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80092cc:	2300      	movs	r3, #0
 80092ce:	60fb      	str	r3, [r7, #12]
 80092d0:	e009      	b.n	80092e6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	4413      	add	r3, r2
 80092d8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80092dc:	2200      	movs	r2, #0
 80092de:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	3301      	adds	r3, #1
 80092e4:	60fb      	str	r3, [r7, #12]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092ec:	d3f1      	bcc.n	80092d2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2240      	movs	r2, #64	@ 0x40
 8009312:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2201      	movs	r2, #1
 8009326:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	331c      	adds	r3, #28
 800933e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009342:	2100      	movs	r1, #0
 8009344:	4618      	mov	r0, r3
 8009346:	f002 fdd0 	bl	800beea <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009350:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009354:	2100      	movs	r1, #0
 8009356:	4618      	mov	r0, r3
 8009358:	f002 fdc7 	bl	800beea <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009362:	2212      	movs	r2, #18
 8009364:	2100      	movs	r1, #0
 8009366:	4618      	mov	r0, r3
 8009368:	f002 fdbf 	bl	800beea <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009372:	223e      	movs	r2, #62	@ 0x3e
 8009374:	2100      	movs	r1, #0
 8009376:	4618      	mov	r0, r3
 8009378:	f002 fdb7 	bl	800beea <memset>

  return USBH_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009386:	b480      	push	{r7}
 8009388:	b085      	sub	sp, #20
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
 800938e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d016      	beq.n	80093c8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10e      	bne.n	80093c2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80093aa:	1c59      	adds	r1, r3, #1
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	33de      	adds	r3, #222	@ 0xde
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	73fb      	strb	r3, [r7, #15]
 80093c0:	e004      	b.n	80093cc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80093c2:	2302      	movs	r3, #2
 80093c4:	73fb      	strb	r3, [r7, #15]
 80093c6:	e001      	b.n	80093cc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80093c8:	2302      	movs	r3, #2
 80093ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80093cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3714      	adds	r7, #20
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80093da:	b480      	push	{r7}
 80093dc:	b085      	sub	sp, #20
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	460b      	mov	r3, r1
 80093e4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80093f0:	78fa      	ldrb	r2, [r7, #3]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d204      	bcs.n	8009400 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	78fa      	ldrb	r2, [r7, #3]
 80093fa:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80093fe:	e001      	b.n	8009404 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009400:	2302      	movs	r3, #2
 8009402:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009404:	7bfb      	ldrb	r3, [r7, #15]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3714      	adds	r7, #20
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009412:	b480      	push	{r7}
 8009414:	b087      	sub	sp, #28
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	4608      	mov	r0, r1
 800941c:	4611      	mov	r1, r2
 800941e:	461a      	mov	r2, r3
 8009420:	4603      	mov	r3, r0
 8009422:	70fb      	strb	r3, [r7, #3]
 8009424:	460b      	mov	r3, r1
 8009426:	70bb      	strb	r3, [r7, #2]
 8009428:	4613      	mov	r3, r2
 800942a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800942c:	2300      	movs	r3, #0
 800942e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009430:	2300      	movs	r3, #0
 8009432:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800943a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800943c:	e025      	b.n	800948a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800943e:	7dfb      	ldrb	r3, [r7, #23]
 8009440:	221a      	movs	r2, #26
 8009442:	fb02 f303 	mul.w	r3, r2, r3
 8009446:	3308      	adds	r3, #8
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	4413      	add	r3, r2
 800944c:	3302      	adds	r3, #2
 800944e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	795b      	ldrb	r3, [r3, #5]
 8009454:	78fa      	ldrb	r2, [r7, #3]
 8009456:	429a      	cmp	r2, r3
 8009458:	d002      	beq.n	8009460 <USBH_FindInterface+0x4e>
 800945a:	78fb      	ldrb	r3, [r7, #3]
 800945c:	2bff      	cmp	r3, #255	@ 0xff
 800945e:	d111      	bne.n	8009484 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009464:	78ba      	ldrb	r2, [r7, #2]
 8009466:	429a      	cmp	r2, r3
 8009468:	d002      	beq.n	8009470 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800946a:	78bb      	ldrb	r3, [r7, #2]
 800946c:	2bff      	cmp	r3, #255	@ 0xff
 800946e:	d109      	bne.n	8009484 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009474:	787a      	ldrb	r2, [r7, #1]
 8009476:	429a      	cmp	r2, r3
 8009478:	d002      	beq.n	8009480 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800947a:	787b      	ldrb	r3, [r7, #1]
 800947c:	2bff      	cmp	r3, #255	@ 0xff
 800947e:	d101      	bne.n	8009484 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009480:	7dfb      	ldrb	r3, [r7, #23]
 8009482:	e006      	b.n	8009492 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009484:	7dfb      	ldrb	r3, [r7, #23]
 8009486:	3301      	adds	r3, #1
 8009488:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800948a:	7dfb      	ldrb	r3, [r7, #23]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d9d6      	bls.n	800943e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009490:	23ff      	movs	r3, #255	@ 0xff
}
 8009492:	4618      	mov	r0, r3
 8009494:	371c      	adds	r7, #28
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr

0800949e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b082      	sub	sp, #8
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f001 fcf4 	bl	800ae94 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80094ac:	2101      	movs	r1, #1
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f001 fe0d 	bl	800b0ce <USBH_LL_DriverVBUS>

  return USBH_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
	...

080094c0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b088      	sub	sp, #32
 80094c4:	af04      	add	r7, sp, #16
 80094c6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80094c8:	2302      	movs	r3, #2
 80094ca:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80094cc:	2300      	movs	r3, #0
 80094ce:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d102      	bne.n	80094e2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2203      	movs	r2, #3
 80094e0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	2b0b      	cmp	r3, #11
 80094ea:	f200 81bb 	bhi.w	8009864 <USBH_Process+0x3a4>
 80094ee:	a201      	add	r2, pc, #4	@ (adr r2, 80094f4 <USBH_Process+0x34>)
 80094f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f4:	08009525 	.word	0x08009525
 80094f8:	08009557 	.word	0x08009557
 80094fc:	080095bf 	.word	0x080095bf
 8009500:	080097ff 	.word	0x080097ff
 8009504:	08009865 	.word	0x08009865
 8009508:	0800965f 	.word	0x0800965f
 800950c:	080097a5 	.word	0x080097a5
 8009510:	08009695 	.word	0x08009695
 8009514:	080096b5 	.word	0x080096b5
 8009518:	080096d3 	.word	0x080096d3
 800951c:	08009717 	.word	0x08009717
 8009520:	080097e7 	.word	0x080097e7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800952a:	b2db      	uxtb	r3, r3
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 819b 	beq.w	8009868 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2201      	movs	r2, #1
 8009536:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009538:	20c8      	movs	r0, #200	@ 0xc8
 800953a:	f001 fe12 	bl	800b162 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f001 fd05 	bl	800af4e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009554:	e188      	b.n	8009868 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800955c:	2b01      	cmp	r3, #1
 800955e:	d107      	bne.n	8009570 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2202      	movs	r2, #2
 800956c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800956e:	e18a      	b.n	8009886 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009576:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800957a:	d914      	bls.n	80095a6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009582:	3301      	adds	r3, #1
 8009584:	b2da      	uxtb	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009592:	2b03      	cmp	r3, #3
 8009594:	d903      	bls.n	800959e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	220d      	movs	r2, #13
 800959a:	701a      	strb	r2, [r3, #0]
      break;
 800959c:	e173      	b.n	8009886 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	701a      	strb	r2, [r3, #0]
      break;
 80095a4:	e16f      	b.n	8009886 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80095ac:	f103 020a 	add.w	r2, r3, #10
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80095b6:	200a      	movs	r0, #10
 80095b8:	f001 fdd3 	bl	800b162 <USBH_Delay>
      break;
 80095bc:	e163      	b.n	8009886 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d005      	beq.n	80095d4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80095ce:	2104      	movs	r1, #4
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80095d4:	2064      	movs	r0, #100	@ 0x64
 80095d6:	f001 fdc4 	bl	800b162 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f001 fc90 	bl	800af00 <USBH_LL_GetSpeed>
 80095e0:	4603      	mov	r3, r0
 80095e2:	461a      	mov	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2205      	movs	r2, #5
 80095ee:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80095f0:	2100      	movs	r1, #0
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f001 fa9b 	bl	800ab2e <USBH_AllocPipe>
 80095f8:	4603      	mov	r3, r0
 80095fa:	461a      	mov	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009600:	2180      	movs	r1, #128	@ 0x80
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f001 fa93 	bl	800ab2e <USBH_AllocPipe>
 8009608:	4603      	mov	r3, r0
 800960a:	461a      	mov	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	7919      	ldrb	r1, [r3, #4]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009624:	9202      	str	r2, [sp, #8]
 8009626:	2200      	movs	r2, #0
 8009628:	9201      	str	r2, [sp, #4]
 800962a:	9300      	str	r3, [sp, #0]
 800962c:	4603      	mov	r3, r0
 800962e:	2280      	movs	r2, #128	@ 0x80
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f001 fa4d 	bl	800aad0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	7959      	ldrb	r1, [r3, #5]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800964a:	9202      	str	r2, [sp, #8]
 800964c:	2200      	movs	r2, #0
 800964e:	9201      	str	r2, [sp, #4]
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	4603      	mov	r3, r0
 8009654:	2200      	movs	r2, #0
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f001 fa3a 	bl	800aad0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800965c:	e113      	b.n	8009886 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f916 	bl	8009890 <USBH_HandleEnum>
 8009664:	4603      	mov	r3, r0
 8009666:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009668:	7bbb      	ldrb	r3, [r7, #14]
 800966a:	b2db      	uxtb	r3, r3
 800966c:	2b00      	cmp	r3, #0
 800966e:	f040 80fd 	bne.w	800986c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009680:	2b01      	cmp	r3, #1
 8009682:	d103      	bne.n	800968c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2208      	movs	r2, #8
 8009688:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800968a:	e0ef      	b.n	800986c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2207      	movs	r2, #7
 8009690:	701a      	strb	r2, [r3, #0]
      break;
 8009692:	e0eb      	b.n	800986c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800969a:	2b00      	cmp	r3, #0
 800969c:	f000 80e8 	beq.w	8009870 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80096a6:	2101      	movs	r1, #1
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2208      	movs	r2, #8
 80096b0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80096b2:	e0dd      	b.n	8009870 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80096ba:	4619      	mov	r1, r3
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 fc3a 	bl	8009f36 <USBH_SetCfg>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f040 80d5 	bne.w	8009874 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2209      	movs	r2, #9
 80096ce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80096d0:	e0d0      	b.n	8009874 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80096d8:	f003 0320 	and.w	r3, r3, #32
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d016      	beq.n	800970e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80096e0:	2101      	movs	r1, #1
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fc4a 	bl	8009f7c <USBH_SetFeature>
 80096e8:	4603      	mov	r3, r0
 80096ea:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80096ec:	7bbb      	ldrb	r3, [r7, #14]
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d103      	bne.n	80096fc <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	220a      	movs	r2, #10
 80096f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80096fa:	e0bd      	b.n	8009878 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80096fc:	7bbb      	ldrb	r3, [r7, #14]
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	2b03      	cmp	r3, #3
 8009702:	f040 80b9 	bne.w	8009878 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	220a      	movs	r2, #10
 800970a:	701a      	strb	r2, [r3, #0]
      break;
 800970c:	e0b4      	b.n	8009878 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	220a      	movs	r2, #10
 8009712:	701a      	strb	r2, [r3, #0]
      break;
 8009714:	e0b0      	b.n	8009878 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800971c:	2b00      	cmp	r3, #0
 800971e:	f000 80ad 	beq.w	800987c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800972a:	2300      	movs	r3, #0
 800972c:	73fb      	strb	r3, [r7, #15]
 800972e:	e016      	b.n	800975e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009730:	7bfa      	ldrb	r2, [r7, #15]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	32de      	adds	r2, #222	@ 0xde
 8009736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800973a:	791a      	ldrb	r2, [r3, #4]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009742:	429a      	cmp	r2, r3
 8009744:	d108      	bne.n	8009758 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009746:	7bfa      	ldrb	r2, [r7, #15]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	32de      	adds	r2, #222	@ 0xde
 800974c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009756:	e005      	b.n	8009764 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009758:	7bfb      	ldrb	r3, [r7, #15]
 800975a:	3301      	adds	r3, #1
 800975c:	73fb      	strb	r3, [r7, #15]
 800975e:	7bfb      	ldrb	r3, [r7, #15]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d0e5      	beq.n	8009730 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800976a:	2b00      	cmp	r3, #0
 800976c:	d016      	beq.n	800979c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	4798      	blx	r3
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	d109      	bne.n	8009794 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2206      	movs	r2, #6
 8009784:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800978c:	2103      	movs	r1, #3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009792:	e073      	b.n	800987c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	220d      	movs	r2, #13
 8009798:	701a      	strb	r2, [r3, #0]
      break;
 800979a:	e06f      	b.n	800987c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	220d      	movs	r2, #13
 80097a0:	701a      	strb	r2, [r3, #0]
      break;
 80097a2:	e06b      	b.n	800987c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d017      	beq.n	80097de <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	4798      	blx	r3
 80097ba:	4603      	mov	r3, r0
 80097bc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80097be:	7bbb      	ldrb	r3, [r7, #14]
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d103      	bne.n	80097ce <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	220b      	movs	r2, #11
 80097ca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80097cc:	e058      	b.n	8009880 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80097ce:	7bbb      	ldrb	r3, [r7, #14]
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d154      	bne.n	8009880 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	220d      	movs	r2, #13
 80097da:	701a      	strb	r2, [r3, #0]
      break;
 80097dc:	e050      	b.n	8009880 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	220d      	movs	r2, #13
 80097e2:	701a      	strb	r2, [r3, #0]
      break;
 80097e4:	e04c      	b.n	8009880 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d049      	beq.n	8009884 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097f6:	695b      	ldr	r3, [r3, #20]
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	4798      	blx	r3
      }
      break;
 80097fc:	e042      	b.n	8009884 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f7ff fd4a 	bl	80092a0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009812:	2b00      	cmp	r3, #0
 8009814:	d009      	beq.n	800982a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009830:	2b00      	cmp	r3, #0
 8009832:	d005      	beq.n	8009840 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800983a:	2105      	movs	r1, #5
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009846:	b2db      	uxtb	r3, r3
 8009848:	2b01      	cmp	r3, #1
 800984a:	d107      	bne.n	800985c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f7ff fe22 	bl	800949e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800985a:	e014      	b.n	8009886 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f001 fb19 	bl	800ae94 <USBH_LL_Start>
      break;
 8009862:	e010      	b.n	8009886 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009864:	bf00      	nop
 8009866:	e00e      	b.n	8009886 <USBH_Process+0x3c6>
      break;
 8009868:	bf00      	nop
 800986a:	e00c      	b.n	8009886 <USBH_Process+0x3c6>
      break;
 800986c:	bf00      	nop
 800986e:	e00a      	b.n	8009886 <USBH_Process+0x3c6>
    break;
 8009870:	bf00      	nop
 8009872:	e008      	b.n	8009886 <USBH_Process+0x3c6>
      break;
 8009874:	bf00      	nop
 8009876:	e006      	b.n	8009886 <USBH_Process+0x3c6>
      break;
 8009878:	bf00      	nop
 800987a:	e004      	b.n	8009886 <USBH_Process+0x3c6>
      break;
 800987c:	bf00      	nop
 800987e:	e002      	b.n	8009886 <USBH_Process+0x3c6>
      break;
 8009880:	bf00      	nop
 8009882:	e000      	b.n	8009886 <USBH_Process+0x3c6>
      break;
 8009884:	bf00      	nop
  }
  return USBH_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b088      	sub	sp, #32
 8009894:	af04      	add	r7, sp, #16
 8009896:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009898:	2301      	movs	r3, #1
 800989a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800989c:	2301      	movs	r3, #1
 800989e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	785b      	ldrb	r3, [r3, #1]
 80098a4:	2b07      	cmp	r3, #7
 80098a6:	f200 81bd 	bhi.w	8009c24 <USBH_HandleEnum+0x394>
 80098aa:	a201      	add	r2, pc, #4	@ (adr r2, 80098b0 <USBH_HandleEnum+0x20>)
 80098ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b0:	080098d1 	.word	0x080098d1
 80098b4:	0800998b 	.word	0x0800998b
 80098b8:	080099f5 	.word	0x080099f5
 80098bc:	08009a7f 	.word	0x08009a7f
 80098c0:	08009ae9 	.word	0x08009ae9
 80098c4:	08009b59 	.word	0x08009b59
 80098c8:	08009b9f 	.word	0x08009b9f
 80098cc:	08009be5 	.word	0x08009be5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80098d0:	2108      	movs	r1, #8
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fa4c 	bl	8009d70 <USBH_Get_DevDesc>
 80098d8:	4603      	mov	r3, r0
 80098da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80098dc:	7bbb      	ldrb	r3, [r7, #14]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d12e      	bne.n	8009940 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	7919      	ldrb	r1, [r3, #4]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009906:	9202      	str	r2, [sp, #8]
 8009908:	2200      	movs	r2, #0
 800990a:	9201      	str	r2, [sp, #4]
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	4603      	mov	r3, r0
 8009910:	2280      	movs	r2, #128	@ 0x80
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f001 f8dc 	bl	800aad0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	7959      	ldrb	r1, [r3, #5]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800992c:	9202      	str	r2, [sp, #8]
 800992e:	2200      	movs	r2, #0
 8009930:	9201      	str	r2, [sp, #4]
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	4603      	mov	r3, r0
 8009936:	2200      	movs	r2, #0
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f001 f8c9 	bl	800aad0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800993e:	e173      	b.n	8009c28 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009940:	7bbb      	ldrb	r3, [r7, #14]
 8009942:	2b03      	cmp	r3, #3
 8009944:	f040 8170 	bne.w	8009c28 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800994e:	3301      	adds	r3, #1
 8009950:	b2da      	uxtb	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800995e:	2b03      	cmp	r3, #3
 8009960:	d903      	bls.n	800996a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	220d      	movs	r2, #13
 8009966:	701a      	strb	r2, [r3, #0]
      break;
 8009968:	e15e      	b.n	8009c28 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	795b      	ldrb	r3, [r3, #5]
 800996e:	4619      	mov	r1, r3
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f001 f8fd 	bl	800ab70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	791b      	ldrb	r3, [r3, #4]
 800997a:	4619      	mov	r1, r3
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f001 f8f7 	bl	800ab70 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	701a      	strb	r2, [r3, #0]
      break;
 8009988:	e14e      	b.n	8009c28 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800998a:	2112      	movs	r1, #18
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f9ef 	bl	8009d70 <USBH_Get_DevDesc>
 8009992:	4603      	mov	r3, r0
 8009994:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009996:	7bbb      	ldrb	r3, [r7, #14]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d103      	bne.n	80099a4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80099a2:	e143      	b.n	8009c2c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099a4:	7bbb      	ldrb	r3, [r7, #14]
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	f040 8140 	bne.w	8009c2c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80099b2:	3301      	adds	r3, #1
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80099c2:	2b03      	cmp	r3, #3
 80099c4:	d903      	bls.n	80099ce <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	220d      	movs	r2, #13
 80099ca:	701a      	strb	r2, [r3, #0]
      break;
 80099cc:	e12e      	b.n	8009c2c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	795b      	ldrb	r3, [r3, #5]
 80099d2:	4619      	mov	r1, r3
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f001 f8cb 	bl	800ab70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	791b      	ldrb	r3, [r3, #4]
 80099de:	4619      	mov	r1, r3
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f001 f8c5 	bl	800ab70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	701a      	strb	r2, [r3, #0]
      break;
 80099f2:	e11b      	b.n	8009c2c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80099f4:	2101      	movs	r1, #1
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 fa79 	bl	8009eee <USBH_SetAddress>
 80099fc:	4603      	mov	r3, r0
 80099fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d130      	bne.n	8009a68 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009a06:	2002      	movs	r0, #2
 8009a08:	f001 fbab 	bl	800b162 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2203      	movs	r2, #3
 8009a18:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	7919      	ldrb	r1, [r3, #4]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a2e:	9202      	str	r2, [sp, #8]
 8009a30:	2200      	movs	r2, #0
 8009a32:	9201      	str	r2, [sp, #4]
 8009a34:	9300      	str	r3, [sp, #0]
 8009a36:	4603      	mov	r3, r0
 8009a38:	2280      	movs	r2, #128	@ 0x80
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f001 f848 	bl	800aad0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	7959      	ldrb	r1, [r3, #5]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a54:	9202      	str	r2, [sp, #8]
 8009a56:	2200      	movs	r2, #0
 8009a58:	9201      	str	r2, [sp, #4]
 8009a5a:	9300      	str	r3, [sp, #0]
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2200      	movs	r2, #0
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f001 f835 	bl	800aad0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009a66:	e0e3      	b.n	8009c30 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a68:	7bbb      	ldrb	r3, [r7, #14]
 8009a6a:	2b03      	cmp	r3, #3
 8009a6c:	f040 80e0 	bne.w	8009c30 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	220d      	movs	r2, #13
 8009a74:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	705a      	strb	r2, [r3, #1]
      break;
 8009a7c:	e0d8      	b.n	8009c30 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009a7e:	2109      	movs	r1, #9
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 f9a1 	bl	8009dc8 <USBH_Get_CfgDesc>
 8009a86:	4603      	mov	r3, r0
 8009a88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a8a:	7bbb      	ldrb	r3, [r7, #14]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d103      	bne.n	8009a98 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2204      	movs	r2, #4
 8009a94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a96:	e0cd      	b.n	8009c34 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a98:	7bbb      	ldrb	r3, [r7, #14]
 8009a9a:	2b03      	cmp	r3, #3
 8009a9c:	f040 80ca 	bne.w	8009c34 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	b2da      	uxtb	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	d903      	bls.n	8009ac2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	220d      	movs	r2, #13
 8009abe:	701a      	strb	r2, [r3, #0]
      break;
 8009ac0:	e0b8      	b.n	8009c34 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	795b      	ldrb	r3, [r3, #5]
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f001 f851 	bl	800ab70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	791b      	ldrb	r3, [r3, #4]
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f001 f84b 	bl	800ab70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	701a      	strb	r2, [r3, #0]
      break;
 8009ae6:	e0a5      	b.n	8009c34 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009aee:	4619      	mov	r1, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f969 	bl	8009dc8 <USBH_Get_CfgDesc>
 8009af6:	4603      	mov	r3, r0
 8009af8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009afa:	7bbb      	ldrb	r3, [r7, #14]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d103      	bne.n	8009b08 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2205      	movs	r2, #5
 8009b04:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009b06:	e097      	b.n	8009c38 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b08:	7bbb      	ldrb	r3, [r7, #14]
 8009b0a:	2b03      	cmp	r3, #3
 8009b0c:	f040 8094 	bne.w	8009c38 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009b16:	3301      	adds	r3, #1
 8009b18:	b2da      	uxtb	r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009b26:	2b03      	cmp	r3, #3
 8009b28:	d903      	bls.n	8009b32 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	220d      	movs	r2, #13
 8009b2e:	701a      	strb	r2, [r3, #0]
      break;
 8009b30:	e082      	b.n	8009c38 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	795b      	ldrb	r3, [r3, #5]
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f001 f819 	bl	800ab70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	791b      	ldrb	r3, [r3, #4]
 8009b42:	4619      	mov	r1, r3
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f001 f813 	bl	800ab70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	701a      	strb	r2, [r3, #0]
      break;
 8009b56:	e06f      	b.n	8009c38 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d019      	beq.n	8009b96 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009b6e:	23ff      	movs	r3, #255	@ 0xff
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f953 	bl	8009e1c <USBH_Get_StringDesc>
 8009b76:	4603      	mov	r3, r0
 8009b78:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b7a:	7bbb      	ldrb	r3, [r7, #14]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d103      	bne.n	8009b88 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2206      	movs	r2, #6
 8009b84:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009b86:	e059      	b.n	8009c3c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b88:	7bbb      	ldrb	r3, [r7, #14]
 8009b8a:	2b03      	cmp	r3, #3
 8009b8c:	d156      	bne.n	8009c3c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2206      	movs	r2, #6
 8009b92:	705a      	strb	r2, [r3, #1]
      break;
 8009b94:	e052      	b.n	8009c3c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2206      	movs	r2, #6
 8009b9a:	705a      	strb	r2, [r3, #1]
      break;
 8009b9c:	e04e      	b.n	8009c3c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d019      	beq.n	8009bdc <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009bb4:	23ff      	movs	r3, #255	@ 0xff
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f930 	bl	8009e1c <USBH_Get_StringDesc>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009bc0:	7bbb      	ldrb	r3, [r7, #14]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d103      	bne.n	8009bce <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2207      	movs	r2, #7
 8009bca:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009bcc:	e038      	b.n	8009c40 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bce:	7bbb      	ldrb	r3, [r7, #14]
 8009bd0:	2b03      	cmp	r3, #3
 8009bd2:	d135      	bne.n	8009c40 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2207      	movs	r2, #7
 8009bd8:	705a      	strb	r2, [r3, #1]
      break;
 8009bda:	e031      	b.n	8009c40 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2207      	movs	r2, #7
 8009be0:	705a      	strb	r2, [r3, #1]
      break;
 8009be2:	e02d      	b.n	8009c40 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d017      	beq.n	8009c1e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009bfa:	23ff      	movs	r3, #255	@ 0xff
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 f90d 	bl	8009e1c <USBH_Get_StringDesc>
 8009c02:	4603      	mov	r3, r0
 8009c04:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c06:	7bbb      	ldrb	r3, [r7, #14]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d102      	bne.n	8009c12 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009c10:	e018      	b.n	8009c44 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c12:	7bbb      	ldrb	r3, [r7, #14]
 8009c14:	2b03      	cmp	r3, #3
 8009c16:	d115      	bne.n	8009c44 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8009c1c:	e012      	b.n	8009c44 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	73fb      	strb	r3, [r7, #15]
      break;
 8009c22:	e00f      	b.n	8009c44 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009c24:	bf00      	nop
 8009c26:	e00e      	b.n	8009c46 <USBH_HandleEnum+0x3b6>
      break;
 8009c28:	bf00      	nop
 8009c2a:	e00c      	b.n	8009c46 <USBH_HandleEnum+0x3b6>
      break;
 8009c2c:	bf00      	nop
 8009c2e:	e00a      	b.n	8009c46 <USBH_HandleEnum+0x3b6>
      break;
 8009c30:	bf00      	nop
 8009c32:	e008      	b.n	8009c46 <USBH_HandleEnum+0x3b6>
      break;
 8009c34:	bf00      	nop
 8009c36:	e006      	b.n	8009c46 <USBH_HandleEnum+0x3b6>
      break;
 8009c38:	bf00      	nop
 8009c3a:	e004      	b.n	8009c46 <USBH_HandleEnum+0x3b6>
      break;
 8009c3c:	bf00      	nop
 8009c3e:	e002      	b.n	8009c46 <USBH_HandleEnum+0x3b6>
      break;
 8009c40:	bf00      	nop
 8009c42:	e000      	b.n	8009c46 <USBH_HandleEnum+0x3b6>
      break;
 8009c44:	bf00      	nop
  }
  return Status;
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	683a      	ldr	r2, [r7, #0]
 8009c5e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009c62:	bf00      	nop
 8009c64:	370c      	adds	r7, #12
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr

08009c6e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b082      	sub	sp, #8
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009c7c:	1c5a      	adds	r2, r3, #1
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f804 	bl	8009c92 <USBH_HandleSof>
}
 8009c8a:	bf00      	nop
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b082      	sub	sp, #8
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	2b0b      	cmp	r3, #11
 8009ca2:	d10a      	bne.n	8009cba <USBH_HandleSof+0x28>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d005      	beq.n	8009cba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009cb4:	699b      	ldr	r3, [r3, #24]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	4798      	blx	r3
  }
}
 8009cba:	bf00      	nop
 8009cbc:	3708      	adds	r7, #8
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009cc2:	b480      	push	{r7}
 8009cc4:	b083      	sub	sp, #12
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009cd2:	bf00      	nop
}
 8009cd4:	370c      	adds	r7, #12
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b083      	sub	sp, #12
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009cee:	bf00      	nop
}
 8009cf0:	370c      	adds	r7, #12
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr

08009cfa <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009cfa:	b480      	push	{r7}
 8009cfc:	b083      	sub	sp, #12
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2201      	movs	r2, #1
 8009d06:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f001 f8be 	bl	800aeca <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	791b      	ldrb	r3, [r3, #4]
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 ff0b 	bl	800ab70 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	795b      	ldrb	r3, [r3, #5]
 8009d5e:	4619      	mov	r1, r3
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 ff05 	bl	800ab70 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009d66:	2300      	movs	r3, #0
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3708      	adds	r7, #8
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af02      	add	r7, sp, #8
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009d7c:	887b      	ldrh	r3, [r7, #2]
 8009d7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d82:	d901      	bls.n	8009d88 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009d84:	2303      	movs	r3, #3
 8009d86:	e01b      	b.n	8009dc0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009d8e:	887b      	ldrh	r3, [r7, #2]
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	4613      	mov	r3, r2
 8009d94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d98:	2100      	movs	r1, #0
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f872 	bl	8009e84 <USBH_GetDescriptor>
 8009da0:	4603      	mov	r3, r0
 8009da2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009da4:	7bfb      	ldrb	r3, [r7, #15]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d109      	bne.n	8009dbe <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009db0:	887a      	ldrh	r2, [r7, #2]
 8009db2:	4619      	mov	r1, r3
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 f929 	bl	800a00c <USBH_ParseDevDesc>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af02      	add	r7, sp, #8
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	331c      	adds	r3, #28
 8009dd8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009dda:	887b      	ldrh	r3, [r7, #2]
 8009ddc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009de0:	d901      	bls.n	8009de6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009de2:	2303      	movs	r3, #3
 8009de4:	e016      	b.n	8009e14 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009de6:	887b      	ldrh	r3, [r7, #2]
 8009de8:	9300      	str	r3, [sp, #0]
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009df0:	2100      	movs	r1, #0
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f846 	bl	8009e84 <USBH_GetDescriptor>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009dfc:	7bfb      	ldrb	r3, [r7, #15]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d107      	bne.n	8009e12 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009e02:	887b      	ldrh	r3, [r7, #2]
 8009e04:	461a      	mov	r2, r3
 8009e06:	68b9      	ldr	r1, [r7, #8]
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 f9af 	bl	800a16c <USBH_ParseCfgDesc>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b088      	sub	sp, #32
 8009e20:	af02      	add	r7, sp, #8
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	607a      	str	r2, [r7, #4]
 8009e26:	461a      	mov	r2, r3
 8009e28:	460b      	mov	r3, r1
 8009e2a:	72fb      	strb	r3, [r7, #11]
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009e30:	893b      	ldrh	r3, [r7, #8]
 8009e32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e36:	d802      	bhi.n	8009e3e <USBH_Get_StringDesc+0x22>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d101      	bne.n	8009e42 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	e01c      	b.n	8009e7c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009e42:	7afb      	ldrb	r3, [r7, #11]
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009e4a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009e52:	893b      	ldrh	r3, [r7, #8]
 8009e54:	9300      	str	r3, [sp, #0]
 8009e56:	460b      	mov	r3, r1
 8009e58:	2100      	movs	r1, #0
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f000 f812 	bl	8009e84 <USBH_GetDescriptor>
 8009e60:	4603      	mov	r3, r0
 8009e62:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009e64:	7dfb      	ldrb	r3, [r7, #23]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d107      	bne.n	8009e7a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009e70:	893a      	ldrh	r2, [r7, #8]
 8009e72:	6879      	ldr	r1, [r7, #4]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f000 fb8d 	bl	800a594 <USBH_ParseStringDesc>
  }

  return status;
 8009e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3718      	adds	r7, #24
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	607b      	str	r3, [r7, #4]
 8009e8e:	460b      	mov	r3, r1
 8009e90:	72fb      	strb	r3, [r7, #11]
 8009e92:	4613      	mov	r3, r2
 8009e94:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	789b      	ldrb	r3, [r3, #2]
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d11c      	bne.n	8009ed8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009e9e:	7afb      	ldrb	r3, [r7, #11]
 8009ea0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2206      	movs	r2, #6
 8009eae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	893a      	ldrh	r2, [r7, #8]
 8009eb4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009eb6:	893b      	ldrh	r3, [r7, #8]
 8009eb8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009ebc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ec0:	d104      	bne.n	8009ecc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f240 4209 	movw	r2, #1033	@ 0x409
 8009ec8:	829a      	strh	r2, [r3, #20]
 8009eca:	e002      	b.n	8009ed2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	8b3a      	ldrh	r2, [r7, #24]
 8009ed6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009ed8:	8b3b      	ldrh	r3, [r7, #24]
 8009eda:	461a      	mov	r2, r3
 8009edc:	6879      	ldr	r1, [r7, #4]
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f000 fba5 	bl	800a62e <USBH_CtlReq>
 8009ee4:	4603      	mov	r3, r0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b082      	sub	sp, #8
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	789b      	ldrb	r3, [r3, #2]
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d10f      	bne.n	8009f22 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2205      	movs	r2, #5
 8009f0c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009f0e:	78fb      	ldrb	r3, [r7, #3]
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009f22:	2200      	movs	r2, #0
 8009f24:	2100      	movs	r1, #0
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 fb81 	bl	800a62e <USBH_CtlReq>
 8009f2c:	4603      	mov	r3, r0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b082      	sub	sp, #8
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	460b      	mov	r3, r1
 8009f40:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	789b      	ldrb	r3, [r3, #2]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d10e      	bne.n	8009f68 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2209      	movs	r2, #9
 8009f54:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	887a      	ldrh	r2, [r7, #2]
 8009f5a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009f68:	2200      	movs	r2, #0
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fb5e 	bl	800a62e <USBH_CtlReq>
 8009f72:	4603      	mov	r3, r0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	460b      	mov	r3, r1
 8009f86:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	789b      	ldrb	r3, [r3, #2]
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d10f      	bne.n	8009fb0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2203      	movs	r2, #3
 8009f9a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009f9c:	78fb      	ldrb	r3, [r7, #3]
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 fb3a 	bl	800a62e <USBH_CtlReq>
 8009fba:	4603      	mov	r3, r0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3708      	adds	r7, #8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	789b      	ldrb	r3, [r3, #2]
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d10f      	bne.n	8009ff8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2202      	movs	r2, #2
 8009fdc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009fea:	78fb      	ldrb	r3, [r7, #3]
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 fb16 	bl	800a62e <USBH_CtlReq>
 800a002:	4603      	mov	r3, r0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b087      	sub	sp, #28
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	4613      	mov	r3, r2
 800a018:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a020:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a022:	2300      	movs	r3, #0
 800a024:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d101      	bne.n	800a030 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a02c:	2302      	movs	r3, #2
 800a02e:	e094      	b.n	800a15a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	781a      	ldrb	r2, [r3, #0]
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	785a      	ldrb	r2, [r3, #1]
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	3302      	adds	r3, #2
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	461a      	mov	r2, r3
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	3303      	adds	r3, #3
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	021b      	lsls	r3, r3, #8
 800a050:	b29b      	uxth	r3, r3
 800a052:	4313      	orrs	r3, r2
 800a054:	b29a      	uxth	r2, r3
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	791a      	ldrb	r2, [r3, #4]
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	795a      	ldrb	r2, [r3, #5]
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	799a      	ldrb	r2, [r3, #6]
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	79da      	ldrb	r2, [r3, #7]
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a080:	2b00      	cmp	r3, #0
 800a082:	d004      	beq.n	800a08e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d11b      	bne.n	800a0c6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	79db      	ldrb	r3, [r3, #7]
 800a092:	2b20      	cmp	r3, #32
 800a094:	dc0f      	bgt.n	800a0b6 <USBH_ParseDevDesc+0xaa>
 800a096:	2b08      	cmp	r3, #8
 800a098:	db0f      	blt.n	800a0ba <USBH_ParseDevDesc+0xae>
 800a09a:	3b08      	subs	r3, #8
 800a09c:	4a32      	ldr	r2, [pc, #200]	@ (800a168 <USBH_ParseDevDesc+0x15c>)
 800a09e:	fa22 f303 	lsr.w	r3, r2, r3
 800a0a2:	f003 0301 	and.w	r3, r3, #1
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	bf14      	ite	ne
 800a0aa:	2301      	movne	r3, #1
 800a0ac:	2300      	moveq	r3, #0
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d106      	bne.n	800a0c2 <USBH_ParseDevDesc+0xb6>
 800a0b4:	e001      	b.n	800a0ba <USBH_ParseDevDesc+0xae>
 800a0b6:	2b40      	cmp	r3, #64	@ 0x40
 800a0b8:	d003      	beq.n	800a0c2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	2208      	movs	r2, #8
 800a0be:	71da      	strb	r2, [r3, #7]
        break;
 800a0c0:	e000      	b.n	800a0c4 <USBH_ParseDevDesc+0xb8>
        break;
 800a0c2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a0c4:	e00e      	b.n	800a0e4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	d107      	bne.n	800a0e0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	79db      	ldrb	r3, [r3, #7]
 800a0d4:	2b08      	cmp	r3, #8
 800a0d6:	d005      	beq.n	800a0e4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	2208      	movs	r2, #8
 800a0dc:	71da      	strb	r2, [r3, #7]
 800a0de:	e001      	b.n	800a0e4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a0e4:	88fb      	ldrh	r3, [r7, #6]
 800a0e6:	2b08      	cmp	r3, #8
 800a0e8:	d936      	bls.n	800a158 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	3308      	adds	r3, #8
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	3309      	adds	r3, #9
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	021b      	lsls	r3, r3, #8
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	330a      	adds	r3, #10
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	461a      	mov	r2, r3
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	330b      	adds	r3, #11
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	021b      	lsls	r3, r3, #8
 800a114:	b29b      	uxth	r3, r3
 800a116:	4313      	orrs	r3, r2
 800a118:	b29a      	uxth	r2, r3
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	330c      	adds	r3, #12
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	461a      	mov	r2, r3
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	330d      	adds	r3, #13
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	021b      	lsls	r3, r3, #8
 800a12e:	b29b      	uxth	r3, r3
 800a130:	4313      	orrs	r3, r2
 800a132:	b29a      	uxth	r2, r3
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	7b9a      	ldrb	r2, [r3, #14]
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	7bda      	ldrb	r2, [r3, #15]
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	7c1a      	ldrb	r2, [r3, #16]
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	7c5a      	ldrb	r2, [r3, #17]
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a158:	7dfb      	ldrb	r3, [r7, #23]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	371c      	adds	r7, #28
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	01000101 	.word	0x01000101

0800a16c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b08c      	sub	sp, #48	@ 0x30
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	4613      	mov	r3, r2
 800a178:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a180:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a182:	2300      	movs	r3, #0
 800a184:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a188:	2300      	movs	r3, #0
 800a18a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a18e:	2300      	movs	r3, #0
 800a190:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d101      	bne.n	800a19e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a19a:	2302      	movs	r3, #2
 800a19c:	e0da      	b.n	800a354 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	2b09      	cmp	r3, #9
 800a1a8:	d002      	beq.n	800a1b0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ac:	2209      	movs	r2, #9
 800a1ae:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	781a      	ldrb	r2, [r3, #0]
 800a1b4:	6a3b      	ldr	r3, [r7, #32]
 800a1b6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	785a      	ldrb	r2, [r3, #1]
 800a1bc:	6a3b      	ldr	r3, [r7, #32]
 800a1be:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	3302      	adds	r3, #2
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	3303      	adds	r3, #3
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	021b      	lsls	r3, r3, #8
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1da:	bf28      	it	cs
 800a1dc:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	6a3b      	ldr	r3, [r7, #32]
 800a1e4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	791a      	ldrb	r2, [r3, #4]
 800a1ea:	6a3b      	ldr	r3, [r7, #32]
 800a1ec:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	795a      	ldrb	r2, [r3, #5]
 800a1f2:	6a3b      	ldr	r3, [r7, #32]
 800a1f4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	799a      	ldrb	r2, [r3, #6]
 800a1fa:	6a3b      	ldr	r3, [r7, #32]
 800a1fc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	79da      	ldrb	r2, [r3, #7]
 800a202:	6a3b      	ldr	r3, [r7, #32]
 800a204:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	7a1a      	ldrb	r2, [r3, #8]
 800a20a:	6a3b      	ldr	r3, [r7, #32]
 800a20c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a20e:	88fb      	ldrh	r3, [r7, #6]
 800a210:	2b09      	cmp	r3, #9
 800a212:	f240 809d 	bls.w	800a350 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a216:	2309      	movs	r3, #9
 800a218:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a21a:	2300      	movs	r3, #0
 800a21c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a21e:	e081      	b.n	800a324 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a220:	f107 0316 	add.w	r3, r7, #22
 800a224:	4619      	mov	r1, r3
 800a226:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a228:	f000 f9e7 	bl	800a5fa <USBH_GetNextDesc>
 800a22c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a230:	785b      	ldrb	r3, [r3, #1]
 800a232:	2b04      	cmp	r3, #4
 800a234:	d176      	bne.n	800a324 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	2b09      	cmp	r3, #9
 800a23c:	d002      	beq.n	800a244 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a240:	2209      	movs	r2, #9
 800a242:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a248:	221a      	movs	r2, #26
 800a24a:	fb02 f303 	mul.w	r3, r2, r3
 800a24e:	3308      	adds	r3, #8
 800a250:	6a3a      	ldr	r2, [r7, #32]
 800a252:	4413      	add	r3, r2
 800a254:	3302      	adds	r3, #2
 800a256:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a258:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a25a:	69f8      	ldr	r0, [r7, #28]
 800a25c:	f000 f87e 	bl	800a35c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a260:	2300      	movs	r3, #0
 800a262:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a266:	2300      	movs	r3, #0
 800a268:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a26a:	e043      	b.n	800a2f4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a26c:	f107 0316 	add.w	r3, r7, #22
 800a270:	4619      	mov	r1, r3
 800a272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a274:	f000 f9c1 	bl	800a5fa <USBH_GetNextDesc>
 800a278:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27c:	785b      	ldrb	r3, [r3, #1]
 800a27e:	2b05      	cmp	r3, #5
 800a280:	d138      	bne.n	800a2f4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	795b      	ldrb	r3, [r3, #5]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d113      	bne.n	800a2b2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d003      	beq.n	800a29a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	799b      	ldrb	r3, [r3, #6]
 800a296:	2b03      	cmp	r3, #3
 800a298:	d10b      	bne.n	800a2b2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	79db      	ldrb	r3, [r3, #7]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d10b      	bne.n	800a2ba <USBH_ParseCfgDesc+0x14e>
 800a2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	2b09      	cmp	r3, #9
 800a2a8:	d007      	beq.n	800a2ba <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ac:	2209      	movs	r2, #9
 800a2ae:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a2b0:	e003      	b.n	800a2ba <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b4:	2207      	movs	r2, #7
 800a2b6:	701a      	strb	r2, [r3, #0]
 800a2b8:	e000      	b.n	800a2bc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a2ba:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a2bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2c0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a2c4:	3201      	adds	r2, #1
 800a2c6:	00d2      	lsls	r2, r2, #3
 800a2c8:	211a      	movs	r1, #26
 800a2ca:	fb01 f303 	mul.w	r3, r1, r3
 800a2ce:	4413      	add	r3, r2
 800a2d0:	3308      	adds	r3, #8
 800a2d2:	6a3a      	ldr	r2, [r7, #32]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	3304      	adds	r3, #4
 800a2d8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a2da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a2dc:	69b9      	ldr	r1, [r7, #24]
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	f000 f870 	bl	800a3c4 <USBH_ParseEPDesc>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a2ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	791b      	ldrb	r3, [r3, #4]
 800a2f8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d204      	bcs.n	800a30a <USBH_ParseCfgDesc+0x19e>
 800a300:	6a3b      	ldr	r3, [r7, #32]
 800a302:	885a      	ldrh	r2, [r3, #2]
 800a304:	8afb      	ldrh	r3, [r7, #22]
 800a306:	429a      	cmp	r2, r3
 800a308:	d8b0      	bhi.n	800a26c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	791b      	ldrb	r3, [r3, #4]
 800a30e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a312:	429a      	cmp	r2, r3
 800a314:	d201      	bcs.n	800a31a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a316:	2303      	movs	r3, #3
 800a318:	e01c      	b.n	800a354 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a31a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a31e:	3301      	adds	r3, #1
 800a320:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a324:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d805      	bhi.n	800a338 <USBH_ParseCfgDesc+0x1cc>
 800a32c:	6a3b      	ldr	r3, [r7, #32]
 800a32e:	885a      	ldrh	r2, [r3, #2]
 800a330:	8afb      	ldrh	r3, [r7, #22]
 800a332:	429a      	cmp	r2, r3
 800a334:	f63f af74 	bhi.w	800a220 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a338:	6a3b      	ldr	r3, [r7, #32]
 800a33a:	791b      	ldrb	r3, [r3, #4]
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	bf28      	it	cs
 800a340:	2302      	movcs	r3, #2
 800a342:	b2db      	uxtb	r3, r3
 800a344:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a348:	429a      	cmp	r2, r3
 800a34a:	d201      	bcs.n	800a350 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e001      	b.n	800a354 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a350:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a354:	4618      	mov	r0, r3
 800a356:	3730      	adds	r7, #48	@ 0x30
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	781a      	ldrb	r2, [r3, #0]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	785a      	ldrb	r2, [r3, #1]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	789a      	ldrb	r2, [r3, #2]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	78da      	ldrb	r2, [r3, #3]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	3304      	adds	r3, #4
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	bf28      	it	cs
 800a390:	2302      	movcs	r3, #2
 800a392:	b2da      	uxtb	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	795a      	ldrb	r2, [r3, #5]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	799a      	ldrb	r2, [r3, #6]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	79da      	ldrb	r2, [r3, #7]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	7a1a      	ldrb	r2, [r3, #8]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	721a      	strb	r2, [r3, #8]
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b087      	sub	sp, #28
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	781a      	ldrb	r2, [r3, #0]
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	785a      	ldrb	r2, [r3, #1]
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	789a      	ldrb	r2, [r3, #2]
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	78da      	ldrb	r2, [r3, #3]
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	3304      	adds	r3, #4
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	3305      	adds	r3, #5
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	021b      	lsls	r3, r3, #8
 800a404:	b29b      	uxth	r3, r3
 800a406:	4313      	orrs	r3, r2
 800a408:	b29a      	uxth	r2, r3
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	799a      	ldrb	r2, [r3, #6]
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	889b      	ldrh	r3, [r3, #4]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d009      	beq.n	800a432 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a426:	d804      	bhi.n	800a432 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a42c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a430:	d901      	bls.n	800a436 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a432:	2303      	movs	r3, #3
 800a434:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d136      	bne.n	800a4ae <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	78db      	ldrb	r3, [r3, #3]
 800a444:	f003 0303 	and.w	r3, r3, #3
 800a448:	2b02      	cmp	r3, #2
 800a44a:	d108      	bne.n	800a45e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	889b      	ldrh	r3, [r3, #4]
 800a450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a454:	f240 8097 	bls.w	800a586 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a458:	2303      	movs	r3, #3
 800a45a:	75fb      	strb	r3, [r7, #23]
 800a45c:	e093      	b.n	800a586 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	78db      	ldrb	r3, [r3, #3]
 800a462:	f003 0303 	and.w	r3, r3, #3
 800a466:	2b00      	cmp	r3, #0
 800a468:	d107      	bne.n	800a47a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	889b      	ldrh	r3, [r3, #4]
 800a46e:	2b40      	cmp	r3, #64	@ 0x40
 800a470:	f240 8089 	bls.w	800a586 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a474:	2303      	movs	r3, #3
 800a476:	75fb      	strb	r3, [r7, #23]
 800a478:	e085      	b.n	800a586 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	78db      	ldrb	r3, [r3, #3]
 800a47e:	f003 0303 	and.w	r3, r3, #3
 800a482:	2b01      	cmp	r3, #1
 800a484:	d005      	beq.n	800a492 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	78db      	ldrb	r3, [r3, #3]
 800a48a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a48e:	2b03      	cmp	r3, #3
 800a490:	d10a      	bne.n	800a4a8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	799b      	ldrb	r3, [r3, #6]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d003      	beq.n	800a4a2 <USBH_ParseEPDesc+0xde>
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	799b      	ldrb	r3, [r3, #6]
 800a49e:	2b10      	cmp	r3, #16
 800a4a0:	d970      	bls.n	800a584 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a4a6:	e06d      	b.n	800a584 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	75fb      	strb	r3, [r7, #23]
 800a4ac:	e06b      	b.n	800a586 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d13c      	bne.n	800a532 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	78db      	ldrb	r3, [r3, #3]
 800a4bc:	f003 0303 	and.w	r3, r3, #3
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d005      	beq.n	800a4d0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	78db      	ldrb	r3, [r3, #3]
 800a4c8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d106      	bne.n	800a4de <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	889b      	ldrh	r3, [r3, #4]
 800a4d4:	2b40      	cmp	r3, #64	@ 0x40
 800a4d6:	d956      	bls.n	800a586 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a4d8:	2303      	movs	r3, #3
 800a4da:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a4dc:	e053      	b.n	800a586 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	78db      	ldrb	r3, [r3, #3]
 800a4e2:	f003 0303 	and.w	r3, r3, #3
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d10e      	bne.n	800a508 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	799b      	ldrb	r3, [r3, #6]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d007      	beq.n	800a502 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a4f6:	2b10      	cmp	r3, #16
 800a4f8:	d803      	bhi.n	800a502 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a4fe:	2b40      	cmp	r3, #64	@ 0x40
 800a500:	d941      	bls.n	800a586 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a502:	2303      	movs	r3, #3
 800a504:	75fb      	strb	r3, [r7, #23]
 800a506:	e03e      	b.n	800a586 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	78db      	ldrb	r3, [r3, #3]
 800a50c:	f003 0303 	and.w	r3, r3, #3
 800a510:	2b03      	cmp	r3, #3
 800a512:	d10b      	bne.n	800a52c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	799b      	ldrb	r3, [r3, #6]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d004      	beq.n	800a526 <USBH_ParseEPDesc+0x162>
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	889b      	ldrh	r3, [r3, #4]
 800a520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a524:	d32f      	bcc.n	800a586 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a526:	2303      	movs	r3, #3
 800a528:	75fb      	strb	r3, [r7, #23]
 800a52a:	e02c      	b.n	800a586 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a52c:	2303      	movs	r3, #3
 800a52e:	75fb      	strb	r3, [r7, #23]
 800a530:	e029      	b.n	800a586 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d120      	bne.n	800a57e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	78db      	ldrb	r3, [r3, #3]
 800a540:	f003 0303 	and.w	r3, r3, #3
 800a544:	2b00      	cmp	r3, #0
 800a546:	d106      	bne.n	800a556 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	889b      	ldrh	r3, [r3, #4]
 800a54c:	2b08      	cmp	r3, #8
 800a54e:	d01a      	beq.n	800a586 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a550:	2303      	movs	r3, #3
 800a552:	75fb      	strb	r3, [r7, #23]
 800a554:	e017      	b.n	800a586 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	78db      	ldrb	r3, [r3, #3]
 800a55a:	f003 0303 	and.w	r3, r3, #3
 800a55e:	2b03      	cmp	r3, #3
 800a560:	d10a      	bne.n	800a578 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	799b      	ldrb	r3, [r3, #6]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d003      	beq.n	800a572 <USBH_ParseEPDesc+0x1ae>
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	889b      	ldrh	r3, [r3, #4]
 800a56e:	2b08      	cmp	r3, #8
 800a570:	d909      	bls.n	800a586 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a572:	2303      	movs	r3, #3
 800a574:	75fb      	strb	r3, [r7, #23]
 800a576:	e006      	b.n	800a586 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a578:	2303      	movs	r3, #3
 800a57a:	75fb      	strb	r3, [r7, #23]
 800a57c:	e003      	b.n	800a586 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a57e:	2303      	movs	r3, #3
 800a580:	75fb      	strb	r3, [r7, #23]
 800a582:	e000      	b.n	800a586 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a584:	bf00      	nop
  }

  return status;
 800a586:	7dfb      	ldrb	r3, [r7, #23]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	371c      	adds	r7, #28
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a594:	b480      	push	{r7}
 800a596:	b087      	sub	sp, #28
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	2b03      	cmp	r3, #3
 800a5aa:	d120      	bne.n	800a5ee <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	1e9a      	subs	r2, r3, #2
 800a5b2:	88fb      	ldrh	r3, [r7, #6]
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	bf28      	it	cs
 800a5b8:	4613      	movcs	r3, r2
 800a5ba:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	3302      	adds	r3, #2
 800a5c0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	82fb      	strh	r3, [r7, #22]
 800a5c6:	e00b      	b.n	800a5e0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a5c8:	8afb      	ldrh	r3, [r7, #22]
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	781a      	ldrb	r2, [r3, #0]
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a5da:	8afb      	ldrh	r3, [r7, #22]
 800a5dc:	3302      	adds	r3, #2
 800a5de:	82fb      	strh	r3, [r7, #22]
 800a5e0:	8afa      	ldrh	r2, [r7, #22]
 800a5e2:	8abb      	ldrh	r3, [r7, #20]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d3ef      	bcc.n	800a5c8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	701a      	strb	r2, [r3, #0]
  }
}
 800a5ee:	bf00      	nop
 800a5f0:	371c      	adds	r7, #28
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr

0800a5fa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a5fa:	b480      	push	{r7}
 800a5fc:	b085      	sub	sp, #20
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
 800a602:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	881b      	ldrh	r3, [r3, #0]
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	7812      	ldrb	r2, [r2, #0]
 800a60c:	4413      	add	r3, r2
 800a60e:	b29a      	uxth	r2, r3
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4413      	add	r3, r2
 800a61e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a620:	68fb      	ldr	r3, [r7, #12]
}
 800a622:	4618      	mov	r0, r3
 800a624:	3714      	adds	r7, #20
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr

0800a62e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b086      	sub	sp, #24
 800a632:	af00      	add	r7, sp, #0
 800a634:	60f8      	str	r0, [r7, #12]
 800a636:	60b9      	str	r1, [r7, #8]
 800a638:	4613      	mov	r3, r2
 800a63a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a63c:	2301      	movs	r3, #1
 800a63e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	789b      	ldrb	r3, [r3, #2]
 800a644:	2b01      	cmp	r3, #1
 800a646:	d002      	beq.n	800a64e <USBH_CtlReq+0x20>
 800a648:	2b02      	cmp	r3, #2
 800a64a:	d00f      	beq.n	800a66c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a64c:	e027      	b.n	800a69e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	68ba      	ldr	r2, [r7, #8]
 800a652:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	88fa      	ldrh	r2, [r7, #6]
 800a658:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2201      	movs	r2, #1
 800a65e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2202      	movs	r2, #2
 800a664:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a666:	2301      	movs	r3, #1
 800a668:	75fb      	strb	r3, [r7, #23]
      break;
 800a66a:	e018      	b.n	800a69e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f000 f81b 	bl	800a6a8 <USBH_HandleControl>
 800a672:	4603      	mov	r3, r0
 800a674:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a676:	7dfb      	ldrb	r3, [r7, #23]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d002      	beq.n	800a682 <USBH_CtlReq+0x54>
 800a67c:	7dfb      	ldrb	r3, [r7, #23]
 800a67e:	2b03      	cmp	r3, #3
 800a680:	d106      	bne.n	800a690 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2201      	movs	r2, #1
 800a686:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2200      	movs	r2, #0
 800a68c:	761a      	strb	r2, [r3, #24]
      break;
 800a68e:	e005      	b.n	800a69c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a690:	7dfb      	ldrb	r3, [r7, #23]
 800a692:	2b02      	cmp	r3, #2
 800a694:	d102      	bne.n	800a69c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2201      	movs	r2, #1
 800a69a:	709a      	strb	r2, [r3, #2]
      break;
 800a69c:	bf00      	nop
  }
  return status;
 800a69e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3718      	adds	r7, #24
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b086      	sub	sp, #24
 800a6ac:	af02      	add	r7, sp, #8
 800a6ae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	7e1b      	ldrb	r3, [r3, #24]
 800a6bc:	3b01      	subs	r3, #1
 800a6be:	2b0a      	cmp	r3, #10
 800a6c0:	f200 8156 	bhi.w	800a970 <USBH_HandleControl+0x2c8>
 800a6c4:	a201      	add	r2, pc, #4	@ (adr r2, 800a6cc <USBH_HandleControl+0x24>)
 800a6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ca:	bf00      	nop
 800a6cc:	0800a6f9 	.word	0x0800a6f9
 800a6d0:	0800a713 	.word	0x0800a713
 800a6d4:	0800a77d 	.word	0x0800a77d
 800a6d8:	0800a7a3 	.word	0x0800a7a3
 800a6dc:	0800a7db 	.word	0x0800a7db
 800a6e0:	0800a805 	.word	0x0800a805
 800a6e4:	0800a857 	.word	0x0800a857
 800a6e8:	0800a879 	.word	0x0800a879
 800a6ec:	0800a8b5 	.word	0x0800a8b5
 800a6f0:	0800a8db 	.word	0x0800a8db
 800a6f4:	0800a919 	.word	0x0800a919
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f103 0110 	add.w	r1, r3, #16
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	795b      	ldrb	r3, [r3, #5]
 800a702:	461a      	mov	r2, r3
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 f943 	bl	800a990 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2202      	movs	r2, #2
 800a70e:	761a      	strb	r2, [r3, #24]
      break;
 800a710:	e139      	b.n	800a986 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	795b      	ldrb	r3, [r3, #5]
 800a716:	4619      	mov	r1, r3
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 fcc5 	bl	800b0a8 <USBH_LL_GetURBState>
 800a71e:	4603      	mov	r3, r0
 800a720:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a722:	7bbb      	ldrb	r3, [r7, #14]
 800a724:	2b01      	cmp	r3, #1
 800a726:	d11e      	bne.n	800a766 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	7c1b      	ldrb	r3, [r3, #16]
 800a72c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a730:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	8adb      	ldrh	r3, [r3, #22]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00a      	beq.n	800a750 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a73a:	7b7b      	ldrb	r3, [r7, #13]
 800a73c:	2b80      	cmp	r3, #128	@ 0x80
 800a73e:	d103      	bne.n	800a748 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2203      	movs	r2, #3
 800a744:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a746:	e115      	b.n	800a974 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2205      	movs	r2, #5
 800a74c:	761a      	strb	r2, [r3, #24]
      break;
 800a74e:	e111      	b.n	800a974 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a750:	7b7b      	ldrb	r3, [r7, #13]
 800a752:	2b80      	cmp	r3, #128	@ 0x80
 800a754:	d103      	bne.n	800a75e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2209      	movs	r2, #9
 800a75a:	761a      	strb	r2, [r3, #24]
      break;
 800a75c:	e10a      	b.n	800a974 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2207      	movs	r2, #7
 800a762:	761a      	strb	r2, [r3, #24]
      break;
 800a764:	e106      	b.n	800a974 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a766:	7bbb      	ldrb	r3, [r7, #14]
 800a768:	2b04      	cmp	r3, #4
 800a76a:	d003      	beq.n	800a774 <USBH_HandleControl+0xcc>
 800a76c:	7bbb      	ldrb	r3, [r7, #14]
 800a76e:	2b02      	cmp	r3, #2
 800a770:	f040 8100 	bne.w	800a974 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	220b      	movs	r2, #11
 800a778:	761a      	strb	r2, [r3, #24]
      break;
 800a77a:	e0fb      	b.n	800a974 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a782:	b29a      	uxth	r2, r3
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6899      	ldr	r1, [r3, #8]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	899a      	ldrh	r2, [r3, #12]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	791b      	ldrb	r3, [r3, #4]
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 f93a 	bl	800aa0e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2204      	movs	r2, #4
 800a79e:	761a      	strb	r2, [r3, #24]
      break;
 800a7a0:	e0f1      	b.n	800a986 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	791b      	ldrb	r3, [r3, #4]
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 fc7d 	bl	800b0a8 <USBH_LL_GetURBState>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a7b2:	7bbb      	ldrb	r3, [r7, #14]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d102      	bne.n	800a7be <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2209      	movs	r2, #9
 800a7bc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a7be:	7bbb      	ldrb	r3, [r7, #14]
 800a7c0:	2b05      	cmp	r3, #5
 800a7c2:	d102      	bne.n	800a7ca <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a7c4:	2303      	movs	r3, #3
 800a7c6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a7c8:	e0d6      	b.n	800a978 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a7ca:	7bbb      	ldrb	r3, [r7, #14]
 800a7cc:	2b04      	cmp	r3, #4
 800a7ce:	f040 80d3 	bne.w	800a978 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	220b      	movs	r2, #11
 800a7d6:	761a      	strb	r2, [r3, #24]
      break;
 800a7d8:	e0ce      	b.n	800a978 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6899      	ldr	r1, [r3, #8]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	899a      	ldrh	r2, [r3, #12]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	795b      	ldrb	r3, [r3, #5]
 800a7e6:	2001      	movs	r0, #1
 800a7e8:	9000      	str	r0, [sp, #0]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 f8ea 	bl	800a9c4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2206      	movs	r2, #6
 800a800:	761a      	strb	r2, [r3, #24]
      break;
 800a802:	e0c0      	b.n	800a986 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	795b      	ldrb	r3, [r3, #5]
 800a808:	4619      	mov	r1, r3
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 fc4c 	bl	800b0a8 <USBH_LL_GetURBState>
 800a810:	4603      	mov	r3, r0
 800a812:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a814:	7bbb      	ldrb	r3, [r7, #14]
 800a816:	2b01      	cmp	r3, #1
 800a818:	d103      	bne.n	800a822 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2207      	movs	r2, #7
 800a81e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a820:	e0ac      	b.n	800a97c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a822:	7bbb      	ldrb	r3, [r7, #14]
 800a824:	2b05      	cmp	r3, #5
 800a826:	d105      	bne.n	800a834 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	220c      	movs	r2, #12
 800a82c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a82e:	2303      	movs	r3, #3
 800a830:	73fb      	strb	r3, [r7, #15]
      break;
 800a832:	e0a3      	b.n	800a97c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a834:	7bbb      	ldrb	r3, [r7, #14]
 800a836:	2b02      	cmp	r3, #2
 800a838:	d103      	bne.n	800a842 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2205      	movs	r2, #5
 800a83e:	761a      	strb	r2, [r3, #24]
      break;
 800a840:	e09c      	b.n	800a97c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a842:	7bbb      	ldrb	r3, [r7, #14]
 800a844:	2b04      	cmp	r3, #4
 800a846:	f040 8099 	bne.w	800a97c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	220b      	movs	r2, #11
 800a84e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a850:	2302      	movs	r3, #2
 800a852:	73fb      	strb	r3, [r7, #15]
      break;
 800a854:	e092      	b.n	800a97c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	791b      	ldrb	r3, [r3, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	2100      	movs	r1, #0
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f8d5 	bl	800aa0e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2208      	movs	r2, #8
 800a874:	761a      	strb	r2, [r3, #24]

      break;
 800a876:	e086      	b.n	800a986 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	791b      	ldrb	r3, [r3, #4]
 800a87c:	4619      	mov	r1, r3
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 fc12 	bl	800b0a8 <USBH_LL_GetURBState>
 800a884:	4603      	mov	r3, r0
 800a886:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a888:	7bbb      	ldrb	r3, [r7, #14]
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d105      	bne.n	800a89a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	220d      	movs	r2, #13
 800a892:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a894:	2300      	movs	r3, #0
 800a896:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a898:	e072      	b.n	800a980 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a89a:	7bbb      	ldrb	r3, [r7, #14]
 800a89c:	2b04      	cmp	r3, #4
 800a89e:	d103      	bne.n	800a8a8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	220b      	movs	r2, #11
 800a8a4:	761a      	strb	r2, [r3, #24]
      break;
 800a8a6:	e06b      	b.n	800a980 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a8a8:	7bbb      	ldrb	r3, [r7, #14]
 800a8aa:	2b05      	cmp	r3, #5
 800a8ac:	d168      	bne.n	800a980 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a8b2:	e065      	b.n	800a980 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	795b      	ldrb	r3, [r3, #5]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	9200      	str	r2, [sp, #0]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	2100      	movs	r1, #0
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 f87f 	bl	800a9c4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	220a      	movs	r2, #10
 800a8d6:	761a      	strb	r2, [r3, #24]
      break;
 800a8d8:	e055      	b.n	800a986 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	795b      	ldrb	r3, [r3, #5]
 800a8de:	4619      	mov	r1, r3
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 fbe1 	bl	800b0a8 <USBH_LL_GetURBState>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a8ea:	7bbb      	ldrb	r3, [r7, #14]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d105      	bne.n	800a8fc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	220d      	movs	r2, #13
 800a8f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a8fa:	e043      	b.n	800a984 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a8fc:	7bbb      	ldrb	r3, [r7, #14]
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d103      	bne.n	800a90a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2209      	movs	r2, #9
 800a906:	761a      	strb	r2, [r3, #24]
      break;
 800a908:	e03c      	b.n	800a984 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a90a:	7bbb      	ldrb	r3, [r7, #14]
 800a90c:	2b04      	cmp	r3, #4
 800a90e:	d139      	bne.n	800a984 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	220b      	movs	r2, #11
 800a914:	761a      	strb	r2, [r3, #24]
      break;
 800a916:	e035      	b.n	800a984 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	7e5b      	ldrb	r3, [r3, #25]
 800a91c:	3301      	adds	r3, #1
 800a91e:	b2da      	uxtb	r2, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	765a      	strb	r2, [r3, #25]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	7e5b      	ldrb	r3, [r3, #25]
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d806      	bhi.n	800a93a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2201      	movs	r2, #1
 800a936:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a938:	e025      	b.n	800a986 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a940:	2106      	movs	r1, #6
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	795b      	ldrb	r3, [r3, #5]
 800a950:	4619      	mov	r1, r3
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 f90c 	bl	800ab70 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	791b      	ldrb	r3, [r3, #4]
 800a95c:	4619      	mov	r1, r3
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 f906 	bl	800ab70 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a96a:	2302      	movs	r3, #2
 800a96c:	73fb      	strb	r3, [r7, #15]
      break;
 800a96e:	e00a      	b.n	800a986 <USBH_HandleControl+0x2de>

    default:
      break;
 800a970:	bf00      	nop
 800a972:	e008      	b.n	800a986 <USBH_HandleControl+0x2de>
      break;
 800a974:	bf00      	nop
 800a976:	e006      	b.n	800a986 <USBH_HandleControl+0x2de>
      break;
 800a978:	bf00      	nop
 800a97a:	e004      	b.n	800a986 <USBH_HandleControl+0x2de>
      break;
 800a97c:	bf00      	nop
 800a97e:	e002      	b.n	800a986 <USBH_HandleControl+0x2de>
      break;
 800a980:	bf00      	nop
 800a982:	e000      	b.n	800a986 <USBH_HandleControl+0x2de>
      break;
 800a984:	bf00      	nop
  }

  return status;
 800a986:	7bfb      	ldrb	r3, [r7, #15]
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3710      	adds	r7, #16
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b088      	sub	sp, #32
 800a994:	af04      	add	r7, sp, #16
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	4613      	mov	r3, r2
 800a99c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a99e:	79f9      	ldrb	r1, [r7, #7]
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	9303      	str	r3, [sp, #12]
 800a9a4:	2308      	movs	r3, #8
 800a9a6:	9302      	str	r3, [sp, #8]
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	9301      	str	r3, [sp, #4]
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f000 fb46 	bl	800b046 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a9ba:	2300      	movs	r3, #0
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3710      	adds	r7, #16
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b088      	sub	sp, #32
 800a9c8:	af04      	add	r7, sp, #16
 800a9ca:	60f8      	str	r0, [r7, #12]
 800a9cc:	60b9      	str	r1, [r7, #8]
 800a9ce:	4611      	mov	r1, r2
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	80fb      	strh	r3, [r7, #6]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d001      	beq.n	800a9e8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a9e8:	7979      	ldrb	r1, [r7, #5]
 800a9ea:	7e3b      	ldrb	r3, [r7, #24]
 800a9ec:	9303      	str	r3, [sp, #12]
 800a9ee:	88fb      	ldrh	r3, [r7, #6]
 800a9f0:	9302      	str	r3, [sp, #8]
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	9301      	str	r3, [sp, #4]
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	68f8      	ldr	r0, [r7, #12]
 800aa00:	f000 fb21 	bl	800b046 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b088      	sub	sp, #32
 800aa12:	af04      	add	r7, sp, #16
 800aa14:	60f8      	str	r0, [r7, #12]
 800aa16:	60b9      	str	r1, [r7, #8]
 800aa18:	4611      	mov	r1, r2
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	80fb      	strh	r3, [r7, #6]
 800aa20:	4613      	mov	r3, r2
 800aa22:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa24:	7979      	ldrb	r1, [r7, #5]
 800aa26:	2300      	movs	r3, #0
 800aa28:	9303      	str	r3, [sp, #12]
 800aa2a:	88fb      	ldrh	r3, [r7, #6]
 800aa2c:	9302      	str	r3, [sp, #8]
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	9301      	str	r3, [sp, #4]
 800aa32:	2301      	movs	r3, #1
 800aa34:	9300      	str	r3, [sp, #0]
 800aa36:	2300      	movs	r3, #0
 800aa38:	2201      	movs	r2, #1
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f000 fb03 	bl	800b046 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aa40:	2300      	movs	r3, #0

}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b088      	sub	sp, #32
 800aa4e:	af04      	add	r7, sp, #16
 800aa50:	60f8      	str	r0, [r7, #12]
 800aa52:	60b9      	str	r1, [r7, #8]
 800aa54:	4611      	mov	r1, r2
 800aa56:	461a      	mov	r2, r3
 800aa58:	460b      	mov	r3, r1
 800aa5a:	80fb      	strh	r3, [r7, #6]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d001      	beq.n	800aa6e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa6e:	7979      	ldrb	r1, [r7, #5]
 800aa70:	7e3b      	ldrb	r3, [r7, #24]
 800aa72:	9303      	str	r3, [sp, #12]
 800aa74:	88fb      	ldrh	r3, [r7, #6]
 800aa76:	9302      	str	r3, [sp, #8]
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	9301      	str	r3, [sp, #4]
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	9300      	str	r3, [sp, #0]
 800aa80:	2302      	movs	r3, #2
 800aa82:	2200      	movs	r2, #0
 800aa84:	68f8      	ldr	r0, [r7, #12]
 800aa86:	f000 fade 	bl	800b046 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b088      	sub	sp, #32
 800aa98:	af04      	add	r7, sp, #16
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	80fb      	strh	r3, [r7, #6]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aaaa:	7979      	ldrb	r1, [r7, #5]
 800aaac:	2300      	movs	r3, #0
 800aaae:	9303      	str	r3, [sp, #12]
 800aab0:	88fb      	ldrh	r3, [r7, #6]
 800aab2:	9302      	str	r3, [sp, #8]
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	9301      	str	r3, [sp, #4]
 800aab8:	2301      	movs	r3, #1
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	2302      	movs	r3, #2
 800aabe:	2201      	movs	r2, #1
 800aac0:	68f8      	ldr	r0, [r7, #12]
 800aac2:	f000 fac0 	bl	800b046 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b086      	sub	sp, #24
 800aad4:	af04      	add	r7, sp, #16
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	4608      	mov	r0, r1
 800aada:	4611      	mov	r1, r2
 800aadc:	461a      	mov	r2, r3
 800aade:	4603      	mov	r3, r0
 800aae0:	70fb      	strb	r3, [r7, #3]
 800aae2:	460b      	mov	r3, r1
 800aae4:	70bb      	strb	r3, [r7, #2]
 800aae6:	4613      	mov	r3, r2
 800aae8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800aaea:	7878      	ldrb	r0, [r7, #1]
 800aaec:	78ba      	ldrb	r2, [r7, #2]
 800aaee:	78f9      	ldrb	r1, [r7, #3]
 800aaf0:	8b3b      	ldrh	r3, [r7, #24]
 800aaf2:	9302      	str	r3, [sp, #8]
 800aaf4:	7d3b      	ldrb	r3, [r7, #20]
 800aaf6:	9301      	str	r3, [sp, #4]
 800aaf8:	7c3b      	ldrb	r3, [r7, #16]
 800aafa:	9300      	str	r3, [sp, #0]
 800aafc:	4603      	mov	r3, r0
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 fa53 	bl	800afaa <USBH_LL_OpenPipe>

  return USBH_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3708      	adds	r7, #8
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b082      	sub	sp, #8
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
 800ab16:	460b      	mov	r3, r1
 800ab18:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ab1a:	78fb      	ldrb	r3, [r7, #3]
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 fa72 	bl	800b008 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b084      	sub	sp, #16
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
 800ab36:	460b      	mov	r3, r1
 800ab38:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 f836 	bl	800abac <USBH_GetFreePipe>
 800ab40:	4603      	mov	r3, r0
 800ab42:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ab44:	89fb      	ldrh	r3, [r7, #14]
 800ab46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d00a      	beq.n	800ab64 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ab4e:	78fa      	ldrb	r2, [r7, #3]
 800ab50:	89fb      	ldrh	r3, [r7, #14]
 800ab52:	f003 030f 	and.w	r3, r3, #15
 800ab56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ab5a:	6879      	ldr	r1, [r7, #4]
 800ab5c:	33e0      	adds	r3, #224	@ 0xe0
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	440b      	add	r3, r1
 800ab62:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ab64:	89fb      	ldrh	r3, [r7, #14]
 800ab66:	b2db      	uxtb	r3, r3
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3710      	adds	r7, #16
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	460b      	mov	r3, r1
 800ab7a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ab7c:	78fb      	ldrb	r3, [r7, #3]
 800ab7e:	2b0f      	cmp	r3, #15
 800ab80:	d80d      	bhi.n	800ab9e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ab82:	78fb      	ldrb	r3, [r7, #3]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	33e0      	adds	r3, #224	@ 0xe0
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	4413      	add	r3, r2
 800ab8c:	685a      	ldr	r2, [r3, #4]
 800ab8e:	78fb      	ldrb	r3, [r7, #3]
 800ab90:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ab94:	6879      	ldr	r1, [r7, #4]
 800ab96:	33e0      	adds	r3, #224	@ 0xe0
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	440b      	add	r3, r1
 800ab9c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800abb4:	2300      	movs	r3, #0
 800abb6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800abb8:	2300      	movs	r3, #0
 800abba:	73fb      	strb	r3, [r7, #15]
 800abbc:	e00f      	b.n	800abde <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800abbe:	7bfb      	ldrb	r3, [r7, #15]
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	33e0      	adds	r3, #224	@ 0xe0
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	4413      	add	r3, r2
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d102      	bne.n	800abd8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800abd2:	7bfb      	ldrb	r3, [r7, #15]
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	e007      	b.n	800abe8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800abd8:	7bfb      	ldrb	r3, [r7, #15]
 800abda:	3301      	adds	r3, #1
 800abdc:	73fb      	strb	r3, [r7, #15]
 800abde:	7bfb      	ldrb	r3, [r7, #15]
 800abe0:	2b0f      	cmp	r3, #15
 800abe2:	d9ec      	bls.n	800abbe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800abe4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3714      	adds	r7, #20
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800abf8:	2201      	movs	r2, #1
 800abfa:	490e      	ldr	r1, [pc, #56]	@ (800ac34 <MX_USB_HOST_Init+0x40>)
 800abfc:	480e      	ldr	r0, [pc, #56]	@ (800ac38 <MX_USB_HOST_Init+0x44>)
 800abfe:	f7fe fb15 	bl	800922c <USBH_Init>
 800ac02:	4603      	mov	r3, r0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d001      	beq.n	800ac0c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ac08:	f7f7 f8d6 	bl	8001db8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ac0c:	490b      	ldr	r1, [pc, #44]	@ (800ac3c <MX_USB_HOST_Init+0x48>)
 800ac0e:	480a      	ldr	r0, [pc, #40]	@ (800ac38 <MX_USB_HOST_Init+0x44>)
 800ac10:	f7fe fbb9 	bl	8009386 <USBH_RegisterClass>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d001      	beq.n	800ac1e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ac1a:	f7f7 f8cd 	bl	8001db8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ac1e:	4806      	ldr	r0, [pc, #24]	@ (800ac38 <MX_USB_HOST_Init+0x44>)
 800ac20:	f7fe fc3d 	bl	800949e <USBH_Start>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d001      	beq.n	800ac2e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ac2a:	f7f7 f8c5 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ac2e:	bf00      	nop
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	0800ac55 	.word	0x0800ac55
 800ac38:	200003a8 	.word	0x200003a8
 800ac3c:	20000010 	.word	0x20000010

0800ac40 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ac44:	4802      	ldr	r0, [pc, #8]	@ (800ac50 <MX_USB_HOST_Process+0x10>)
 800ac46:	f7fe fc3b 	bl	80094c0 <USBH_Process>
}
 800ac4a:	bf00      	nop
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	200003a8 	.word	0x200003a8

0800ac54 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ac60:	78fb      	ldrb	r3, [r7, #3]
 800ac62:	3b01      	subs	r3, #1
 800ac64:	2b04      	cmp	r3, #4
 800ac66:	d819      	bhi.n	800ac9c <USBH_UserProcess+0x48>
 800ac68:	a201      	add	r2, pc, #4	@ (adr r2, 800ac70 <USBH_UserProcess+0x1c>)
 800ac6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac6e:	bf00      	nop
 800ac70:	0800ac9d 	.word	0x0800ac9d
 800ac74:	0800ac8d 	.word	0x0800ac8d
 800ac78:	0800ac9d 	.word	0x0800ac9d
 800ac7c:	0800ac95 	.word	0x0800ac95
 800ac80:	0800ac85 	.word	0x0800ac85
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ac84:	4b09      	ldr	r3, [pc, #36]	@ (800acac <USBH_UserProcess+0x58>)
 800ac86:	2203      	movs	r2, #3
 800ac88:	701a      	strb	r2, [r3, #0]
  break;
 800ac8a:	e008      	b.n	800ac9e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ac8c:	4b07      	ldr	r3, [pc, #28]	@ (800acac <USBH_UserProcess+0x58>)
 800ac8e:	2202      	movs	r2, #2
 800ac90:	701a      	strb	r2, [r3, #0]
  break;
 800ac92:	e004      	b.n	800ac9e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ac94:	4b05      	ldr	r3, [pc, #20]	@ (800acac <USBH_UserProcess+0x58>)
 800ac96:	2201      	movs	r2, #1
 800ac98:	701a      	strb	r2, [r3, #0]
  break;
 800ac9a:	e000      	b.n	800ac9e <USBH_UserProcess+0x4a>

  default:
  break;
 800ac9c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ac9e:	bf00      	nop
 800aca0:	370c      	adds	r7, #12
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	20000780 	.word	0x20000780

0800acb0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b08a      	sub	sp, #40	@ 0x28
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acb8:	f107 0314 	add.w	r3, r7, #20
 800acbc:	2200      	movs	r2, #0
 800acbe:	601a      	str	r2, [r3, #0]
 800acc0:	605a      	str	r2, [r3, #4]
 800acc2:	609a      	str	r2, [r3, #8]
 800acc4:	60da      	str	r2, [r3, #12]
 800acc6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800acd0:	d147      	bne.n	800ad62 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acd2:	2300      	movs	r3, #0
 800acd4:	613b      	str	r3, [r7, #16]
 800acd6:	4b25      	ldr	r3, [pc, #148]	@ (800ad6c <HAL_HCD_MspInit+0xbc>)
 800acd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acda:	4a24      	ldr	r2, [pc, #144]	@ (800ad6c <HAL_HCD_MspInit+0xbc>)
 800acdc:	f043 0301 	orr.w	r3, r3, #1
 800ace0:	6313      	str	r3, [r2, #48]	@ 0x30
 800ace2:	4b22      	ldr	r3, [pc, #136]	@ (800ad6c <HAL_HCD_MspInit+0xbc>)
 800ace4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ace6:	f003 0301 	and.w	r3, r3, #1
 800acea:	613b      	str	r3, [r7, #16]
 800acec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800acee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800acf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800acf4:	2300      	movs	r3, #0
 800acf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acf8:	2300      	movs	r3, #0
 800acfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800acfc:	f107 0314 	add.w	r3, r7, #20
 800ad00:	4619      	mov	r1, r3
 800ad02:	481b      	ldr	r0, [pc, #108]	@ (800ad70 <HAL_HCD_MspInit+0xc0>)
 800ad04:	f7f7 fdbe 	bl	8002884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ad08:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800ad0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad0e:	2302      	movs	r3, #2
 800ad10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad12:	2300      	movs	r3, #0
 800ad14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad16:	2300      	movs	r3, #0
 800ad18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ad1a:	230a      	movs	r3, #10
 800ad1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad1e:	f107 0314 	add.w	r3, r7, #20
 800ad22:	4619      	mov	r1, r3
 800ad24:	4812      	ldr	r0, [pc, #72]	@ (800ad70 <HAL_HCD_MspInit+0xc0>)
 800ad26:	f7f7 fdad 	bl	8002884 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ad2a:	4b10      	ldr	r3, [pc, #64]	@ (800ad6c <HAL_HCD_MspInit+0xbc>)
 800ad2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad2e:	4a0f      	ldr	r2, [pc, #60]	@ (800ad6c <HAL_HCD_MspInit+0xbc>)
 800ad30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad34:	6353      	str	r3, [r2, #52]	@ 0x34
 800ad36:	2300      	movs	r3, #0
 800ad38:	60fb      	str	r3, [r7, #12]
 800ad3a:	4b0c      	ldr	r3, [pc, #48]	@ (800ad6c <HAL_HCD_MspInit+0xbc>)
 800ad3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad3e:	4a0b      	ldr	r2, [pc, #44]	@ (800ad6c <HAL_HCD_MspInit+0xbc>)
 800ad40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ad44:	6453      	str	r3, [r2, #68]	@ 0x44
 800ad46:	4b09      	ldr	r3, [pc, #36]	@ (800ad6c <HAL_HCD_MspInit+0xbc>)
 800ad48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad4e:	60fb      	str	r3, [r7, #12]
 800ad50:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ad52:	2200      	movs	r2, #0
 800ad54:	2100      	movs	r1, #0
 800ad56:	2043      	movs	r0, #67	@ 0x43
 800ad58:	f7f7 fccb 	bl	80026f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ad5c:	2043      	movs	r0, #67	@ 0x43
 800ad5e:	f7f7 fce4 	bl	800272a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ad62:	bf00      	nop
 800ad64:	3728      	adds	r7, #40	@ 0x28
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	40023800 	.word	0x40023800
 800ad70:	40020000 	.word	0x40020000

0800ad74 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fe ff73 	bl	8009c6e <USBH_LL_IncTimer>
}
 800ad88:	bf00      	nop
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7fe ffab 	bl	8009cfa <USBH_LL_Connect>
}
 800ada4:	bf00      	nop
 800ada6:	3708      	adds	r7, #8
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fe ffb4 	bl	8009d28 <USBH_LL_Disconnect>
}
 800adc0:	bf00      	nop
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	460b      	mov	r3, r1
 800add2:	70fb      	strb	r3, [r7, #3]
 800add4:	4613      	mov	r3, r2
 800add6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800add8:	bf00      	nop
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fe ff65 	bl	8009cc2 <USBH_LL_PortEnabled>
}
 800adf8:	bf00      	nop
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fe ff65 	bl	8009cde <USBH_LL_PortDisabled>
}
 800ae14:	bf00      	nop
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d12a      	bne.n	800ae84 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ae2e:	4a18      	ldr	r2, [pc, #96]	@ (800ae90 <USBH_LL_Init+0x74>)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a15      	ldr	r2, [pc, #84]	@ (800ae90 <USBH_LL_Init+0x74>)
 800ae3a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ae3e:	4b14      	ldr	r3, [pc, #80]	@ (800ae90 <USBH_LL_Init+0x74>)
 800ae40:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ae44:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ae46:	4b12      	ldr	r3, [pc, #72]	@ (800ae90 <USBH_LL_Init+0x74>)
 800ae48:	2208      	movs	r2, #8
 800ae4a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ae4c:	4b10      	ldr	r3, [pc, #64]	@ (800ae90 <USBH_LL_Init+0x74>)
 800ae4e:	2201      	movs	r2, #1
 800ae50:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ae52:	4b0f      	ldr	r3, [pc, #60]	@ (800ae90 <USBH_LL_Init+0x74>)
 800ae54:	2200      	movs	r2, #0
 800ae56:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ae58:	4b0d      	ldr	r3, [pc, #52]	@ (800ae90 <USBH_LL_Init+0x74>)
 800ae5a:	2202      	movs	r2, #2
 800ae5c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ae5e:	4b0c      	ldr	r3, [pc, #48]	@ (800ae90 <USBH_LL_Init+0x74>)
 800ae60:	2200      	movs	r2, #0
 800ae62:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ae64:	480a      	ldr	r0, [pc, #40]	@ (800ae90 <USBH_LL_Init+0x74>)
 800ae66:	f7f7 fec2 	bl	8002bee <HAL_HCD_Init>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d001      	beq.n	800ae74 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ae70:	f7f6 ffa2 	bl	8001db8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ae74:	4806      	ldr	r0, [pc, #24]	@ (800ae90 <USBH_LL_Init+0x74>)
 800ae76:	f7f8 fb23 	bl	80034c0 <HAL_HCD_GetCurrentFrame>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f7fe fee6 	bl	8009c50 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ae84:	2300      	movs	r3, #0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3708      	adds	r7, #8
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	20000784 	.word	0x20000784

0800ae94 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aea0:	2300      	movs	r3, #0
 800aea2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7f8 fa90 	bl	80033d0 <HAL_HCD_Start>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aeb4:	7bfb      	ldrb	r3, [r7, #15]
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f000 f95e 	bl	800b178 <USBH_Get_USB_Status>
 800aebc:	4603      	mov	r3, r0
 800aebe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aec0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b084      	sub	sp, #16
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aed2:	2300      	movs	r3, #0
 800aed4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7f8 fa98 	bl	8003416 <HAL_HCD_Stop>
 800aee6:	4603      	mov	r3, r0
 800aee8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aeea:	7bfb      	ldrb	r3, [r7, #15]
 800aeec:	4618      	mov	r0, r3
 800aeee:	f000 f943 	bl	800b178 <USBH_Get_USB_Status>
 800aef2:	4603      	mov	r3, r0
 800aef4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aef6:	7bbb      	ldrb	r3, [r7, #14]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800af08:	2301      	movs	r3, #1
 800af0a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af12:	4618      	mov	r0, r3
 800af14:	f7f8 fae2 	bl	80034dc <HAL_HCD_GetCurrentSpeed>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d00c      	beq.n	800af38 <USBH_LL_GetSpeed+0x38>
 800af1e:	2b02      	cmp	r3, #2
 800af20:	d80d      	bhi.n	800af3e <USBH_LL_GetSpeed+0x3e>
 800af22:	2b00      	cmp	r3, #0
 800af24:	d002      	beq.n	800af2c <USBH_LL_GetSpeed+0x2c>
 800af26:	2b01      	cmp	r3, #1
 800af28:	d003      	beq.n	800af32 <USBH_LL_GetSpeed+0x32>
 800af2a:	e008      	b.n	800af3e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800af2c:	2300      	movs	r3, #0
 800af2e:	73fb      	strb	r3, [r7, #15]
    break;
 800af30:	e008      	b.n	800af44 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800af32:	2301      	movs	r3, #1
 800af34:	73fb      	strb	r3, [r7, #15]
    break;
 800af36:	e005      	b.n	800af44 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800af38:	2302      	movs	r3, #2
 800af3a:	73fb      	strb	r3, [r7, #15]
    break;
 800af3c:	e002      	b.n	800af44 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800af3e:	2301      	movs	r3, #1
 800af40:	73fb      	strb	r3, [r7, #15]
    break;
 800af42:	bf00      	nop
  }
  return  speed;
 800af44:	7bfb      	ldrb	r3, [r7, #15]
}
 800af46:	4618      	mov	r0, r3
 800af48:	3710      	adds	r7, #16
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}

0800af4e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b084      	sub	sp, #16
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af56:	2300      	movs	r3, #0
 800af58:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af5a:	2300      	movs	r3, #0
 800af5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af64:	4618      	mov	r0, r3
 800af66:	f7f8 fa73 	bl	8003450 <HAL_HCD_ResetPort>
 800af6a:	4603      	mov	r3, r0
 800af6c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af6e:	7bfb      	ldrb	r3, [r7, #15]
 800af70:	4618      	mov	r0, r3
 800af72:	f000 f901 	bl	800b178 <USBH_Get_USB_Status>
 800af76:	4603      	mov	r3, r0
 800af78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3710      	adds	r7, #16
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	460b      	mov	r3, r1
 800af8e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af96:	78fa      	ldrb	r2, [r7, #3]
 800af98:	4611      	mov	r1, r2
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7f8 fa7b 	bl	8003496 <HAL_HCD_HC_GetXferCount>
 800afa0:	4603      	mov	r3, r0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3708      	adds	r7, #8
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}

0800afaa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800afaa:	b590      	push	{r4, r7, lr}
 800afac:	b089      	sub	sp, #36	@ 0x24
 800afae:	af04      	add	r7, sp, #16
 800afb0:	6078      	str	r0, [r7, #4]
 800afb2:	4608      	mov	r0, r1
 800afb4:	4611      	mov	r1, r2
 800afb6:	461a      	mov	r2, r3
 800afb8:	4603      	mov	r3, r0
 800afba:	70fb      	strb	r3, [r7, #3]
 800afbc:	460b      	mov	r3, r1
 800afbe:	70bb      	strb	r3, [r7, #2]
 800afc0:	4613      	mov	r3, r2
 800afc2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afc4:	2300      	movs	r3, #0
 800afc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800afc8:	2300      	movs	r3, #0
 800afca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800afd2:	787c      	ldrb	r4, [r7, #1]
 800afd4:	78ba      	ldrb	r2, [r7, #2]
 800afd6:	78f9      	ldrb	r1, [r7, #3]
 800afd8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800afda:	9302      	str	r3, [sp, #8]
 800afdc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800afe0:	9301      	str	r3, [sp, #4]
 800afe2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800afe6:	9300      	str	r3, [sp, #0]
 800afe8:	4623      	mov	r3, r4
 800afea:	f7f7 fe67 	bl	8002cbc <HAL_HCD_HC_Init>
 800afee:	4603      	mov	r3, r0
 800aff0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800aff2:	7bfb      	ldrb	r3, [r7, #15]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f000 f8bf 	bl	800b178 <USBH_Get_USB_Status>
 800affa:	4603      	mov	r3, r0
 800affc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800affe:	7bbb      	ldrb	r3, [r7, #14]
}
 800b000:	4618      	mov	r0, r3
 800b002:	3714      	adds	r7, #20
 800b004:	46bd      	mov	sp, r7
 800b006:	bd90      	pop	{r4, r7, pc}

0800b008 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	460b      	mov	r3, r1
 800b012:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b014:	2300      	movs	r3, #0
 800b016:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b018:	2300      	movs	r3, #0
 800b01a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b022:	78fa      	ldrb	r2, [r7, #3]
 800b024:	4611      	mov	r1, r2
 800b026:	4618      	mov	r0, r3
 800b028:	f7f7 ff00 	bl	8002e2c <HAL_HCD_HC_Halt>
 800b02c:	4603      	mov	r3, r0
 800b02e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b030:	7bfb      	ldrb	r3, [r7, #15]
 800b032:	4618      	mov	r0, r3
 800b034:	f000 f8a0 	bl	800b178 <USBH_Get_USB_Status>
 800b038:	4603      	mov	r3, r0
 800b03a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b03c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b046:	b590      	push	{r4, r7, lr}
 800b048:	b089      	sub	sp, #36	@ 0x24
 800b04a:	af04      	add	r7, sp, #16
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	4608      	mov	r0, r1
 800b050:	4611      	mov	r1, r2
 800b052:	461a      	mov	r2, r3
 800b054:	4603      	mov	r3, r0
 800b056:	70fb      	strb	r3, [r7, #3]
 800b058:	460b      	mov	r3, r1
 800b05a:	70bb      	strb	r3, [r7, #2]
 800b05c:	4613      	mov	r3, r2
 800b05e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b060:	2300      	movs	r3, #0
 800b062:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b064:	2300      	movs	r3, #0
 800b066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b06e:	787c      	ldrb	r4, [r7, #1]
 800b070:	78ba      	ldrb	r2, [r7, #2]
 800b072:	78f9      	ldrb	r1, [r7, #3]
 800b074:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b078:	9303      	str	r3, [sp, #12]
 800b07a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b07c:	9302      	str	r3, [sp, #8]
 800b07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b080:	9301      	str	r3, [sp, #4]
 800b082:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b086:	9300      	str	r3, [sp, #0]
 800b088:	4623      	mov	r3, r4
 800b08a:	f7f7 fef3 	bl	8002e74 <HAL_HCD_HC_SubmitRequest>
 800b08e:	4603      	mov	r3, r0
 800b090:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b092:	7bfb      	ldrb	r3, [r7, #15]
 800b094:	4618      	mov	r0, r3
 800b096:	f000 f86f 	bl	800b178 <USBH_Get_USB_Status>
 800b09a:	4603      	mov	r3, r0
 800b09c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b09e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3714      	adds	r7, #20
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd90      	pop	{r4, r7, pc}

0800b0a8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b0ba:	78fa      	ldrb	r2, [r7, #3]
 800b0bc:	4611      	mov	r1, r2
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7f8 f9d4 	bl	800346c <HAL_HCD_HC_GetURBState>
 800b0c4:	4603      	mov	r3, r0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b082      	sub	sp, #8
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d103      	bne.n	800b0ec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b0e4:	78fb      	ldrb	r3, [r7, #3]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f000 f872 	bl	800b1d0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b0ec:	20c8      	movs	r0, #200	@ 0xc8
 800b0ee:	f7f7 fa01 	bl	80024f4 <HAL_Delay>
  return USBH_OK;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	460b      	mov	r3, r1
 800b106:	70fb      	strb	r3, [r7, #3]
 800b108:	4613      	mov	r3, r2
 800b10a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b112:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b114:	78fa      	ldrb	r2, [r7, #3]
 800b116:	68f9      	ldr	r1, [r7, #12]
 800b118:	4613      	mov	r3, r2
 800b11a:	011b      	lsls	r3, r3, #4
 800b11c:	1a9b      	subs	r3, r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	440b      	add	r3, r1
 800b122:	3317      	adds	r3, #23
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00a      	beq.n	800b140 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b12a:	78fa      	ldrb	r2, [r7, #3]
 800b12c:	68f9      	ldr	r1, [r7, #12]
 800b12e:	4613      	mov	r3, r2
 800b130:	011b      	lsls	r3, r3, #4
 800b132:	1a9b      	subs	r3, r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	440b      	add	r3, r1
 800b138:	333c      	adds	r3, #60	@ 0x3c
 800b13a:	78ba      	ldrb	r2, [r7, #2]
 800b13c:	701a      	strb	r2, [r3, #0]
 800b13e:	e009      	b.n	800b154 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b140:	78fa      	ldrb	r2, [r7, #3]
 800b142:	68f9      	ldr	r1, [r7, #12]
 800b144:	4613      	mov	r3, r2
 800b146:	011b      	lsls	r3, r3, #4
 800b148:	1a9b      	subs	r3, r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	440b      	add	r3, r1
 800b14e:	333d      	adds	r3, #61	@ 0x3d
 800b150:	78ba      	ldrb	r2, [r7, #2]
 800b152:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3714      	adds	r7, #20
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr

0800b162 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b082      	sub	sp, #8
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f7f7 f9c2 	bl	80024f4 <HAL_Delay>
}
 800b170:	bf00      	nop
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	4603      	mov	r3, r0
 800b180:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b182:	2300      	movs	r3, #0
 800b184:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b186:	79fb      	ldrb	r3, [r7, #7]
 800b188:	2b03      	cmp	r3, #3
 800b18a:	d817      	bhi.n	800b1bc <USBH_Get_USB_Status+0x44>
 800b18c:	a201      	add	r2, pc, #4	@ (adr r2, 800b194 <USBH_Get_USB_Status+0x1c>)
 800b18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b192:	bf00      	nop
 800b194:	0800b1a5 	.word	0x0800b1a5
 800b198:	0800b1ab 	.word	0x0800b1ab
 800b19c:	0800b1b1 	.word	0x0800b1b1
 800b1a0:	0800b1b7 	.word	0x0800b1b7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b1a8:	e00b      	b.n	800b1c2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b1aa:	2302      	movs	r3, #2
 800b1ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b1ae:	e008      	b.n	800b1c2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b1b4:	e005      	b.n	800b1c2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b1b6:	2302      	movs	r3, #2
 800b1b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b1ba:	e002      	b.n	800b1c2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b1bc:	2302      	movs	r3, #2
 800b1be:	73fb      	strb	r3, [r7, #15]
    break;
 800b1c0:	bf00      	nop
  }
  return usb_status;
 800b1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3714      	adds	r7, #20
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b1da:	79fb      	ldrb	r3, [r7, #7]
 800b1dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b1de:	79fb      	ldrb	r3, [r7, #7]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d102      	bne.n	800b1ea <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	73fb      	strb	r3, [r7, #15]
 800b1e8:	e001      	b.n	800b1ee <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b1ee:	7bfb      	ldrb	r3, [r7, #15]
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	2101      	movs	r1, #1
 800b1f4:	4803      	ldr	r0, [pc, #12]	@ (800b204 <MX_DriverVbusFS+0x34>)
 800b1f6:	f7f7 fce1 	bl	8002bbc <HAL_GPIO_WritePin>
}
 800b1fa:	bf00      	nop
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	40020800 	.word	0x40020800

0800b208 <_Znwj>:
 800b208:	2801      	cmp	r0, #1
 800b20a:	bf38      	it	cc
 800b20c:	2001      	movcc	r0, #1
 800b20e:	b510      	push	{r4, lr}
 800b210:	4604      	mov	r4, r0
 800b212:	4620      	mov	r0, r4
 800b214:	f000 f81a 	bl	800b24c <malloc>
 800b218:	b100      	cbz	r0, 800b21c <_Znwj+0x14>
 800b21a:	bd10      	pop	{r4, pc}
 800b21c:	f000 f806 	bl	800b22c <_ZSt15get_new_handlerv>
 800b220:	b908      	cbnz	r0, 800b226 <_Znwj+0x1e>
 800b222:	f000 f80b 	bl	800b23c <abort>
 800b226:	4780      	blx	r0
 800b228:	e7f3      	b.n	800b212 <_Znwj+0xa>
	...

0800b22c <_ZSt15get_new_handlerv>:
 800b22c:	4b02      	ldr	r3, [pc, #8]	@ (800b238 <_ZSt15get_new_handlerv+0xc>)
 800b22e:	6818      	ldr	r0, [r3, #0]
 800b230:	f3bf 8f5b 	dmb	ish
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	20000b64 	.word	0x20000b64

0800b23c <abort>:
 800b23c:	b508      	push	{r3, lr}
 800b23e:	2006      	movs	r0, #6
 800b240:	f000 fe84 	bl	800bf4c <raise>
 800b244:	2001      	movs	r0, #1
 800b246:	f7f6 fff9 	bl	800223c <_exit>
	...

0800b24c <malloc>:
 800b24c:	4b02      	ldr	r3, [pc, #8]	@ (800b258 <malloc+0xc>)
 800b24e:	4601      	mov	r1, r0
 800b250:	6818      	ldr	r0, [r3, #0]
 800b252:	f000 b82d 	b.w	800b2b0 <_malloc_r>
 800b256:	bf00      	nop
 800b258:	2000003c 	.word	0x2000003c

0800b25c <free>:
 800b25c:	4b02      	ldr	r3, [pc, #8]	@ (800b268 <free+0xc>)
 800b25e:	4601      	mov	r1, r0
 800b260:	6818      	ldr	r0, [r3, #0]
 800b262:	f001 bd71 	b.w	800cd48 <_free_r>
 800b266:	bf00      	nop
 800b268:	2000003c 	.word	0x2000003c

0800b26c <sbrk_aligned>:
 800b26c:	b570      	push	{r4, r5, r6, lr}
 800b26e:	4e0f      	ldr	r6, [pc, #60]	@ (800b2ac <sbrk_aligned+0x40>)
 800b270:	460c      	mov	r4, r1
 800b272:	6831      	ldr	r1, [r6, #0]
 800b274:	4605      	mov	r5, r0
 800b276:	b911      	cbnz	r1, 800b27e <sbrk_aligned+0x12>
 800b278:	f000 febc 	bl	800bff4 <_sbrk_r>
 800b27c:	6030      	str	r0, [r6, #0]
 800b27e:	4621      	mov	r1, r4
 800b280:	4628      	mov	r0, r5
 800b282:	f000 feb7 	bl	800bff4 <_sbrk_r>
 800b286:	1c43      	adds	r3, r0, #1
 800b288:	d103      	bne.n	800b292 <sbrk_aligned+0x26>
 800b28a:	f04f 34ff 	mov.w	r4, #4294967295
 800b28e:	4620      	mov	r0, r4
 800b290:	bd70      	pop	{r4, r5, r6, pc}
 800b292:	1cc4      	adds	r4, r0, #3
 800b294:	f024 0403 	bic.w	r4, r4, #3
 800b298:	42a0      	cmp	r0, r4
 800b29a:	d0f8      	beq.n	800b28e <sbrk_aligned+0x22>
 800b29c:	1a21      	subs	r1, r4, r0
 800b29e:	4628      	mov	r0, r5
 800b2a0:	f000 fea8 	bl	800bff4 <_sbrk_r>
 800b2a4:	3001      	adds	r0, #1
 800b2a6:	d1f2      	bne.n	800b28e <sbrk_aligned+0x22>
 800b2a8:	e7ef      	b.n	800b28a <sbrk_aligned+0x1e>
 800b2aa:	bf00      	nop
 800b2ac:	20000b68 	.word	0x20000b68

0800b2b0 <_malloc_r>:
 800b2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2b4:	1ccd      	adds	r5, r1, #3
 800b2b6:	f025 0503 	bic.w	r5, r5, #3
 800b2ba:	3508      	adds	r5, #8
 800b2bc:	2d0c      	cmp	r5, #12
 800b2be:	bf38      	it	cc
 800b2c0:	250c      	movcc	r5, #12
 800b2c2:	2d00      	cmp	r5, #0
 800b2c4:	4606      	mov	r6, r0
 800b2c6:	db01      	blt.n	800b2cc <_malloc_r+0x1c>
 800b2c8:	42a9      	cmp	r1, r5
 800b2ca:	d904      	bls.n	800b2d6 <_malloc_r+0x26>
 800b2cc:	230c      	movs	r3, #12
 800b2ce:	6033      	str	r3, [r6, #0]
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b3ac <_malloc_r+0xfc>
 800b2da:	f000 f869 	bl	800b3b0 <__malloc_lock>
 800b2de:	f8d8 3000 	ldr.w	r3, [r8]
 800b2e2:	461c      	mov	r4, r3
 800b2e4:	bb44      	cbnz	r4, 800b338 <_malloc_r+0x88>
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f7ff ffbf 	bl	800b26c <sbrk_aligned>
 800b2ee:	1c43      	adds	r3, r0, #1
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	d158      	bne.n	800b3a6 <_malloc_r+0xf6>
 800b2f4:	f8d8 4000 	ldr.w	r4, [r8]
 800b2f8:	4627      	mov	r7, r4
 800b2fa:	2f00      	cmp	r7, #0
 800b2fc:	d143      	bne.n	800b386 <_malloc_r+0xd6>
 800b2fe:	2c00      	cmp	r4, #0
 800b300:	d04b      	beq.n	800b39a <_malloc_r+0xea>
 800b302:	6823      	ldr	r3, [r4, #0]
 800b304:	4639      	mov	r1, r7
 800b306:	4630      	mov	r0, r6
 800b308:	eb04 0903 	add.w	r9, r4, r3
 800b30c:	f000 fe72 	bl	800bff4 <_sbrk_r>
 800b310:	4581      	cmp	r9, r0
 800b312:	d142      	bne.n	800b39a <_malloc_r+0xea>
 800b314:	6821      	ldr	r1, [r4, #0]
 800b316:	1a6d      	subs	r5, r5, r1
 800b318:	4629      	mov	r1, r5
 800b31a:	4630      	mov	r0, r6
 800b31c:	f7ff ffa6 	bl	800b26c <sbrk_aligned>
 800b320:	3001      	adds	r0, #1
 800b322:	d03a      	beq.n	800b39a <_malloc_r+0xea>
 800b324:	6823      	ldr	r3, [r4, #0]
 800b326:	442b      	add	r3, r5
 800b328:	6023      	str	r3, [r4, #0]
 800b32a:	f8d8 3000 	ldr.w	r3, [r8]
 800b32e:	685a      	ldr	r2, [r3, #4]
 800b330:	bb62      	cbnz	r2, 800b38c <_malloc_r+0xdc>
 800b332:	f8c8 7000 	str.w	r7, [r8]
 800b336:	e00f      	b.n	800b358 <_malloc_r+0xa8>
 800b338:	6822      	ldr	r2, [r4, #0]
 800b33a:	1b52      	subs	r2, r2, r5
 800b33c:	d420      	bmi.n	800b380 <_malloc_r+0xd0>
 800b33e:	2a0b      	cmp	r2, #11
 800b340:	d917      	bls.n	800b372 <_malloc_r+0xc2>
 800b342:	1961      	adds	r1, r4, r5
 800b344:	42a3      	cmp	r3, r4
 800b346:	6025      	str	r5, [r4, #0]
 800b348:	bf18      	it	ne
 800b34a:	6059      	strne	r1, [r3, #4]
 800b34c:	6863      	ldr	r3, [r4, #4]
 800b34e:	bf08      	it	eq
 800b350:	f8c8 1000 	streq.w	r1, [r8]
 800b354:	5162      	str	r2, [r4, r5]
 800b356:	604b      	str	r3, [r1, #4]
 800b358:	4630      	mov	r0, r6
 800b35a:	f000 f82f 	bl	800b3bc <__malloc_unlock>
 800b35e:	f104 000b 	add.w	r0, r4, #11
 800b362:	1d23      	adds	r3, r4, #4
 800b364:	f020 0007 	bic.w	r0, r0, #7
 800b368:	1ac2      	subs	r2, r0, r3
 800b36a:	bf1c      	itt	ne
 800b36c:	1a1b      	subne	r3, r3, r0
 800b36e:	50a3      	strne	r3, [r4, r2]
 800b370:	e7af      	b.n	800b2d2 <_malloc_r+0x22>
 800b372:	6862      	ldr	r2, [r4, #4]
 800b374:	42a3      	cmp	r3, r4
 800b376:	bf0c      	ite	eq
 800b378:	f8c8 2000 	streq.w	r2, [r8]
 800b37c:	605a      	strne	r2, [r3, #4]
 800b37e:	e7eb      	b.n	800b358 <_malloc_r+0xa8>
 800b380:	4623      	mov	r3, r4
 800b382:	6864      	ldr	r4, [r4, #4]
 800b384:	e7ae      	b.n	800b2e4 <_malloc_r+0x34>
 800b386:	463c      	mov	r4, r7
 800b388:	687f      	ldr	r7, [r7, #4]
 800b38a:	e7b6      	b.n	800b2fa <_malloc_r+0x4a>
 800b38c:	461a      	mov	r2, r3
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	42a3      	cmp	r3, r4
 800b392:	d1fb      	bne.n	800b38c <_malloc_r+0xdc>
 800b394:	2300      	movs	r3, #0
 800b396:	6053      	str	r3, [r2, #4]
 800b398:	e7de      	b.n	800b358 <_malloc_r+0xa8>
 800b39a:	230c      	movs	r3, #12
 800b39c:	6033      	str	r3, [r6, #0]
 800b39e:	4630      	mov	r0, r6
 800b3a0:	f000 f80c 	bl	800b3bc <__malloc_unlock>
 800b3a4:	e794      	b.n	800b2d0 <_malloc_r+0x20>
 800b3a6:	6005      	str	r5, [r0, #0]
 800b3a8:	e7d6      	b.n	800b358 <_malloc_r+0xa8>
 800b3aa:	bf00      	nop
 800b3ac:	20000b6c 	.word	0x20000b6c

0800b3b0 <__malloc_lock>:
 800b3b0:	4801      	ldr	r0, [pc, #4]	@ (800b3b8 <__malloc_lock+0x8>)
 800b3b2:	f000 be6c 	b.w	800c08e <__retarget_lock_acquire_recursive>
 800b3b6:	bf00      	nop
 800b3b8:	20000cb0 	.word	0x20000cb0

0800b3bc <__malloc_unlock>:
 800b3bc:	4801      	ldr	r0, [pc, #4]	@ (800b3c4 <__malloc_unlock+0x8>)
 800b3be:	f000 be67 	b.w	800c090 <__retarget_lock_release_recursive>
 800b3c2:	bf00      	nop
 800b3c4:	20000cb0 	.word	0x20000cb0

0800b3c8 <__cvt>:
 800b3c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3cc:	ec57 6b10 	vmov	r6, r7, d0
 800b3d0:	2f00      	cmp	r7, #0
 800b3d2:	460c      	mov	r4, r1
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	463b      	mov	r3, r7
 800b3d8:	bfbb      	ittet	lt
 800b3da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b3de:	461f      	movlt	r7, r3
 800b3e0:	2300      	movge	r3, #0
 800b3e2:	232d      	movlt	r3, #45	@ 0x2d
 800b3e4:	700b      	strb	r3, [r1, #0]
 800b3e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b3e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b3ec:	4691      	mov	r9, r2
 800b3ee:	f023 0820 	bic.w	r8, r3, #32
 800b3f2:	bfbc      	itt	lt
 800b3f4:	4632      	movlt	r2, r6
 800b3f6:	4616      	movlt	r6, r2
 800b3f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b3fc:	d005      	beq.n	800b40a <__cvt+0x42>
 800b3fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b402:	d100      	bne.n	800b406 <__cvt+0x3e>
 800b404:	3401      	adds	r4, #1
 800b406:	2102      	movs	r1, #2
 800b408:	e000      	b.n	800b40c <__cvt+0x44>
 800b40a:	2103      	movs	r1, #3
 800b40c:	ab03      	add	r3, sp, #12
 800b40e:	9301      	str	r3, [sp, #4]
 800b410:	ab02      	add	r3, sp, #8
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	ec47 6b10 	vmov	d0, r6, r7
 800b418:	4653      	mov	r3, sl
 800b41a:	4622      	mov	r2, r4
 800b41c:	f000 fec4 	bl	800c1a8 <_dtoa_r>
 800b420:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b424:	4605      	mov	r5, r0
 800b426:	d119      	bne.n	800b45c <__cvt+0x94>
 800b428:	f019 0f01 	tst.w	r9, #1
 800b42c:	d00e      	beq.n	800b44c <__cvt+0x84>
 800b42e:	eb00 0904 	add.w	r9, r0, r4
 800b432:	2200      	movs	r2, #0
 800b434:	2300      	movs	r3, #0
 800b436:	4630      	mov	r0, r6
 800b438:	4639      	mov	r1, r7
 800b43a:	f7f5 fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 800b43e:	b108      	cbz	r0, 800b444 <__cvt+0x7c>
 800b440:	f8cd 900c 	str.w	r9, [sp, #12]
 800b444:	2230      	movs	r2, #48	@ 0x30
 800b446:	9b03      	ldr	r3, [sp, #12]
 800b448:	454b      	cmp	r3, r9
 800b44a:	d31e      	bcc.n	800b48a <__cvt+0xc2>
 800b44c:	9b03      	ldr	r3, [sp, #12]
 800b44e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b450:	1b5b      	subs	r3, r3, r5
 800b452:	4628      	mov	r0, r5
 800b454:	6013      	str	r3, [r2, #0]
 800b456:	b004      	add	sp, #16
 800b458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b45c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b460:	eb00 0904 	add.w	r9, r0, r4
 800b464:	d1e5      	bne.n	800b432 <__cvt+0x6a>
 800b466:	7803      	ldrb	r3, [r0, #0]
 800b468:	2b30      	cmp	r3, #48	@ 0x30
 800b46a:	d10a      	bne.n	800b482 <__cvt+0xba>
 800b46c:	2200      	movs	r2, #0
 800b46e:	2300      	movs	r3, #0
 800b470:	4630      	mov	r0, r6
 800b472:	4639      	mov	r1, r7
 800b474:	f7f5 fb28 	bl	8000ac8 <__aeabi_dcmpeq>
 800b478:	b918      	cbnz	r0, 800b482 <__cvt+0xba>
 800b47a:	f1c4 0401 	rsb	r4, r4, #1
 800b47e:	f8ca 4000 	str.w	r4, [sl]
 800b482:	f8da 3000 	ldr.w	r3, [sl]
 800b486:	4499      	add	r9, r3
 800b488:	e7d3      	b.n	800b432 <__cvt+0x6a>
 800b48a:	1c59      	adds	r1, r3, #1
 800b48c:	9103      	str	r1, [sp, #12]
 800b48e:	701a      	strb	r2, [r3, #0]
 800b490:	e7d9      	b.n	800b446 <__cvt+0x7e>

0800b492 <__exponent>:
 800b492:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b494:	2900      	cmp	r1, #0
 800b496:	bfba      	itte	lt
 800b498:	4249      	neglt	r1, r1
 800b49a:	232d      	movlt	r3, #45	@ 0x2d
 800b49c:	232b      	movge	r3, #43	@ 0x2b
 800b49e:	2909      	cmp	r1, #9
 800b4a0:	7002      	strb	r2, [r0, #0]
 800b4a2:	7043      	strb	r3, [r0, #1]
 800b4a4:	dd29      	ble.n	800b4fa <__exponent+0x68>
 800b4a6:	f10d 0307 	add.w	r3, sp, #7
 800b4aa:	461d      	mov	r5, r3
 800b4ac:	270a      	movs	r7, #10
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	fbb1 f6f7 	udiv	r6, r1, r7
 800b4b4:	fb07 1416 	mls	r4, r7, r6, r1
 800b4b8:	3430      	adds	r4, #48	@ 0x30
 800b4ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b4be:	460c      	mov	r4, r1
 800b4c0:	2c63      	cmp	r4, #99	@ 0x63
 800b4c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b4c6:	4631      	mov	r1, r6
 800b4c8:	dcf1      	bgt.n	800b4ae <__exponent+0x1c>
 800b4ca:	3130      	adds	r1, #48	@ 0x30
 800b4cc:	1e94      	subs	r4, r2, #2
 800b4ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b4d2:	1c41      	adds	r1, r0, #1
 800b4d4:	4623      	mov	r3, r4
 800b4d6:	42ab      	cmp	r3, r5
 800b4d8:	d30a      	bcc.n	800b4f0 <__exponent+0x5e>
 800b4da:	f10d 0309 	add.w	r3, sp, #9
 800b4de:	1a9b      	subs	r3, r3, r2
 800b4e0:	42ac      	cmp	r4, r5
 800b4e2:	bf88      	it	hi
 800b4e4:	2300      	movhi	r3, #0
 800b4e6:	3302      	adds	r3, #2
 800b4e8:	4403      	add	r3, r0
 800b4ea:	1a18      	subs	r0, r3, r0
 800b4ec:	b003      	add	sp, #12
 800b4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b4f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b4f8:	e7ed      	b.n	800b4d6 <__exponent+0x44>
 800b4fa:	2330      	movs	r3, #48	@ 0x30
 800b4fc:	3130      	adds	r1, #48	@ 0x30
 800b4fe:	7083      	strb	r3, [r0, #2]
 800b500:	70c1      	strb	r1, [r0, #3]
 800b502:	1d03      	adds	r3, r0, #4
 800b504:	e7f1      	b.n	800b4ea <__exponent+0x58>
	...

0800b508 <_printf_float>:
 800b508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b50c:	b08d      	sub	sp, #52	@ 0x34
 800b50e:	460c      	mov	r4, r1
 800b510:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b514:	4616      	mov	r6, r2
 800b516:	461f      	mov	r7, r3
 800b518:	4605      	mov	r5, r0
 800b51a:	f000 fd1f 	bl	800bf5c <_localeconv_r>
 800b51e:	6803      	ldr	r3, [r0, #0]
 800b520:	9304      	str	r3, [sp, #16]
 800b522:	4618      	mov	r0, r3
 800b524:	f7f4 fea4 	bl	8000270 <strlen>
 800b528:	2300      	movs	r3, #0
 800b52a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b52c:	f8d8 3000 	ldr.w	r3, [r8]
 800b530:	9005      	str	r0, [sp, #20]
 800b532:	3307      	adds	r3, #7
 800b534:	f023 0307 	bic.w	r3, r3, #7
 800b538:	f103 0208 	add.w	r2, r3, #8
 800b53c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b540:	f8d4 b000 	ldr.w	fp, [r4]
 800b544:	f8c8 2000 	str.w	r2, [r8]
 800b548:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b54c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b550:	9307      	str	r3, [sp, #28]
 800b552:	f8cd 8018 	str.w	r8, [sp, #24]
 800b556:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b55a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b55e:	4b9c      	ldr	r3, [pc, #624]	@ (800b7d0 <_printf_float+0x2c8>)
 800b560:	f04f 32ff 	mov.w	r2, #4294967295
 800b564:	f7f5 fae2 	bl	8000b2c <__aeabi_dcmpun>
 800b568:	bb70      	cbnz	r0, 800b5c8 <_printf_float+0xc0>
 800b56a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b56e:	4b98      	ldr	r3, [pc, #608]	@ (800b7d0 <_printf_float+0x2c8>)
 800b570:	f04f 32ff 	mov.w	r2, #4294967295
 800b574:	f7f5 fabc 	bl	8000af0 <__aeabi_dcmple>
 800b578:	bb30      	cbnz	r0, 800b5c8 <_printf_float+0xc0>
 800b57a:	2200      	movs	r2, #0
 800b57c:	2300      	movs	r3, #0
 800b57e:	4640      	mov	r0, r8
 800b580:	4649      	mov	r1, r9
 800b582:	f7f5 faab 	bl	8000adc <__aeabi_dcmplt>
 800b586:	b110      	cbz	r0, 800b58e <_printf_float+0x86>
 800b588:	232d      	movs	r3, #45	@ 0x2d
 800b58a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b58e:	4a91      	ldr	r2, [pc, #580]	@ (800b7d4 <_printf_float+0x2cc>)
 800b590:	4b91      	ldr	r3, [pc, #580]	@ (800b7d8 <_printf_float+0x2d0>)
 800b592:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b596:	bf8c      	ite	hi
 800b598:	4690      	movhi	r8, r2
 800b59a:	4698      	movls	r8, r3
 800b59c:	2303      	movs	r3, #3
 800b59e:	6123      	str	r3, [r4, #16]
 800b5a0:	f02b 0304 	bic.w	r3, fp, #4
 800b5a4:	6023      	str	r3, [r4, #0]
 800b5a6:	f04f 0900 	mov.w	r9, #0
 800b5aa:	9700      	str	r7, [sp, #0]
 800b5ac:	4633      	mov	r3, r6
 800b5ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b5b0:	4621      	mov	r1, r4
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	f000 f9d2 	bl	800b95c <_printf_common>
 800b5b8:	3001      	adds	r0, #1
 800b5ba:	f040 808d 	bne.w	800b6d8 <_printf_float+0x1d0>
 800b5be:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c2:	b00d      	add	sp, #52	@ 0x34
 800b5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c8:	4642      	mov	r2, r8
 800b5ca:	464b      	mov	r3, r9
 800b5cc:	4640      	mov	r0, r8
 800b5ce:	4649      	mov	r1, r9
 800b5d0:	f7f5 faac 	bl	8000b2c <__aeabi_dcmpun>
 800b5d4:	b140      	cbz	r0, 800b5e8 <_printf_float+0xe0>
 800b5d6:	464b      	mov	r3, r9
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	bfbc      	itt	lt
 800b5dc:	232d      	movlt	r3, #45	@ 0x2d
 800b5de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b5e2:	4a7e      	ldr	r2, [pc, #504]	@ (800b7dc <_printf_float+0x2d4>)
 800b5e4:	4b7e      	ldr	r3, [pc, #504]	@ (800b7e0 <_printf_float+0x2d8>)
 800b5e6:	e7d4      	b.n	800b592 <_printf_float+0x8a>
 800b5e8:	6863      	ldr	r3, [r4, #4]
 800b5ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b5ee:	9206      	str	r2, [sp, #24]
 800b5f0:	1c5a      	adds	r2, r3, #1
 800b5f2:	d13b      	bne.n	800b66c <_printf_float+0x164>
 800b5f4:	2306      	movs	r3, #6
 800b5f6:	6063      	str	r3, [r4, #4]
 800b5f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	6022      	str	r2, [r4, #0]
 800b600:	9303      	str	r3, [sp, #12]
 800b602:	ab0a      	add	r3, sp, #40	@ 0x28
 800b604:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b608:	ab09      	add	r3, sp, #36	@ 0x24
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	6861      	ldr	r1, [r4, #4]
 800b60e:	ec49 8b10 	vmov	d0, r8, r9
 800b612:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b616:	4628      	mov	r0, r5
 800b618:	f7ff fed6 	bl	800b3c8 <__cvt>
 800b61c:	9b06      	ldr	r3, [sp, #24]
 800b61e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b620:	2b47      	cmp	r3, #71	@ 0x47
 800b622:	4680      	mov	r8, r0
 800b624:	d129      	bne.n	800b67a <_printf_float+0x172>
 800b626:	1cc8      	adds	r0, r1, #3
 800b628:	db02      	blt.n	800b630 <_printf_float+0x128>
 800b62a:	6863      	ldr	r3, [r4, #4]
 800b62c:	4299      	cmp	r1, r3
 800b62e:	dd41      	ble.n	800b6b4 <_printf_float+0x1ac>
 800b630:	f1aa 0a02 	sub.w	sl, sl, #2
 800b634:	fa5f fa8a 	uxtb.w	sl, sl
 800b638:	3901      	subs	r1, #1
 800b63a:	4652      	mov	r2, sl
 800b63c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b640:	9109      	str	r1, [sp, #36]	@ 0x24
 800b642:	f7ff ff26 	bl	800b492 <__exponent>
 800b646:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b648:	1813      	adds	r3, r2, r0
 800b64a:	2a01      	cmp	r2, #1
 800b64c:	4681      	mov	r9, r0
 800b64e:	6123      	str	r3, [r4, #16]
 800b650:	dc02      	bgt.n	800b658 <_printf_float+0x150>
 800b652:	6822      	ldr	r2, [r4, #0]
 800b654:	07d2      	lsls	r2, r2, #31
 800b656:	d501      	bpl.n	800b65c <_printf_float+0x154>
 800b658:	3301      	adds	r3, #1
 800b65a:	6123      	str	r3, [r4, #16]
 800b65c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b660:	2b00      	cmp	r3, #0
 800b662:	d0a2      	beq.n	800b5aa <_printf_float+0xa2>
 800b664:	232d      	movs	r3, #45	@ 0x2d
 800b666:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b66a:	e79e      	b.n	800b5aa <_printf_float+0xa2>
 800b66c:	9a06      	ldr	r2, [sp, #24]
 800b66e:	2a47      	cmp	r2, #71	@ 0x47
 800b670:	d1c2      	bne.n	800b5f8 <_printf_float+0xf0>
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1c0      	bne.n	800b5f8 <_printf_float+0xf0>
 800b676:	2301      	movs	r3, #1
 800b678:	e7bd      	b.n	800b5f6 <_printf_float+0xee>
 800b67a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b67e:	d9db      	bls.n	800b638 <_printf_float+0x130>
 800b680:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b684:	d118      	bne.n	800b6b8 <_printf_float+0x1b0>
 800b686:	2900      	cmp	r1, #0
 800b688:	6863      	ldr	r3, [r4, #4]
 800b68a:	dd0b      	ble.n	800b6a4 <_printf_float+0x19c>
 800b68c:	6121      	str	r1, [r4, #16]
 800b68e:	b913      	cbnz	r3, 800b696 <_printf_float+0x18e>
 800b690:	6822      	ldr	r2, [r4, #0]
 800b692:	07d0      	lsls	r0, r2, #31
 800b694:	d502      	bpl.n	800b69c <_printf_float+0x194>
 800b696:	3301      	adds	r3, #1
 800b698:	440b      	add	r3, r1
 800b69a:	6123      	str	r3, [r4, #16]
 800b69c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b69e:	f04f 0900 	mov.w	r9, #0
 800b6a2:	e7db      	b.n	800b65c <_printf_float+0x154>
 800b6a4:	b913      	cbnz	r3, 800b6ac <_printf_float+0x1a4>
 800b6a6:	6822      	ldr	r2, [r4, #0]
 800b6a8:	07d2      	lsls	r2, r2, #31
 800b6aa:	d501      	bpl.n	800b6b0 <_printf_float+0x1a8>
 800b6ac:	3302      	adds	r3, #2
 800b6ae:	e7f4      	b.n	800b69a <_printf_float+0x192>
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	e7f2      	b.n	800b69a <_printf_float+0x192>
 800b6b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b6b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6ba:	4299      	cmp	r1, r3
 800b6bc:	db05      	blt.n	800b6ca <_printf_float+0x1c2>
 800b6be:	6823      	ldr	r3, [r4, #0]
 800b6c0:	6121      	str	r1, [r4, #16]
 800b6c2:	07d8      	lsls	r0, r3, #31
 800b6c4:	d5ea      	bpl.n	800b69c <_printf_float+0x194>
 800b6c6:	1c4b      	adds	r3, r1, #1
 800b6c8:	e7e7      	b.n	800b69a <_printf_float+0x192>
 800b6ca:	2900      	cmp	r1, #0
 800b6cc:	bfd4      	ite	le
 800b6ce:	f1c1 0202 	rsble	r2, r1, #2
 800b6d2:	2201      	movgt	r2, #1
 800b6d4:	4413      	add	r3, r2
 800b6d6:	e7e0      	b.n	800b69a <_printf_float+0x192>
 800b6d8:	6823      	ldr	r3, [r4, #0]
 800b6da:	055a      	lsls	r2, r3, #21
 800b6dc:	d407      	bmi.n	800b6ee <_printf_float+0x1e6>
 800b6de:	6923      	ldr	r3, [r4, #16]
 800b6e0:	4642      	mov	r2, r8
 800b6e2:	4631      	mov	r1, r6
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	47b8      	blx	r7
 800b6e8:	3001      	adds	r0, #1
 800b6ea:	d12b      	bne.n	800b744 <_printf_float+0x23c>
 800b6ec:	e767      	b.n	800b5be <_printf_float+0xb6>
 800b6ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b6f2:	f240 80dd 	bls.w	800b8b0 <_printf_float+0x3a8>
 800b6f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	f7f5 f9e3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b702:	2800      	cmp	r0, #0
 800b704:	d033      	beq.n	800b76e <_printf_float+0x266>
 800b706:	4a37      	ldr	r2, [pc, #220]	@ (800b7e4 <_printf_float+0x2dc>)
 800b708:	2301      	movs	r3, #1
 800b70a:	4631      	mov	r1, r6
 800b70c:	4628      	mov	r0, r5
 800b70e:	47b8      	blx	r7
 800b710:	3001      	adds	r0, #1
 800b712:	f43f af54 	beq.w	800b5be <_printf_float+0xb6>
 800b716:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b71a:	4543      	cmp	r3, r8
 800b71c:	db02      	blt.n	800b724 <_printf_float+0x21c>
 800b71e:	6823      	ldr	r3, [r4, #0]
 800b720:	07d8      	lsls	r0, r3, #31
 800b722:	d50f      	bpl.n	800b744 <_printf_float+0x23c>
 800b724:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b728:	4631      	mov	r1, r6
 800b72a:	4628      	mov	r0, r5
 800b72c:	47b8      	blx	r7
 800b72e:	3001      	adds	r0, #1
 800b730:	f43f af45 	beq.w	800b5be <_printf_float+0xb6>
 800b734:	f04f 0900 	mov.w	r9, #0
 800b738:	f108 38ff 	add.w	r8, r8, #4294967295
 800b73c:	f104 0a1a 	add.w	sl, r4, #26
 800b740:	45c8      	cmp	r8, r9
 800b742:	dc09      	bgt.n	800b758 <_printf_float+0x250>
 800b744:	6823      	ldr	r3, [r4, #0]
 800b746:	079b      	lsls	r3, r3, #30
 800b748:	f100 8103 	bmi.w	800b952 <_printf_float+0x44a>
 800b74c:	68e0      	ldr	r0, [r4, #12]
 800b74e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b750:	4298      	cmp	r0, r3
 800b752:	bfb8      	it	lt
 800b754:	4618      	movlt	r0, r3
 800b756:	e734      	b.n	800b5c2 <_printf_float+0xba>
 800b758:	2301      	movs	r3, #1
 800b75a:	4652      	mov	r2, sl
 800b75c:	4631      	mov	r1, r6
 800b75e:	4628      	mov	r0, r5
 800b760:	47b8      	blx	r7
 800b762:	3001      	adds	r0, #1
 800b764:	f43f af2b 	beq.w	800b5be <_printf_float+0xb6>
 800b768:	f109 0901 	add.w	r9, r9, #1
 800b76c:	e7e8      	b.n	800b740 <_printf_float+0x238>
 800b76e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b770:	2b00      	cmp	r3, #0
 800b772:	dc39      	bgt.n	800b7e8 <_printf_float+0x2e0>
 800b774:	4a1b      	ldr	r2, [pc, #108]	@ (800b7e4 <_printf_float+0x2dc>)
 800b776:	2301      	movs	r3, #1
 800b778:	4631      	mov	r1, r6
 800b77a:	4628      	mov	r0, r5
 800b77c:	47b8      	blx	r7
 800b77e:	3001      	adds	r0, #1
 800b780:	f43f af1d 	beq.w	800b5be <_printf_float+0xb6>
 800b784:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b788:	ea59 0303 	orrs.w	r3, r9, r3
 800b78c:	d102      	bne.n	800b794 <_printf_float+0x28c>
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	07d9      	lsls	r1, r3, #31
 800b792:	d5d7      	bpl.n	800b744 <_printf_float+0x23c>
 800b794:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b798:	4631      	mov	r1, r6
 800b79a:	4628      	mov	r0, r5
 800b79c:	47b8      	blx	r7
 800b79e:	3001      	adds	r0, #1
 800b7a0:	f43f af0d 	beq.w	800b5be <_printf_float+0xb6>
 800b7a4:	f04f 0a00 	mov.w	sl, #0
 800b7a8:	f104 0b1a 	add.w	fp, r4, #26
 800b7ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7ae:	425b      	negs	r3, r3
 800b7b0:	4553      	cmp	r3, sl
 800b7b2:	dc01      	bgt.n	800b7b8 <_printf_float+0x2b0>
 800b7b4:	464b      	mov	r3, r9
 800b7b6:	e793      	b.n	800b6e0 <_printf_float+0x1d8>
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	465a      	mov	r2, fp
 800b7bc:	4631      	mov	r1, r6
 800b7be:	4628      	mov	r0, r5
 800b7c0:	47b8      	blx	r7
 800b7c2:	3001      	adds	r0, #1
 800b7c4:	f43f aefb 	beq.w	800b5be <_printf_float+0xb6>
 800b7c8:	f10a 0a01 	add.w	sl, sl, #1
 800b7cc:	e7ee      	b.n	800b7ac <_printf_float+0x2a4>
 800b7ce:	bf00      	nop
 800b7d0:	7fefffff 	.word	0x7fefffff
 800b7d4:	0800e1b8 	.word	0x0800e1b8
 800b7d8:	0800e1b4 	.word	0x0800e1b4
 800b7dc:	0800e1c0 	.word	0x0800e1c0
 800b7e0:	0800e1bc 	.word	0x0800e1bc
 800b7e4:	0800e1c4 	.word	0x0800e1c4
 800b7e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b7ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b7ee:	4553      	cmp	r3, sl
 800b7f0:	bfa8      	it	ge
 800b7f2:	4653      	movge	r3, sl
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	4699      	mov	r9, r3
 800b7f8:	dc36      	bgt.n	800b868 <_printf_float+0x360>
 800b7fa:	f04f 0b00 	mov.w	fp, #0
 800b7fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b802:	f104 021a 	add.w	r2, r4, #26
 800b806:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b808:	9306      	str	r3, [sp, #24]
 800b80a:	eba3 0309 	sub.w	r3, r3, r9
 800b80e:	455b      	cmp	r3, fp
 800b810:	dc31      	bgt.n	800b876 <_printf_float+0x36e>
 800b812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b814:	459a      	cmp	sl, r3
 800b816:	dc3a      	bgt.n	800b88e <_printf_float+0x386>
 800b818:	6823      	ldr	r3, [r4, #0]
 800b81a:	07da      	lsls	r2, r3, #31
 800b81c:	d437      	bmi.n	800b88e <_printf_float+0x386>
 800b81e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b820:	ebaa 0903 	sub.w	r9, sl, r3
 800b824:	9b06      	ldr	r3, [sp, #24]
 800b826:	ebaa 0303 	sub.w	r3, sl, r3
 800b82a:	4599      	cmp	r9, r3
 800b82c:	bfa8      	it	ge
 800b82e:	4699      	movge	r9, r3
 800b830:	f1b9 0f00 	cmp.w	r9, #0
 800b834:	dc33      	bgt.n	800b89e <_printf_float+0x396>
 800b836:	f04f 0800 	mov.w	r8, #0
 800b83a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b83e:	f104 0b1a 	add.w	fp, r4, #26
 800b842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b844:	ebaa 0303 	sub.w	r3, sl, r3
 800b848:	eba3 0309 	sub.w	r3, r3, r9
 800b84c:	4543      	cmp	r3, r8
 800b84e:	f77f af79 	ble.w	800b744 <_printf_float+0x23c>
 800b852:	2301      	movs	r3, #1
 800b854:	465a      	mov	r2, fp
 800b856:	4631      	mov	r1, r6
 800b858:	4628      	mov	r0, r5
 800b85a:	47b8      	blx	r7
 800b85c:	3001      	adds	r0, #1
 800b85e:	f43f aeae 	beq.w	800b5be <_printf_float+0xb6>
 800b862:	f108 0801 	add.w	r8, r8, #1
 800b866:	e7ec      	b.n	800b842 <_printf_float+0x33a>
 800b868:	4642      	mov	r2, r8
 800b86a:	4631      	mov	r1, r6
 800b86c:	4628      	mov	r0, r5
 800b86e:	47b8      	blx	r7
 800b870:	3001      	adds	r0, #1
 800b872:	d1c2      	bne.n	800b7fa <_printf_float+0x2f2>
 800b874:	e6a3      	b.n	800b5be <_printf_float+0xb6>
 800b876:	2301      	movs	r3, #1
 800b878:	4631      	mov	r1, r6
 800b87a:	4628      	mov	r0, r5
 800b87c:	9206      	str	r2, [sp, #24]
 800b87e:	47b8      	blx	r7
 800b880:	3001      	adds	r0, #1
 800b882:	f43f ae9c 	beq.w	800b5be <_printf_float+0xb6>
 800b886:	9a06      	ldr	r2, [sp, #24]
 800b888:	f10b 0b01 	add.w	fp, fp, #1
 800b88c:	e7bb      	b.n	800b806 <_printf_float+0x2fe>
 800b88e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b892:	4631      	mov	r1, r6
 800b894:	4628      	mov	r0, r5
 800b896:	47b8      	blx	r7
 800b898:	3001      	adds	r0, #1
 800b89a:	d1c0      	bne.n	800b81e <_printf_float+0x316>
 800b89c:	e68f      	b.n	800b5be <_printf_float+0xb6>
 800b89e:	9a06      	ldr	r2, [sp, #24]
 800b8a0:	464b      	mov	r3, r9
 800b8a2:	4442      	add	r2, r8
 800b8a4:	4631      	mov	r1, r6
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	47b8      	blx	r7
 800b8aa:	3001      	adds	r0, #1
 800b8ac:	d1c3      	bne.n	800b836 <_printf_float+0x32e>
 800b8ae:	e686      	b.n	800b5be <_printf_float+0xb6>
 800b8b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b8b4:	f1ba 0f01 	cmp.w	sl, #1
 800b8b8:	dc01      	bgt.n	800b8be <_printf_float+0x3b6>
 800b8ba:	07db      	lsls	r3, r3, #31
 800b8bc:	d536      	bpl.n	800b92c <_printf_float+0x424>
 800b8be:	2301      	movs	r3, #1
 800b8c0:	4642      	mov	r2, r8
 800b8c2:	4631      	mov	r1, r6
 800b8c4:	4628      	mov	r0, r5
 800b8c6:	47b8      	blx	r7
 800b8c8:	3001      	adds	r0, #1
 800b8ca:	f43f ae78 	beq.w	800b5be <_printf_float+0xb6>
 800b8ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8d2:	4631      	mov	r1, r6
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	47b8      	blx	r7
 800b8d8:	3001      	adds	r0, #1
 800b8da:	f43f ae70 	beq.w	800b5be <_printf_float+0xb6>
 800b8de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8ea:	f7f5 f8ed 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8ee:	b9c0      	cbnz	r0, 800b922 <_printf_float+0x41a>
 800b8f0:	4653      	mov	r3, sl
 800b8f2:	f108 0201 	add.w	r2, r8, #1
 800b8f6:	4631      	mov	r1, r6
 800b8f8:	4628      	mov	r0, r5
 800b8fa:	47b8      	blx	r7
 800b8fc:	3001      	adds	r0, #1
 800b8fe:	d10c      	bne.n	800b91a <_printf_float+0x412>
 800b900:	e65d      	b.n	800b5be <_printf_float+0xb6>
 800b902:	2301      	movs	r3, #1
 800b904:	465a      	mov	r2, fp
 800b906:	4631      	mov	r1, r6
 800b908:	4628      	mov	r0, r5
 800b90a:	47b8      	blx	r7
 800b90c:	3001      	adds	r0, #1
 800b90e:	f43f ae56 	beq.w	800b5be <_printf_float+0xb6>
 800b912:	f108 0801 	add.w	r8, r8, #1
 800b916:	45d0      	cmp	r8, sl
 800b918:	dbf3      	blt.n	800b902 <_printf_float+0x3fa>
 800b91a:	464b      	mov	r3, r9
 800b91c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b920:	e6df      	b.n	800b6e2 <_printf_float+0x1da>
 800b922:	f04f 0800 	mov.w	r8, #0
 800b926:	f104 0b1a 	add.w	fp, r4, #26
 800b92a:	e7f4      	b.n	800b916 <_printf_float+0x40e>
 800b92c:	2301      	movs	r3, #1
 800b92e:	4642      	mov	r2, r8
 800b930:	e7e1      	b.n	800b8f6 <_printf_float+0x3ee>
 800b932:	2301      	movs	r3, #1
 800b934:	464a      	mov	r2, r9
 800b936:	4631      	mov	r1, r6
 800b938:	4628      	mov	r0, r5
 800b93a:	47b8      	blx	r7
 800b93c:	3001      	adds	r0, #1
 800b93e:	f43f ae3e 	beq.w	800b5be <_printf_float+0xb6>
 800b942:	f108 0801 	add.w	r8, r8, #1
 800b946:	68e3      	ldr	r3, [r4, #12]
 800b948:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b94a:	1a5b      	subs	r3, r3, r1
 800b94c:	4543      	cmp	r3, r8
 800b94e:	dcf0      	bgt.n	800b932 <_printf_float+0x42a>
 800b950:	e6fc      	b.n	800b74c <_printf_float+0x244>
 800b952:	f04f 0800 	mov.w	r8, #0
 800b956:	f104 0919 	add.w	r9, r4, #25
 800b95a:	e7f4      	b.n	800b946 <_printf_float+0x43e>

0800b95c <_printf_common>:
 800b95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b960:	4616      	mov	r6, r2
 800b962:	4698      	mov	r8, r3
 800b964:	688a      	ldr	r2, [r1, #8]
 800b966:	690b      	ldr	r3, [r1, #16]
 800b968:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b96c:	4293      	cmp	r3, r2
 800b96e:	bfb8      	it	lt
 800b970:	4613      	movlt	r3, r2
 800b972:	6033      	str	r3, [r6, #0]
 800b974:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b978:	4607      	mov	r7, r0
 800b97a:	460c      	mov	r4, r1
 800b97c:	b10a      	cbz	r2, 800b982 <_printf_common+0x26>
 800b97e:	3301      	adds	r3, #1
 800b980:	6033      	str	r3, [r6, #0]
 800b982:	6823      	ldr	r3, [r4, #0]
 800b984:	0699      	lsls	r1, r3, #26
 800b986:	bf42      	ittt	mi
 800b988:	6833      	ldrmi	r3, [r6, #0]
 800b98a:	3302      	addmi	r3, #2
 800b98c:	6033      	strmi	r3, [r6, #0]
 800b98e:	6825      	ldr	r5, [r4, #0]
 800b990:	f015 0506 	ands.w	r5, r5, #6
 800b994:	d106      	bne.n	800b9a4 <_printf_common+0x48>
 800b996:	f104 0a19 	add.w	sl, r4, #25
 800b99a:	68e3      	ldr	r3, [r4, #12]
 800b99c:	6832      	ldr	r2, [r6, #0]
 800b99e:	1a9b      	subs	r3, r3, r2
 800b9a0:	42ab      	cmp	r3, r5
 800b9a2:	dc26      	bgt.n	800b9f2 <_printf_common+0x96>
 800b9a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b9a8:	6822      	ldr	r2, [r4, #0]
 800b9aa:	3b00      	subs	r3, #0
 800b9ac:	bf18      	it	ne
 800b9ae:	2301      	movne	r3, #1
 800b9b0:	0692      	lsls	r2, r2, #26
 800b9b2:	d42b      	bmi.n	800ba0c <_printf_common+0xb0>
 800b9b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b9b8:	4641      	mov	r1, r8
 800b9ba:	4638      	mov	r0, r7
 800b9bc:	47c8      	blx	r9
 800b9be:	3001      	adds	r0, #1
 800b9c0:	d01e      	beq.n	800ba00 <_printf_common+0xa4>
 800b9c2:	6823      	ldr	r3, [r4, #0]
 800b9c4:	6922      	ldr	r2, [r4, #16]
 800b9c6:	f003 0306 	and.w	r3, r3, #6
 800b9ca:	2b04      	cmp	r3, #4
 800b9cc:	bf02      	ittt	eq
 800b9ce:	68e5      	ldreq	r5, [r4, #12]
 800b9d0:	6833      	ldreq	r3, [r6, #0]
 800b9d2:	1aed      	subeq	r5, r5, r3
 800b9d4:	68a3      	ldr	r3, [r4, #8]
 800b9d6:	bf0c      	ite	eq
 800b9d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9dc:	2500      	movne	r5, #0
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	bfc4      	itt	gt
 800b9e2:	1a9b      	subgt	r3, r3, r2
 800b9e4:	18ed      	addgt	r5, r5, r3
 800b9e6:	2600      	movs	r6, #0
 800b9e8:	341a      	adds	r4, #26
 800b9ea:	42b5      	cmp	r5, r6
 800b9ec:	d11a      	bne.n	800ba24 <_printf_common+0xc8>
 800b9ee:	2000      	movs	r0, #0
 800b9f0:	e008      	b.n	800ba04 <_printf_common+0xa8>
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	4652      	mov	r2, sl
 800b9f6:	4641      	mov	r1, r8
 800b9f8:	4638      	mov	r0, r7
 800b9fa:	47c8      	blx	r9
 800b9fc:	3001      	adds	r0, #1
 800b9fe:	d103      	bne.n	800ba08 <_printf_common+0xac>
 800ba00:	f04f 30ff 	mov.w	r0, #4294967295
 800ba04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba08:	3501      	adds	r5, #1
 800ba0a:	e7c6      	b.n	800b99a <_printf_common+0x3e>
 800ba0c:	18e1      	adds	r1, r4, r3
 800ba0e:	1c5a      	adds	r2, r3, #1
 800ba10:	2030      	movs	r0, #48	@ 0x30
 800ba12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba16:	4422      	add	r2, r4
 800ba18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba20:	3302      	adds	r3, #2
 800ba22:	e7c7      	b.n	800b9b4 <_printf_common+0x58>
 800ba24:	2301      	movs	r3, #1
 800ba26:	4622      	mov	r2, r4
 800ba28:	4641      	mov	r1, r8
 800ba2a:	4638      	mov	r0, r7
 800ba2c:	47c8      	blx	r9
 800ba2e:	3001      	adds	r0, #1
 800ba30:	d0e6      	beq.n	800ba00 <_printf_common+0xa4>
 800ba32:	3601      	adds	r6, #1
 800ba34:	e7d9      	b.n	800b9ea <_printf_common+0x8e>
	...

0800ba38 <_printf_i>:
 800ba38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba3c:	7e0f      	ldrb	r7, [r1, #24]
 800ba3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba40:	2f78      	cmp	r7, #120	@ 0x78
 800ba42:	4691      	mov	r9, r2
 800ba44:	4680      	mov	r8, r0
 800ba46:	460c      	mov	r4, r1
 800ba48:	469a      	mov	sl, r3
 800ba4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ba4e:	d807      	bhi.n	800ba60 <_printf_i+0x28>
 800ba50:	2f62      	cmp	r7, #98	@ 0x62
 800ba52:	d80a      	bhi.n	800ba6a <_printf_i+0x32>
 800ba54:	2f00      	cmp	r7, #0
 800ba56:	f000 80d1 	beq.w	800bbfc <_printf_i+0x1c4>
 800ba5a:	2f58      	cmp	r7, #88	@ 0x58
 800ba5c:	f000 80b8 	beq.w	800bbd0 <_printf_i+0x198>
 800ba60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba68:	e03a      	b.n	800bae0 <_printf_i+0xa8>
 800ba6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba6e:	2b15      	cmp	r3, #21
 800ba70:	d8f6      	bhi.n	800ba60 <_printf_i+0x28>
 800ba72:	a101      	add	r1, pc, #4	@ (adr r1, 800ba78 <_printf_i+0x40>)
 800ba74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba78:	0800bad1 	.word	0x0800bad1
 800ba7c:	0800bae5 	.word	0x0800bae5
 800ba80:	0800ba61 	.word	0x0800ba61
 800ba84:	0800ba61 	.word	0x0800ba61
 800ba88:	0800ba61 	.word	0x0800ba61
 800ba8c:	0800ba61 	.word	0x0800ba61
 800ba90:	0800bae5 	.word	0x0800bae5
 800ba94:	0800ba61 	.word	0x0800ba61
 800ba98:	0800ba61 	.word	0x0800ba61
 800ba9c:	0800ba61 	.word	0x0800ba61
 800baa0:	0800ba61 	.word	0x0800ba61
 800baa4:	0800bbe3 	.word	0x0800bbe3
 800baa8:	0800bb0f 	.word	0x0800bb0f
 800baac:	0800bb9d 	.word	0x0800bb9d
 800bab0:	0800ba61 	.word	0x0800ba61
 800bab4:	0800ba61 	.word	0x0800ba61
 800bab8:	0800bc05 	.word	0x0800bc05
 800babc:	0800ba61 	.word	0x0800ba61
 800bac0:	0800bb0f 	.word	0x0800bb0f
 800bac4:	0800ba61 	.word	0x0800ba61
 800bac8:	0800ba61 	.word	0x0800ba61
 800bacc:	0800bba5 	.word	0x0800bba5
 800bad0:	6833      	ldr	r3, [r6, #0]
 800bad2:	1d1a      	adds	r2, r3, #4
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	6032      	str	r2, [r6, #0]
 800bad8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800badc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bae0:	2301      	movs	r3, #1
 800bae2:	e09c      	b.n	800bc1e <_printf_i+0x1e6>
 800bae4:	6833      	ldr	r3, [r6, #0]
 800bae6:	6820      	ldr	r0, [r4, #0]
 800bae8:	1d19      	adds	r1, r3, #4
 800baea:	6031      	str	r1, [r6, #0]
 800baec:	0606      	lsls	r6, r0, #24
 800baee:	d501      	bpl.n	800baf4 <_printf_i+0xbc>
 800baf0:	681d      	ldr	r5, [r3, #0]
 800baf2:	e003      	b.n	800bafc <_printf_i+0xc4>
 800baf4:	0645      	lsls	r5, r0, #25
 800baf6:	d5fb      	bpl.n	800baf0 <_printf_i+0xb8>
 800baf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bafc:	2d00      	cmp	r5, #0
 800bafe:	da03      	bge.n	800bb08 <_printf_i+0xd0>
 800bb00:	232d      	movs	r3, #45	@ 0x2d
 800bb02:	426d      	negs	r5, r5
 800bb04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb08:	4858      	ldr	r0, [pc, #352]	@ (800bc6c <_printf_i+0x234>)
 800bb0a:	230a      	movs	r3, #10
 800bb0c:	e011      	b.n	800bb32 <_printf_i+0xfa>
 800bb0e:	6821      	ldr	r1, [r4, #0]
 800bb10:	6833      	ldr	r3, [r6, #0]
 800bb12:	0608      	lsls	r0, r1, #24
 800bb14:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb18:	d402      	bmi.n	800bb20 <_printf_i+0xe8>
 800bb1a:	0649      	lsls	r1, r1, #25
 800bb1c:	bf48      	it	mi
 800bb1e:	b2ad      	uxthmi	r5, r5
 800bb20:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb22:	4852      	ldr	r0, [pc, #328]	@ (800bc6c <_printf_i+0x234>)
 800bb24:	6033      	str	r3, [r6, #0]
 800bb26:	bf14      	ite	ne
 800bb28:	230a      	movne	r3, #10
 800bb2a:	2308      	moveq	r3, #8
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bb32:	6866      	ldr	r6, [r4, #4]
 800bb34:	60a6      	str	r6, [r4, #8]
 800bb36:	2e00      	cmp	r6, #0
 800bb38:	db05      	blt.n	800bb46 <_printf_i+0x10e>
 800bb3a:	6821      	ldr	r1, [r4, #0]
 800bb3c:	432e      	orrs	r6, r5
 800bb3e:	f021 0104 	bic.w	r1, r1, #4
 800bb42:	6021      	str	r1, [r4, #0]
 800bb44:	d04b      	beq.n	800bbde <_printf_i+0x1a6>
 800bb46:	4616      	mov	r6, r2
 800bb48:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb4c:	fb03 5711 	mls	r7, r3, r1, r5
 800bb50:	5dc7      	ldrb	r7, [r0, r7]
 800bb52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb56:	462f      	mov	r7, r5
 800bb58:	42bb      	cmp	r3, r7
 800bb5a:	460d      	mov	r5, r1
 800bb5c:	d9f4      	bls.n	800bb48 <_printf_i+0x110>
 800bb5e:	2b08      	cmp	r3, #8
 800bb60:	d10b      	bne.n	800bb7a <_printf_i+0x142>
 800bb62:	6823      	ldr	r3, [r4, #0]
 800bb64:	07df      	lsls	r7, r3, #31
 800bb66:	d508      	bpl.n	800bb7a <_printf_i+0x142>
 800bb68:	6923      	ldr	r3, [r4, #16]
 800bb6a:	6861      	ldr	r1, [r4, #4]
 800bb6c:	4299      	cmp	r1, r3
 800bb6e:	bfde      	ittt	le
 800bb70:	2330      	movle	r3, #48	@ 0x30
 800bb72:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb76:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb7a:	1b92      	subs	r2, r2, r6
 800bb7c:	6122      	str	r2, [r4, #16]
 800bb7e:	f8cd a000 	str.w	sl, [sp]
 800bb82:	464b      	mov	r3, r9
 800bb84:	aa03      	add	r2, sp, #12
 800bb86:	4621      	mov	r1, r4
 800bb88:	4640      	mov	r0, r8
 800bb8a:	f7ff fee7 	bl	800b95c <_printf_common>
 800bb8e:	3001      	adds	r0, #1
 800bb90:	d14a      	bne.n	800bc28 <_printf_i+0x1f0>
 800bb92:	f04f 30ff 	mov.w	r0, #4294967295
 800bb96:	b004      	add	sp, #16
 800bb98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb9c:	6823      	ldr	r3, [r4, #0]
 800bb9e:	f043 0320 	orr.w	r3, r3, #32
 800bba2:	6023      	str	r3, [r4, #0]
 800bba4:	4832      	ldr	r0, [pc, #200]	@ (800bc70 <_printf_i+0x238>)
 800bba6:	2778      	movs	r7, #120	@ 0x78
 800bba8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bbac:	6823      	ldr	r3, [r4, #0]
 800bbae:	6831      	ldr	r1, [r6, #0]
 800bbb0:	061f      	lsls	r7, r3, #24
 800bbb2:	f851 5b04 	ldr.w	r5, [r1], #4
 800bbb6:	d402      	bmi.n	800bbbe <_printf_i+0x186>
 800bbb8:	065f      	lsls	r7, r3, #25
 800bbba:	bf48      	it	mi
 800bbbc:	b2ad      	uxthmi	r5, r5
 800bbbe:	6031      	str	r1, [r6, #0]
 800bbc0:	07d9      	lsls	r1, r3, #31
 800bbc2:	bf44      	itt	mi
 800bbc4:	f043 0320 	orrmi.w	r3, r3, #32
 800bbc8:	6023      	strmi	r3, [r4, #0]
 800bbca:	b11d      	cbz	r5, 800bbd4 <_printf_i+0x19c>
 800bbcc:	2310      	movs	r3, #16
 800bbce:	e7ad      	b.n	800bb2c <_printf_i+0xf4>
 800bbd0:	4826      	ldr	r0, [pc, #152]	@ (800bc6c <_printf_i+0x234>)
 800bbd2:	e7e9      	b.n	800bba8 <_printf_i+0x170>
 800bbd4:	6823      	ldr	r3, [r4, #0]
 800bbd6:	f023 0320 	bic.w	r3, r3, #32
 800bbda:	6023      	str	r3, [r4, #0]
 800bbdc:	e7f6      	b.n	800bbcc <_printf_i+0x194>
 800bbde:	4616      	mov	r6, r2
 800bbe0:	e7bd      	b.n	800bb5e <_printf_i+0x126>
 800bbe2:	6833      	ldr	r3, [r6, #0]
 800bbe4:	6825      	ldr	r5, [r4, #0]
 800bbe6:	6961      	ldr	r1, [r4, #20]
 800bbe8:	1d18      	adds	r0, r3, #4
 800bbea:	6030      	str	r0, [r6, #0]
 800bbec:	062e      	lsls	r6, r5, #24
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	d501      	bpl.n	800bbf6 <_printf_i+0x1be>
 800bbf2:	6019      	str	r1, [r3, #0]
 800bbf4:	e002      	b.n	800bbfc <_printf_i+0x1c4>
 800bbf6:	0668      	lsls	r0, r5, #25
 800bbf8:	d5fb      	bpl.n	800bbf2 <_printf_i+0x1ba>
 800bbfa:	8019      	strh	r1, [r3, #0]
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	6123      	str	r3, [r4, #16]
 800bc00:	4616      	mov	r6, r2
 800bc02:	e7bc      	b.n	800bb7e <_printf_i+0x146>
 800bc04:	6833      	ldr	r3, [r6, #0]
 800bc06:	1d1a      	adds	r2, r3, #4
 800bc08:	6032      	str	r2, [r6, #0]
 800bc0a:	681e      	ldr	r6, [r3, #0]
 800bc0c:	6862      	ldr	r2, [r4, #4]
 800bc0e:	2100      	movs	r1, #0
 800bc10:	4630      	mov	r0, r6
 800bc12:	f7f4 fadd 	bl	80001d0 <memchr>
 800bc16:	b108      	cbz	r0, 800bc1c <_printf_i+0x1e4>
 800bc18:	1b80      	subs	r0, r0, r6
 800bc1a:	6060      	str	r0, [r4, #4]
 800bc1c:	6863      	ldr	r3, [r4, #4]
 800bc1e:	6123      	str	r3, [r4, #16]
 800bc20:	2300      	movs	r3, #0
 800bc22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc26:	e7aa      	b.n	800bb7e <_printf_i+0x146>
 800bc28:	6923      	ldr	r3, [r4, #16]
 800bc2a:	4632      	mov	r2, r6
 800bc2c:	4649      	mov	r1, r9
 800bc2e:	4640      	mov	r0, r8
 800bc30:	47d0      	blx	sl
 800bc32:	3001      	adds	r0, #1
 800bc34:	d0ad      	beq.n	800bb92 <_printf_i+0x15a>
 800bc36:	6823      	ldr	r3, [r4, #0]
 800bc38:	079b      	lsls	r3, r3, #30
 800bc3a:	d413      	bmi.n	800bc64 <_printf_i+0x22c>
 800bc3c:	68e0      	ldr	r0, [r4, #12]
 800bc3e:	9b03      	ldr	r3, [sp, #12]
 800bc40:	4298      	cmp	r0, r3
 800bc42:	bfb8      	it	lt
 800bc44:	4618      	movlt	r0, r3
 800bc46:	e7a6      	b.n	800bb96 <_printf_i+0x15e>
 800bc48:	2301      	movs	r3, #1
 800bc4a:	4632      	mov	r2, r6
 800bc4c:	4649      	mov	r1, r9
 800bc4e:	4640      	mov	r0, r8
 800bc50:	47d0      	blx	sl
 800bc52:	3001      	adds	r0, #1
 800bc54:	d09d      	beq.n	800bb92 <_printf_i+0x15a>
 800bc56:	3501      	adds	r5, #1
 800bc58:	68e3      	ldr	r3, [r4, #12]
 800bc5a:	9903      	ldr	r1, [sp, #12]
 800bc5c:	1a5b      	subs	r3, r3, r1
 800bc5e:	42ab      	cmp	r3, r5
 800bc60:	dcf2      	bgt.n	800bc48 <_printf_i+0x210>
 800bc62:	e7eb      	b.n	800bc3c <_printf_i+0x204>
 800bc64:	2500      	movs	r5, #0
 800bc66:	f104 0619 	add.w	r6, r4, #25
 800bc6a:	e7f5      	b.n	800bc58 <_printf_i+0x220>
 800bc6c:	0800e1c6 	.word	0x0800e1c6
 800bc70:	0800e1d7 	.word	0x0800e1d7

0800bc74 <std>:
 800bc74:	2300      	movs	r3, #0
 800bc76:	b510      	push	{r4, lr}
 800bc78:	4604      	mov	r4, r0
 800bc7a:	e9c0 3300 	strd	r3, r3, [r0]
 800bc7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc82:	6083      	str	r3, [r0, #8]
 800bc84:	8181      	strh	r1, [r0, #12]
 800bc86:	6643      	str	r3, [r0, #100]	@ 0x64
 800bc88:	81c2      	strh	r2, [r0, #14]
 800bc8a:	6183      	str	r3, [r0, #24]
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	2208      	movs	r2, #8
 800bc90:	305c      	adds	r0, #92	@ 0x5c
 800bc92:	f000 f92a 	bl	800beea <memset>
 800bc96:	4b0d      	ldr	r3, [pc, #52]	@ (800bccc <std+0x58>)
 800bc98:	6263      	str	r3, [r4, #36]	@ 0x24
 800bc9a:	4b0d      	ldr	r3, [pc, #52]	@ (800bcd0 <std+0x5c>)
 800bc9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bc9e:	4b0d      	ldr	r3, [pc, #52]	@ (800bcd4 <std+0x60>)
 800bca0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bca2:	4b0d      	ldr	r3, [pc, #52]	@ (800bcd8 <std+0x64>)
 800bca4:	6323      	str	r3, [r4, #48]	@ 0x30
 800bca6:	4b0d      	ldr	r3, [pc, #52]	@ (800bcdc <std+0x68>)
 800bca8:	6224      	str	r4, [r4, #32]
 800bcaa:	429c      	cmp	r4, r3
 800bcac:	d006      	beq.n	800bcbc <std+0x48>
 800bcae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bcb2:	4294      	cmp	r4, r2
 800bcb4:	d002      	beq.n	800bcbc <std+0x48>
 800bcb6:	33d0      	adds	r3, #208	@ 0xd0
 800bcb8:	429c      	cmp	r4, r3
 800bcba:	d105      	bne.n	800bcc8 <std+0x54>
 800bcbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bcc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcc4:	f000 b9e2 	b.w	800c08c <__retarget_lock_init_recursive>
 800bcc8:	bd10      	pop	{r4, pc}
 800bcca:	bf00      	nop
 800bccc:	0800be65 	.word	0x0800be65
 800bcd0:	0800be87 	.word	0x0800be87
 800bcd4:	0800bebf 	.word	0x0800bebf
 800bcd8:	0800bee3 	.word	0x0800bee3
 800bcdc:	20000b70 	.word	0x20000b70

0800bce0 <stdio_exit_handler>:
 800bce0:	4a02      	ldr	r2, [pc, #8]	@ (800bcec <stdio_exit_handler+0xc>)
 800bce2:	4903      	ldr	r1, [pc, #12]	@ (800bcf0 <stdio_exit_handler+0x10>)
 800bce4:	4803      	ldr	r0, [pc, #12]	@ (800bcf4 <stdio_exit_handler+0x14>)
 800bce6:	f000 b869 	b.w	800bdbc <_fwalk_sglue>
 800bcea:	bf00      	nop
 800bcec:	20000030 	.word	0x20000030
 800bcf0:	0800d889 	.word	0x0800d889
 800bcf4:	20000040 	.word	0x20000040

0800bcf8 <cleanup_stdio>:
 800bcf8:	6841      	ldr	r1, [r0, #4]
 800bcfa:	4b0c      	ldr	r3, [pc, #48]	@ (800bd2c <cleanup_stdio+0x34>)
 800bcfc:	4299      	cmp	r1, r3
 800bcfe:	b510      	push	{r4, lr}
 800bd00:	4604      	mov	r4, r0
 800bd02:	d001      	beq.n	800bd08 <cleanup_stdio+0x10>
 800bd04:	f001 fdc0 	bl	800d888 <_fflush_r>
 800bd08:	68a1      	ldr	r1, [r4, #8]
 800bd0a:	4b09      	ldr	r3, [pc, #36]	@ (800bd30 <cleanup_stdio+0x38>)
 800bd0c:	4299      	cmp	r1, r3
 800bd0e:	d002      	beq.n	800bd16 <cleanup_stdio+0x1e>
 800bd10:	4620      	mov	r0, r4
 800bd12:	f001 fdb9 	bl	800d888 <_fflush_r>
 800bd16:	68e1      	ldr	r1, [r4, #12]
 800bd18:	4b06      	ldr	r3, [pc, #24]	@ (800bd34 <cleanup_stdio+0x3c>)
 800bd1a:	4299      	cmp	r1, r3
 800bd1c:	d004      	beq.n	800bd28 <cleanup_stdio+0x30>
 800bd1e:	4620      	mov	r0, r4
 800bd20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd24:	f001 bdb0 	b.w	800d888 <_fflush_r>
 800bd28:	bd10      	pop	{r4, pc}
 800bd2a:	bf00      	nop
 800bd2c:	20000b70 	.word	0x20000b70
 800bd30:	20000bd8 	.word	0x20000bd8
 800bd34:	20000c40 	.word	0x20000c40

0800bd38 <global_stdio_init.part.0>:
 800bd38:	b510      	push	{r4, lr}
 800bd3a:	4b0b      	ldr	r3, [pc, #44]	@ (800bd68 <global_stdio_init.part.0+0x30>)
 800bd3c:	4c0b      	ldr	r4, [pc, #44]	@ (800bd6c <global_stdio_init.part.0+0x34>)
 800bd3e:	4a0c      	ldr	r2, [pc, #48]	@ (800bd70 <global_stdio_init.part.0+0x38>)
 800bd40:	601a      	str	r2, [r3, #0]
 800bd42:	4620      	mov	r0, r4
 800bd44:	2200      	movs	r2, #0
 800bd46:	2104      	movs	r1, #4
 800bd48:	f7ff ff94 	bl	800bc74 <std>
 800bd4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bd50:	2201      	movs	r2, #1
 800bd52:	2109      	movs	r1, #9
 800bd54:	f7ff ff8e 	bl	800bc74 <std>
 800bd58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bd5c:	2202      	movs	r2, #2
 800bd5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd62:	2112      	movs	r1, #18
 800bd64:	f7ff bf86 	b.w	800bc74 <std>
 800bd68:	20000ca8 	.word	0x20000ca8
 800bd6c:	20000b70 	.word	0x20000b70
 800bd70:	0800bce1 	.word	0x0800bce1

0800bd74 <__sfp_lock_acquire>:
 800bd74:	4801      	ldr	r0, [pc, #4]	@ (800bd7c <__sfp_lock_acquire+0x8>)
 800bd76:	f000 b98a 	b.w	800c08e <__retarget_lock_acquire_recursive>
 800bd7a:	bf00      	nop
 800bd7c:	20000cb1 	.word	0x20000cb1

0800bd80 <__sfp_lock_release>:
 800bd80:	4801      	ldr	r0, [pc, #4]	@ (800bd88 <__sfp_lock_release+0x8>)
 800bd82:	f000 b985 	b.w	800c090 <__retarget_lock_release_recursive>
 800bd86:	bf00      	nop
 800bd88:	20000cb1 	.word	0x20000cb1

0800bd8c <__sinit>:
 800bd8c:	b510      	push	{r4, lr}
 800bd8e:	4604      	mov	r4, r0
 800bd90:	f7ff fff0 	bl	800bd74 <__sfp_lock_acquire>
 800bd94:	6a23      	ldr	r3, [r4, #32]
 800bd96:	b11b      	cbz	r3, 800bda0 <__sinit+0x14>
 800bd98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd9c:	f7ff bff0 	b.w	800bd80 <__sfp_lock_release>
 800bda0:	4b04      	ldr	r3, [pc, #16]	@ (800bdb4 <__sinit+0x28>)
 800bda2:	6223      	str	r3, [r4, #32]
 800bda4:	4b04      	ldr	r3, [pc, #16]	@ (800bdb8 <__sinit+0x2c>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d1f5      	bne.n	800bd98 <__sinit+0xc>
 800bdac:	f7ff ffc4 	bl	800bd38 <global_stdio_init.part.0>
 800bdb0:	e7f2      	b.n	800bd98 <__sinit+0xc>
 800bdb2:	bf00      	nop
 800bdb4:	0800bcf9 	.word	0x0800bcf9
 800bdb8:	20000ca8 	.word	0x20000ca8

0800bdbc <_fwalk_sglue>:
 800bdbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdc0:	4607      	mov	r7, r0
 800bdc2:	4688      	mov	r8, r1
 800bdc4:	4614      	mov	r4, r2
 800bdc6:	2600      	movs	r6, #0
 800bdc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bdcc:	f1b9 0901 	subs.w	r9, r9, #1
 800bdd0:	d505      	bpl.n	800bdde <_fwalk_sglue+0x22>
 800bdd2:	6824      	ldr	r4, [r4, #0]
 800bdd4:	2c00      	cmp	r4, #0
 800bdd6:	d1f7      	bne.n	800bdc8 <_fwalk_sglue+0xc>
 800bdd8:	4630      	mov	r0, r6
 800bdda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdde:	89ab      	ldrh	r3, [r5, #12]
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d907      	bls.n	800bdf4 <_fwalk_sglue+0x38>
 800bde4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bde8:	3301      	adds	r3, #1
 800bdea:	d003      	beq.n	800bdf4 <_fwalk_sglue+0x38>
 800bdec:	4629      	mov	r1, r5
 800bdee:	4638      	mov	r0, r7
 800bdf0:	47c0      	blx	r8
 800bdf2:	4306      	orrs	r6, r0
 800bdf4:	3568      	adds	r5, #104	@ 0x68
 800bdf6:	e7e9      	b.n	800bdcc <_fwalk_sglue+0x10>

0800bdf8 <sniprintf>:
 800bdf8:	b40c      	push	{r2, r3}
 800bdfa:	b530      	push	{r4, r5, lr}
 800bdfc:	4b18      	ldr	r3, [pc, #96]	@ (800be60 <sniprintf+0x68>)
 800bdfe:	1e0c      	subs	r4, r1, #0
 800be00:	681d      	ldr	r5, [r3, #0]
 800be02:	b09d      	sub	sp, #116	@ 0x74
 800be04:	da08      	bge.n	800be18 <sniprintf+0x20>
 800be06:	238b      	movs	r3, #139	@ 0x8b
 800be08:	602b      	str	r3, [r5, #0]
 800be0a:	f04f 30ff 	mov.w	r0, #4294967295
 800be0e:	b01d      	add	sp, #116	@ 0x74
 800be10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be14:	b002      	add	sp, #8
 800be16:	4770      	bx	lr
 800be18:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800be1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800be20:	f04f 0300 	mov.w	r3, #0
 800be24:	931b      	str	r3, [sp, #108]	@ 0x6c
 800be26:	bf14      	ite	ne
 800be28:	f104 33ff 	addne.w	r3, r4, #4294967295
 800be2c:	4623      	moveq	r3, r4
 800be2e:	9304      	str	r3, [sp, #16]
 800be30:	9307      	str	r3, [sp, #28]
 800be32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800be36:	9002      	str	r0, [sp, #8]
 800be38:	9006      	str	r0, [sp, #24]
 800be3a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800be3e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800be40:	ab21      	add	r3, sp, #132	@ 0x84
 800be42:	a902      	add	r1, sp, #8
 800be44:	4628      	mov	r0, r5
 800be46:	9301      	str	r3, [sp, #4]
 800be48:	f001 fb9e 	bl	800d588 <_svfiprintf_r>
 800be4c:	1c43      	adds	r3, r0, #1
 800be4e:	bfbc      	itt	lt
 800be50:	238b      	movlt	r3, #139	@ 0x8b
 800be52:	602b      	strlt	r3, [r5, #0]
 800be54:	2c00      	cmp	r4, #0
 800be56:	d0da      	beq.n	800be0e <sniprintf+0x16>
 800be58:	9b02      	ldr	r3, [sp, #8]
 800be5a:	2200      	movs	r2, #0
 800be5c:	701a      	strb	r2, [r3, #0]
 800be5e:	e7d6      	b.n	800be0e <sniprintf+0x16>
 800be60:	2000003c 	.word	0x2000003c

0800be64 <__sread>:
 800be64:	b510      	push	{r4, lr}
 800be66:	460c      	mov	r4, r1
 800be68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be6c:	f000 f89c 	bl	800bfa8 <_read_r>
 800be70:	2800      	cmp	r0, #0
 800be72:	bfab      	itete	ge
 800be74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800be76:	89a3      	ldrhlt	r3, [r4, #12]
 800be78:	181b      	addge	r3, r3, r0
 800be7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800be7e:	bfac      	ite	ge
 800be80:	6563      	strge	r3, [r4, #84]	@ 0x54
 800be82:	81a3      	strhlt	r3, [r4, #12]
 800be84:	bd10      	pop	{r4, pc}

0800be86 <__swrite>:
 800be86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be8a:	461f      	mov	r7, r3
 800be8c:	898b      	ldrh	r3, [r1, #12]
 800be8e:	05db      	lsls	r3, r3, #23
 800be90:	4605      	mov	r5, r0
 800be92:	460c      	mov	r4, r1
 800be94:	4616      	mov	r6, r2
 800be96:	d505      	bpl.n	800bea4 <__swrite+0x1e>
 800be98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be9c:	2302      	movs	r3, #2
 800be9e:	2200      	movs	r2, #0
 800bea0:	f000 f870 	bl	800bf84 <_lseek_r>
 800bea4:	89a3      	ldrh	r3, [r4, #12]
 800bea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800beaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800beae:	81a3      	strh	r3, [r4, #12]
 800beb0:	4632      	mov	r2, r6
 800beb2:	463b      	mov	r3, r7
 800beb4:	4628      	mov	r0, r5
 800beb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800beba:	f000 b8ab 	b.w	800c014 <_write_r>

0800bebe <__sseek>:
 800bebe:	b510      	push	{r4, lr}
 800bec0:	460c      	mov	r4, r1
 800bec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bec6:	f000 f85d 	bl	800bf84 <_lseek_r>
 800beca:	1c43      	adds	r3, r0, #1
 800becc:	89a3      	ldrh	r3, [r4, #12]
 800bece:	bf15      	itete	ne
 800bed0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bed2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bed6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800beda:	81a3      	strheq	r3, [r4, #12]
 800bedc:	bf18      	it	ne
 800bede:	81a3      	strhne	r3, [r4, #12]
 800bee0:	bd10      	pop	{r4, pc}

0800bee2 <__sclose>:
 800bee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bee6:	f000 b83d 	b.w	800bf64 <_close_r>

0800beea <memset>:
 800beea:	4402      	add	r2, r0
 800beec:	4603      	mov	r3, r0
 800beee:	4293      	cmp	r3, r2
 800bef0:	d100      	bne.n	800bef4 <memset+0xa>
 800bef2:	4770      	bx	lr
 800bef4:	f803 1b01 	strb.w	r1, [r3], #1
 800bef8:	e7f9      	b.n	800beee <memset+0x4>

0800befa <_raise_r>:
 800befa:	291f      	cmp	r1, #31
 800befc:	b538      	push	{r3, r4, r5, lr}
 800befe:	4605      	mov	r5, r0
 800bf00:	460c      	mov	r4, r1
 800bf02:	d904      	bls.n	800bf0e <_raise_r+0x14>
 800bf04:	2316      	movs	r3, #22
 800bf06:	6003      	str	r3, [r0, #0]
 800bf08:	f04f 30ff 	mov.w	r0, #4294967295
 800bf0c:	bd38      	pop	{r3, r4, r5, pc}
 800bf0e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bf10:	b112      	cbz	r2, 800bf18 <_raise_r+0x1e>
 800bf12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf16:	b94b      	cbnz	r3, 800bf2c <_raise_r+0x32>
 800bf18:	4628      	mov	r0, r5
 800bf1a:	f000 f869 	bl	800bff0 <_getpid_r>
 800bf1e:	4622      	mov	r2, r4
 800bf20:	4601      	mov	r1, r0
 800bf22:	4628      	mov	r0, r5
 800bf24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf28:	f000 b850 	b.w	800bfcc <_kill_r>
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d00a      	beq.n	800bf46 <_raise_r+0x4c>
 800bf30:	1c59      	adds	r1, r3, #1
 800bf32:	d103      	bne.n	800bf3c <_raise_r+0x42>
 800bf34:	2316      	movs	r3, #22
 800bf36:	6003      	str	r3, [r0, #0]
 800bf38:	2001      	movs	r0, #1
 800bf3a:	e7e7      	b.n	800bf0c <_raise_r+0x12>
 800bf3c:	2100      	movs	r1, #0
 800bf3e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bf42:	4620      	mov	r0, r4
 800bf44:	4798      	blx	r3
 800bf46:	2000      	movs	r0, #0
 800bf48:	e7e0      	b.n	800bf0c <_raise_r+0x12>
	...

0800bf4c <raise>:
 800bf4c:	4b02      	ldr	r3, [pc, #8]	@ (800bf58 <raise+0xc>)
 800bf4e:	4601      	mov	r1, r0
 800bf50:	6818      	ldr	r0, [r3, #0]
 800bf52:	f7ff bfd2 	b.w	800befa <_raise_r>
 800bf56:	bf00      	nop
 800bf58:	2000003c 	.word	0x2000003c

0800bf5c <_localeconv_r>:
 800bf5c:	4800      	ldr	r0, [pc, #0]	@ (800bf60 <_localeconv_r+0x4>)
 800bf5e:	4770      	bx	lr
 800bf60:	2000017c 	.word	0x2000017c

0800bf64 <_close_r>:
 800bf64:	b538      	push	{r3, r4, r5, lr}
 800bf66:	4d06      	ldr	r5, [pc, #24]	@ (800bf80 <_close_r+0x1c>)
 800bf68:	2300      	movs	r3, #0
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	4608      	mov	r0, r1
 800bf6e:	602b      	str	r3, [r5, #0]
 800bf70:	f7f6 f9a8 	bl	80022c4 <_close>
 800bf74:	1c43      	adds	r3, r0, #1
 800bf76:	d102      	bne.n	800bf7e <_close_r+0x1a>
 800bf78:	682b      	ldr	r3, [r5, #0]
 800bf7a:	b103      	cbz	r3, 800bf7e <_close_r+0x1a>
 800bf7c:	6023      	str	r3, [r4, #0]
 800bf7e:	bd38      	pop	{r3, r4, r5, pc}
 800bf80:	20000cac 	.word	0x20000cac

0800bf84 <_lseek_r>:
 800bf84:	b538      	push	{r3, r4, r5, lr}
 800bf86:	4d07      	ldr	r5, [pc, #28]	@ (800bfa4 <_lseek_r+0x20>)
 800bf88:	4604      	mov	r4, r0
 800bf8a:	4608      	mov	r0, r1
 800bf8c:	4611      	mov	r1, r2
 800bf8e:	2200      	movs	r2, #0
 800bf90:	602a      	str	r2, [r5, #0]
 800bf92:	461a      	mov	r2, r3
 800bf94:	f7f6 f9bd 	bl	8002312 <_lseek>
 800bf98:	1c43      	adds	r3, r0, #1
 800bf9a:	d102      	bne.n	800bfa2 <_lseek_r+0x1e>
 800bf9c:	682b      	ldr	r3, [r5, #0]
 800bf9e:	b103      	cbz	r3, 800bfa2 <_lseek_r+0x1e>
 800bfa0:	6023      	str	r3, [r4, #0]
 800bfa2:	bd38      	pop	{r3, r4, r5, pc}
 800bfa4:	20000cac 	.word	0x20000cac

0800bfa8 <_read_r>:
 800bfa8:	b538      	push	{r3, r4, r5, lr}
 800bfaa:	4d07      	ldr	r5, [pc, #28]	@ (800bfc8 <_read_r+0x20>)
 800bfac:	4604      	mov	r4, r0
 800bfae:	4608      	mov	r0, r1
 800bfb0:	4611      	mov	r1, r2
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	602a      	str	r2, [r5, #0]
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	f7f6 f94b 	bl	8002252 <_read>
 800bfbc:	1c43      	adds	r3, r0, #1
 800bfbe:	d102      	bne.n	800bfc6 <_read_r+0x1e>
 800bfc0:	682b      	ldr	r3, [r5, #0]
 800bfc2:	b103      	cbz	r3, 800bfc6 <_read_r+0x1e>
 800bfc4:	6023      	str	r3, [r4, #0]
 800bfc6:	bd38      	pop	{r3, r4, r5, pc}
 800bfc8:	20000cac 	.word	0x20000cac

0800bfcc <_kill_r>:
 800bfcc:	b538      	push	{r3, r4, r5, lr}
 800bfce:	4d07      	ldr	r5, [pc, #28]	@ (800bfec <_kill_r+0x20>)
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	4604      	mov	r4, r0
 800bfd4:	4608      	mov	r0, r1
 800bfd6:	4611      	mov	r1, r2
 800bfd8:	602b      	str	r3, [r5, #0]
 800bfda:	f7f6 f91f 	bl	800221c <_kill>
 800bfde:	1c43      	adds	r3, r0, #1
 800bfe0:	d102      	bne.n	800bfe8 <_kill_r+0x1c>
 800bfe2:	682b      	ldr	r3, [r5, #0]
 800bfe4:	b103      	cbz	r3, 800bfe8 <_kill_r+0x1c>
 800bfe6:	6023      	str	r3, [r4, #0]
 800bfe8:	bd38      	pop	{r3, r4, r5, pc}
 800bfea:	bf00      	nop
 800bfec:	20000cac 	.word	0x20000cac

0800bff0 <_getpid_r>:
 800bff0:	f7f6 b90c 	b.w	800220c <_getpid>

0800bff4 <_sbrk_r>:
 800bff4:	b538      	push	{r3, r4, r5, lr}
 800bff6:	4d06      	ldr	r5, [pc, #24]	@ (800c010 <_sbrk_r+0x1c>)
 800bff8:	2300      	movs	r3, #0
 800bffa:	4604      	mov	r4, r0
 800bffc:	4608      	mov	r0, r1
 800bffe:	602b      	str	r3, [r5, #0]
 800c000:	f7f6 f994 	bl	800232c <_sbrk>
 800c004:	1c43      	adds	r3, r0, #1
 800c006:	d102      	bne.n	800c00e <_sbrk_r+0x1a>
 800c008:	682b      	ldr	r3, [r5, #0]
 800c00a:	b103      	cbz	r3, 800c00e <_sbrk_r+0x1a>
 800c00c:	6023      	str	r3, [r4, #0]
 800c00e:	bd38      	pop	{r3, r4, r5, pc}
 800c010:	20000cac 	.word	0x20000cac

0800c014 <_write_r>:
 800c014:	b538      	push	{r3, r4, r5, lr}
 800c016:	4d07      	ldr	r5, [pc, #28]	@ (800c034 <_write_r+0x20>)
 800c018:	4604      	mov	r4, r0
 800c01a:	4608      	mov	r0, r1
 800c01c:	4611      	mov	r1, r2
 800c01e:	2200      	movs	r2, #0
 800c020:	602a      	str	r2, [r5, #0]
 800c022:	461a      	mov	r2, r3
 800c024:	f7f6 f932 	bl	800228c <_write>
 800c028:	1c43      	adds	r3, r0, #1
 800c02a:	d102      	bne.n	800c032 <_write_r+0x1e>
 800c02c:	682b      	ldr	r3, [r5, #0]
 800c02e:	b103      	cbz	r3, 800c032 <_write_r+0x1e>
 800c030:	6023      	str	r3, [r4, #0]
 800c032:	bd38      	pop	{r3, r4, r5, pc}
 800c034:	20000cac 	.word	0x20000cac

0800c038 <__errno>:
 800c038:	4b01      	ldr	r3, [pc, #4]	@ (800c040 <__errno+0x8>)
 800c03a:	6818      	ldr	r0, [r3, #0]
 800c03c:	4770      	bx	lr
 800c03e:	bf00      	nop
 800c040:	2000003c 	.word	0x2000003c

0800c044 <__libc_init_array>:
 800c044:	b570      	push	{r4, r5, r6, lr}
 800c046:	4d0d      	ldr	r5, [pc, #52]	@ (800c07c <__libc_init_array+0x38>)
 800c048:	4c0d      	ldr	r4, [pc, #52]	@ (800c080 <__libc_init_array+0x3c>)
 800c04a:	1b64      	subs	r4, r4, r5
 800c04c:	10a4      	asrs	r4, r4, #2
 800c04e:	2600      	movs	r6, #0
 800c050:	42a6      	cmp	r6, r4
 800c052:	d109      	bne.n	800c068 <__libc_init_array+0x24>
 800c054:	4d0b      	ldr	r5, [pc, #44]	@ (800c084 <__libc_init_array+0x40>)
 800c056:	4c0c      	ldr	r4, [pc, #48]	@ (800c088 <__libc_init_array+0x44>)
 800c058:	f001 ff5a 	bl	800df10 <_init>
 800c05c:	1b64      	subs	r4, r4, r5
 800c05e:	10a4      	asrs	r4, r4, #2
 800c060:	2600      	movs	r6, #0
 800c062:	42a6      	cmp	r6, r4
 800c064:	d105      	bne.n	800c072 <__libc_init_array+0x2e>
 800c066:	bd70      	pop	{r4, r5, r6, pc}
 800c068:	f855 3b04 	ldr.w	r3, [r5], #4
 800c06c:	4798      	blx	r3
 800c06e:	3601      	adds	r6, #1
 800c070:	e7ee      	b.n	800c050 <__libc_init_array+0xc>
 800c072:	f855 3b04 	ldr.w	r3, [r5], #4
 800c076:	4798      	blx	r3
 800c078:	3601      	adds	r6, #1
 800c07a:	e7f2      	b.n	800c062 <__libc_init_array+0x1e>
 800c07c:	0800e534 	.word	0x0800e534
 800c080:	0800e534 	.word	0x0800e534
 800c084:	0800e534 	.word	0x0800e534
 800c088:	0800e538 	.word	0x0800e538

0800c08c <__retarget_lock_init_recursive>:
 800c08c:	4770      	bx	lr

0800c08e <__retarget_lock_acquire_recursive>:
 800c08e:	4770      	bx	lr

0800c090 <__retarget_lock_release_recursive>:
 800c090:	4770      	bx	lr

0800c092 <quorem>:
 800c092:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c096:	6903      	ldr	r3, [r0, #16]
 800c098:	690c      	ldr	r4, [r1, #16]
 800c09a:	42a3      	cmp	r3, r4
 800c09c:	4607      	mov	r7, r0
 800c09e:	db7e      	blt.n	800c19e <quorem+0x10c>
 800c0a0:	3c01      	subs	r4, #1
 800c0a2:	f101 0814 	add.w	r8, r1, #20
 800c0a6:	00a3      	lsls	r3, r4, #2
 800c0a8:	f100 0514 	add.w	r5, r0, #20
 800c0ac:	9300      	str	r3, [sp, #0]
 800c0ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0b2:	9301      	str	r3, [sp, #4]
 800c0b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c0b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0bc:	3301      	adds	r3, #1
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c0c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800c0c8:	d32e      	bcc.n	800c128 <quorem+0x96>
 800c0ca:	f04f 0a00 	mov.w	sl, #0
 800c0ce:	46c4      	mov	ip, r8
 800c0d0:	46ae      	mov	lr, r5
 800c0d2:	46d3      	mov	fp, sl
 800c0d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c0d8:	b298      	uxth	r0, r3
 800c0da:	fb06 a000 	mla	r0, r6, r0, sl
 800c0de:	0c02      	lsrs	r2, r0, #16
 800c0e0:	0c1b      	lsrs	r3, r3, #16
 800c0e2:	fb06 2303 	mla	r3, r6, r3, r2
 800c0e6:	f8de 2000 	ldr.w	r2, [lr]
 800c0ea:	b280      	uxth	r0, r0
 800c0ec:	b292      	uxth	r2, r2
 800c0ee:	1a12      	subs	r2, r2, r0
 800c0f0:	445a      	add	r2, fp
 800c0f2:	f8de 0000 	ldr.w	r0, [lr]
 800c0f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c100:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c104:	b292      	uxth	r2, r2
 800c106:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c10a:	45e1      	cmp	r9, ip
 800c10c:	f84e 2b04 	str.w	r2, [lr], #4
 800c110:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c114:	d2de      	bcs.n	800c0d4 <quorem+0x42>
 800c116:	9b00      	ldr	r3, [sp, #0]
 800c118:	58eb      	ldr	r3, [r5, r3]
 800c11a:	b92b      	cbnz	r3, 800c128 <quorem+0x96>
 800c11c:	9b01      	ldr	r3, [sp, #4]
 800c11e:	3b04      	subs	r3, #4
 800c120:	429d      	cmp	r5, r3
 800c122:	461a      	mov	r2, r3
 800c124:	d32f      	bcc.n	800c186 <quorem+0xf4>
 800c126:	613c      	str	r4, [r7, #16]
 800c128:	4638      	mov	r0, r7
 800c12a:	f001 f8c9 	bl	800d2c0 <__mcmp>
 800c12e:	2800      	cmp	r0, #0
 800c130:	db25      	blt.n	800c17e <quorem+0xec>
 800c132:	4629      	mov	r1, r5
 800c134:	2000      	movs	r0, #0
 800c136:	f858 2b04 	ldr.w	r2, [r8], #4
 800c13a:	f8d1 c000 	ldr.w	ip, [r1]
 800c13e:	fa1f fe82 	uxth.w	lr, r2
 800c142:	fa1f f38c 	uxth.w	r3, ip
 800c146:	eba3 030e 	sub.w	r3, r3, lr
 800c14a:	4403      	add	r3, r0
 800c14c:	0c12      	lsrs	r2, r2, #16
 800c14e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c152:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c156:	b29b      	uxth	r3, r3
 800c158:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c15c:	45c1      	cmp	r9, r8
 800c15e:	f841 3b04 	str.w	r3, [r1], #4
 800c162:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c166:	d2e6      	bcs.n	800c136 <quorem+0xa4>
 800c168:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c16c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c170:	b922      	cbnz	r2, 800c17c <quorem+0xea>
 800c172:	3b04      	subs	r3, #4
 800c174:	429d      	cmp	r5, r3
 800c176:	461a      	mov	r2, r3
 800c178:	d30b      	bcc.n	800c192 <quorem+0x100>
 800c17a:	613c      	str	r4, [r7, #16]
 800c17c:	3601      	adds	r6, #1
 800c17e:	4630      	mov	r0, r6
 800c180:	b003      	add	sp, #12
 800c182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c186:	6812      	ldr	r2, [r2, #0]
 800c188:	3b04      	subs	r3, #4
 800c18a:	2a00      	cmp	r2, #0
 800c18c:	d1cb      	bne.n	800c126 <quorem+0x94>
 800c18e:	3c01      	subs	r4, #1
 800c190:	e7c6      	b.n	800c120 <quorem+0x8e>
 800c192:	6812      	ldr	r2, [r2, #0]
 800c194:	3b04      	subs	r3, #4
 800c196:	2a00      	cmp	r2, #0
 800c198:	d1ef      	bne.n	800c17a <quorem+0xe8>
 800c19a:	3c01      	subs	r4, #1
 800c19c:	e7ea      	b.n	800c174 <quorem+0xe2>
 800c19e:	2000      	movs	r0, #0
 800c1a0:	e7ee      	b.n	800c180 <quorem+0xee>
 800c1a2:	0000      	movs	r0, r0
 800c1a4:	0000      	movs	r0, r0
	...

0800c1a8 <_dtoa_r>:
 800c1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ac:	69c7      	ldr	r7, [r0, #28]
 800c1ae:	b097      	sub	sp, #92	@ 0x5c
 800c1b0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c1b4:	ec55 4b10 	vmov	r4, r5, d0
 800c1b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c1ba:	9107      	str	r1, [sp, #28]
 800c1bc:	4681      	mov	r9, r0
 800c1be:	920c      	str	r2, [sp, #48]	@ 0x30
 800c1c0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c1c2:	b97f      	cbnz	r7, 800c1e4 <_dtoa_r+0x3c>
 800c1c4:	2010      	movs	r0, #16
 800c1c6:	f7ff f841 	bl	800b24c <malloc>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	f8c9 001c 	str.w	r0, [r9, #28]
 800c1d0:	b920      	cbnz	r0, 800c1dc <_dtoa_r+0x34>
 800c1d2:	4ba9      	ldr	r3, [pc, #676]	@ (800c478 <_dtoa_r+0x2d0>)
 800c1d4:	21ef      	movs	r1, #239	@ 0xef
 800c1d6:	48a9      	ldr	r0, [pc, #676]	@ (800c47c <_dtoa_r+0x2d4>)
 800c1d8:	f001 fba6 	bl	800d928 <__assert_func>
 800c1dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c1e0:	6007      	str	r7, [r0, #0]
 800c1e2:	60c7      	str	r7, [r0, #12]
 800c1e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c1e8:	6819      	ldr	r1, [r3, #0]
 800c1ea:	b159      	cbz	r1, 800c204 <_dtoa_r+0x5c>
 800c1ec:	685a      	ldr	r2, [r3, #4]
 800c1ee:	604a      	str	r2, [r1, #4]
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	4093      	lsls	r3, r2
 800c1f4:	608b      	str	r3, [r1, #8]
 800c1f6:	4648      	mov	r0, r9
 800c1f8:	f000 fe30 	bl	800ce5c <_Bfree>
 800c1fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c200:	2200      	movs	r2, #0
 800c202:	601a      	str	r2, [r3, #0]
 800c204:	1e2b      	subs	r3, r5, #0
 800c206:	bfb9      	ittee	lt
 800c208:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c20c:	9305      	strlt	r3, [sp, #20]
 800c20e:	2300      	movge	r3, #0
 800c210:	6033      	strge	r3, [r6, #0]
 800c212:	9f05      	ldr	r7, [sp, #20]
 800c214:	4b9a      	ldr	r3, [pc, #616]	@ (800c480 <_dtoa_r+0x2d8>)
 800c216:	bfbc      	itt	lt
 800c218:	2201      	movlt	r2, #1
 800c21a:	6032      	strlt	r2, [r6, #0]
 800c21c:	43bb      	bics	r3, r7
 800c21e:	d112      	bne.n	800c246 <_dtoa_r+0x9e>
 800c220:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c222:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c226:	6013      	str	r3, [r2, #0]
 800c228:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c22c:	4323      	orrs	r3, r4
 800c22e:	f000 855a 	beq.w	800cce6 <_dtoa_r+0xb3e>
 800c232:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c234:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c494 <_dtoa_r+0x2ec>
 800c238:	2b00      	cmp	r3, #0
 800c23a:	f000 855c 	beq.w	800ccf6 <_dtoa_r+0xb4e>
 800c23e:	f10a 0303 	add.w	r3, sl, #3
 800c242:	f000 bd56 	b.w	800ccf2 <_dtoa_r+0xb4a>
 800c246:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c24a:	2200      	movs	r2, #0
 800c24c:	ec51 0b17 	vmov	r0, r1, d7
 800c250:	2300      	movs	r3, #0
 800c252:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c256:	f7f4 fc37 	bl	8000ac8 <__aeabi_dcmpeq>
 800c25a:	4680      	mov	r8, r0
 800c25c:	b158      	cbz	r0, 800c276 <_dtoa_r+0xce>
 800c25e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c260:	2301      	movs	r3, #1
 800c262:	6013      	str	r3, [r2, #0]
 800c264:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c266:	b113      	cbz	r3, 800c26e <_dtoa_r+0xc6>
 800c268:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c26a:	4b86      	ldr	r3, [pc, #536]	@ (800c484 <_dtoa_r+0x2dc>)
 800c26c:	6013      	str	r3, [r2, #0]
 800c26e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c498 <_dtoa_r+0x2f0>
 800c272:	f000 bd40 	b.w	800ccf6 <_dtoa_r+0xb4e>
 800c276:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c27a:	aa14      	add	r2, sp, #80	@ 0x50
 800c27c:	a915      	add	r1, sp, #84	@ 0x54
 800c27e:	4648      	mov	r0, r9
 800c280:	f001 f8ce 	bl	800d420 <__d2b>
 800c284:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c288:	9002      	str	r0, [sp, #8]
 800c28a:	2e00      	cmp	r6, #0
 800c28c:	d078      	beq.n	800c380 <_dtoa_r+0x1d8>
 800c28e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c290:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c298:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c29c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c2a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c2a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	4b76      	ldr	r3, [pc, #472]	@ (800c488 <_dtoa_r+0x2e0>)
 800c2ae:	f7f3 ffeb 	bl	8000288 <__aeabi_dsub>
 800c2b2:	a36b      	add	r3, pc, #428	@ (adr r3, 800c460 <_dtoa_r+0x2b8>)
 800c2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b8:	f7f4 f99e 	bl	80005f8 <__aeabi_dmul>
 800c2bc:	a36a      	add	r3, pc, #424	@ (adr r3, 800c468 <_dtoa_r+0x2c0>)
 800c2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c2:	f7f3 ffe3 	bl	800028c <__adddf3>
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	4630      	mov	r0, r6
 800c2ca:	460d      	mov	r5, r1
 800c2cc:	f7f4 f92a 	bl	8000524 <__aeabi_i2d>
 800c2d0:	a367      	add	r3, pc, #412	@ (adr r3, 800c470 <_dtoa_r+0x2c8>)
 800c2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d6:	f7f4 f98f 	bl	80005f8 <__aeabi_dmul>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	460b      	mov	r3, r1
 800c2de:	4620      	mov	r0, r4
 800c2e0:	4629      	mov	r1, r5
 800c2e2:	f7f3 ffd3 	bl	800028c <__adddf3>
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	460d      	mov	r5, r1
 800c2ea:	f7f4 fc35 	bl	8000b58 <__aeabi_d2iz>
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	4607      	mov	r7, r0
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	4629      	mov	r1, r5
 800c2f8:	f7f4 fbf0 	bl	8000adc <__aeabi_dcmplt>
 800c2fc:	b140      	cbz	r0, 800c310 <_dtoa_r+0x168>
 800c2fe:	4638      	mov	r0, r7
 800c300:	f7f4 f910 	bl	8000524 <__aeabi_i2d>
 800c304:	4622      	mov	r2, r4
 800c306:	462b      	mov	r3, r5
 800c308:	f7f4 fbde 	bl	8000ac8 <__aeabi_dcmpeq>
 800c30c:	b900      	cbnz	r0, 800c310 <_dtoa_r+0x168>
 800c30e:	3f01      	subs	r7, #1
 800c310:	2f16      	cmp	r7, #22
 800c312:	d852      	bhi.n	800c3ba <_dtoa_r+0x212>
 800c314:	4b5d      	ldr	r3, [pc, #372]	@ (800c48c <_dtoa_r+0x2e4>)
 800c316:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c322:	f7f4 fbdb 	bl	8000adc <__aeabi_dcmplt>
 800c326:	2800      	cmp	r0, #0
 800c328:	d049      	beq.n	800c3be <_dtoa_r+0x216>
 800c32a:	3f01      	subs	r7, #1
 800c32c:	2300      	movs	r3, #0
 800c32e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c330:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c332:	1b9b      	subs	r3, r3, r6
 800c334:	1e5a      	subs	r2, r3, #1
 800c336:	bf45      	ittet	mi
 800c338:	f1c3 0301 	rsbmi	r3, r3, #1
 800c33c:	9300      	strmi	r3, [sp, #0]
 800c33e:	2300      	movpl	r3, #0
 800c340:	2300      	movmi	r3, #0
 800c342:	9206      	str	r2, [sp, #24]
 800c344:	bf54      	ite	pl
 800c346:	9300      	strpl	r3, [sp, #0]
 800c348:	9306      	strmi	r3, [sp, #24]
 800c34a:	2f00      	cmp	r7, #0
 800c34c:	db39      	blt.n	800c3c2 <_dtoa_r+0x21a>
 800c34e:	9b06      	ldr	r3, [sp, #24]
 800c350:	970d      	str	r7, [sp, #52]	@ 0x34
 800c352:	443b      	add	r3, r7
 800c354:	9306      	str	r3, [sp, #24]
 800c356:	2300      	movs	r3, #0
 800c358:	9308      	str	r3, [sp, #32]
 800c35a:	9b07      	ldr	r3, [sp, #28]
 800c35c:	2b09      	cmp	r3, #9
 800c35e:	d863      	bhi.n	800c428 <_dtoa_r+0x280>
 800c360:	2b05      	cmp	r3, #5
 800c362:	bfc4      	itt	gt
 800c364:	3b04      	subgt	r3, #4
 800c366:	9307      	strgt	r3, [sp, #28]
 800c368:	9b07      	ldr	r3, [sp, #28]
 800c36a:	f1a3 0302 	sub.w	r3, r3, #2
 800c36e:	bfcc      	ite	gt
 800c370:	2400      	movgt	r4, #0
 800c372:	2401      	movle	r4, #1
 800c374:	2b03      	cmp	r3, #3
 800c376:	d863      	bhi.n	800c440 <_dtoa_r+0x298>
 800c378:	e8df f003 	tbb	[pc, r3]
 800c37c:	2b375452 	.word	0x2b375452
 800c380:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c384:	441e      	add	r6, r3
 800c386:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c38a:	2b20      	cmp	r3, #32
 800c38c:	bfc1      	itttt	gt
 800c38e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c392:	409f      	lslgt	r7, r3
 800c394:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c398:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c39c:	bfd6      	itet	le
 800c39e:	f1c3 0320 	rsble	r3, r3, #32
 800c3a2:	ea47 0003 	orrgt.w	r0, r7, r3
 800c3a6:	fa04 f003 	lslle.w	r0, r4, r3
 800c3aa:	f7f4 f8ab 	bl	8000504 <__aeabi_ui2d>
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c3b4:	3e01      	subs	r6, #1
 800c3b6:	9212      	str	r2, [sp, #72]	@ 0x48
 800c3b8:	e776      	b.n	800c2a8 <_dtoa_r+0x100>
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e7b7      	b.n	800c32e <_dtoa_r+0x186>
 800c3be:	9010      	str	r0, [sp, #64]	@ 0x40
 800c3c0:	e7b6      	b.n	800c330 <_dtoa_r+0x188>
 800c3c2:	9b00      	ldr	r3, [sp, #0]
 800c3c4:	1bdb      	subs	r3, r3, r7
 800c3c6:	9300      	str	r3, [sp, #0]
 800c3c8:	427b      	negs	r3, r7
 800c3ca:	9308      	str	r3, [sp, #32]
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	930d      	str	r3, [sp, #52]	@ 0x34
 800c3d0:	e7c3      	b.n	800c35a <_dtoa_r+0x1b2>
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c3d8:	eb07 0b03 	add.w	fp, r7, r3
 800c3dc:	f10b 0301 	add.w	r3, fp, #1
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	9303      	str	r3, [sp, #12]
 800c3e4:	bfb8      	it	lt
 800c3e6:	2301      	movlt	r3, #1
 800c3e8:	e006      	b.n	800c3f8 <_dtoa_r+0x250>
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	dd28      	ble.n	800c446 <_dtoa_r+0x29e>
 800c3f4:	469b      	mov	fp, r3
 800c3f6:	9303      	str	r3, [sp, #12]
 800c3f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	2204      	movs	r2, #4
 800c400:	f102 0514 	add.w	r5, r2, #20
 800c404:	429d      	cmp	r5, r3
 800c406:	d926      	bls.n	800c456 <_dtoa_r+0x2ae>
 800c408:	6041      	str	r1, [r0, #4]
 800c40a:	4648      	mov	r0, r9
 800c40c:	f000 fce6 	bl	800cddc <_Balloc>
 800c410:	4682      	mov	sl, r0
 800c412:	2800      	cmp	r0, #0
 800c414:	d142      	bne.n	800c49c <_dtoa_r+0x2f4>
 800c416:	4b1e      	ldr	r3, [pc, #120]	@ (800c490 <_dtoa_r+0x2e8>)
 800c418:	4602      	mov	r2, r0
 800c41a:	f240 11af 	movw	r1, #431	@ 0x1af
 800c41e:	e6da      	b.n	800c1d6 <_dtoa_r+0x2e>
 800c420:	2300      	movs	r3, #0
 800c422:	e7e3      	b.n	800c3ec <_dtoa_r+0x244>
 800c424:	2300      	movs	r3, #0
 800c426:	e7d5      	b.n	800c3d4 <_dtoa_r+0x22c>
 800c428:	2401      	movs	r4, #1
 800c42a:	2300      	movs	r3, #0
 800c42c:	9307      	str	r3, [sp, #28]
 800c42e:	9409      	str	r4, [sp, #36]	@ 0x24
 800c430:	f04f 3bff 	mov.w	fp, #4294967295
 800c434:	2200      	movs	r2, #0
 800c436:	f8cd b00c 	str.w	fp, [sp, #12]
 800c43a:	2312      	movs	r3, #18
 800c43c:	920c      	str	r2, [sp, #48]	@ 0x30
 800c43e:	e7db      	b.n	800c3f8 <_dtoa_r+0x250>
 800c440:	2301      	movs	r3, #1
 800c442:	9309      	str	r3, [sp, #36]	@ 0x24
 800c444:	e7f4      	b.n	800c430 <_dtoa_r+0x288>
 800c446:	f04f 0b01 	mov.w	fp, #1
 800c44a:	f8cd b00c 	str.w	fp, [sp, #12]
 800c44e:	465b      	mov	r3, fp
 800c450:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c454:	e7d0      	b.n	800c3f8 <_dtoa_r+0x250>
 800c456:	3101      	adds	r1, #1
 800c458:	0052      	lsls	r2, r2, #1
 800c45a:	e7d1      	b.n	800c400 <_dtoa_r+0x258>
 800c45c:	f3af 8000 	nop.w
 800c460:	636f4361 	.word	0x636f4361
 800c464:	3fd287a7 	.word	0x3fd287a7
 800c468:	8b60c8b3 	.word	0x8b60c8b3
 800c46c:	3fc68a28 	.word	0x3fc68a28
 800c470:	509f79fb 	.word	0x509f79fb
 800c474:	3fd34413 	.word	0x3fd34413
 800c478:	0800e1f5 	.word	0x0800e1f5
 800c47c:	0800e20c 	.word	0x0800e20c
 800c480:	7ff00000 	.word	0x7ff00000
 800c484:	0800e1c5 	.word	0x0800e1c5
 800c488:	3ff80000 	.word	0x3ff80000
 800c48c:	0800e360 	.word	0x0800e360
 800c490:	0800e264 	.word	0x0800e264
 800c494:	0800e1f1 	.word	0x0800e1f1
 800c498:	0800e1c4 	.word	0x0800e1c4
 800c49c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c4a0:	6018      	str	r0, [r3, #0]
 800c4a2:	9b03      	ldr	r3, [sp, #12]
 800c4a4:	2b0e      	cmp	r3, #14
 800c4a6:	f200 80a1 	bhi.w	800c5ec <_dtoa_r+0x444>
 800c4aa:	2c00      	cmp	r4, #0
 800c4ac:	f000 809e 	beq.w	800c5ec <_dtoa_r+0x444>
 800c4b0:	2f00      	cmp	r7, #0
 800c4b2:	dd33      	ble.n	800c51c <_dtoa_r+0x374>
 800c4b4:	4b9c      	ldr	r3, [pc, #624]	@ (800c728 <_dtoa_r+0x580>)
 800c4b6:	f007 020f 	and.w	r2, r7, #15
 800c4ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4be:	ed93 7b00 	vldr	d7, [r3]
 800c4c2:	05f8      	lsls	r0, r7, #23
 800c4c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c4c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c4cc:	d516      	bpl.n	800c4fc <_dtoa_r+0x354>
 800c4ce:	4b97      	ldr	r3, [pc, #604]	@ (800c72c <_dtoa_r+0x584>)
 800c4d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c4d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c4d8:	f7f4 f9b8 	bl	800084c <__aeabi_ddiv>
 800c4dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4e0:	f004 040f 	and.w	r4, r4, #15
 800c4e4:	2603      	movs	r6, #3
 800c4e6:	4d91      	ldr	r5, [pc, #580]	@ (800c72c <_dtoa_r+0x584>)
 800c4e8:	b954      	cbnz	r4, 800c500 <_dtoa_r+0x358>
 800c4ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c4ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4f2:	f7f4 f9ab 	bl	800084c <__aeabi_ddiv>
 800c4f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4fa:	e028      	b.n	800c54e <_dtoa_r+0x3a6>
 800c4fc:	2602      	movs	r6, #2
 800c4fe:	e7f2      	b.n	800c4e6 <_dtoa_r+0x33e>
 800c500:	07e1      	lsls	r1, r4, #31
 800c502:	d508      	bpl.n	800c516 <_dtoa_r+0x36e>
 800c504:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c508:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c50c:	f7f4 f874 	bl	80005f8 <__aeabi_dmul>
 800c510:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c514:	3601      	adds	r6, #1
 800c516:	1064      	asrs	r4, r4, #1
 800c518:	3508      	adds	r5, #8
 800c51a:	e7e5      	b.n	800c4e8 <_dtoa_r+0x340>
 800c51c:	f000 80af 	beq.w	800c67e <_dtoa_r+0x4d6>
 800c520:	427c      	negs	r4, r7
 800c522:	4b81      	ldr	r3, [pc, #516]	@ (800c728 <_dtoa_r+0x580>)
 800c524:	4d81      	ldr	r5, [pc, #516]	@ (800c72c <_dtoa_r+0x584>)
 800c526:	f004 020f 	and.w	r2, r4, #15
 800c52a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c532:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c536:	f7f4 f85f 	bl	80005f8 <__aeabi_dmul>
 800c53a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c53e:	1124      	asrs	r4, r4, #4
 800c540:	2300      	movs	r3, #0
 800c542:	2602      	movs	r6, #2
 800c544:	2c00      	cmp	r4, #0
 800c546:	f040 808f 	bne.w	800c668 <_dtoa_r+0x4c0>
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d1d3      	bne.n	800c4f6 <_dtoa_r+0x34e>
 800c54e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c550:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c554:	2b00      	cmp	r3, #0
 800c556:	f000 8094 	beq.w	800c682 <_dtoa_r+0x4da>
 800c55a:	4b75      	ldr	r3, [pc, #468]	@ (800c730 <_dtoa_r+0x588>)
 800c55c:	2200      	movs	r2, #0
 800c55e:	4620      	mov	r0, r4
 800c560:	4629      	mov	r1, r5
 800c562:	f7f4 fabb 	bl	8000adc <__aeabi_dcmplt>
 800c566:	2800      	cmp	r0, #0
 800c568:	f000 808b 	beq.w	800c682 <_dtoa_r+0x4da>
 800c56c:	9b03      	ldr	r3, [sp, #12]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	f000 8087 	beq.w	800c682 <_dtoa_r+0x4da>
 800c574:	f1bb 0f00 	cmp.w	fp, #0
 800c578:	dd34      	ble.n	800c5e4 <_dtoa_r+0x43c>
 800c57a:	4620      	mov	r0, r4
 800c57c:	4b6d      	ldr	r3, [pc, #436]	@ (800c734 <_dtoa_r+0x58c>)
 800c57e:	2200      	movs	r2, #0
 800c580:	4629      	mov	r1, r5
 800c582:	f7f4 f839 	bl	80005f8 <__aeabi_dmul>
 800c586:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c58a:	f107 38ff 	add.w	r8, r7, #4294967295
 800c58e:	3601      	adds	r6, #1
 800c590:	465c      	mov	r4, fp
 800c592:	4630      	mov	r0, r6
 800c594:	f7f3 ffc6 	bl	8000524 <__aeabi_i2d>
 800c598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c59c:	f7f4 f82c 	bl	80005f8 <__aeabi_dmul>
 800c5a0:	4b65      	ldr	r3, [pc, #404]	@ (800c738 <_dtoa_r+0x590>)
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f7f3 fe72 	bl	800028c <__adddf3>
 800c5a8:	4605      	mov	r5, r0
 800c5aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c5ae:	2c00      	cmp	r4, #0
 800c5b0:	d16a      	bne.n	800c688 <_dtoa_r+0x4e0>
 800c5b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5b6:	4b61      	ldr	r3, [pc, #388]	@ (800c73c <_dtoa_r+0x594>)
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	f7f3 fe65 	bl	8000288 <__aeabi_dsub>
 800c5be:	4602      	mov	r2, r0
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c5c6:	462a      	mov	r2, r5
 800c5c8:	4633      	mov	r3, r6
 800c5ca:	f7f4 faa5 	bl	8000b18 <__aeabi_dcmpgt>
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	f040 8298 	bne.w	800cb04 <_dtoa_r+0x95c>
 800c5d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5d8:	462a      	mov	r2, r5
 800c5da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c5de:	f7f4 fa7d 	bl	8000adc <__aeabi_dcmplt>
 800c5e2:	bb38      	cbnz	r0, 800c634 <_dtoa_r+0x48c>
 800c5e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c5e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c5ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	f2c0 8157 	blt.w	800c8a2 <_dtoa_r+0x6fa>
 800c5f4:	2f0e      	cmp	r7, #14
 800c5f6:	f300 8154 	bgt.w	800c8a2 <_dtoa_r+0x6fa>
 800c5fa:	4b4b      	ldr	r3, [pc, #300]	@ (800c728 <_dtoa_r+0x580>)
 800c5fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c600:	ed93 7b00 	vldr	d7, [r3]
 800c604:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c606:	2b00      	cmp	r3, #0
 800c608:	ed8d 7b00 	vstr	d7, [sp]
 800c60c:	f280 80e5 	bge.w	800c7da <_dtoa_r+0x632>
 800c610:	9b03      	ldr	r3, [sp, #12]
 800c612:	2b00      	cmp	r3, #0
 800c614:	f300 80e1 	bgt.w	800c7da <_dtoa_r+0x632>
 800c618:	d10c      	bne.n	800c634 <_dtoa_r+0x48c>
 800c61a:	4b48      	ldr	r3, [pc, #288]	@ (800c73c <_dtoa_r+0x594>)
 800c61c:	2200      	movs	r2, #0
 800c61e:	ec51 0b17 	vmov	r0, r1, d7
 800c622:	f7f3 ffe9 	bl	80005f8 <__aeabi_dmul>
 800c626:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c62a:	f7f4 fa6b 	bl	8000b04 <__aeabi_dcmpge>
 800c62e:	2800      	cmp	r0, #0
 800c630:	f000 8266 	beq.w	800cb00 <_dtoa_r+0x958>
 800c634:	2400      	movs	r4, #0
 800c636:	4625      	mov	r5, r4
 800c638:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c63a:	4656      	mov	r6, sl
 800c63c:	ea6f 0803 	mvn.w	r8, r3
 800c640:	2700      	movs	r7, #0
 800c642:	4621      	mov	r1, r4
 800c644:	4648      	mov	r0, r9
 800c646:	f000 fc09 	bl	800ce5c <_Bfree>
 800c64a:	2d00      	cmp	r5, #0
 800c64c:	f000 80bd 	beq.w	800c7ca <_dtoa_r+0x622>
 800c650:	b12f      	cbz	r7, 800c65e <_dtoa_r+0x4b6>
 800c652:	42af      	cmp	r7, r5
 800c654:	d003      	beq.n	800c65e <_dtoa_r+0x4b6>
 800c656:	4639      	mov	r1, r7
 800c658:	4648      	mov	r0, r9
 800c65a:	f000 fbff 	bl	800ce5c <_Bfree>
 800c65e:	4629      	mov	r1, r5
 800c660:	4648      	mov	r0, r9
 800c662:	f000 fbfb 	bl	800ce5c <_Bfree>
 800c666:	e0b0      	b.n	800c7ca <_dtoa_r+0x622>
 800c668:	07e2      	lsls	r2, r4, #31
 800c66a:	d505      	bpl.n	800c678 <_dtoa_r+0x4d0>
 800c66c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c670:	f7f3 ffc2 	bl	80005f8 <__aeabi_dmul>
 800c674:	3601      	adds	r6, #1
 800c676:	2301      	movs	r3, #1
 800c678:	1064      	asrs	r4, r4, #1
 800c67a:	3508      	adds	r5, #8
 800c67c:	e762      	b.n	800c544 <_dtoa_r+0x39c>
 800c67e:	2602      	movs	r6, #2
 800c680:	e765      	b.n	800c54e <_dtoa_r+0x3a6>
 800c682:	9c03      	ldr	r4, [sp, #12]
 800c684:	46b8      	mov	r8, r7
 800c686:	e784      	b.n	800c592 <_dtoa_r+0x3ea>
 800c688:	4b27      	ldr	r3, [pc, #156]	@ (800c728 <_dtoa_r+0x580>)
 800c68a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c68c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c690:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c694:	4454      	add	r4, sl
 800c696:	2900      	cmp	r1, #0
 800c698:	d054      	beq.n	800c744 <_dtoa_r+0x59c>
 800c69a:	4929      	ldr	r1, [pc, #164]	@ (800c740 <_dtoa_r+0x598>)
 800c69c:	2000      	movs	r0, #0
 800c69e:	f7f4 f8d5 	bl	800084c <__aeabi_ddiv>
 800c6a2:	4633      	mov	r3, r6
 800c6a4:	462a      	mov	r2, r5
 800c6a6:	f7f3 fdef 	bl	8000288 <__aeabi_dsub>
 800c6aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c6ae:	4656      	mov	r6, sl
 800c6b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6b4:	f7f4 fa50 	bl	8000b58 <__aeabi_d2iz>
 800c6b8:	4605      	mov	r5, r0
 800c6ba:	f7f3 ff33 	bl	8000524 <__aeabi_i2d>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6c6:	f7f3 fddf 	bl	8000288 <__aeabi_dsub>
 800c6ca:	3530      	adds	r5, #48	@ 0x30
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c6d4:	f806 5b01 	strb.w	r5, [r6], #1
 800c6d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c6dc:	f7f4 f9fe 	bl	8000adc <__aeabi_dcmplt>
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	d172      	bne.n	800c7ca <_dtoa_r+0x622>
 800c6e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6e8:	4911      	ldr	r1, [pc, #68]	@ (800c730 <_dtoa_r+0x588>)
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	f7f3 fdcc 	bl	8000288 <__aeabi_dsub>
 800c6f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c6f4:	f7f4 f9f2 	bl	8000adc <__aeabi_dcmplt>
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	f040 80b4 	bne.w	800c866 <_dtoa_r+0x6be>
 800c6fe:	42a6      	cmp	r6, r4
 800c700:	f43f af70 	beq.w	800c5e4 <_dtoa_r+0x43c>
 800c704:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c708:	4b0a      	ldr	r3, [pc, #40]	@ (800c734 <_dtoa_r+0x58c>)
 800c70a:	2200      	movs	r2, #0
 800c70c:	f7f3 ff74 	bl	80005f8 <__aeabi_dmul>
 800c710:	4b08      	ldr	r3, [pc, #32]	@ (800c734 <_dtoa_r+0x58c>)
 800c712:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c716:	2200      	movs	r2, #0
 800c718:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c71c:	f7f3 ff6c 	bl	80005f8 <__aeabi_dmul>
 800c720:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c724:	e7c4      	b.n	800c6b0 <_dtoa_r+0x508>
 800c726:	bf00      	nop
 800c728:	0800e360 	.word	0x0800e360
 800c72c:	0800e338 	.word	0x0800e338
 800c730:	3ff00000 	.word	0x3ff00000
 800c734:	40240000 	.word	0x40240000
 800c738:	401c0000 	.word	0x401c0000
 800c73c:	40140000 	.word	0x40140000
 800c740:	3fe00000 	.word	0x3fe00000
 800c744:	4631      	mov	r1, r6
 800c746:	4628      	mov	r0, r5
 800c748:	f7f3 ff56 	bl	80005f8 <__aeabi_dmul>
 800c74c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c750:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c752:	4656      	mov	r6, sl
 800c754:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c758:	f7f4 f9fe 	bl	8000b58 <__aeabi_d2iz>
 800c75c:	4605      	mov	r5, r0
 800c75e:	f7f3 fee1 	bl	8000524 <__aeabi_i2d>
 800c762:	4602      	mov	r2, r0
 800c764:	460b      	mov	r3, r1
 800c766:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c76a:	f7f3 fd8d 	bl	8000288 <__aeabi_dsub>
 800c76e:	3530      	adds	r5, #48	@ 0x30
 800c770:	f806 5b01 	strb.w	r5, [r6], #1
 800c774:	4602      	mov	r2, r0
 800c776:	460b      	mov	r3, r1
 800c778:	42a6      	cmp	r6, r4
 800c77a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c77e:	f04f 0200 	mov.w	r2, #0
 800c782:	d124      	bne.n	800c7ce <_dtoa_r+0x626>
 800c784:	4baf      	ldr	r3, [pc, #700]	@ (800ca44 <_dtoa_r+0x89c>)
 800c786:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c78a:	f7f3 fd7f 	bl	800028c <__adddf3>
 800c78e:	4602      	mov	r2, r0
 800c790:	460b      	mov	r3, r1
 800c792:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c796:	f7f4 f9bf 	bl	8000b18 <__aeabi_dcmpgt>
 800c79a:	2800      	cmp	r0, #0
 800c79c:	d163      	bne.n	800c866 <_dtoa_r+0x6be>
 800c79e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c7a2:	49a8      	ldr	r1, [pc, #672]	@ (800ca44 <_dtoa_r+0x89c>)
 800c7a4:	2000      	movs	r0, #0
 800c7a6:	f7f3 fd6f 	bl	8000288 <__aeabi_dsub>
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7b2:	f7f4 f993 	bl	8000adc <__aeabi_dcmplt>
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	f43f af14 	beq.w	800c5e4 <_dtoa_r+0x43c>
 800c7bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c7be:	1e73      	subs	r3, r6, #1
 800c7c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c7c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c7c6:	2b30      	cmp	r3, #48	@ 0x30
 800c7c8:	d0f8      	beq.n	800c7bc <_dtoa_r+0x614>
 800c7ca:	4647      	mov	r7, r8
 800c7cc:	e03b      	b.n	800c846 <_dtoa_r+0x69e>
 800c7ce:	4b9e      	ldr	r3, [pc, #632]	@ (800ca48 <_dtoa_r+0x8a0>)
 800c7d0:	f7f3 ff12 	bl	80005f8 <__aeabi_dmul>
 800c7d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c7d8:	e7bc      	b.n	800c754 <_dtoa_r+0x5ac>
 800c7da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c7de:	4656      	mov	r6, sl
 800c7e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	4629      	mov	r1, r5
 800c7e8:	f7f4 f830 	bl	800084c <__aeabi_ddiv>
 800c7ec:	f7f4 f9b4 	bl	8000b58 <__aeabi_d2iz>
 800c7f0:	4680      	mov	r8, r0
 800c7f2:	f7f3 fe97 	bl	8000524 <__aeabi_i2d>
 800c7f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7fa:	f7f3 fefd 	bl	80005f8 <__aeabi_dmul>
 800c7fe:	4602      	mov	r2, r0
 800c800:	460b      	mov	r3, r1
 800c802:	4620      	mov	r0, r4
 800c804:	4629      	mov	r1, r5
 800c806:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c80a:	f7f3 fd3d 	bl	8000288 <__aeabi_dsub>
 800c80e:	f806 4b01 	strb.w	r4, [r6], #1
 800c812:	9d03      	ldr	r5, [sp, #12]
 800c814:	eba6 040a 	sub.w	r4, r6, sl
 800c818:	42a5      	cmp	r5, r4
 800c81a:	4602      	mov	r2, r0
 800c81c:	460b      	mov	r3, r1
 800c81e:	d133      	bne.n	800c888 <_dtoa_r+0x6e0>
 800c820:	f7f3 fd34 	bl	800028c <__adddf3>
 800c824:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c828:	4604      	mov	r4, r0
 800c82a:	460d      	mov	r5, r1
 800c82c:	f7f4 f974 	bl	8000b18 <__aeabi_dcmpgt>
 800c830:	b9c0      	cbnz	r0, 800c864 <_dtoa_r+0x6bc>
 800c832:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c836:	4620      	mov	r0, r4
 800c838:	4629      	mov	r1, r5
 800c83a:	f7f4 f945 	bl	8000ac8 <__aeabi_dcmpeq>
 800c83e:	b110      	cbz	r0, 800c846 <_dtoa_r+0x69e>
 800c840:	f018 0f01 	tst.w	r8, #1
 800c844:	d10e      	bne.n	800c864 <_dtoa_r+0x6bc>
 800c846:	9902      	ldr	r1, [sp, #8]
 800c848:	4648      	mov	r0, r9
 800c84a:	f000 fb07 	bl	800ce5c <_Bfree>
 800c84e:	2300      	movs	r3, #0
 800c850:	7033      	strb	r3, [r6, #0]
 800c852:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c854:	3701      	adds	r7, #1
 800c856:	601f      	str	r7, [r3, #0]
 800c858:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	f000 824b 	beq.w	800ccf6 <_dtoa_r+0xb4e>
 800c860:	601e      	str	r6, [r3, #0]
 800c862:	e248      	b.n	800ccf6 <_dtoa_r+0xb4e>
 800c864:	46b8      	mov	r8, r7
 800c866:	4633      	mov	r3, r6
 800c868:	461e      	mov	r6, r3
 800c86a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c86e:	2a39      	cmp	r2, #57	@ 0x39
 800c870:	d106      	bne.n	800c880 <_dtoa_r+0x6d8>
 800c872:	459a      	cmp	sl, r3
 800c874:	d1f8      	bne.n	800c868 <_dtoa_r+0x6c0>
 800c876:	2230      	movs	r2, #48	@ 0x30
 800c878:	f108 0801 	add.w	r8, r8, #1
 800c87c:	f88a 2000 	strb.w	r2, [sl]
 800c880:	781a      	ldrb	r2, [r3, #0]
 800c882:	3201      	adds	r2, #1
 800c884:	701a      	strb	r2, [r3, #0]
 800c886:	e7a0      	b.n	800c7ca <_dtoa_r+0x622>
 800c888:	4b6f      	ldr	r3, [pc, #444]	@ (800ca48 <_dtoa_r+0x8a0>)
 800c88a:	2200      	movs	r2, #0
 800c88c:	f7f3 feb4 	bl	80005f8 <__aeabi_dmul>
 800c890:	2200      	movs	r2, #0
 800c892:	2300      	movs	r3, #0
 800c894:	4604      	mov	r4, r0
 800c896:	460d      	mov	r5, r1
 800c898:	f7f4 f916 	bl	8000ac8 <__aeabi_dcmpeq>
 800c89c:	2800      	cmp	r0, #0
 800c89e:	d09f      	beq.n	800c7e0 <_dtoa_r+0x638>
 800c8a0:	e7d1      	b.n	800c846 <_dtoa_r+0x69e>
 800c8a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8a4:	2a00      	cmp	r2, #0
 800c8a6:	f000 80ea 	beq.w	800ca7e <_dtoa_r+0x8d6>
 800c8aa:	9a07      	ldr	r2, [sp, #28]
 800c8ac:	2a01      	cmp	r2, #1
 800c8ae:	f300 80cd 	bgt.w	800ca4c <_dtoa_r+0x8a4>
 800c8b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c8b4:	2a00      	cmp	r2, #0
 800c8b6:	f000 80c1 	beq.w	800ca3c <_dtoa_r+0x894>
 800c8ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c8be:	9c08      	ldr	r4, [sp, #32]
 800c8c0:	9e00      	ldr	r6, [sp, #0]
 800c8c2:	9a00      	ldr	r2, [sp, #0]
 800c8c4:	441a      	add	r2, r3
 800c8c6:	9200      	str	r2, [sp, #0]
 800c8c8:	9a06      	ldr	r2, [sp, #24]
 800c8ca:	2101      	movs	r1, #1
 800c8cc:	441a      	add	r2, r3
 800c8ce:	4648      	mov	r0, r9
 800c8d0:	9206      	str	r2, [sp, #24]
 800c8d2:	f000 fb77 	bl	800cfc4 <__i2b>
 800c8d6:	4605      	mov	r5, r0
 800c8d8:	b166      	cbz	r6, 800c8f4 <_dtoa_r+0x74c>
 800c8da:	9b06      	ldr	r3, [sp, #24]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	dd09      	ble.n	800c8f4 <_dtoa_r+0x74c>
 800c8e0:	42b3      	cmp	r3, r6
 800c8e2:	9a00      	ldr	r2, [sp, #0]
 800c8e4:	bfa8      	it	ge
 800c8e6:	4633      	movge	r3, r6
 800c8e8:	1ad2      	subs	r2, r2, r3
 800c8ea:	9200      	str	r2, [sp, #0]
 800c8ec:	9a06      	ldr	r2, [sp, #24]
 800c8ee:	1af6      	subs	r6, r6, r3
 800c8f0:	1ad3      	subs	r3, r2, r3
 800c8f2:	9306      	str	r3, [sp, #24]
 800c8f4:	9b08      	ldr	r3, [sp, #32]
 800c8f6:	b30b      	cbz	r3, 800c93c <_dtoa_r+0x794>
 800c8f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	f000 80c6 	beq.w	800ca8c <_dtoa_r+0x8e4>
 800c900:	2c00      	cmp	r4, #0
 800c902:	f000 80c0 	beq.w	800ca86 <_dtoa_r+0x8de>
 800c906:	4629      	mov	r1, r5
 800c908:	4622      	mov	r2, r4
 800c90a:	4648      	mov	r0, r9
 800c90c:	f000 fc12 	bl	800d134 <__pow5mult>
 800c910:	9a02      	ldr	r2, [sp, #8]
 800c912:	4601      	mov	r1, r0
 800c914:	4605      	mov	r5, r0
 800c916:	4648      	mov	r0, r9
 800c918:	f000 fb6a 	bl	800cff0 <__multiply>
 800c91c:	9902      	ldr	r1, [sp, #8]
 800c91e:	4680      	mov	r8, r0
 800c920:	4648      	mov	r0, r9
 800c922:	f000 fa9b 	bl	800ce5c <_Bfree>
 800c926:	9b08      	ldr	r3, [sp, #32]
 800c928:	1b1b      	subs	r3, r3, r4
 800c92a:	9308      	str	r3, [sp, #32]
 800c92c:	f000 80b1 	beq.w	800ca92 <_dtoa_r+0x8ea>
 800c930:	9a08      	ldr	r2, [sp, #32]
 800c932:	4641      	mov	r1, r8
 800c934:	4648      	mov	r0, r9
 800c936:	f000 fbfd 	bl	800d134 <__pow5mult>
 800c93a:	9002      	str	r0, [sp, #8]
 800c93c:	2101      	movs	r1, #1
 800c93e:	4648      	mov	r0, r9
 800c940:	f000 fb40 	bl	800cfc4 <__i2b>
 800c944:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c946:	4604      	mov	r4, r0
 800c948:	2b00      	cmp	r3, #0
 800c94a:	f000 81d8 	beq.w	800ccfe <_dtoa_r+0xb56>
 800c94e:	461a      	mov	r2, r3
 800c950:	4601      	mov	r1, r0
 800c952:	4648      	mov	r0, r9
 800c954:	f000 fbee 	bl	800d134 <__pow5mult>
 800c958:	9b07      	ldr	r3, [sp, #28]
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	4604      	mov	r4, r0
 800c95e:	f300 809f 	bgt.w	800caa0 <_dtoa_r+0x8f8>
 800c962:	9b04      	ldr	r3, [sp, #16]
 800c964:	2b00      	cmp	r3, #0
 800c966:	f040 8097 	bne.w	800ca98 <_dtoa_r+0x8f0>
 800c96a:	9b05      	ldr	r3, [sp, #20]
 800c96c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c970:	2b00      	cmp	r3, #0
 800c972:	f040 8093 	bne.w	800ca9c <_dtoa_r+0x8f4>
 800c976:	9b05      	ldr	r3, [sp, #20]
 800c978:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c97c:	0d1b      	lsrs	r3, r3, #20
 800c97e:	051b      	lsls	r3, r3, #20
 800c980:	b133      	cbz	r3, 800c990 <_dtoa_r+0x7e8>
 800c982:	9b00      	ldr	r3, [sp, #0]
 800c984:	3301      	adds	r3, #1
 800c986:	9300      	str	r3, [sp, #0]
 800c988:	9b06      	ldr	r3, [sp, #24]
 800c98a:	3301      	adds	r3, #1
 800c98c:	9306      	str	r3, [sp, #24]
 800c98e:	2301      	movs	r3, #1
 800c990:	9308      	str	r3, [sp, #32]
 800c992:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c994:	2b00      	cmp	r3, #0
 800c996:	f000 81b8 	beq.w	800cd0a <_dtoa_r+0xb62>
 800c99a:	6923      	ldr	r3, [r4, #16]
 800c99c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c9a0:	6918      	ldr	r0, [r3, #16]
 800c9a2:	f000 fac3 	bl	800cf2c <__hi0bits>
 800c9a6:	f1c0 0020 	rsb	r0, r0, #32
 800c9aa:	9b06      	ldr	r3, [sp, #24]
 800c9ac:	4418      	add	r0, r3
 800c9ae:	f010 001f 	ands.w	r0, r0, #31
 800c9b2:	f000 8082 	beq.w	800caba <_dtoa_r+0x912>
 800c9b6:	f1c0 0320 	rsb	r3, r0, #32
 800c9ba:	2b04      	cmp	r3, #4
 800c9bc:	dd73      	ble.n	800caa6 <_dtoa_r+0x8fe>
 800c9be:	9b00      	ldr	r3, [sp, #0]
 800c9c0:	f1c0 001c 	rsb	r0, r0, #28
 800c9c4:	4403      	add	r3, r0
 800c9c6:	9300      	str	r3, [sp, #0]
 800c9c8:	9b06      	ldr	r3, [sp, #24]
 800c9ca:	4403      	add	r3, r0
 800c9cc:	4406      	add	r6, r0
 800c9ce:	9306      	str	r3, [sp, #24]
 800c9d0:	9b00      	ldr	r3, [sp, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	dd05      	ble.n	800c9e2 <_dtoa_r+0x83a>
 800c9d6:	9902      	ldr	r1, [sp, #8]
 800c9d8:	461a      	mov	r2, r3
 800c9da:	4648      	mov	r0, r9
 800c9dc:	f000 fc04 	bl	800d1e8 <__lshift>
 800c9e0:	9002      	str	r0, [sp, #8]
 800c9e2:	9b06      	ldr	r3, [sp, #24]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	dd05      	ble.n	800c9f4 <_dtoa_r+0x84c>
 800c9e8:	4621      	mov	r1, r4
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	4648      	mov	r0, r9
 800c9ee:	f000 fbfb 	bl	800d1e8 <__lshift>
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d061      	beq.n	800cabe <_dtoa_r+0x916>
 800c9fa:	9802      	ldr	r0, [sp, #8]
 800c9fc:	4621      	mov	r1, r4
 800c9fe:	f000 fc5f 	bl	800d2c0 <__mcmp>
 800ca02:	2800      	cmp	r0, #0
 800ca04:	da5b      	bge.n	800cabe <_dtoa_r+0x916>
 800ca06:	2300      	movs	r3, #0
 800ca08:	9902      	ldr	r1, [sp, #8]
 800ca0a:	220a      	movs	r2, #10
 800ca0c:	4648      	mov	r0, r9
 800ca0e:	f000 fa47 	bl	800cea0 <__multadd>
 800ca12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca14:	9002      	str	r0, [sp, #8]
 800ca16:	f107 38ff 	add.w	r8, r7, #4294967295
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	f000 8177 	beq.w	800cd0e <_dtoa_r+0xb66>
 800ca20:	4629      	mov	r1, r5
 800ca22:	2300      	movs	r3, #0
 800ca24:	220a      	movs	r2, #10
 800ca26:	4648      	mov	r0, r9
 800ca28:	f000 fa3a 	bl	800cea0 <__multadd>
 800ca2c:	f1bb 0f00 	cmp.w	fp, #0
 800ca30:	4605      	mov	r5, r0
 800ca32:	dc6f      	bgt.n	800cb14 <_dtoa_r+0x96c>
 800ca34:	9b07      	ldr	r3, [sp, #28]
 800ca36:	2b02      	cmp	r3, #2
 800ca38:	dc49      	bgt.n	800cace <_dtoa_r+0x926>
 800ca3a:	e06b      	b.n	800cb14 <_dtoa_r+0x96c>
 800ca3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ca3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ca42:	e73c      	b.n	800c8be <_dtoa_r+0x716>
 800ca44:	3fe00000 	.word	0x3fe00000
 800ca48:	40240000 	.word	0x40240000
 800ca4c:	9b03      	ldr	r3, [sp, #12]
 800ca4e:	1e5c      	subs	r4, r3, #1
 800ca50:	9b08      	ldr	r3, [sp, #32]
 800ca52:	42a3      	cmp	r3, r4
 800ca54:	db09      	blt.n	800ca6a <_dtoa_r+0x8c2>
 800ca56:	1b1c      	subs	r4, r3, r4
 800ca58:	9b03      	ldr	r3, [sp, #12]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	f6bf af30 	bge.w	800c8c0 <_dtoa_r+0x718>
 800ca60:	9b00      	ldr	r3, [sp, #0]
 800ca62:	9a03      	ldr	r2, [sp, #12]
 800ca64:	1a9e      	subs	r6, r3, r2
 800ca66:	2300      	movs	r3, #0
 800ca68:	e72b      	b.n	800c8c2 <_dtoa_r+0x71a>
 800ca6a:	9b08      	ldr	r3, [sp, #32]
 800ca6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ca6e:	9408      	str	r4, [sp, #32]
 800ca70:	1ae3      	subs	r3, r4, r3
 800ca72:	441a      	add	r2, r3
 800ca74:	9e00      	ldr	r6, [sp, #0]
 800ca76:	9b03      	ldr	r3, [sp, #12]
 800ca78:	920d      	str	r2, [sp, #52]	@ 0x34
 800ca7a:	2400      	movs	r4, #0
 800ca7c:	e721      	b.n	800c8c2 <_dtoa_r+0x71a>
 800ca7e:	9c08      	ldr	r4, [sp, #32]
 800ca80:	9e00      	ldr	r6, [sp, #0]
 800ca82:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ca84:	e728      	b.n	800c8d8 <_dtoa_r+0x730>
 800ca86:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ca8a:	e751      	b.n	800c930 <_dtoa_r+0x788>
 800ca8c:	9a08      	ldr	r2, [sp, #32]
 800ca8e:	9902      	ldr	r1, [sp, #8]
 800ca90:	e750      	b.n	800c934 <_dtoa_r+0x78c>
 800ca92:	f8cd 8008 	str.w	r8, [sp, #8]
 800ca96:	e751      	b.n	800c93c <_dtoa_r+0x794>
 800ca98:	2300      	movs	r3, #0
 800ca9a:	e779      	b.n	800c990 <_dtoa_r+0x7e8>
 800ca9c:	9b04      	ldr	r3, [sp, #16]
 800ca9e:	e777      	b.n	800c990 <_dtoa_r+0x7e8>
 800caa0:	2300      	movs	r3, #0
 800caa2:	9308      	str	r3, [sp, #32]
 800caa4:	e779      	b.n	800c99a <_dtoa_r+0x7f2>
 800caa6:	d093      	beq.n	800c9d0 <_dtoa_r+0x828>
 800caa8:	9a00      	ldr	r2, [sp, #0]
 800caaa:	331c      	adds	r3, #28
 800caac:	441a      	add	r2, r3
 800caae:	9200      	str	r2, [sp, #0]
 800cab0:	9a06      	ldr	r2, [sp, #24]
 800cab2:	441a      	add	r2, r3
 800cab4:	441e      	add	r6, r3
 800cab6:	9206      	str	r2, [sp, #24]
 800cab8:	e78a      	b.n	800c9d0 <_dtoa_r+0x828>
 800caba:	4603      	mov	r3, r0
 800cabc:	e7f4      	b.n	800caa8 <_dtoa_r+0x900>
 800cabe:	9b03      	ldr	r3, [sp, #12]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	46b8      	mov	r8, r7
 800cac4:	dc20      	bgt.n	800cb08 <_dtoa_r+0x960>
 800cac6:	469b      	mov	fp, r3
 800cac8:	9b07      	ldr	r3, [sp, #28]
 800caca:	2b02      	cmp	r3, #2
 800cacc:	dd1e      	ble.n	800cb0c <_dtoa_r+0x964>
 800cace:	f1bb 0f00 	cmp.w	fp, #0
 800cad2:	f47f adb1 	bne.w	800c638 <_dtoa_r+0x490>
 800cad6:	4621      	mov	r1, r4
 800cad8:	465b      	mov	r3, fp
 800cada:	2205      	movs	r2, #5
 800cadc:	4648      	mov	r0, r9
 800cade:	f000 f9df 	bl	800cea0 <__multadd>
 800cae2:	4601      	mov	r1, r0
 800cae4:	4604      	mov	r4, r0
 800cae6:	9802      	ldr	r0, [sp, #8]
 800cae8:	f000 fbea 	bl	800d2c0 <__mcmp>
 800caec:	2800      	cmp	r0, #0
 800caee:	f77f ada3 	ble.w	800c638 <_dtoa_r+0x490>
 800caf2:	4656      	mov	r6, sl
 800caf4:	2331      	movs	r3, #49	@ 0x31
 800caf6:	f806 3b01 	strb.w	r3, [r6], #1
 800cafa:	f108 0801 	add.w	r8, r8, #1
 800cafe:	e59f      	b.n	800c640 <_dtoa_r+0x498>
 800cb00:	9c03      	ldr	r4, [sp, #12]
 800cb02:	46b8      	mov	r8, r7
 800cb04:	4625      	mov	r5, r4
 800cb06:	e7f4      	b.n	800caf2 <_dtoa_r+0x94a>
 800cb08:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800cb0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	f000 8101 	beq.w	800cd16 <_dtoa_r+0xb6e>
 800cb14:	2e00      	cmp	r6, #0
 800cb16:	dd05      	ble.n	800cb24 <_dtoa_r+0x97c>
 800cb18:	4629      	mov	r1, r5
 800cb1a:	4632      	mov	r2, r6
 800cb1c:	4648      	mov	r0, r9
 800cb1e:	f000 fb63 	bl	800d1e8 <__lshift>
 800cb22:	4605      	mov	r5, r0
 800cb24:	9b08      	ldr	r3, [sp, #32]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d05c      	beq.n	800cbe4 <_dtoa_r+0xa3c>
 800cb2a:	6869      	ldr	r1, [r5, #4]
 800cb2c:	4648      	mov	r0, r9
 800cb2e:	f000 f955 	bl	800cddc <_Balloc>
 800cb32:	4606      	mov	r6, r0
 800cb34:	b928      	cbnz	r0, 800cb42 <_dtoa_r+0x99a>
 800cb36:	4b82      	ldr	r3, [pc, #520]	@ (800cd40 <_dtoa_r+0xb98>)
 800cb38:	4602      	mov	r2, r0
 800cb3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cb3e:	f7ff bb4a 	b.w	800c1d6 <_dtoa_r+0x2e>
 800cb42:	692a      	ldr	r2, [r5, #16]
 800cb44:	3202      	adds	r2, #2
 800cb46:	0092      	lsls	r2, r2, #2
 800cb48:	f105 010c 	add.w	r1, r5, #12
 800cb4c:	300c      	adds	r0, #12
 800cb4e:	f000 fedd 	bl	800d90c <memcpy>
 800cb52:	2201      	movs	r2, #1
 800cb54:	4631      	mov	r1, r6
 800cb56:	4648      	mov	r0, r9
 800cb58:	f000 fb46 	bl	800d1e8 <__lshift>
 800cb5c:	f10a 0301 	add.w	r3, sl, #1
 800cb60:	9300      	str	r3, [sp, #0]
 800cb62:	eb0a 030b 	add.w	r3, sl, fp
 800cb66:	9308      	str	r3, [sp, #32]
 800cb68:	9b04      	ldr	r3, [sp, #16]
 800cb6a:	f003 0301 	and.w	r3, r3, #1
 800cb6e:	462f      	mov	r7, r5
 800cb70:	9306      	str	r3, [sp, #24]
 800cb72:	4605      	mov	r5, r0
 800cb74:	9b00      	ldr	r3, [sp, #0]
 800cb76:	9802      	ldr	r0, [sp, #8]
 800cb78:	4621      	mov	r1, r4
 800cb7a:	f103 3bff 	add.w	fp, r3, #4294967295
 800cb7e:	f7ff fa88 	bl	800c092 <quorem>
 800cb82:	4603      	mov	r3, r0
 800cb84:	3330      	adds	r3, #48	@ 0x30
 800cb86:	9003      	str	r0, [sp, #12]
 800cb88:	4639      	mov	r1, r7
 800cb8a:	9802      	ldr	r0, [sp, #8]
 800cb8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb8e:	f000 fb97 	bl	800d2c0 <__mcmp>
 800cb92:	462a      	mov	r2, r5
 800cb94:	9004      	str	r0, [sp, #16]
 800cb96:	4621      	mov	r1, r4
 800cb98:	4648      	mov	r0, r9
 800cb9a:	f000 fbad 	bl	800d2f8 <__mdiff>
 800cb9e:	68c2      	ldr	r2, [r0, #12]
 800cba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cba2:	4606      	mov	r6, r0
 800cba4:	bb02      	cbnz	r2, 800cbe8 <_dtoa_r+0xa40>
 800cba6:	4601      	mov	r1, r0
 800cba8:	9802      	ldr	r0, [sp, #8]
 800cbaa:	f000 fb89 	bl	800d2c0 <__mcmp>
 800cbae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	4631      	mov	r1, r6
 800cbb4:	4648      	mov	r0, r9
 800cbb6:	920c      	str	r2, [sp, #48]	@ 0x30
 800cbb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbba:	f000 f94f 	bl	800ce5c <_Bfree>
 800cbbe:	9b07      	ldr	r3, [sp, #28]
 800cbc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cbc2:	9e00      	ldr	r6, [sp, #0]
 800cbc4:	ea42 0103 	orr.w	r1, r2, r3
 800cbc8:	9b06      	ldr	r3, [sp, #24]
 800cbca:	4319      	orrs	r1, r3
 800cbcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbce:	d10d      	bne.n	800cbec <_dtoa_r+0xa44>
 800cbd0:	2b39      	cmp	r3, #57	@ 0x39
 800cbd2:	d027      	beq.n	800cc24 <_dtoa_r+0xa7c>
 800cbd4:	9a04      	ldr	r2, [sp, #16]
 800cbd6:	2a00      	cmp	r2, #0
 800cbd8:	dd01      	ble.n	800cbde <_dtoa_r+0xa36>
 800cbda:	9b03      	ldr	r3, [sp, #12]
 800cbdc:	3331      	adds	r3, #49	@ 0x31
 800cbde:	f88b 3000 	strb.w	r3, [fp]
 800cbe2:	e52e      	b.n	800c642 <_dtoa_r+0x49a>
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	e7b9      	b.n	800cb5c <_dtoa_r+0x9b4>
 800cbe8:	2201      	movs	r2, #1
 800cbea:	e7e2      	b.n	800cbb2 <_dtoa_r+0xa0a>
 800cbec:	9904      	ldr	r1, [sp, #16]
 800cbee:	2900      	cmp	r1, #0
 800cbf0:	db04      	blt.n	800cbfc <_dtoa_r+0xa54>
 800cbf2:	9807      	ldr	r0, [sp, #28]
 800cbf4:	4301      	orrs	r1, r0
 800cbf6:	9806      	ldr	r0, [sp, #24]
 800cbf8:	4301      	orrs	r1, r0
 800cbfa:	d120      	bne.n	800cc3e <_dtoa_r+0xa96>
 800cbfc:	2a00      	cmp	r2, #0
 800cbfe:	ddee      	ble.n	800cbde <_dtoa_r+0xa36>
 800cc00:	9902      	ldr	r1, [sp, #8]
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	2201      	movs	r2, #1
 800cc06:	4648      	mov	r0, r9
 800cc08:	f000 faee 	bl	800d1e8 <__lshift>
 800cc0c:	4621      	mov	r1, r4
 800cc0e:	9002      	str	r0, [sp, #8]
 800cc10:	f000 fb56 	bl	800d2c0 <__mcmp>
 800cc14:	2800      	cmp	r0, #0
 800cc16:	9b00      	ldr	r3, [sp, #0]
 800cc18:	dc02      	bgt.n	800cc20 <_dtoa_r+0xa78>
 800cc1a:	d1e0      	bne.n	800cbde <_dtoa_r+0xa36>
 800cc1c:	07da      	lsls	r2, r3, #31
 800cc1e:	d5de      	bpl.n	800cbde <_dtoa_r+0xa36>
 800cc20:	2b39      	cmp	r3, #57	@ 0x39
 800cc22:	d1da      	bne.n	800cbda <_dtoa_r+0xa32>
 800cc24:	2339      	movs	r3, #57	@ 0x39
 800cc26:	f88b 3000 	strb.w	r3, [fp]
 800cc2a:	4633      	mov	r3, r6
 800cc2c:	461e      	mov	r6, r3
 800cc2e:	3b01      	subs	r3, #1
 800cc30:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cc34:	2a39      	cmp	r2, #57	@ 0x39
 800cc36:	d04e      	beq.n	800ccd6 <_dtoa_r+0xb2e>
 800cc38:	3201      	adds	r2, #1
 800cc3a:	701a      	strb	r2, [r3, #0]
 800cc3c:	e501      	b.n	800c642 <_dtoa_r+0x49a>
 800cc3e:	2a00      	cmp	r2, #0
 800cc40:	dd03      	ble.n	800cc4a <_dtoa_r+0xaa2>
 800cc42:	2b39      	cmp	r3, #57	@ 0x39
 800cc44:	d0ee      	beq.n	800cc24 <_dtoa_r+0xa7c>
 800cc46:	3301      	adds	r3, #1
 800cc48:	e7c9      	b.n	800cbde <_dtoa_r+0xa36>
 800cc4a:	9a00      	ldr	r2, [sp, #0]
 800cc4c:	9908      	ldr	r1, [sp, #32]
 800cc4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cc52:	428a      	cmp	r2, r1
 800cc54:	d028      	beq.n	800cca8 <_dtoa_r+0xb00>
 800cc56:	9902      	ldr	r1, [sp, #8]
 800cc58:	2300      	movs	r3, #0
 800cc5a:	220a      	movs	r2, #10
 800cc5c:	4648      	mov	r0, r9
 800cc5e:	f000 f91f 	bl	800cea0 <__multadd>
 800cc62:	42af      	cmp	r7, r5
 800cc64:	9002      	str	r0, [sp, #8]
 800cc66:	f04f 0300 	mov.w	r3, #0
 800cc6a:	f04f 020a 	mov.w	r2, #10
 800cc6e:	4639      	mov	r1, r7
 800cc70:	4648      	mov	r0, r9
 800cc72:	d107      	bne.n	800cc84 <_dtoa_r+0xadc>
 800cc74:	f000 f914 	bl	800cea0 <__multadd>
 800cc78:	4607      	mov	r7, r0
 800cc7a:	4605      	mov	r5, r0
 800cc7c:	9b00      	ldr	r3, [sp, #0]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	9300      	str	r3, [sp, #0]
 800cc82:	e777      	b.n	800cb74 <_dtoa_r+0x9cc>
 800cc84:	f000 f90c 	bl	800cea0 <__multadd>
 800cc88:	4629      	mov	r1, r5
 800cc8a:	4607      	mov	r7, r0
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	220a      	movs	r2, #10
 800cc90:	4648      	mov	r0, r9
 800cc92:	f000 f905 	bl	800cea0 <__multadd>
 800cc96:	4605      	mov	r5, r0
 800cc98:	e7f0      	b.n	800cc7c <_dtoa_r+0xad4>
 800cc9a:	f1bb 0f00 	cmp.w	fp, #0
 800cc9e:	bfcc      	ite	gt
 800cca0:	465e      	movgt	r6, fp
 800cca2:	2601      	movle	r6, #1
 800cca4:	4456      	add	r6, sl
 800cca6:	2700      	movs	r7, #0
 800cca8:	9902      	ldr	r1, [sp, #8]
 800ccaa:	9300      	str	r3, [sp, #0]
 800ccac:	2201      	movs	r2, #1
 800ccae:	4648      	mov	r0, r9
 800ccb0:	f000 fa9a 	bl	800d1e8 <__lshift>
 800ccb4:	4621      	mov	r1, r4
 800ccb6:	9002      	str	r0, [sp, #8]
 800ccb8:	f000 fb02 	bl	800d2c0 <__mcmp>
 800ccbc:	2800      	cmp	r0, #0
 800ccbe:	dcb4      	bgt.n	800cc2a <_dtoa_r+0xa82>
 800ccc0:	d102      	bne.n	800ccc8 <_dtoa_r+0xb20>
 800ccc2:	9b00      	ldr	r3, [sp, #0]
 800ccc4:	07db      	lsls	r3, r3, #31
 800ccc6:	d4b0      	bmi.n	800cc2a <_dtoa_r+0xa82>
 800ccc8:	4633      	mov	r3, r6
 800ccca:	461e      	mov	r6, r3
 800cccc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccd0:	2a30      	cmp	r2, #48	@ 0x30
 800ccd2:	d0fa      	beq.n	800ccca <_dtoa_r+0xb22>
 800ccd4:	e4b5      	b.n	800c642 <_dtoa_r+0x49a>
 800ccd6:	459a      	cmp	sl, r3
 800ccd8:	d1a8      	bne.n	800cc2c <_dtoa_r+0xa84>
 800ccda:	2331      	movs	r3, #49	@ 0x31
 800ccdc:	f108 0801 	add.w	r8, r8, #1
 800cce0:	f88a 3000 	strb.w	r3, [sl]
 800cce4:	e4ad      	b.n	800c642 <_dtoa_r+0x49a>
 800cce6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cce8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800cd44 <_dtoa_r+0xb9c>
 800ccec:	b11b      	cbz	r3, 800ccf6 <_dtoa_r+0xb4e>
 800ccee:	f10a 0308 	add.w	r3, sl, #8
 800ccf2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ccf4:	6013      	str	r3, [r2, #0]
 800ccf6:	4650      	mov	r0, sl
 800ccf8:	b017      	add	sp, #92	@ 0x5c
 800ccfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccfe:	9b07      	ldr	r3, [sp, #28]
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	f77f ae2e 	ble.w	800c962 <_dtoa_r+0x7ba>
 800cd06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd08:	9308      	str	r3, [sp, #32]
 800cd0a:	2001      	movs	r0, #1
 800cd0c:	e64d      	b.n	800c9aa <_dtoa_r+0x802>
 800cd0e:	f1bb 0f00 	cmp.w	fp, #0
 800cd12:	f77f aed9 	ble.w	800cac8 <_dtoa_r+0x920>
 800cd16:	4656      	mov	r6, sl
 800cd18:	9802      	ldr	r0, [sp, #8]
 800cd1a:	4621      	mov	r1, r4
 800cd1c:	f7ff f9b9 	bl	800c092 <quorem>
 800cd20:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800cd24:	f806 3b01 	strb.w	r3, [r6], #1
 800cd28:	eba6 020a 	sub.w	r2, r6, sl
 800cd2c:	4593      	cmp	fp, r2
 800cd2e:	ddb4      	ble.n	800cc9a <_dtoa_r+0xaf2>
 800cd30:	9902      	ldr	r1, [sp, #8]
 800cd32:	2300      	movs	r3, #0
 800cd34:	220a      	movs	r2, #10
 800cd36:	4648      	mov	r0, r9
 800cd38:	f000 f8b2 	bl	800cea0 <__multadd>
 800cd3c:	9002      	str	r0, [sp, #8]
 800cd3e:	e7eb      	b.n	800cd18 <_dtoa_r+0xb70>
 800cd40:	0800e264 	.word	0x0800e264
 800cd44:	0800e1e8 	.word	0x0800e1e8

0800cd48 <_free_r>:
 800cd48:	b538      	push	{r3, r4, r5, lr}
 800cd4a:	4605      	mov	r5, r0
 800cd4c:	2900      	cmp	r1, #0
 800cd4e:	d041      	beq.n	800cdd4 <_free_r+0x8c>
 800cd50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd54:	1f0c      	subs	r4, r1, #4
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	bfb8      	it	lt
 800cd5a:	18e4      	addlt	r4, r4, r3
 800cd5c:	f7fe fb28 	bl	800b3b0 <__malloc_lock>
 800cd60:	4a1d      	ldr	r2, [pc, #116]	@ (800cdd8 <_free_r+0x90>)
 800cd62:	6813      	ldr	r3, [r2, #0]
 800cd64:	b933      	cbnz	r3, 800cd74 <_free_r+0x2c>
 800cd66:	6063      	str	r3, [r4, #4]
 800cd68:	6014      	str	r4, [r2, #0]
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd70:	f7fe bb24 	b.w	800b3bc <__malloc_unlock>
 800cd74:	42a3      	cmp	r3, r4
 800cd76:	d908      	bls.n	800cd8a <_free_r+0x42>
 800cd78:	6820      	ldr	r0, [r4, #0]
 800cd7a:	1821      	adds	r1, r4, r0
 800cd7c:	428b      	cmp	r3, r1
 800cd7e:	bf01      	itttt	eq
 800cd80:	6819      	ldreq	r1, [r3, #0]
 800cd82:	685b      	ldreq	r3, [r3, #4]
 800cd84:	1809      	addeq	r1, r1, r0
 800cd86:	6021      	streq	r1, [r4, #0]
 800cd88:	e7ed      	b.n	800cd66 <_free_r+0x1e>
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	b10b      	cbz	r3, 800cd94 <_free_r+0x4c>
 800cd90:	42a3      	cmp	r3, r4
 800cd92:	d9fa      	bls.n	800cd8a <_free_r+0x42>
 800cd94:	6811      	ldr	r1, [r2, #0]
 800cd96:	1850      	adds	r0, r2, r1
 800cd98:	42a0      	cmp	r0, r4
 800cd9a:	d10b      	bne.n	800cdb4 <_free_r+0x6c>
 800cd9c:	6820      	ldr	r0, [r4, #0]
 800cd9e:	4401      	add	r1, r0
 800cda0:	1850      	adds	r0, r2, r1
 800cda2:	4283      	cmp	r3, r0
 800cda4:	6011      	str	r1, [r2, #0]
 800cda6:	d1e0      	bne.n	800cd6a <_free_r+0x22>
 800cda8:	6818      	ldr	r0, [r3, #0]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	6053      	str	r3, [r2, #4]
 800cdae:	4408      	add	r0, r1
 800cdb0:	6010      	str	r0, [r2, #0]
 800cdb2:	e7da      	b.n	800cd6a <_free_r+0x22>
 800cdb4:	d902      	bls.n	800cdbc <_free_r+0x74>
 800cdb6:	230c      	movs	r3, #12
 800cdb8:	602b      	str	r3, [r5, #0]
 800cdba:	e7d6      	b.n	800cd6a <_free_r+0x22>
 800cdbc:	6820      	ldr	r0, [r4, #0]
 800cdbe:	1821      	adds	r1, r4, r0
 800cdc0:	428b      	cmp	r3, r1
 800cdc2:	bf04      	itt	eq
 800cdc4:	6819      	ldreq	r1, [r3, #0]
 800cdc6:	685b      	ldreq	r3, [r3, #4]
 800cdc8:	6063      	str	r3, [r4, #4]
 800cdca:	bf04      	itt	eq
 800cdcc:	1809      	addeq	r1, r1, r0
 800cdce:	6021      	streq	r1, [r4, #0]
 800cdd0:	6054      	str	r4, [r2, #4]
 800cdd2:	e7ca      	b.n	800cd6a <_free_r+0x22>
 800cdd4:	bd38      	pop	{r3, r4, r5, pc}
 800cdd6:	bf00      	nop
 800cdd8:	20000b6c 	.word	0x20000b6c

0800cddc <_Balloc>:
 800cddc:	b570      	push	{r4, r5, r6, lr}
 800cdde:	69c6      	ldr	r6, [r0, #28]
 800cde0:	4604      	mov	r4, r0
 800cde2:	460d      	mov	r5, r1
 800cde4:	b976      	cbnz	r6, 800ce04 <_Balloc+0x28>
 800cde6:	2010      	movs	r0, #16
 800cde8:	f7fe fa30 	bl	800b24c <malloc>
 800cdec:	4602      	mov	r2, r0
 800cdee:	61e0      	str	r0, [r4, #28]
 800cdf0:	b920      	cbnz	r0, 800cdfc <_Balloc+0x20>
 800cdf2:	4b18      	ldr	r3, [pc, #96]	@ (800ce54 <_Balloc+0x78>)
 800cdf4:	4818      	ldr	r0, [pc, #96]	@ (800ce58 <_Balloc+0x7c>)
 800cdf6:	216b      	movs	r1, #107	@ 0x6b
 800cdf8:	f000 fd96 	bl	800d928 <__assert_func>
 800cdfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce00:	6006      	str	r6, [r0, #0]
 800ce02:	60c6      	str	r6, [r0, #12]
 800ce04:	69e6      	ldr	r6, [r4, #28]
 800ce06:	68f3      	ldr	r3, [r6, #12]
 800ce08:	b183      	cbz	r3, 800ce2c <_Balloc+0x50>
 800ce0a:	69e3      	ldr	r3, [r4, #28]
 800ce0c:	68db      	ldr	r3, [r3, #12]
 800ce0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce12:	b9b8      	cbnz	r0, 800ce44 <_Balloc+0x68>
 800ce14:	2101      	movs	r1, #1
 800ce16:	fa01 f605 	lsl.w	r6, r1, r5
 800ce1a:	1d72      	adds	r2, r6, #5
 800ce1c:	0092      	lsls	r2, r2, #2
 800ce1e:	4620      	mov	r0, r4
 800ce20:	f000 fda0 	bl	800d964 <_calloc_r>
 800ce24:	b160      	cbz	r0, 800ce40 <_Balloc+0x64>
 800ce26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce2a:	e00e      	b.n	800ce4a <_Balloc+0x6e>
 800ce2c:	2221      	movs	r2, #33	@ 0x21
 800ce2e:	2104      	movs	r1, #4
 800ce30:	4620      	mov	r0, r4
 800ce32:	f000 fd97 	bl	800d964 <_calloc_r>
 800ce36:	69e3      	ldr	r3, [r4, #28]
 800ce38:	60f0      	str	r0, [r6, #12]
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d1e4      	bne.n	800ce0a <_Balloc+0x2e>
 800ce40:	2000      	movs	r0, #0
 800ce42:	bd70      	pop	{r4, r5, r6, pc}
 800ce44:	6802      	ldr	r2, [r0, #0]
 800ce46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce50:	e7f7      	b.n	800ce42 <_Balloc+0x66>
 800ce52:	bf00      	nop
 800ce54:	0800e1f5 	.word	0x0800e1f5
 800ce58:	0800e275 	.word	0x0800e275

0800ce5c <_Bfree>:
 800ce5c:	b570      	push	{r4, r5, r6, lr}
 800ce5e:	69c6      	ldr	r6, [r0, #28]
 800ce60:	4605      	mov	r5, r0
 800ce62:	460c      	mov	r4, r1
 800ce64:	b976      	cbnz	r6, 800ce84 <_Bfree+0x28>
 800ce66:	2010      	movs	r0, #16
 800ce68:	f7fe f9f0 	bl	800b24c <malloc>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	61e8      	str	r0, [r5, #28]
 800ce70:	b920      	cbnz	r0, 800ce7c <_Bfree+0x20>
 800ce72:	4b09      	ldr	r3, [pc, #36]	@ (800ce98 <_Bfree+0x3c>)
 800ce74:	4809      	ldr	r0, [pc, #36]	@ (800ce9c <_Bfree+0x40>)
 800ce76:	218f      	movs	r1, #143	@ 0x8f
 800ce78:	f000 fd56 	bl	800d928 <__assert_func>
 800ce7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce80:	6006      	str	r6, [r0, #0]
 800ce82:	60c6      	str	r6, [r0, #12]
 800ce84:	b13c      	cbz	r4, 800ce96 <_Bfree+0x3a>
 800ce86:	69eb      	ldr	r3, [r5, #28]
 800ce88:	6862      	ldr	r2, [r4, #4]
 800ce8a:	68db      	ldr	r3, [r3, #12]
 800ce8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce90:	6021      	str	r1, [r4, #0]
 800ce92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce96:	bd70      	pop	{r4, r5, r6, pc}
 800ce98:	0800e1f5 	.word	0x0800e1f5
 800ce9c:	0800e275 	.word	0x0800e275

0800cea0 <__multadd>:
 800cea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cea4:	690d      	ldr	r5, [r1, #16]
 800cea6:	4607      	mov	r7, r0
 800cea8:	460c      	mov	r4, r1
 800ceaa:	461e      	mov	r6, r3
 800ceac:	f101 0c14 	add.w	ip, r1, #20
 800ceb0:	2000      	movs	r0, #0
 800ceb2:	f8dc 3000 	ldr.w	r3, [ip]
 800ceb6:	b299      	uxth	r1, r3
 800ceb8:	fb02 6101 	mla	r1, r2, r1, r6
 800cebc:	0c1e      	lsrs	r6, r3, #16
 800cebe:	0c0b      	lsrs	r3, r1, #16
 800cec0:	fb02 3306 	mla	r3, r2, r6, r3
 800cec4:	b289      	uxth	r1, r1
 800cec6:	3001      	adds	r0, #1
 800cec8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cecc:	4285      	cmp	r5, r0
 800cece:	f84c 1b04 	str.w	r1, [ip], #4
 800ced2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ced6:	dcec      	bgt.n	800ceb2 <__multadd+0x12>
 800ced8:	b30e      	cbz	r6, 800cf1e <__multadd+0x7e>
 800ceda:	68a3      	ldr	r3, [r4, #8]
 800cedc:	42ab      	cmp	r3, r5
 800cede:	dc19      	bgt.n	800cf14 <__multadd+0x74>
 800cee0:	6861      	ldr	r1, [r4, #4]
 800cee2:	4638      	mov	r0, r7
 800cee4:	3101      	adds	r1, #1
 800cee6:	f7ff ff79 	bl	800cddc <_Balloc>
 800ceea:	4680      	mov	r8, r0
 800ceec:	b928      	cbnz	r0, 800cefa <__multadd+0x5a>
 800ceee:	4602      	mov	r2, r0
 800cef0:	4b0c      	ldr	r3, [pc, #48]	@ (800cf24 <__multadd+0x84>)
 800cef2:	480d      	ldr	r0, [pc, #52]	@ (800cf28 <__multadd+0x88>)
 800cef4:	21ba      	movs	r1, #186	@ 0xba
 800cef6:	f000 fd17 	bl	800d928 <__assert_func>
 800cefa:	6922      	ldr	r2, [r4, #16]
 800cefc:	3202      	adds	r2, #2
 800cefe:	f104 010c 	add.w	r1, r4, #12
 800cf02:	0092      	lsls	r2, r2, #2
 800cf04:	300c      	adds	r0, #12
 800cf06:	f000 fd01 	bl	800d90c <memcpy>
 800cf0a:	4621      	mov	r1, r4
 800cf0c:	4638      	mov	r0, r7
 800cf0e:	f7ff ffa5 	bl	800ce5c <_Bfree>
 800cf12:	4644      	mov	r4, r8
 800cf14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf18:	3501      	adds	r5, #1
 800cf1a:	615e      	str	r6, [r3, #20]
 800cf1c:	6125      	str	r5, [r4, #16]
 800cf1e:	4620      	mov	r0, r4
 800cf20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf24:	0800e264 	.word	0x0800e264
 800cf28:	0800e275 	.word	0x0800e275

0800cf2c <__hi0bits>:
 800cf2c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cf30:	4603      	mov	r3, r0
 800cf32:	bf36      	itet	cc
 800cf34:	0403      	lslcc	r3, r0, #16
 800cf36:	2000      	movcs	r0, #0
 800cf38:	2010      	movcc	r0, #16
 800cf3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf3e:	bf3c      	itt	cc
 800cf40:	021b      	lslcc	r3, r3, #8
 800cf42:	3008      	addcc	r0, #8
 800cf44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf48:	bf3c      	itt	cc
 800cf4a:	011b      	lslcc	r3, r3, #4
 800cf4c:	3004      	addcc	r0, #4
 800cf4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf52:	bf3c      	itt	cc
 800cf54:	009b      	lslcc	r3, r3, #2
 800cf56:	3002      	addcc	r0, #2
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	db05      	blt.n	800cf68 <__hi0bits+0x3c>
 800cf5c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cf60:	f100 0001 	add.w	r0, r0, #1
 800cf64:	bf08      	it	eq
 800cf66:	2020      	moveq	r0, #32
 800cf68:	4770      	bx	lr

0800cf6a <__lo0bits>:
 800cf6a:	6803      	ldr	r3, [r0, #0]
 800cf6c:	4602      	mov	r2, r0
 800cf6e:	f013 0007 	ands.w	r0, r3, #7
 800cf72:	d00b      	beq.n	800cf8c <__lo0bits+0x22>
 800cf74:	07d9      	lsls	r1, r3, #31
 800cf76:	d421      	bmi.n	800cfbc <__lo0bits+0x52>
 800cf78:	0798      	lsls	r0, r3, #30
 800cf7a:	bf49      	itett	mi
 800cf7c:	085b      	lsrmi	r3, r3, #1
 800cf7e:	089b      	lsrpl	r3, r3, #2
 800cf80:	2001      	movmi	r0, #1
 800cf82:	6013      	strmi	r3, [r2, #0]
 800cf84:	bf5c      	itt	pl
 800cf86:	6013      	strpl	r3, [r2, #0]
 800cf88:	2002      	movpl	r0, #2
 800cf8a:	4770      	bx	lr
 800cf8c:	b299      	uxth	r1, r3
 800cf8e:	b909      	cbnz	r1, 800cf94 <__lo0bits+0x2a>
 800cf90:	0c1b      	lsrs	r3, r3, #16
 800cf92:	2010      	movs	r0, #16
 800cf94:	b2d9      	uxtb	r1, r3
 800cf96:	b909      	cbnz	r1, 800cf9c <__lo0bits+0x32>
 800cf98:	3008      	adds	r0, #8
 800cf9a:	0a1b      	lsrs	r3, r3, #8
 800cf9c:	0719      	lsls	r1, r3, #28
 800cf9e:	bf04      	itt	eq
 800cfa0:	091b      	lsreq	r3, r3, #4
 800cfa2:	3004      	addeq	r0, #4
 800cfa4:	0799      	lsls	r1, r3, #30
 800cfa6:	bf04      	itt	eq
 800cfa8:	089b      	lsreq	r3, r3, #2
 800cfaa:	3002      	addeq	r0, #2
 800cfac:	07d9      	lsls	r1, r3, #31
 800cfae:	d403      	bmi.n	800cfb8 <__lo0bits+0x4e>
 800cfb0:	085b      	lsrs	r3, r3, #1
 800cfb2:	f100 0001 	add.w	r0, r0, #1
 800cfb6:	d003      	beq.n	800cfc0 <__lo0bits+0x56>
 800cfb8:	6013      	str	r3, [r2, #0]
 800cfba:	4770      	bx	lr
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	4770      	bx	lr
 800cfc0:	2020      	movs	r0, #32
 800cfc2:	4770      	bx	lr

0800cfc4 <__i2b>:
 800cfc4:	b510      	push	{r4, lr}
 800cfc6:	460c      	mov	r4, r1
 800cfc8:	2101      	movs	r1, #1
 800cfca:	f7ff ff07 	bl	800cddc <_Balloc>
 800cfce:	4602      	mov	r2, r0
 800cfd0:	b928      	cbnz	r0, 800cfde <__i2b+0x1a>
 800cfd2:	4b05      	ldr	r3, [pc, #20]	@ (800cfe8 <__i2b+0x24>)
 800cfd4:	4805      	ldr	r0, [pc, #20]	@ (800cfec <__i2b+0x28>)
 800cfd6:	f240 1145 	movw	r1, #325	@ 0x145
 800cfda:	f000 fca5 	bl	800d928 <__assert_func>
 800cfde:	2301      	movs	r3, #1
 800cfe0:	6144      	str	r4, [r0, #20]
 800cfe2:	6103      	str	r3, [r0, #16]
 800cfe4:	bd10      	pop	{r4, pc}
 800cfe6:	bf00      	nop
 800cfe8:	0800e264 	.word	0x0800e264
 800cfec:	0800e275 	.word	0x0800e275

0800cff0 <__multiply>:
 800cff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff4:	4617      	mov	r7, r2
 800cff6:	690a      	ldr	r2, [r1, #16]
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	bfa8      	it	ge
 800cffe:	463b      	movge	r3, r7
 800d000:	4689      	mov	r9, r1
 800d002:	bfa4      	itt	ge
 800d004:	460f      	movge	r7, r1
 800d006:	4699      	movge	r9, r3
 800d008:	693d      	ldr	r5, [r7, #16]
 800d00a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	6879      	ldr	r1, [r7, #4]
 800d012:	eb05 060a 	add.w	r6, r5, sl
 800d016:	42b3      	cmp	r3, r6
 800d018:	b085      	sub	sp, #20
 800d01a:	bfb8      	it	lt
 800d01c:	3101      	addlt	r1, #1
 800d01e:	f7ff fedd 	bl	800cddc <_Balloc>
 800d022:	b930      	cbnz	r0, 800d032 <__multiply+0x42>
 800d024:	4602      	mov	r2, r0
 800d026:	4b41      	ldr	r3, [pc, #260]	@ (800d12c <__multiply+0x13c>)
 800d028:	4841      	ldr	r0, [pc, #260]	@ (800d130 <__multiply+0x140>)
 800d02a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d02e:	f000 fc7b 	bl	800d928 <__assert_func>
 800d032:	f100 0414 	add.w	r4, r0, #20
 800d036:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d03a:	4623      	mov	r3, r4
 800d03c:	2200      	movs	r2, #0
 800d03e:	4573      	cmp	r3, lr
 800d040:	d320      	bcc.n	800d084 <__multiply+0x94>
 800d042:	f107 0814 	add.w	r8, r7, #20
 800d046:	f109 0114 	add.w	r1, r9, #20
 800d04a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d04e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d052:	9302      	str	r3, [sp, #8]
 800d054:	1beb      	subs	r3, r5, r7
 800d056:	3b15      	subs	r3, #21
 800d058:	f023 0303 	bic.w	r3, r3, #3
 800d05c:	3304      	adds	r3, #4
 800d05e:	3715      	adds	r7, #21
 800d060:	42bd      	cmp	r5, r7
 800d062:	bf38      	it	cc
 800d064:	2304      	movcc	r3, #4
 800d066:	9301      	str	r3, [sp, #4]
 800d068:	9b02      	ldr	r3, [sp, #8]
 800d06a:	9103      	str	r1, [sp, #12]
 800d06c:	428b      	cmp	r3, r1
 800d06e:	d80c      	bhi.n	800d08a <__multiply+0x9a>
 800d070:	2e00      	cmp	r6, #0
 800d072:	dd03      	ble.n	800d07c <__multiply+0x8c>
 800d074:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d055      	beq.n	800d128 <__multiply+0x138>
 800d07c:	6106      	str	r6, [r0, #16]
 800d07e:	b005      	add	sp, #20
 800d080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d084:	f843 2b04 	str.w	r2, [r3], #4
 800d088:	e7d9      	b.n	800d03e <__multiply+0x4e>
 800d08a:	f8b1 a000 	ldrh.w	sl, [r1]
 800d08e:	f1ba 0f00 	cmp.w	sl, #0
 800d092:	d01f      	beq.n	800d0d4 <__multiply+0xe4>
 800d094:	46c4      	mov	ip, r8
 800d096:	46a1      	mov	r9, r4
 800d098:	2700      	movs	r7, #0
 800d09a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d09e:	f8d9 3000 	ldr.w	r3, [r9]
 800d0a2:	fa1f fb82 	uxth.w	fp, r2
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	fb0a 330b 	mla	r3, sl, fp, r3
 800d0ac:	443b      	add	r3, r7
 800d0ae:	f8d9 7000 	ldr.w	r7, [r9]
 800d0b2:	0c12      	lsrs	r2, r2, #16
 800d0b4:	0c3f      	lsrs	r7, r7, #16
 800d0b6:	fb0a 7202 	mla	r2, sl, r2, r7
 800d0ba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d0be:	b29b      	uxth	r3, r3
 800d0c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0c4:	4565      	cmp	r5, ip
 800d0c6:	f849 3b04 	str.w	r3, [r9], #4
 800d0ca:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d0ce:	d8e4      	bhi.n	800d09a <__multiply+0xaa>
 800d0d0:	9b01      	ldr	r3, [sp, #4]
 800d0d2:	50e7      	str	r7, [r4, r3]
 800d0d4:	9b03      	ldr	r3, [sp, #12]
 800d0d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d0da:	3104      	adds	r1, #4
 800d0dc:	f1b9 0f00 	cmp.w	r9, #0
 800d0e0:	d020      	beq.n	800d124 <__multiply+0x134>
 800d0e2:	6823      	ldr	r3, [r4, #0]
 800d0e4:	4647      	mov	r7, r8
 800d0e6:	46a4      	mov	ip, r4
 800d0e8:	f04f 0a00 	mov.w	sl, #0
 800d0ec:	f8b7 b000 	ldrh.w	fp, [r7]
 800d0f0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d0f4:	fb09 220b 	mla	r2, r9, fp, r2
 800d0f8:	4452      	add	r2, sl
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d100:	f84c 3b04 	str.w	r3, [ip], #4
 800d104:	f857 3b04 	ldr.w	r3, [r7], #4
 800d108:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d10c:	f8bc 3000 	ldrh.w	r3, [ip]
 800d110:	fb09 330a 	mla	r3, r9, sl, r3
 800d114:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d118:	42bd      	cmp	r5, r7
 800d11a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d11e:	d8e5      	bhi.n	800d0ec <__multiply+0xfc>
 800d120:	9a01      	ldr	r2, [sp, #4]
 800d122:	50a3      	str	r3, [r4, r2]
 800d124:	3404      	adds	r4, #4
 800d126:	e79f      	b.n	800d068 <__multiply+0x78>
 800d128:	3e01      	subs	r6, #1
 800d12a:	e7a1      	b.n	800d070 <__multiply+0x80>
 800d12c:	0800e264 	.word	0x0800e264
 800d130:	0800e275 	.word	0x0800e275

0800d134 <__pow5mult>:
 800d134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d138:	4615      	mov	r5, r2
 800d13a:	f012 0203 	ands.w	r2, r2, #3
 800d13e:	4607      	mov	r7, r0
 800d140:	460e      	mov	r6, r1
 800d142:	d007      	beq.n	800d154 <__pow5mult+0x20>
 800d144:	4c25      	ldr	r4, [pc, #148]	@ (800d1dc <__pow5mult+0xa8>)
 800d146:	3a01      	subs	r2, #1
 800d148:	2300      	movs	r3, #0
 800d14a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d14e:	f7ff fea7 	bl	800cea0 <__multadd>
 800d152:	4606      	mov	r6, r0
 800d154:	10ad      	asrs	r5, r5, #2
 800d156:	d03d      	beq.n	800d1d4 <__pow5mult+0xa0>
 800d158:	69fc      	ldr	r4, [r7, #28]
 800d15a:	b97c      	cbnz	r4, 800d17c <__pow5mult+0x48>
 800d15c:	2010      	movs	r0, #16
 800d15e:	f7fe f875 	bl	800b24c <malloc>
 800d162:	4602      	mov	r2, r0
 800d164:	61f8      	str	r0, [r7, #28]
 800d166:	b928      	cbnz	r0, 800d174 <__pow5mult+0x40>
 800d168:	4b1d      	ldr	r3, [pc, #116]	@ (800d1e0 <__pow5mult+0xac>)
 800d16a:	481e      	ldr	r0, [pc, #120]	@ (800d1e4 <__pow5mult+0xb0>)
 800d16c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d170:	f000 fbda 	bl	800d928 <__assert_func>
 800d174:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d178:	6004      	str	r4, [r0, #0]
 800d17a:	60c4      	str	r4, [r0, #12]
 800d17c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d180:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d184:	b94c      	cbnz	r4, 800d19a <__pow5mult+0x66>
 800d186:	f240 2171 	movw	r1, #625	@ 0x271
 800d18a:	4638      	mov	r0, r7
 800d18c:	f7ff ff1a 	bl	800cfc4 <__i2b>
 800d190:	2300      	movs	r3, #0
 800d192:	f8c8 0008 	str.w	r0, [r8, #8]
 800d196:	4604      	mov	r4, r0
 800d198:	6003      	str	r3, [r0, #0]
 800d19a:	f04f 0900 	mov.w	r9, #0
 800d19e:	07eb      	lsls	r3, r5, #31
 800d1a0:	d50a      	bpl.n	800d1b8 <__pow5mult+0x84>
 800d1a2:	4631      	mov	r1, r6
 800d1a4:	4622      	mov	r2, r4
 800d1a6:	4638      	mov	r0, r7
 800d1a8:	f7ff ff22 	bl	800cff0 <__multiply>
 800d1ac:	4631      	mov	r1, r6
 800d1ae:	4680      	mov	r8, r0
 800d1b0:	4638      	mov	r0, r7
 800d1b2:	f7ff fe53 	bl	800ce5c <_Bfree>
 800d1b6:	4646      	mov	r6, r8
 800d1b8:	106d      	asrs	r5, r5, #1
 800d1ba:	d00b      	beq.n	800d1d4 <__pow5mult+0xa0>
 800d1bc:	6820      	ldr	r0, [r4, #0]
 800d1be:	b938      	cbnz	r0, 800d1d0 <__pow5mult+0x9c>
 800d1c0:	4622      	mov	r2, r4
 800d1c2:	4621      	mov	r1, r4
 800d1c4:	4638      	mov	r0, r7
 800d1c6:	f7ff ff13 	bl	800cff0 <__multiply>
 800d1ca:	6020      	str	r0, [r4, #0]
 800d1cc:	f8c0 9000 	str.w	r9, [r0]
 800d1d0:	4604      	mov	r4, r0
 800d1d2:	e7e4      	b.n	800d19e <__pow5mult+0x6a>
 800d1d4:	4630      	mov	r0, r6
 800d1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1da:	bf00      	nop
 800d1dc:	0800e328 	.word	0x0800e328
 800d1e0:	0800e1f5 	.word	0x0800e1f5
 800d1e4:	0800e275 	.word	0x0800e275

0800d1e8 <__lshift>:
 800d1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1ec:	460c      	mov	r4, r1
 800d1ee:	6849      	ldr	r1, [r1, #4]
 800d1f0:	6923      	ldr	r3, [r4, #16]
 800d1f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d1f6:	68a3      	ldr	r3, [r4, #8]
 800d1f8:	4607      	mov	r7, r0
 800d1fa:	4691      	mov	r9, r2
 800d1fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d200:	f108 0601 	add.w	r6, r8, #1
 800d204:	42b3      	cmp	r3, r6
 800d206:	db0b      	blt.n	800d220 <__lshift+0x38>
 800d208:	4638      	mov	r0, r7
 800d20a:	f7ff fde7 	bl	800cddc <_Balloc>
 800d20e:	4605      	mov	r5, r0
 800d210:	b948      	cbnz	r0, 800d226 <__lshift+0x3e>
 800d212:	4602      	mov	r2, r0
 800d214:	4b28      	ldr	r3, [pc, #160]	@ (800d2b8 <__lshift+0xd0>)
 800d216:	4829      	ldr	r0, [pc, #164]	@ (800d2bc <__lshift+0xd4>)
 800d218:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d21c:	f000 fb84 	bl	800d928 <__assert_func>
 800d220:	3101      	adds	r1, #1
 800d222:	005b      	lsls	r3, r3, #1
 800d224:	e7ee      	b.n	800d204 <__lshift+0x1c>
 800d226:	2300      	movs	r3, #0
 800d228:	f100 0114 	add.w	r1, r0, #20
 800d22c:	f100 0210 	add.w	r2, r0, #16
 800d230:	4618      	mov	r0, r3
 800d232:	4553      	cmp	r3, sl
 800d234:	db33      	blt.n	800d29e <__lshift+0xb6>
 800d236:	6920      	ldr	r0, [r4, #16]
 800d238:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d23c:	f104 0314 	add.w	r3, r4, #20
 800d240:	f019 091f 	ands.w	r9, r9, #31
 800d244:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d248:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d24c:	d02b      	beq.n	800d2a6 <__lshift+0xbe>
 800d24e:	f1c9 0e20 	rsb	lr, r9, #32
 800d252:	468a      	mov	sl, r1
 800d254:	2200      	movs	r2, #0
 800d256:	6818      	ldr	r0, [r3, #0]
 800d258:	fa00 f009 	lsl.w	r0, r0, r9
 800d25c:	4310      	orrs	r0, r2
 800d25e:	f84a 0b04 	str.w	r0, [sl], #4
 800d262:	f853 2b04 	ldr.w	r2, [r3], #4
 800d266:	459c      	cmp	ip, r3
 800d268:	fa22 f20e 	lsr.w	r2, r2, lr
 800d26c:	d8f3      	bhi.n	800d256 <__lshift+0x6e>
 800d26e:	ebac 0304 	sub.w	r3, ip, r4
 800d272:	3b15      	subs	r3, #21
 800d274:	f023 0303 	bic.w	r3, r3, #3
 800d278:	3304      	adds	r3, #4
 800d27a:	f104 0015 	add.w	r0, r4, #21
 800d27e:	4560      	cmp	r0, ip
 800d280:	bf88      	it	hi
 800d282:	2304      	movhi	r3, #4
 800d284:	50ca      	str	r2, [r1, r3]
 800d286:	b10a      	cbz	r2, 800d28c <__lshift+0xa4>
 800d288:	f108 0602 	add.w	r6, r8, #2
 800d28c:	3e01      	subs	r6, #1
 800d28e:	4638      	mov	r0, r7
 800d290:	612e      	str	r6, [r5, #16]
 800d292:	4621      	mov	r1, r4
 800d294:	f7ff fde2 	bl	800ce5c <_Bfree>
 800d298:	4628      	mov	r0, r5
 800d29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d29e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	e7c5      	b.n	800d232 <__lshift+0x4a>
 800d2a6:	3904      	subs	r1, #4
 800d2a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2b0:	459c      	cmp	ip, r3
 800d2b2:	d8f9      	bhi.n	800d2a8 <__lshift+0xc0>
 800d2b4:	e7ea      	b.n	800d28c <__lshift+0xa4>
 800d2b6:	bf00      	nop
 800d2b8:	0800e264 	.word	0x0800e264
 800d2bc:	0800e275 	.word	0x0800e275

0800d2c0 <__mcmp>:
 800d2c0:	690a      	ldr	r2, [r1, #16]
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	6900      	ldr	r0, [r0, #16]
 800d2c6:	1a80      	subs	r0, r0, r2
 800d2c8:	b530      	push	{r4, r5, lr}
 800d2ca:	d10e      	bne.n	800d2ea <__mcmp+0x2a>
 800d2cc:	3314      	adds	r3, #20
 800d2ce:	3114      	adds	r1, #20
 800d2d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d2d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d2d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d2dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d2e0:	4295      	cmp	r5, r2
 800d2e2:	d003      	beq.n	800d2ec <__mcmp+0x2c>
 800d2e4:	d205      	bcs.n	800d2f2 <__mcmp+0x32>
 800d2e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ea:	bd30      	pop	{r4, r5, pc}
 800d2ec:	42a3      	cmp	r3, r4
 800d2ee:	d3f3      	bcc.n	800d2d8 <__mcmp+0x18>
 800d2f0:	e7fb      	b.n	800d2ea <__mcmp+0x2a>
 800d2f2:	2001      	movs	r0, #1
 800d2f4:	e7f9      	b.n	800d2ea <__mcmp+0x2a>
	...

0800d2f8 <__mdiff>:
 800d2f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2fc:	4689      	mov	r9, r1
 800d2fe:	4606      	mov	r6, r0
 800d300:	4611      	mov	r1, r2
 800d302:	4648      	mov	r0, r9
 800d304:	4614      	mov	r4, r2
 800d306:	f7ff ffdb 	bl	800d2c0 <__mcmp>
 800d30a:	1e05      	subs	r5, r0, #0
 800d30c:	d112      	bne.n	800d334 <__mdiff+0x3c>
 800d30e:	4629      	mov	r1, r5
 800d310:	4630      	mov	r0, r6
 800d312:	f7ff fd63 	bl	800cddc <_Balloc>
 800d316:	4602      	mov	r2, r0
 800d318:	b928      	cbnz	r0, 800d326 <__mdiff+0x2e>
 800d31a:	4b3f      	ldr	r3, [pc, #252]	@ (800d418 <__mdiff+0x120>)
 800d31c:	f240 2137 	movw	r1, #567	@ 0x237
 800d320:	483e      	ldr	r0, [pc, #248]	@ (800d41c <__mdiff+0x124>)
 800d322:	f000 fb01 	bl	800d928 <__assert_func>
 800d326:	2301      	movs	r3, #1
 800d328:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d32c:	4610      	mov	r0, r2
 800d32e:	b003      	add	sp, #12
 800d330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d334:	bfbc      	itt	lt
 800d336:	464b      	movlt	r3, r9
 800d338:	46a1      	movlt	r9, r4
 800d33a:	4630      	mov	r0, r6
 800d33c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d340:	bfba      	itte	lt
 800d342:	461c      	movlt	r4, r3
 800d344:	2501      	movlt	r5, #1
 800d346:	2500      	movge	r5, #0
 800d348:	f7ff fd48 	bl	800cddc <_Balloc>
 800d34c:	4602      	mov	r2, r0
 800d34e:	b918      	cbnz	r0, 800d358 <__mdiff+0x60>
 800d350:	4b31      	ldr	r3, [pc, #196]	@ (800d418 <__mdiff+0x120>)
 800d352:	f240 2145 	movw	r1, #581	@ 0x245
 800d356:	e7e3      	b.n	800d320 <__mdiff+0x28>
 800d358:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d35c:	6926      	ldr	r6, [r4, #16]
 800d35e:	60c5      	str	r5, [r0, #12]
 800d360:	f109 0310 	add.w	r3, r9, #16
 800d364:	f109 0514 	add.w	r5, r9, #20
 800d368:	f104 0e14 	add.w	lr, r4, #20
 800d36c:	f100 0b14 	add.w	fp, r0, #20
 800d370:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d374:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d378:	9301      	str	r3, [sp, #4]
 800d37a:	46d9      	mov	r9, fp
 800d37c:	f04f 0c00 	mov.w	ip, #0
 800d380:	9b01      	ldr	r3, [sp, #4]
 800d382:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d386:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d38a:	9301      	str	r3, [sp, #4]
 800d38c:	fa1f f38a 	uxth.w	r3, sl
 800d390:	4619      	mov	r1, r3
 800d392:	b283      	uxth	r3, r0
 800d394:	1acb      	subs	r3, r1, r3
 800d396:	0c00      	lsrs	r0, r0, #16
 800d398:	4463      	add	r3, ip
 800d39a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d39e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d3a8:	4576      	cmp	r6, lr
 800d3aa:	f849 3b04 	str.w	r3, [r9], #4
 800d3ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d3b2:	d8e5      	bhi.n	800d380 <__mdiff+0x88>
 800d3b4:	1b33      	subs	r3, r6, r4
 800d3b6:	3b15      	subs	r3, #21
 800d3b8:	f023 0303 	bic.w	r3, r3, #3
 800d3bc:	3415      	adds	r4, #21
 800d3be:	3304      	adds	r3, #4
 800d3c0:	42a6      	cmp	r6, r4
 800d3c2:	bf38      	it	cc
 800d3c4:	2304      	movcc	r3, #4
 800d3c6:	441d      	add	r5, r3
 800d3c8:	445b      	add	r3, fp
 800d3ca:	461e      	mov	r6, r3
 800d3cc:	462c      	mov	r4, r5
 800d3ce:	4544      	cmp	r4, r8
 800d3d0:	d30e      	bcc.n	800d3f0 <__mdiff+0xf8>
 800d3d2:	f108 0103 	add.w	r1, r8, #3
 800d3d6:	1b49      	subs	r1, r1, r5
 800d3d8:	f021 0103 	bic.w	r1, r1, #3
 800d3dc:	3d03      	subs	r5, #3
 800d3de:	45a8      	cmp	r8, r5
 800d3e0:	bf38      	it	cc
 800d3e2:	2100      	movcc	r1, #0
 800d3e4:	440b      	add	r3, r1
 800d3e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3ea:	b191      	cbz	r1, 800d412 <__mdiff+0x11a>
 800d3ec:	6117      	str	r7, [r2, #16]
 800d3ee:	e79d      	b.n	800d32c <__mdiff+0x34>
 800d3f0:	f854 1b04 	ldr.w	r1, [r4], #4
 800d3f4:	46e6      	mov	lr, ip
 800d3f6:	0c08      	lsrs	r0, r1, #16
 800d3f8:	fa1c fc81 	uxtah	ip, ip, r1
 800d3fc:	4471      	add	r1, lr
 800d3fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d402:	b289      	uxth	r1, r1
 800d404:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d408:	f846 1b04 	str.w	r1, [r6], #4
 800d40c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d410:	e7dd      	b.n	800d3ce <__mdiff+0xd6>
 800d412:	3f01      	subs	r7, #1
 800d414:	e7e7      	b.n	800d3e6 <__mdiff+0xee>
 800d416:	bf00      	nop
 800d418:	0800e264 	.word	0x0800e264
 800d41c:	0800e275 	.word	0x0800e275

0800d420 <__d2b>:
 800d420:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d424:	460f      	mov	r7, r1
 800d426:	2101      	movs	r1, #1
 800d428:	ec59 8b10 	vmov	r8, r9, d0
 800d42c:	4616      	mov	r6, r2
 800d42e:	f7ff fcd5 	bl	800cddc <_Balloc>
 800d432:	4604      	mov	r4, r0
 800d434:	b930      	cbnz	r0, 800d444 <__d2b+0x24>
 800d436:	4602      	mov	r2, r0
 800d438:	4b23      	ldr	r3, [pc, #140]	@ (800d4c8 <__d2b+0xa8>)
 800d43a:	4824      	ldr	r0, [pc, #144]	@ (800d4cc <__d2b+0xac>)
 800d43c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d440:	f000 fa72 	bl	800d928 <__assert_func>
 800d444:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d448:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d44c:	b10d      	cbz	r5, 800d452 <__d2b+0x32>
 800d44e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d452:	9301      	str	r3, [sp, #4]
 800d454:	f1b8 0300 	subs.w	r3, r8, #0
 800d458:	d023      	beq.n	800d4a2 <__d2b+0x82>
 800d45a:	4668      	mov	r0, sp
 800d45c:	9300      	str	r3, [sp, #0]
 800d45e:	f7ff fd84 	bl	800cf6a <__lo0bits>
 800d462:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d466:	b1d0      	cbz	r0, 800d49e <__d2b+0x7e>
 800d468:	f1c0 0320 	rsb	r3, r0, #32
 800d46c:	fa02 f303 	lsl.w	r3, r2, r3
 800d470:	430b      	orrs	r3, r1
 800d472:	40c2      	lsrs	r2, r0
 800d474:	6163      	str	r3, [r4, #20]
 800d476:	9201      	str	r2, [sp, #4]
 800d478:	9b01      	ldr	r3, [sp, #4]
 800d47a:	61a3      	str	r3, [r4, #24]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	bf0c      	ite	eq
 800d480:	2201      	moveq	r2, #1
 800d482:	2202      	movne	r2, #2
 800d484:	6122      	str	r2, [r4, #16]
 800d486:	b1a5      	cbz	r5, 800d4b2 <__d2b+0x92>
 800d488:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d48c:	4405      	add	r5, r0
 800d48e:	603d      	str	r5, [r7, #0]
 800d490:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d494:	6030      	str	r0, [r6, #0]
 800d496:	4620      	mov	r0, r4
 800d498:	b003      	add	sp, #12
 800d49a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d49e:	6161      	str	r1, [r4, #20]
 800d4a0:	e7ea      	b.n	800d478 <__d2b+0x58>
 800d4a2:	a801      	add	r0, sp, #4
 800d4a4:	f7ff fd61 	bl	800cf6a <__lo0bits>
 800d4a8:	9b01      	ldr	r3, [sp, #4]
 800d4aa:	6163      	str	r3, [r4, #20]
 800d4ac:	3020      	adds	r0, #32
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	e7e8      	b.n	800d484 <__d2b+0x64>
 800d4b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d4ba:	6038      	str	r0, [r7, #0]
 800d4bc:	6918      	ldr	r0, [r3, #16]
 800d4be:	f7ff fd35 	bl	800cf2c <__hi0bits>
 800d4c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4c6:	e7e5      	b.n	800d494 <__d2b+0x74>
 800d4c8:	0800e264 	.word	0x0800e264
 800d4cc:	0800e275 	.word	0x0800e275

0800d4d0 <__ssputs_r>:
 800d4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4d4:	688e      	ldr	r6, [r1, #8]
 800d4d6:	461f      	mov	r7, r3
 800d4d8:	42be      	cmp	r6, r7
 800d4da:	680b      	ldr	r3, [r1, #0]
 800d4dc:	4682      	mov	sl, r0
 800d4de:	460c      	mov	r4, r1
 800d4e0:	4690      	mov	r8, r2
 800d4e2:	d82d      	bhi.n	800d540 <__ssputs_r+0x70>
 800d4e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d4ec:	d026      	beq.n	800d53c <__ssputs_r+0x6c>
 800d4ee:	6965      	ldr	r5, [r4, #20]
 800d4f0:	6909      	ldr	r1, [r1, #16]
 800d4f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4f6:	eba3 0901 	sub.w	r9, r3, r1
 800d4fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4fe:	1c7b      	adds	r3, r7, #1
 800d500:	444b      	add	r3, r9
 800d502:	106d      	asrs	r5, r5, #1
 800d504:	429d      	cmp	r5, r3
 800d506:	bf38      	it	cc
 800d508:	461d      	movcc	r5, r3
 800d50a:	0553      	lsls	r3, r2, #21
 800d50c:	d527      	bpl.n	800d55e <__ssputs_r+0x8e>
 800d50e:	4629      	mov	r1, r5
 800d510:	f7fd fece 	bl	800b2b0 <_malloc_r>
 800d514:	4606      	mov	r6, r0
 800d516:	b360      	cbz	r0, 800d572 <__ssputs_r+0xa2>
 800d518:	6921      	ldr	r1, [r4, #16]
 800d51a:	464a      	mov	r2, r9
 800d51c:	f000 f9f6 	bl	800d90c <memcpy>
 800d520:	89a3      	ldrh	r3, [r4, #12]
 800d522:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d52a:	81a3      	strh	r3, [r4, #12]
 800d52c:	6126      	str	r6, [r4, #16]
 800d52e:	6165      	str	r5, [r4, #20]
 800d530:	444e      	add	r6, r9
 800d532:	eba5 0509 	sub.w	r5, r5, r9
 800d536:	6026      	str	r6, [r4, #0]
 800d538:	60a5      	str	r5, [r4, #8]
 800d53a:	463e      	mov	r6, r7
 800d53c:	42be      	cmp	r6, r7
 800d53e:	d900      	bls.n	800d542 <__ssputs_r+0x72>
 800d540:	463e      	mov	r6, r7
 800d542:	6820      	ldr	r0, [r4, #0]
 800d544:	4632      	mov	r2, r6
 800d546:	4641      	mov	r1, r8
 800d548:	f000 f9c6 	bl	800d8d8 <memmove>
 800d54c:	68a3      	ldr	r3, [r4, #8]
 800d54e:	1b9b      	subs	r3, r3, r6
 800d550:	60a3      	str	r3, [r4, #8]
 800d552:	6823      	ldr	r3, [r4, #0]
 800d554:	4433      	add	r3, r6
 800d556:	6023      	str	r3, [r4, #0]
 800d558:	2000      	movs	r0, #0
 800d55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d55e:	462a      	mov	r2, r5
 800d560:	f000 fa26 	bl	800d9b0 <_realloc_r>
 800d564:	4606      	mov	r6, r0
 800d566:	2800      	cmp	r0, #0
 800d568:	d1e0      	bne.n	800d52c <__ssputs_r+0x5c>
 800d56a:	6921      	ldr	r1, [r4, #16]
 800d56c:	4650      	mov	r0, sl
 800d56e:	f7ff fbeb 	bl	800cd48 <_free_r>
 800d572:	230c      	movs	r3, #12
 800d574:	f8ca 3000 	str.w	r3, [sl]
 800d578:	89a3      	ldrh	r3, [r4, #12]
 800d57a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d57e:	81a3      	strh	r3, [r4, #12]
 800d580:	f04f 30ff 	mov.w	r0, #4294967295
 800d584:	e7e9      	b.n	800d55a <__ssputs_r+0x8a>
	...

0800d588 <_svfiprintf_r>:
 800d588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d58c:	4698      	mov	r8, r3
 800d58e:	898b      	ldrh	r3, [r1, #12]
 800d590:	061b      	lsls	r3, r3, #24
 800d592:	b09d      	sub	sp, #116	@ 0x74
 800d594:	4607      	mov	r7, r0
 800d596:	460d      	mov	r5, r1
 800d598:	4614      	mov	r4, r2
 800d59a:	d510      	bpl.n	800d5be <_svfiprintf_r+0x36>
 800d59c:	690b      	ldr	r3, [r1, #16]
 800d59e:	b973      	cbnz	r3, 800d5be <_svfiprintf_r+0x36>
 800d5a0:	2140      	movs	r1, #64	@ 0x40
 800d5a2:	f7fd fe85 	bl	800b2b0 <_malloc_r>
 800d5a6:	6028      	str	r0, [r5, #0]
 800d5a8:	6128      	str	r0, [r5, #16]
 800d5aa:	b930      	cbnz	r0, 800d5ba <_svfiprintf_r+0x32>
 800d5ac:	230c      	movs	r3, #12
 800d5ae:	603b      	str	r3, [r7, #0]
 800d5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b4:	b01d      	add	sp, #116	@ 0x74
 800d5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ba:	2340      	movs	r3, #64	@ 0x40
 800d5bc:	616b      	str	r3, [r5, #20]
 800d5be:	2300      	movs	r3, #0
 800d5c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5c2:	2320      	movs	r3, #32
 800d5c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5cc:	2330      	movs	r3, #48	@ 0x30
 800d5ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d76c <_svfiprintf_r+0x1e4>
 800d5d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5d6:	f04f 0901 	mov.w	r9, #1
 800d5da:	4623      	mov	r3, r4
 800d5dc:	469a      	mov	sl, r3
 800d5de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5e2:	b10a      	cbz	r2, 800d5e8 <_svfiprintf_r+0x60>
 800d5e4:	2a25      	cmp	r2, #37	@ 0x25
 800d5e6:	d1f9      	bne.n	800d5dc <_svfiprintf_r+0x54>
 800d5e8:	ebba 0b04 	subs.w	fp, sl, r4
 800d5ec:	d00b      	beq.n	800d606 <_svfiprintf_r+0x7e>
 800d5ee:	465b      	mov	r3, fp
 800d5f0:	4622      	mov	r2, r4
 800d5f2:	4629      	mov	r1, r5
 800d5f4:	4638      	mov	r0, r7
 800d5f6:	f7ff ff6b 	bl	800d4d0 <__ssputs_r>
 800d5fa:	3001      	adds	r0, #1
 800d5fc:	f000 80a7 	beq.w	800d74e <_svfiprintf_r+0x1c6>
 800d600:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d602:	445a      	add	r2, fp
 800d604:	9209      	str	r2, [sp, #36]	@ 0x24
 800d606:	f89a 3000 	ldrb.w	r3, [sl]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	f000 809f 	beq.w	800d74e <_svfiprintf_r+0x1c6>
 800d610:	2300      	movs	r3, #0
 800d612:	f04f 32ff 	mov.w	r2, #4294967295
 800d616:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d61a:	f10a 0a01 	add.w	sl, sl, #1
 800d61e:	9304      	str	r3, [sp, #16]
 800d620:	9307      	str	r3, [sp, #28]
 800d622:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d626:	931a      	str	r3, [sp, #104]	@ 0x68
 800d628:	4654      	mov	r4, sl
 800d62a:	2205      	movs	r2, #5
 800d62c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d630:	484e      	ldr	r0, [pc, #312]	@ (800d76c <_svfiprintf_r+0x1e4>)
 800d632:	f7f2 fdcd 	bl	80001d0 <memchr>
 800d636:	9a04      	ldr	r2, [sp, #16]
 800d638:	b9d8      	cbnz	r0, 800d672 <_svfiprintf_r+0xea>
 800d63a:	06d0      	lsls	r0, r2, #27
 800d63c:	bf44      	itt	mi
 800d63e:	2320      	movmi	r3, #32
 800d640:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d644:	0711      	lsls	r1, r2, #28
 800d646:	bf44      	itt	mi
 800d648:	232b      	movmi	r3, #43	@ 0x2b
 800d64a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d64e:	f89a 3000 	ldrb.w	r3, [sl]
 800d652:	2b2a      	cmp	r3, #42	@ 0x2a
 800d654:	d015      	beq.n	800d682 <_svfiprintf_r+0xfa>
 800d656:	9a07      	ldr	r2, [sp, #28]
 800d658:	4654      	mov	r4, sl
 800d65a:	2000      	movs	r0, #0
 800d65c:	f04f 0c0a 	mov.w	ip, #10
 800d660:	4621      	mov	r1, r4
 800d662:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d666:	3b30      	subs	r3, #48	@ 0x30
 800d668:	2b09      	cmp	r3, #9
 800d66a:	d94b      	bls.n	800d704 <_svfiprintf_r+0x17c>
 800d66c:	b1b0      	cbz	r0, 800d69c <_svfiprintf_r+0x114>
 800d66e:	9207      	str	r2, [sp, #28]
 800d670:	e014      	b.n	800d69c <_svfiprintf_r+0x114>
 800d672:	eba0 0308 	sub.w	r3, r0, r8
 800d676:	fa09 f303 	lsl.w	r3, r9, r3
 800d67a:	4313      	orrs	r3, r2
 800d67c:	9304      	str	r3, [sp, #16]
 800d67e:	46a2      	mov	sl, r4
 800d680:	e7d2      	b.n	800d628 <_svfiprintf_r+0xa0>
 800d682:	9b03      	ldr	r3, [sp, #12]
 800d684:	1d19      	adds	r1, r3, #4
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	9103      	str	r1, [sp, #12]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	bfbb      	ittet	lt
 800d68e:	425b      	neglt	r3, r3
 800d690:	f042 0202 	orrlt.w	r2, r2, #2
 800d694:	9307      	strge	r3, [sp, #28]
 800d696:	9307      	strlt	r3, [sp, #28]
 800d698:	bfb8      	it	lt
 800d69a:	9204      	strlt	r2, [sp, #16]
 800d69c:	7823      	ldrb	r3, [r4, #0]
 800d69e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6a0:	d10a      	bne.n	800d6b8 <_svfiprintf_r+0x130>
 800d6a2:	7863      	ldrb	r3, [r4, #1]
 800d6a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6a6:	d132      	bne.n	800d70e <_svfiprintf_r+0x186>
 800d6a8:	9b03      	ldr	r3, [sp, #12]
 800d6aa:	1d1a      	adds	r2, r3, #4
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	9203      	str	r2, [sp, #12]
 800d6b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6b4:	3402      	adds	r4, #2
 800d6b6:	9305      	str	r3, [sp, #20]
 800d6b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d77c <_svfiprintf_r+0x1f4>
 800d6bc:	7821      	ldrb	r1, [r4, #0]
 800d6be:	2203      	movs	r2, #3
 800d6c0:	4650      	mov	r0, sl
 800d6c2:	f7f2 fd85 	bl	80001d0 <memchr>
 800d6c6:	b138      	cbz	r0, 800d6d8 <_svfiprintf_r+0x150>
 800d6c8:	9b04      	ldr	r3, [sp, #16]
 800d6ca:	eba0 000a 	sub.w	r0, r0, sl
 800d6ce:	2240      	movs	r2, #64	@ 0x40
 800d6d0:	4082      	lsls	r2, r0
 800d6d2:	4313      	orrs	r3, r2
 800d6d4:	3401      	adds	r4, #1
 800d6d6:	9304      	str	r3, [sp, #16]
 800d6d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6dc:	4824      	ldr	r0, [pc, #144]	@ (800d770 <_svfiprintf_r+0x1e8>)
 800d6de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6e2:	2206      	movs	r2, #6
 800d6e4:	f7f2 fd74 	bl	80001d0 <memchr>
 800d6e8:	2800      	cmp	r0, #0
 800d6ea:	d036      	beq.n	800d75a <_svfiprintf_r+0x1d2>
 800d6ec:	4b21      	ldr	r3, [pc, #132]	@ (800d774 <_svfiprintf_r+0x1ec>)
 800d6ee:	bb1b      	cbnz	r3, 800d738 <_svfiprintf_r+0x1b0>
 800d6f0:	9b03      	ldr	r3, [sp, #12]
 800d6f2:	3307      	adds	r3, #7
 800d6f4:	f023 0307 	bic.w	r3, r3, #7
 800d6f8:	3308      	adds	r3, #8
 800d6fa:	9303      	str	r3, [sp, #12]
 800d6fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6fe:	4433      	add	r3, r6
 800d700:	9309      	str	r3, [sp, #36]	@ 0x24
 800d702:	e76a      	b.n	800d5da <_svfiprintf_r+0x52>
 800d704:	fb0c 3202 	mla	r2, ip, r2, r3
 800d708:	460c      	mov	r4, r1
 800d70a:	2001      	movs	r0, #1
 800d70c:	e7a8      	b.n	800d660 <_svfiprintf_r+0xd8>
 800d70e:	2300      	movs	r3, #0
 800d710:	3401      	adds	r4, #1
 800d712:	9305      	str	r3, [sp, #20]
 800d714:	4619      	mov	r1, r3
 800d716:	f04f 0c0a 	mov.w	ip, #10
 800d71a:	4620      	mov	r0, r4
 800d71c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d720:	3a30      	subs	r2, #48	@ 0x30
 800d722:	2a09      	cmp	r2, #9
 800d724:	d903      	bls.n	800d72e <_svfiprintf_r+0x1a6>
 800d726:	2b00      	cmp	r3, #0
 800d728:	d0c6      	beq.n	800d6b8 <_svfiprintf_r+0x130>
 800d72a:	9105      	str	r1, [sp, #20]
 800d72c:	e7c4      	b.n	800d6b8 <_svfiprintf_r+0x130>
 800d72e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d732:	4604      	mov	r4, r0
 800d734:	2301      	movs	r3, #1
 800d736:	e7f0      	b.n	800d71a <_svfiprintf_r+0x192>
 800d738:	ab03      	add	r3, sp, #12
 800d73a:	9300      	str	r3, [sp, #0]
 800d73c:	462a      	mov	r2, r5
 800d73e:	4b0e      	ldr	r3, [pc, #56]	@ (800d778 <_svfiprintf_r+0x1f0>)
 800d740:	a904      	add	r1, sp, #16
 800d742:	4638      	mov	r0, r7
 800d744:	f7fd fee0 	bl	800b508 <_printf_float>
 800d748:	1c42      	adds	r2, r0, #1
 800d74a:	4606      	mov	r6, r0
 800d74c:	d1d6      	bne.n	800d6fc <_svfiprintf_r+0x174>
 800d74e:	89ab      	ldrh	r3, [r5, #12]
 800d750:	065b      	lsls	r3, r3, #25
 800d752:	f53f af2d 	bmi.w	800d5b0 <_svfiprintf_r+0x28>
 800d756:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d758:	e72c      	b.n	800d5b4 <_svfiprintf_r+0x2c>
 800d75a:	ab03      	add	r3, sp, #12
 800d75c:	9300      	str	r3, [sp, #0]
 800d75e:	462a      	mov	r2, r5
 800d760:	4b05      	ldr	r3, [pc, #20]	@ (800d778 <_svfiprintf_r+0x1f0>)
 800d762:	a904      	add	r1, sp, #16
 800d764:	4638      	mov	r0, r7
 800d766:	f7fe f967 	bl	800ba38 <_printf_i>
 800d76a:	e7ed      	b.n	800d748 <_svfiprintf_r+0x1c0>
 800d76c:	0800e2ce 	.word	0x0800e2ce
 800d770:	0800e2d8 	.word	0x0800e2d8
 800d774:	0800b509 	.word	0x0800b509
 800d778:	0800d4d1 	.word	0x0800d4d1
 800d77c:	0800e2d4 	.word	0x0800e2d4

0800d780 <__sflush_r>:
 800d780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d788:	0716      	lsls	r6, r2, #28
 800d78a:	4605      	mov	r5, r0
 800d78c:	460c      	mov	r4, r1
 800d78e:	d454      	bmi.n	800d83a <__sflush_r+0xba>
 800d790:	684b      	ldr	r3, [r1, #4]
 800d792:	2b00      	cmp	r3, #0
 800d794:	dc02      	bgt.n	800d79c <__sflush_r+0x1c>
 800d796:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d798:	2b00      	cmp	r3, #0
 800d79a:	dd48      	ble.n	800d82e <__sflush_r+0xae>
 800d79c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d79e:	2e00      	cmp	r6, #0
 800d7a0:	d045      	beq.n	800d82e <__sflush_r+0xae>
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d7a8:	682f      	ldr	r7, [r5, #0]
 800d7aa:	6a21      	ldr	r1, [r4, #32]
 800d7ac:	602b      	str	r3, [r5, #0]
 800d7ae:	d030      	beq.n	800d812 <__sflush_r+0x92>
 800d7b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d7b2:	89a3      	ldrh	r3, [r4, #12]
 800d7b4:	0759      	lsls	r1, r3, #29
 800d7b6:	d505      	bpl.n	800d7c4 <__sflush_r+0x44>
 800d7b8:	6863      	ldr	r3, [r4, #4]
 800d7ba:	1ad2      	subs	r2, r2, r3
 800d7bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d7be:	b10b      	cbz	r3, 800d7c4 <__sflush_r+0x44>
 800d7c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d7c2:	1ad2      	subs	r2, r2, r3
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7c8:	6a21      	ldr	r1, [r4, #32]
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	47b0      	blx	r6
 800d7ce:	1c43      	adds	r3, r0, #1
 800d7d0:	89a3      	ldrh	r3, [r4, #12]
 800d7d2:	d106      	bne.n	800d7e2 <__sflush_r+0x62>
 800d7d4:	6829      	ldr	r1, [r5, #0]
 800d7d6:	291d      	cmp	r1, #29
 800d7d8:	d82b      	bhi.n	800d832 <__sflush_r+0xb2>
 800d7da:	4a2a      	ldr	r2, [pc, #168]	@ (800d884 <__sflush_r+0x104>)
 800d7dc:	40ca      	lsrs	r2, r1
 800d7de:	07d6      	lsls	r6, r2, #31
 800d7e0:	d527      	bpl.n	800d832 <__sflush_r+0xb2>
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	6062      	str	r2, [r4, #4]
 800d7e6:	04d9      	lsls	r1, r3, #19
 800d7e8:	6922      	ldr	r2, [r4, #16]
 800d7ea:	6022      	str	r2, [r4, #0]
 800d7ec:	d504      	bpl.n	800d7f8 <__sflush_r+0x78>
 800d7ee:	1c42      	adds	r2, r0, #1
 800d7f0:	d101      	bne.n	800d7f6 <__sflush_r+0x76>
 800d7f2:	682b      	ldr	r3, [r5, #0]
 800d7f4:	b903      	cbnz	r3, 800d7f8 <__sflush_r+0x78>
 800d7f6:	6560      	str	r0, [r4, #84]	@ 0x54
 800d7f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7fa:	602f      	str	r7, [r5, #0]
 800d7fc:	b1b9      	cbz	r1, 800d82e <__sflush_r+0xae>
 800d7fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d802:	4299      	cmp	r1, r3
 800d804:	d002      	beq.n	800d80c <__sflush_r+0x8c>
 800d806:	4628      	mov	r0, r5
 800d808:	f7ff fa9e 	bl	800cd48 <_free_r>
 800d80c:	2300      	movs	r3, #0
 800d80e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d810:	e00d      	b.n	800d82e <__sflush_r+0xae>
 800d812:	2301      	movs	r3, #1
 800d814:	4628      	mov	r0, r5
 800d816:	47b0      	blx	r6
 800d818:	4602      	mov	r2, r0
 800d81a:	1c50      	adds	r0, r2, #1
 800d81c:	d1c9      	bne.n	800d7b2 <__sflush_r+0x32>
 800d81e:	682b      	ldr	r3, [r5, #0]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d0c6      	beq.n	800d7b2 <__sflush_r+0x32>
 800d824:	2b1d      	cmp	r3, #29
 800d826:	d001      	beq.n	800d82c <__sflush_r+0xac>
 800d828:	2b16      	cmp	r3, #22
 800d82a:	d11e      	bne.n	800d86a <__sflush_r+0xea>
 800d82c:	602f      	str	r7, [r5, #0]
 800d82e:	2000      	movs	r0, #0
 800d830:	e022      	b.n	800d878 <__sflush_r+0xf8>
 800d832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d836:	b21b      	sxth	r3, r3
 800d838:	e01b      	b.n	800d872 <__sflush_r+0xf2>
 800d83a:	690f      	ldr	r7, [r1, #16]
 800d83c:	2f00      	cmp	r7, #0
 800d83e:	d0f6      	beq.n	800d82e <__sflush_r+0xae>
 800d840:	0793      	lsls	r3, r2, #30
 800d842:	680e      	ldr	r6, [r1, #0]
 800d844:	bf08      	it	eq
 800d846:	694b      	ldreq	r3, [r1, #20]
 800d848:	600f      	str	r7, [r1, #0]
 800d84a:	bf18      	it	ne
 800d84c:	2300      	movne	r3, #0
 800d84e:	eba6 0807 	sub.w	r8, r6, r7
 800d852:	608b      	str	r3, [r1, #8]
 800d854:	f1b8 0f00 	cmp.w	r8, #0
 800d858:	dde9      	ble.n	800d82e <__sflush_r+0xae>
 800d85a:	6a21      	ldr	r1, [r4, #32]
 800d85c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d85e:	4643      	mov	r3, r8
 800d860:	463a      	mov	r2, r7
 800d862:	4628      	mov	r0, r5
 800d864:	47b0      	blx	r6
 800d866:	2800      	cmp	r0, #0
 800d868:	dc08      	bgt.n	800d87c <__sflush_r+0xfc>
 800d86a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d86e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d872:	81a3      	strh	r3, [r4, #12]
 800d874:	f04f 30ff 	mov.w	r0, #4294967295
 800d878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d87c:	4407      	add	r7, r0
 800d87e:	eba8 0800 	sub.w	r8, r8, r0
 800d882:	e7e7      	b.n	800d854 <__sflush_r+0xd4>
 800d884:	20400001 	.word	0x20400001

0800d888 <_fflush_r>:
 800d888:	b538      	push	{r3, r4, r5, lr}
 800d88a:	690b      	ldr	r3, [r1, #16]
 800d88c:	4605      	mov	r5, r0
 800d88e:	460c      	mov	r4, r1
 800d890:	b913      	cbnz	r3, 800d898 <_fflush_r+0x10>
 800d892:	2500      	movs	r5, #0
 800d894:	4628      	mov	r0, r5
 800d896:	bd38      	pop	{r3, r4, r5, pc}
 800d898:	b118      	cbz	r0, 800d8a2 <_fflush_r+0x1a>
 800d89a:	6a03      	ldr	r3, [r0, #32]
 800d89c:	b90b      	cbnz	r3, 800d8a2 <_fflush_r+0x1a>
 800d89e:	f7fe fa75 	bl	800bd8c <__sinit>
 800d8a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d0f3      	beq.n	800d892 <_fflush_r+0xa>
 800d8aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d8ac:	07d0      	lsls	r0, r2, #31
 800d8ae:	d404      	bmi.n	800d8ba <_fflush_r+0x32>
 800d8b0:	0599      	lsls	r1, r3, #22
 800d8b2:	d402      	bmi.n	800d8ba <_fflush_r+0x32>
 800d8b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8b6:	f7fe fbea 	bl	800c08e <__retarget_lock_acquire_recursive>
 800d8ba:	4628      	mov	r0, r5
 800d8bc:	4621      	mov	r1, r4
 800d8be:	f7ff ff5f 	bl	800d780 <__sflush_r>
 800d8c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8c4:	07da      	lsls	r2, r3, #31
 800d8c6:	4605      	mov	r5, r0
 800d8c8:	d4e4      	bmi.n	800d894 <_fflush_r+0xc>
 800d8ca:	89a3      	ldrh	r3, [r4, #12]
 800d8cc:	059b      	lsls	r3, r3, #22
 800d8ce:	d4e1      	bmi.n	800d894 <_fflush_r+0xc>
 800d8d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8d2:	f7fe fbdd 	bl	800c090 <__retarget_lock_release_recursive>
 800d8d6:	e7dd      	b.n	800d894 <_fflush_r+0xc>

0800d8d8 <memmove>:
 800d8d8:	4288      	cmp	r0, r1
 800d8da:	b510      	push	{r4, lr}
 800d8dc:	eb01 0402 	add.w	r4, r1, r2
 800d8e0:	d902      	bls.n	800d8e8 <memmove+0x10>
 800d8e2:	4284      	cmp	r4, r0
 800d8e4:	4623      	mov	r3, r4
 800d8e6:	d807      	bhi.n	800d8f8 <memmove+0x20>
 800d8e8:	1e43      	subs	r3, r0, #1
 800d8ea:	42a1      	cmp	r1, r4
 800d8ec:	d008      	beq.n	800d900 <memmove+0x28>
 800d8ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8f6:	e7f8      	b.n	800d8ea <memmove+0x12>
 800d8f8:	4402      	add	r2, r0
 800d8fa:	4601      	mov	r1, r0
 800d8fc:	428a      	cmp	r2, r1
 800d8fe:	d100      	bne.n	800d902 <memmove+0x2a>
 800d900:	bd10      	pop	{r4, pc}
 800d902:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d906:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d90a:	e7f7      	b.n	800d8fc <memmove+0x24>

0800d90c <memcpy>:
 800d90c:	440a      	add	r2, r1
 800d90e:	4291      	cmp	r1, r2
 800d910:	f100 33ff 	add.w	r3, r0, #4294967295
 800d914:	d100      	bne.n	800d918 <memcpy+0xc>
 800d916:	4770      	bx	lr
 800d918:	b510      	push	{r4, lr}
 800d91a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d91e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d922:	4291      	cmp	r1, r2
 800d924:	d1f9      	bne.n	800d91a <memcpy+0xe>
 800d926:	bd10      	pop	{r4, pc}

0800d928 <__assert_func>:
 800d928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d92a:	4614      	mov	r4, r2
 800d92c:	461a      	mov	r2, r3
 800d92e:	4b09      	ldr	r3, [pc, #36]	@ (800d954 <__assert_func+0x2c>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4605      	mov	r5, r0
 800d934:	68d8      	ldr	r0, [r3, #12]
 800d936:	b14c      	cbz	r4, 800d94c <__assert_func+0x24>
 800d938:	4b07      	ldr	r3, [pc, #28]	@ (800d958 <__assert_func+0x30>)
 800d93a:	9100      	str	r1, [sp, #0]
 800d93c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d940:	4906      	ldr	r1, [pc, #24]	@ (800d95c <__assert_func+0x34>)
 800d942:	462b      	mov	r3, r5
 800d944:	f000 f870 	bl	800da28 <fiprintf>
 800d948:	f7fd fc78 	bl	800b23c <abort>
 800d94c:	4b04      	ldr	r3, [pc, #16]	@ (800d960 <__assert_func+0x38>)
 800d94e:	461c      	mov	r4, r3
 800d950:	e7f3      	b.n	800d93a <__assert_func+0x12>
 800d952:	bf00      	nop
 800d954:	2000003c 	.word	0x2000003c
 800d958:	0800e2e9 	.word	0x0800e2e9
 800d95c:	0800e2f6 	.word	0x0800e2f6
 800d960:	0800e324 	.word	0x0800e324

0800d964 <_calloc_r>:
 800d964:	b570      	push	{r4, r5, r6, lr}
 800d966:	fba1 5402 	umull	r5, r4, r1, r2
 800d96a:	b934      	cbnz	r4, 800d97a <_calloc_r+0x16>
 800d96c:	4629      	mov	r1, r5
 800d96e:	f7fd fc9f 	bl	800b2b0 <_malloc_r>
 800d972:	4606      	mov	r6, r0
 800d974:	b928      	cbnz	r0, 800d982 <_calloc_r+0x1e>
 800d976:	4630      	mov	r0, r6
 800d978:	bd70      	pop	{r4, r5, r6, pc}
 800d97a:	220c      	movs	r2, #12
 800d97c:	6002      	str	r2, [r0, #0]
 800d97e:	2600      	movs	r6, #0
 800d980:	e7f9      	b.n	800d976 <_calloc_r+0x12>
 800d982:	462a      	mov	r2, r5
 800d984:	4621      	mov	r1, r4
 800d986:	f7fe fab0 	bl	800beea <memset>
 800d98a:	e7f4      	b.n	800d976 <_calloc_r+0x12>

0800d98c <__ascii_mbtowc>:
 800d98c:	b082      	sub	sp, #8
 800d98e:	b901      	cbnz	r1, 800d992 <__ascii_mbtowc+0x6>
 800d990:	a901      	add	r1, sp, #4
 800d992:	b142      	cbz	r2, 800d9a6 <__ascii_mbtowc+0x1a>
 800d994:	b14b      	cbz	r3, 800d9aa <__ascii_mbtowc+0x1e>
 800d996:	7813      	ldrb	r3, [r2, #0]
 800d998:	600b      	str	r3, [r1, #0]
 800d99a:	7812      	ldrb	r2, [r2, #0]
 800d99c:	1e10      	subs	r0, r2, #0
 800d99e:	bf18      	it	ne
 800d9a0:	2001      	movne	r0, #1
 800d9a2:	b002      	add	sp, #8
 800d9a4:	4770      	bx	lr
 800d9a6:	4610      	mov	r0, r2
 800d9a8:	e7fb      	b.n	800d9a2 <__ascii_mbtowc+0x16>
 800d9aa:	f06f 0001 	mvn.w	r0, #1
 800d9ae:	e7f8      	b.n	800d9a2 <__ascii_mbtowc+0x16>

0800d9b0 <_realloc_r>:
 800d9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9b4:	4607      	mov	r7, r0
 800d9b6:	4614      	mov	r4, r2
 800d9b8:	460d      	mov	r5, r1
 800d9ba:	b921      	cbnz	r1, 800d9c6 <_realloc_r+0x16>
 800d9bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9c0:	4611      	mov	r1, r2
 800d9c2:	f7fd bc75 	b.w	800b2b0 <_malloc_r>
 800d9c6:	b92a      	cbnz	r2, 800d9d4 <_realloc_r+0x24>
 800d9c8:	f7ff f9be 	bl	800cd48 <_free_r>
 800d9cc:	4625      	mov	r5, r4
 800d9ce:	4628      	mov	r0, r5
 800d9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9d4:	f000 f83a 	bl	800da4c <_malloc_usable_size_r>
 800d9d8:	4284      	cmp	r4, r0
 800d9da:	4606      	mov	r6, r0
 800d9dc:	d802      	bhi.n	800d9e4 <_realloc_r+0x34>
 800d9de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d9e2:	d8f4      	bhi.n	800d9ce <_realloc_r+0x1e>
 800d9e4:	4621      	mov	r1, r4
 800d9e6:	4638      	mov	r0, r7
 800d9e8:	f7fd fc62 	bl	800b2b0 <_malloc_r>
 800d9ec:	4680      	mov	r8, r0
 800d9ee:	b908      	cbnz	r0, 800d9f4 <_realloc_r+0x44>
 800d9f0:	4645      	mov	r5, r8
 800d9f2:	e7ec      	b.n	800d9ce <_realloc_r+0x1e>
 800d9f4:	42b4      	cmp	r4, r6
 800d9f6:	4622      	mov	r2, r4
 800d9f8:	4629      	mov	r1, r5
 800d9fa:	bf28      	it	cs
 800d9fc:	4632      	movcs	r2, r6
 800d9fe:	f7ff ff85 	bl	800d90c <memcpy>
 800da02:	4629      	mov	r1, r5
 800da04:	4638      	mov	r0, r7
 800da06:	f7ff f99f 	bl	800cd48 <_free_r>
 800da0a:	e7f1      	b.n	800d9f0 <_realloc_r+0x40>

0800da0c <__ascii_wctomb>:
 800da0c:	4603      	mov	r3, r0
 800da0e:	4608      	mov	r0, r1
 800da10:	b141      	cbz	r1, 800da24 <__ascii_wctomb+0x18>
 800da12:	2aff      	cmp	r2, #255	@ 0xff
 800da14:	d904      	bls.n	800da20 <__ascii_wctomb+0x14>
 800da16:	228a      	movs	r2, #138	@ 0x8a
 800da18:	601a      	str	r2, [r3, #0]
 800da1a:	f04f 30ff 	mov.w	r0, #4294967295
 800da1e:	4770      	bx	lr
 800da20:	700a      	strb	r2, [r1, #0]
 800da22:	2001      	movs	r0, #1
 800da24:	4770      	bx	lr
	...

0800da28 <fiprintf>:
 800da28:	b40e      	push	{r1, r2, r3}
 800da2a:	b503      	push	{r0, r1, lr}
 800da2c:	4601      	mov	r1, r0
 800da2e:	ab03      	add	r3, sp, #12
 800da30:	4805      	ldr	r0, [pc, #20]	@ (800da48 <fiprintf+0x20>)
 800da32:	f853 2b04 	ldr.w	r2, [r3], #4
 800da36:	6800      	ldr	r0, [r0, #0]
 800da38:	9301      	str	r3, [sp, #4]
 800da3a:	f000 f839 	bl	800dab0 <_vfiprintf_r>
 800da3e:	b002      	add	sp, #8
 800da40:	f85d eb04 	ldr.w	lr, [sp], #4
 800da44:	b003      	add	sp, #12
 800da46:	4770      	bx	lr
 800da48:	2000003c 	.word	0x2000003c

0800da4c <_malloc_usable_size_r>:
 800da4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da50:	1f18      	subs	r0, r3, #4
 800da52:	2b00      	cmp	r3, #0
 800da54:	bfbc      	itt	lt
 800da56:	580b      	ldrlt	r3, [r1, r0]
 800da58:	18c0      	addlt	r0, r0, r3
 800da5a:	4770      	bx	lr

0800da5c <__sfputc_r>:
 800da5c:	6893      	ldr	r3, [r2, #8]
 800da5e:	3b01      	subs	r3, #1
 800da60:	2b00      	cmp	r3, #0
 800da62:	b410      	push	{r4}
 800da64:	6093      	str	r3, [r2, #8]
 800da66:	da08      	bge.n	800da7a <__sfputc_r+0x1e>
 800da68:	6994      	ldr	r4, [r2, #24]
 800da6a:	42a3      	cmp	r3, r4
 800da6c:	db01      	blt.n	800da72 <__sfputc_r+0x16>
 800da6e:	290a      	cmp	r1, #10
 800da70:	d103      	bne.n	800da7a <__sfputc_r+0x1e>
 800da72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da76:	f000 b933 	b.w	800dce0 <__swbuf_r>
 800da7a:	6813      	ldr	r3, [r2, #0]
 800da7c:	1c58      	adds	r0, r3, #1
 800da7e:	6010      	str	r0, [r2, #0]
 800da80:	7019      	strb	r1, [r3, #0]
 800da82:	4608      	mov	r0, r1
 800da84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da88:	4770      	bx	lr

0800da8a <__sfputs_r>:
 800da8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da8c:	4606      	mov	r6, r0
 800da8e:	460f      	mov	r7, r1
 800da90:	4614      	mov	r4, r2
 800da92:	18d5      	adds	r5, r2, r3
 800da94:	42ac      	cmp	r4, r5
 800da96:	d101      	bne.n	800da9c <__sfputs_r+0x12>
 800da98:	2000      	movs	r0, #0
 800da9a:	e007      	b.n	800daac <__sfputs_r+0x22>
 800da9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daa0:	463a      	mov	r2, r7
 800daa2:	4630      	mov	r0, r6
 800daa4:	f7ff ffda 	bl	800da5c <__sfputc_r>
 800daa8:	1c43      	adds	r3, r0, #1
 800daaa:	d1f3      	bne.n	800da94 <__sfputs_r+0xa>
 800daac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dab0 <_vfiprintf_r>:
 800dab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab4:	460d      	mov	r5, r1
 800dab6:	b09d      	sub	sp, #116	@ 0x74
 800dab8:	4614      	mov	r4, r2
 800daba:	4698      	mov	r8, r3
 800dabc:	4606      	mov	r6, r0
 800dabe:	b118      	cbz	r0, 800dac8 <_vfiprintf_r+0x18>
 800dac0:	6a03      	ldr	r3, [r0, #32]
 800dac2:	b90b      	cbnz	r3, 800dac8 <_vfiprintf_r+0x18>
 800dac4:	f7fe f962 	bl	800bd8c <__sinit>
 800dac8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800daca:	07d9      	lsls	r1, r3, #31
 800dacc:	d405      	bmi.n	800dada <_vfiprintf_r+0x2a>
 800dace:	89ab      	ldrh	r3, [r5, #12]
 800dad0:	059a      	lsls	r2, r3, #22
 800dad2:	d402      	bmi.n	800dada <_vfiprintf_r+0x2a>
 800dad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dad6:	f7fe fada 	bl	800c08e <__retarget_lock_acquire_recursive>
 800dada:	89ab      	ldrh	r3, [r5, #12]
 800dadc:	071b      	lsls	r3, r3, #28
 800dade:	d501      	bpl.n	800dae4 <_vfiprintf_r+0x34>
 800dae0:	692b      	ldr	r3, [r5, #16]
 800dae2:	b99b      	cbnz	r3, 800db0c <_vfiprintf_r+0x5c>
 800dae4:	4629      	mov	r1, r5
 800dae6:	4630      	mov	r0, r6
 800dae8:	f000 f938 	bl	800dd5c <__swsetup_r>
 800daec:	b170      	cbz	r0, 800db0c <_vfiprintf_r+0x5c>
 800daee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800daf0:	07dc      	lsls	r4, r3, #31
 800daf2:	d504      	bpl.n	800dafe <_vfiprintf_r+0x4e>
 800daf4:	f04f 30ff 	mov.w	r0, #4294967295
 800daf8:	b01d      	add	sp, #116	@ 0x74
 800dafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dafe:	89ab      	ldrh	r3, [r5, #12]
 800db00:	0598      	lsls	r0, r3, #22
 800db02:	d4f7      	bmi.n	800daf4 <_vfiprintf_r+0x44>
 800db04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db06:	f7fe fac3 	bl	800c090 <__retarget_lock_release_recursive>
 800db0a:	e7f3      	b.n	800daf4 <_vfiprintf_r+0x44>
 800db0c:	2300      	movs	r3, #0
 800db0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800db10:	2320      	movs	r3, #32
 800db12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db16:	f8cd 800c 	str.w	r8, [sp, #12]
 800db1a:	2330      	movs	r3, #48	@ 0x30
 800db1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dccc <_vfiprintf_r+0x21c>
 800db20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db24:	f04f 0901 	mov.w	r9, #1
 800db28:	4623      	mov	r3, r4
 800db2a:	469a      	mov	sl, r3
 800db2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db30:	b10a      	cbz	r2, 800db36 <_vfiprintf_r+0x86>
 800db32:	2a25      	cmp	r2, #37	@ 0x25
 800db34:	d1f9      	bne.n	800db2a <_vfiprintf_r+0x7a>
 800db36:	ebba 0b04 	subs.w	fp, sl, r4
 800db3a:	d00b      	beq.n	800db54 <_vfiprintf_r+0xa4>
 800db3c:	465b      	mov	r3, fp
 800db3e:	4622      	mov	r2, r4
 800db40:	4629      	mov	r1, r5
 800db42:	4630      	mov	r0, r6
 800db44:	f7ff ffa1 	bl	800da8a <__sfputs_r>
 800db48:	3001      	adds	r0, #1
 800db4a:	f000 80a7 	beq.w	800dc9c <_vfiprintf_r+0x1ec>
 800db4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db50:	445a      	add	r2, fp
 800db52:	9209      	str	r2, [sp, #36]	@ 0x24
 800db54:	f89a 3000 	ldrb.w	r3, [sl]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	f000 809f 	beq.w	800dc9c <_vfiprintf_r+0x1ec>
 800db5e:	2300      	movs	r3, #0
 800db60:	f04f 32ff 	mov.w	r2, #4294967295
 800db64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db68:	f10a 0a01 	add.w	sl, sl, #1
 800db6c:	9304      	str	r3, [sp, #16]
 800db6e:	9307      	str	r3, [sp, #28]
 800db70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db74:	931a      	str	r3, [sp, #104]	@ 0x68
 800db76:	4654      	mov	r4, sl
 800db78:	2205      	movs	r2, #5
 800db7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db7e:	4853      	ldr	r0, [pc, #332]	@ (800dccc <_vfiprintf_r+0x21c>)
 800db80:	f7f2 fb26 	bl	80001d0 <memchr>
 800db84:	9a04      	ldr	r2, [sp, #16]
 800db86:	b9d8      	cbnz	r0, 800dbc0 <_vfiprintf_r+0x110>
 800db88:	06d1      	lsls	r1, r2, #27
 800db8a:	bf44      	itt	mi
 800db8c:	2320      	movmi	r3, #32
 800db8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db92:	0713      	lsls	r3, r2, #28
 800db94:	bf44      	itt	mi
 800db96:	232b      	movmi	r3, #43	@ 0x2b
 800db98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db9c:	f89a 3000 	ldrb.w	r3, [sl]
 800dba0:	2b2a      	cmp	r3, #42	@ 0x2a
 800dba2:	d015      	beq.n	800dbd0 <_vfiprintf_r+0x120>
 800dba4:	9a07      	ldr	r2, [sp, #28]
 800dba6:	4654      	mov	r4, sl
 800dba8:	2000      	movs	r0, #0
 800dbaa:	f04f 0c0a 	mov.w	ip, #10
 800dbae:	4621      	mov	r1, r4
 800dbb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbb4:	3b30      	subs	r3, #48	@ 0x30
 800dbb6:	2b09      	cmp	r3, #9
 800dbb8:	d94b      	bls.n	800dc52 <_vfiprintf_r+0x1a2>
 800dbba:	b1b0      	cbz	r0, 800dbea <_vfiprintf_r+0x13a>
 800dbbc:	9207      	str	r2, [sp, #28]
 800dbbe:	e014      	b.n	800dbea <_vfiprintf_r+0x13a>
 800dbc0:	eba0 0308 	sub.w	r3, r0, r8
 800dbc4:	fa09 f303 	lsl.w	r3, r9, r3
 800dbc8:	4313      	orrs	r3, r2
 800dbca:	9304      	str	r3, [sp, #16]
 800dbcc:	46a2      	mov	sl, r4
 800dbce:	e7d2      	b.n	800db76 <_vfiprintf_r+0xc6>
 800dbd0:	9b03      	ldr	r3, [sp, #12]
 800dbd2:	1d19      	adds	r1, r3, #4
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	9103      	str	r1, [sp, #12]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	bfbb      	ittet	lt
 800dbdc:	425b      	neglt	r3, r3
 800dbde:	f042 0202 	orrlt.w	r2, r2, #2
 800dbe2:	9307      	strge	r3, [sp, #28]
 800dbe4:	9307      	strlt	r3, [sp, #28]
 800dbe6:	bfb8      	it	lt
 800dbe8:	9204      	strlt	r2, [sp, #16]
 800dbea:	7823      	ldrb	r3, [r4, #0]
 800dbec:	2b2e      	cmp	r3, #46	@ 0x2e
 800dbee:	d10a      	bne.n	800dc06 <_vfiprintf_r+0x156>
 800dbf0:	7863      	ldrb	r3, [r4, #1]
 800dbf2:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbf4:	d132      	bne.n	800dc5c <_vfiprintf_r+0x1ac>
 800dbf6:	9b03      	ldr	r3, [sp, #12]
 800dbf8:	1d1a      	adds	r2, r3, #4
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	9203      	str	r2, [sp, #12]
 800dbfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc02:	3402      	adds	r4, #2
 800dc04:	9305      	str	r3, [sp, #20]
 800dc06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dcdc <_vfiprintf_r+0x22c>
 800dc0a:	7821      	ldrb	r1, [r4, #0]
 800dc0c:	2203      	movs	r2, #3
 800dc0e:	4650      	mov	r0, sl
 800dc10:	f7f2 fade 	bl	80001d0 <memchr>
 800dc14:	b138      	cbz	r0, 800dc26 <_vfiprintf_r+0x176>
 800dc16:	9b04      	ldr	r3, [sp, #16]
 800dc18:	eba0 000a 	sub.w	r0, r0, sl
 800dc1c:	2240      	movs	r2, #64	@ 0x40
 800dc1e:	4082      	lsls	r2, r0
 800dc20:	4313      	orrs	r3, r2
 800dc22:	3401      	adds	r4, #1
 800dc24:	9304      	str	r3, [sp, #16]
 800dc26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc2a:	4829      	ldr	r0, [pc, #164]	@ (800dcd0 <_vfiprintf_r+0x220>)
 800dc2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc30:	2206      	movs	r2, #6
 800dc32:	f7f2 facd 	bl	80001d0 <memchr>
 800dc36:	2800      	cmp	r0, #0
 800dc38:	d03f      	beq.n	800dcba <_vfiprintf_r+0x20a>
 800dc3a:	4b26      	ldr	r3, [pc, #152]	@ (800dcd4 <_vfiprintf_r+0x224>)
 800dc3c:	bb1b      	cbnz	r3, 800dc86 <_vfiprintf_r+0x1d6>
 800dc3e:	9b03      	ldr	r3, [sp, #12]
 800dc40:	3307      	adds	r3, #7
 800dc42:	f023 0307 	bic.w	r3, r3, #7
 800dc46:	3308      	adds	r3, #8
 800dc48:	9303      	str	r3, [sp, #12]
 800dc4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc4c:	443b      	add	r3, r7
 800dc4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc50:	e76a      	b.n	800db28 <_vfiprintf_r+0x78>
 800dc52:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc56:	460c      	mov	r4, r1
 800dc58:	2001      	movs	r0, #1
 800dc5a:	e7a8      	b.n	800dbae <_vfiprintf_r+0xfe>
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	3401      	adds	r4, #1
 800dc60:	9305      	str	r3, [sp, #20]
 800dc62:	4619      	mov	r1, r3
 800dc64:	f04f 0c0a 	mov.w	ip, #10
 800dc68:	4620      	mov	r0, r4
 800dc6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc6e:	3a30      	subs	r2, #48	@ 0x30
 800dc70:	2a09      	cmp	r2, #9
 800dc72:	d903      	bls.n	800dc7c <_vfiprintf_r+0x1cc>
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d0c6      	beq.n	800dc06 <_vfiprintf_r+0x156>
 800dc78:	9105      	str	r1, [sp, #20]
 800dc7a:	e7c4      	b.n	800dc06 <_vfiprintf_r+0x156>
 800dc7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc80:	4604      	mov	r4, r0
 800dc82:	2301      	movs	r3, #1
 800dc84:	e7f0      	b.n	800dc68 <_vfiprintf_r+0x1b8>
 800dc86:	ab03      	add	r3, sp, #12
 800dc88:	9300      	str	r3, [sp, #0]
 800dc8a:	462a      	mov	r2, r5
 800dc8c:	4b12      	ldr	r3, [pc, #72]	@ (800dcd8 <_vfiprintf_r+0x228>)
 800dc8e:	a904      	add	r1, sp, #16
 800dc90:	4630      	mov	r0, r6
 800dc92:	f7fd fc39 	bl	800b508 <_printf_float>
 800dc96:	4607      	mov	r7, r0
 800dc98:	1c78      	adds	r0, r7, #1
 800dc9a:	d1d6      	bne.n	800dc4a <_vfiprintf_r+0x19a>
 800dc9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc9e:	07d9      	lsls	r1, r3, #31
 800dca0:	d405      	bmi.n	800dcae <_vfiprintf_r+0x1fe>
 800dca2:	89ab      	ldrh	r3, [r5, #12]
 800dca4:	059a      	lsls	r2, r3, #22
 800dca6:	d402      	bmi.n	800dcae <_vfiprintf_r+0x1fe>
 800dca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcaa:	f7fe f9f1 	bl	800c090 <__retarget_lock_release_recursive>
 800dcae:	89ab      	ldrh	r3, [r5, #12]
 800dcb0:	065b      	lsls	r3, r3, #25
 800dcb2:	f53f af1f 	bmi.w	800daf4 <_vfiprintf_r+0x44>
 800dcb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dcb8:	e71e      	b.n	800daf8 <_vfiprintf_r+0x48>
 800dcba:	ab03      	add	r3, sp, #12
 800dcbc:	9300      	str	r3, [sp, #0]
 800dcbe:	462a      	mov	r2, r5
 800dcc0:	4b05      	ldr	r3, [pc, #20]	@ (800dcd8 <_vfiprintf_r+0x228>)
 800dcc2:	a904      	add	r1, sp, #16
 800dcc4:	4630      	mov	r0, r6
 800dcc6:	f7fd feb7 	bl	800ba38 <_printf_i>
 800dcca:	e7e4      	b.n	800dc96 <_vfiprintf_r+0x1e6>
 800dccc:	0800e2ce 	.word	0x0800e2ce
 800dcd0:	0800e2d8 	.word	0x0800e2d8
 800dcd4:	0800b509 	.word	0x0800b509
 800dcd8:	0800da8b 	.word	0x0800da8b
 800dcdc:	0800e2d4 	.word	0x0800e2d4

0800dce0 <__swbuf_r>:
 800dce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce2:	460e      	mov	r6, r1
 800dce4:	4614      	mov	r4, r2
 800dce6:	4605      	mov	r5, r0
 800dce8:	b118      	cbz	r0, 800dcf2 <__swbuf_r+0x12>
 800dcea:	6a03      	ldr	r3, [r0, #32]
 800dcec:	b90b      	cbnz	r3, 800dcf2 <__swbuf_r+0x12>
 800dcee:	f7fe f84d 	bl	800bd8c <__sinit>
 800dcf2:	69a3      	ldr	r3, [r4, #24]
 800dcf4:	60a3      	str	r3, [r4, #8]
 800dcf6:	89a3      	ldrh	r3, [r4, #12]
 800dcf8:	071a      	lsls	r2, r3, #28
 800dcfa:	d501      	bpl.n	800dd00 <__swbuf_r+0x20>
 800dcfc:	6923      	ldr	r3, [r4, #16]
 800dcfe:	b943      	cbnz	r3, 800dd12 <__swbuf_r+0x32>
 800dd00:	4621      	mov	r1, r4
 800dd02:	4628      	mov	r0, r5
 800dd04:	f000 f82a 	bl	800dd5c <__swsetup_r>
 800dd08:	b118      	cbz	r0, 800dd12 <__swbuf_r+0x32>
 800dd0a:	f04f 37ff 	mov.w	r7, #4294967295
 800dd0e:	4638      	mov	r0, r7
 800dd10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd12:	6823      	ldr	r3, [r4, #0]
 800dd14:	6922      	ldr	r2, [r4, #16]
 800dd16:	1a98      	subs	r0, r3, r2
 800dd18:	6963      	ldr	r3, [r4, #20]
 800dd1a:	b2f6      	uxtb	r6, r6
 800dd1c:	4283      	cmp	r3, r0
 800dd1e:	4637      	mov	r7, r6
 800dd20:	dc05      	bgt.n	800dd2e <__swbuf_r+0x4e>
 800dd22:	4621      	mov	r1, r4
 800dd24:	4628      	mov	r0, r5
 800dd26:	f7ff fdaf 	bl	800d888 <_fflush_r>
 800dd2a:	2800      	cmp	r0, #0
 800dd2c:	d1ed      	bne.n	800dd0a <__swbuf_r+0x2a>
 800dd2e:	68a3      	ldr	r3, [r4, #8]
 800dd30:	3b01      	subs	r3, #1
 800dd32:	60a3      	str	r3, [r4, #8]
 800dd34:	6823      	ldr	r3, [r4, #0]
 800dd36:	1c5a      	adds	r2, r3, #1
 800dd38:	6022      	str	r2, [r4, #0]
 800dd3a:	701e      	strb	r6, [r3, #0]
 800dd3c:	6962      	ldr	r2, [r4, #20]
 800dd3e:	1c43      	adds	r3, r0, #1
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d004      	beq.n	800dd4e <__swbuf_r+0x6e>
 800dd44:	89a3      	ldrh	r3, [r4, #12]
 800dd46:	07db      	lsls	r3, r3, #31
 800dd48:	d5e1      	bpl.n	800dd0e <__swbuf_r+0x2e>
 800dd4a:	2e0a      	cmp	r6, #10
 800dd4c:	d1df      	bne.n	800dd0e <__swbuf_r+0x2e>
 800dd4e:	4621      	mov	r1, r4
 800dd50:	4628      	mov	r0, r5
 800dd52:	f7ff fd99 	bl	800d888 <_fflush_r>
 800dd56:	2800      	cmp	r0, #0
 800dd58:	d0d9      	beq.n	800dd0e <__swbuf_r+0x2e>
 800dd5a:	e7d6      	b.n	800dd0a <__swbuf_r+0x2a>

0800dd5c <__swsetup_r>:
 800dd5c:	b538      	push	{r3, r4, r5, lr}
 800dd5e:	4b29      	ldr	r3, [pc, #164]	@ (800de04 <__swsetup_r+0xa8>)
 800dd60:	4605      	mov	r5, r0
 800dd62:	6818      	ldr	r0, [r3, #0]
 800dd64:	460c      	mov	r4, r1
 800dd66:	b118      	cbz	r0, 800dd70 <__swsetup_r+0x14>
 800dd68:	6a03      	ldr	r3, [r0, #32]
 800dd6a:	b90b      	cbnz	r3, 800dd70 <__swsetup_r+0x14>
 800dd6c:	f7fe f80e 	bl	800bd8c <__sinit>
 800dd70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd74:	0719      	lsls	r1, r3, #28
 800dd76:	d422      	bmi.n	800ddbe <__swsetup_r+0x62>
 800dd78:	06da      	lsls	r2, r3, #27
 800dd7a:	d407      	bmi.n	800dd8c <__swsetup_r+0x30>
 800dd7c:	2209      	movs	r2, #9
 800dd7e:	602a      	str	r2, [r5, #0]
 800dd80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd84:	81a3      	strh	r3, [r4, #12]
 800dd86:	f04f 30ff 	mov.w	r0, #4294967295
 800dd8a:	e033      	b.n	800ddf4 <__swsetup_r+0x98>
 800dd8c:	0758      	lsls	r0, r3, #29
 800dd8e:	d512      	bpl.n	800ddb6 <__swsetup_r+0x5a>
 800dd90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd92:	b141      	cbz	r1, 800dda6 <__swsetup_r+0x4a>
 800dd94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd98:	4299      	cmp	r1, r3
 800dd9a:	d002      	beq.n	800dda2 <__swsetup_r+0x46>
 800dd9c:	4628      	mov	r0, r5
 800dd9e:	f7fe ffd3 	bl	800cd48 <_free_r>
 800dda2:	2300      	movs	r3, #0
 800dda4:	6363      	str	r3, [r4, #52]	@ 0x34
 800dda6:	89a3      	ldrh	r3, [r4, #12]
 800dda8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ddac:	81a3      	strh	r3, [r4, #12]
 800ddae:	2300      	movs	r3, #0
 800ddb0:	6063      	str	r3, [r4, #4]
 800ddb2:	6923      	ldr	r3, [r4, #16]
 800ddb4:	6023      	str	r3, [r4, #0]
 800ddb6:	89a3      	ldrh	r3, [r4, #12]
 800ddb8:	f043 0308 	orr.w	r3, r3, #8
 800ddbc:	81a3      	strh	r3, [r4, #12]
 800ddbe:	6923      	ldr	r3, [r4, #16]
 800ddc0:	b94b      	cbnz	r3, 800ddd6 <__swsetup_r+0x7a>
 800ddc2:	89a3      	ldrh	r3, [r4, #12]
 800ddc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ddc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ddcc:	d003      	beq.n	800ddd6 <__swsetup_r+0x7a>
 800ddce:	4621      	mov	r1, r4
 800ddd0:	4628      	mov	r0, r5
 800ddd2:	f000 f83f 	bl	800de54 <__smakebuf_r>
 800ddd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddda:	f013 0201 	ands.w	r2, r3, #1
 800ddde:	d00a      	beq.n	800ddf6 <__swsetup_r+0x9a>
 800dde0:	2200      	movs	r2, #0
 800dde2:	60a2      	str	r2, [r4, #8]
 800dde4:	6962      	ldr	r2, [r4, #20]
 800dde6:	4252      	negs	r2, r2
 800dde8:	61a2      	str	r2, [r4, #24]
 800ddea:	6922      	ldr	r2, [r4, #16]
 800ddec:	b942      	cbnz	r2, 800de00 <__swsetup_r+0xa4>
 800ddee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ddf2:	d1c5      	bne.n	800dd80 <__swsetup_r+0x24>
 800ddf4:	bd38      	pop	{r3, r4, r5, pc}
 800ddf6:	0799      	lsls	r1, r3, #30
 800ddf8:	bf58      	it	pl
 800ddfa:	6962      	ldrpl	r2, [r4, #20]
 800ddfc:	60a2      	str	r2, [r4, #8]
 800ddfe:	e7f4      	b.n	800ddea <__swsetup_r+0x8e>
 800de00:	2000      	movs	r0, #0
 800de02:	e7f7      	b.n	800ddf4 <__swsetup_r+0x98>
 800de04:	2000003c 	.word	0x2000003c

0800de08 <__swhatbuf_r>:
 800de08:	b570      	push	{r4, r5, r6, lr}
 800de0a:	460c      	mov	r4, r1
 800de0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de10:	2900      	cmp	r1, #0
 800de12:	b096      	sub	sp, #88	@ 0x58
 800de14:	4615      	mov	r5, r2
 800de16:	461e      	mov	r6, r3
 800de18:	da0d      	bge.n	800de36 <__swhatbuf_r+0x2e>
 800de1a:	89a3      	ldrh	r3, [r4, #12]
 800de1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800de20:	f04f 0100 	mov.w	r1, #0
 800de24:	bf14      	ite	ne
 800de26:	2340      	movne	r3, #64	@ 0x40
 800de28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800de2c:	2000      	movs	r0, #0
 800de2e:	6031      	str	r1, [r6, #0]
 800de30:	602b      	str	r3, [r5, #0]
 800de32:	b016      	add	sp, #88	@ 0x58
 800de34:	bd70      	pop	{r4, r5, r6, pc}
 800de36:	466a      	mov	r2, sp
 800de38:	f000 f848 	bl	800decc <_fstat_r>
 800de3c:	2800      	cmp	r0, #0
 800de3e:	dbec      	blt.n	800de1a <__swhatbuf_r+0x12>
 800de40:	9901      	ldr	r1, [sp, #4]
 800de42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800de46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800de4a:	4259      	negs	r1, r3
 800de4c:	4159      	adcs	r1, r3
 800de4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de52:	e7eb      	b.n	800de2c <__swhatbuf_r+0x24>

0800de54 <__smakebuf_r>:
 800de54:	898b      	ldrh	r3, [r1, #12]
 800de56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de58:	079d      	lsls	r5, r3, #30
 800de5a:	4606      	mov	r6, r0
 800de5c:	460c      	mov	r4, r1
 800de5e:	d507      	bpl.n	800de70 <__smakebuf_r+0x1c>
 800de60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800de64:	6023      	str	r3, [r4, #0]
 800de66:	6123      	str	r3, [r4, #16]
 800de68:	2301      	movs	r3, #1
 800de6a:	6163      	str	r3, [r4, #20]
 800de6c:	b003      	add	sp, #12
 800de6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de70:	ab01      	add	r3, sp, #4
 800de72:	466a      	mov	r2, sp
 800de74:	f7ff ffc8 	bl	800de08 <__swhatbuf_r>
 800de78:	9f00      	ldr	r7, [sp, #0]
 800de7a:	4605      	mov	r5, r0
 800de7c:	4639      	mov	r1, r7
 800de7e:	4630      	mov	r0, r6
 800de80:	f7fd fa16 	bl	800b2b0 <_malloc_r>
 800de84:	b948      	cbnz	r0, 800de9a <__smakebuf_r+0x46>
 800de86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de8a:	059a      	lsls	r2, r3, #22
 800de8c:	d4ee      	bmi.n	800de6c <__smakebuf_r+0x18>
 800de8e:	f023 0303 	bic.w	r3, r3, #3
 800de92:	f043 0302 	orr.w	r3, r3, #2
 800de96:	81a3      	strh	r3, [r4, #12]
 800de98:	e7e2      	b.n	800de60 <__smakebuf_r+0xc>
 800de9a:	89a3      	ldrh	r3, [r4, #12]
 800de9c:	6020      	str	r0, [r4, #0]
 800de9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dea2:	81a3      	strh	r3, [r4, #12]
 800dea4:	9b01      	ldr	r3, [sp, #4]
 800dea6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800deaa:	b15b      	cbz	r3, 800dec4 <__smakebuf_r+0x70>
 800deac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800deb0:	4630      	mov	r0, r6
 800deb2:	f000 f81d 	bl	800def0 <_isatty_r>
 800deb6:	b128      	cbz	r0, 800dec4 <__smakebuf_r+0x70>
 800deb8:	89a3      	ldrh	r3, [r4, #12]
 800deba:	f023 0303 	bic.w	r3, r3, #3
 800debe:	f043 0301 	orr.w	r3, r3, #1
 800dec2:	81a3      	strh	r3, [r4, #12]
 800dec4:	89a3      	ldrh	r3, [r4, #12]
 800dec6:	431d      	orrs	r5, r3
 800dec8:	81a5      	strh	r5, [r4, #12]
 800deca:	e7cf      	b.n	800de6c <__smakebuf_r+0x18>

0800decc <_fstat_r>:
 800decc:	b538      	push	{r3, r4, r5, lr}
 800dece:	4d07      	ldr	r5, [pc, #28]	@ (800deec <_fstat_r+0x20>)
 800ded0:	2300      	movs	r3, #0
 800ded2:	4604      	mov	r4, r0
 800ded4:	4608      	mov	r0, r1
 800ded6:	4611      	mov	r1, r2
 800ded8:	602b      	str	r3, [r5, #0]
 800deda:	f7f4 f9ff 	bl	80022dc <_fstat>
 800dede:	1c43      	adds	r3, r0, #1
 800dee0:	d102      	bne.n	800dee8 <_fstat_r+0x1c>
 800dee2:	682b      	ldr	r3, [r5, #0]
 800dee4:	b103      	cbz	r3, 800dee8 <_fstat_r+0x1c>
 800dee6:	6023      	str	r3, [r4, #0]
 800dee8:	bd38      	pop	{r3, r4, r5, pc}
 800deea:	bf00      	nop
 800deec:	20000cac 	.word	0x20000cac

0800def0 <_isatty_r>:
 800def0:	b538      	push	{r3, r4, r5, lr}
 800def2:	4d06      	ldr	r5, [pc, #24]	@ (800df0c <_isatty_r+0x1c>)
 800def4:	2300      	movs	r3, #0
 800def6:	4604      	mov	r4, r0
 800def8:	4608      	mov	r0, r1
 800defa:	602b      	str	r3, [r5, #0]
 800defc:	f7f4 f9fe 	bl	80022fc <_isatty>
 800df00:	1c43      	adds	r3, r0, #1
 800df02:	d102      	bne.n	800df0a <_isatty_r+0x1a>
 800df04:	682b      	ldr	r3, [r5, #0]
 800df06:	b103      	cbz	r3, 800df0a <_isatty_r+0x1a>
 800df08:	6023      	str	r3, [r4, #0]
 800df0a:	bd38      	pop	{r3, r4, r5, pc}
 800df0c:	20000cac 	.word	0x20000cac

0800df10 <_init>:
 800df10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df12:	bf00      	nop
 800df14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df16:	bc08      	pop	{r3}
 800df18:	469e      	mov	lr, r3
 800df1a:	4770      	bx	lr

0800df1c <_fini>:
 800df1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df1e:	bf00      	nop
 800df20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df22:	bc08      	pop	{r3}
 800df24:	469e      	mov	lr, r3
 800df26:	4770      	bx	lr
