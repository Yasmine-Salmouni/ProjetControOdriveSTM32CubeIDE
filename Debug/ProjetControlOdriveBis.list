
ProjetControlOdriveBis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e294  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  0800e428  0800e428  0000f428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9ec  0800e9ec  000101f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e9ec  0800e9ec  0000f9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9f4  0800e9f4  000101f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9f4  0800e9f4  0000f9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e9f8  0800e9f8  0000f9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800e9fc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101f8  2**0
                  CONTENTS
 10 .bss          00000ac4  200001f8  200001f8  000101f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000cbc  20000cbc  000101f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020951  00000000  00000000  00010228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e5c  00000000  00000000  00030b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  000359d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000116a  00000000  00000000  00037098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000297c8  00000000  00000000  00038202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002079b  00000000  00000000  000619ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d47b1  00000000  00000000  00082165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00156916  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007070  00000000  00000000  0015695c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0015d9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e40c 	.word	0x0800e40c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800e40c 	.word	0x0800e40c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <_ZN17MotorComputationsC1Ef>:

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

MotorComputations::MotorComputations(float torqueConstant)
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	ed87 0a00 	vstr	s0, [r7]
    : torqueConstant(torqueConstant) {}
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <_ZNK17MotorComputations24computeTorqueFromCurrentEf>:

float MotorComputations::computeTorqueFromCurrent(float current) const {
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	ed87 0a00 	vstr	s0, [r7]
    return current * torqueConstant;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	ed93 7a00 	vldr	s14, [r3]
 8000fa6:	edd7 7a00 	vldr	s15, [r7]
 8000faa:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000fae:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <_ZNK17MotorComputations24computeCurrentFromTorqueEf>:

float MotorComputations::computeCurrentFromTorque(float torque) const {
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	ed87 0a00 	vstr	s0, [r7]
    return torque / torqueConstant;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	edd3 7a00 	vldr	s15, [r3]
 8000fce:	ed97 7a00 	vldr	s14, [r7]
 8000fd2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000fd6:	eef0 7a66 	vmov.f32	s15, s13
}
 8000fda:	eeb0 0a67 	vmov.f32	s0, s15
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <_ZNK17MotorComputations12computeOmegaEf>:

float MotorComputations::computeOmega(float cadence_rpm) const {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	ed87 0a00 	vstr	s0, [r7]
    return cadence_rpm * 2.0f * M_PI / 60.0f;  // conversion tr/min → rad/s
 8000ff4:	edd7 7a00 	vldr	s15, [r7]
 8000ff8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ffc:	ee17 0a90 	vmov	r0, s15
 8001000:	f7ff faa2 	bl	8000548 <__aeabi_f2d>
 8001004:	a30f      	add	r3, pc, #60	@ (adr r3, 8001044 <_ZNK17MotorComputations12computeOmegaEf+0x5c>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff faf5 	bl	80005f8 <__aeabi_dmul>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <_ZNK17MotorComputations12computeOmegaEf+0x58>)
 800101c:	f7ff fc16 	bl	800084c <__aeabi_ddiv>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	f7ff fdbe 	bl	8000ba8 <__aeabi_d2f>
 800102c:	4603      	mov	r3, r0
 800102e:	ee07 3a90 	vmov	s15, r3
}
 8001032:	eeb0 0a67 	vmov.f32	s0, s15
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	f3af 8000 	nop.w
 8001040:	404e0000 	.word	0x404e0000
 8001044:	54442d18 	.word	0x54442d18
 8001048:	400921fb 	.word	0x400921fb

0800104c <_ZNK17MotorComputations12computePowerEff>:

float MotorComputations::computePower(float torque, float cadence_rpm) const {
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	ed87 0a02 	vstr	s0, [r7, #8]
 8001058:	edc7 0a01 	vstr	s1, [r7, #4]
    float omega = computeOmega(cadence_rpm);
 800105c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f7ff ffc1 	bl	8000fe8 <_ZNK17MotorComputations12computeOmegaEf>
 8001066:	ed87 0a05 	vstr	s0, [r7, #20]
    return torque * omega;
 800106a:	ed97 7a02 	vldr	s14, [r7, #8]
 800106e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001072:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001076:	eeb0 0a67 	vmov.f32	s0, s15
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <_ZN17MotorComputations17setTorqueConstantEf>:

void MotorComputations::setTorqueConstant(float value) {
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	ed87 0a00 	vstr	s0, [r7]
    torqueConstant = value;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	601a      	str	r2, [r3, #0]

}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	ed87 0a01 	vstr	s0, [r7, #4]
 80010a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ac:	eef0 7ae7 	vabs.f32	s15, s15
 80010b0:	eeb0 0a67 	vmov.f32	s0, s15
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <_ZN15MotorControllerC1EP20__UART_HandleTypeDefS1_f>:

#include "../Inc/ScreenDisplay.hpp"
#include "../Inc/VESCInterface.hpp"
#include "../Inc/MotorComputations.hpp"

 MotorController::MotorController(UART_HandleTypeDef* controlUart, UART_HandleTypeDef* screenUart, float torquecst)
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	ed87 0a00 	vstr	s0, [r7]
     : control_uart(controlUart),
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	601a      	str	r2, [r3, #0]
     screen_uart(screenUart),
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	605a      	str	r2, [r3, #4]
	 direction(DirectionMode::FORWARD),
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
	 controlMode(ControlMode::CADENCE),
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2201      	movs	r2, #1
 80010e6:	60da      	str	r2, [r3, #12]
	 instruction(0.0f),
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
	 linearGain(0.05f),
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4a19      	ldr	r2, [pc, #100]	@ (8001158 <_ZN15MotorControllerC1EP20__UART_HandleTypeDefS1_f+0x98>)
 80010f4:	615a      	str	r2, [r3, #20]
	 torqueConstant(torquecst),
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	619a      	str	r2, [r3, #24]
	 lastAppliedCurrent(0.0f),
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	61da      	str	r2, [r3, #28]
	 ramp(6.0f),
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4a15      	ldr	r2, [pc, #84]	@ (800115c <_ZN15MotorControllerC1EP20__UART_HandleTypeDefS1_f+0x9c>)
 8001108:	621a      	str	r2, [r3, #32]
     computations(torquecst)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3324      	adds	r3, #36	@ 0x24
 800110e:	ed97 0a00 	vldr	s0, [r7]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff2e 	bl	8000f74 <_ZN17MotorComputationsC1Ef>
 {
     screen = new ScreenDisplay(screen_uart);
 8001118:	2004      	movs	r0, #4
 800111a:	f00a faf5 	bl	800b708 <_Znwj>
 800111e:	4603      	mov	r3, r0
 8001120:	461c      	mov	r4, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	4619      	mov	r1, r3
 8001128:	4620      	mov	r0, r4
 800112a:	f000 fcc5 	bl	8001ab8 <_ZN13ScreenDisplayC1EP20__UART_HandleTypeDef>
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	649c      	str	r4, [r3, #72]	@ 0x48
     vesc = new VESCInterface(control_uart);
 8001132:	20d8      	movs	r0, #216	@ 0xd8
 8001134:	f00a fae8 	bl	800b708 <_Znwj>
 8001138:	4603      	mov	r3, r0
 800113a:	461c      	mov	r4, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	4620      	mov	r0, r4
 8001144:	f000 ff66 	bl	8002014 <_ZN13VESCInterfaceC1EP20__UART_HandleTypeDef>
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	64dc      	str	r4, [r3, #76]	@ 0x4c
 }
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bd90      	pop	{r4, r7, pc}
 8001156:	bf00      	nop
 8001158:	3d4ccccd 	.word	0x3d4ccccd
 800115c:	40c00000 	.word	0x40c00000

08001160 <_ZN15MotorController12setDirectionE13DirectionMode>:
 //Par défaut le moteur est en modes forward et cadence avec une vitesse nulle

 void MotorController::setDirection(DirectionMode dir) {
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
     direction = dir;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	609a      	str	r2, [r3, #8]
 }
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_ZN15MotorController14setControlModeE11ControlMode>:

 void MotorController::setControlMode(ControlMode mode) {
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
     controlMode = mode;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	60da      	str	r2, [r3, #12]
 }
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <_ZN15MotorController14setInstructionEf>:

 void MotorController::setInstruction(float value) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	ed87 0a00 	vstr	s0, [r7]
     instruction = value;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	611a      	str	r2, [r3, #16]
     if (controlMode == ControlMode::LINEAR) return;  // linear se gère dynamiquement
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	d02e      	beq.n	8001210 <_ZN15MotorController14setInstructionEf+0x78>
     switch (controlMode) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d82c      	bhi.n	8001214 <_ZN15MotorController14setInstructionEf+0x7c>
 80011ba:	a201      	add	r2, pc, #4	@ (adr r2, 80011c0 <_ZN15MotorController14setInstructionEf+0x28>)
 80011bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c0:	080011e1 	.word	0x080011e1
 80011c4:	080011d1 	.word	0x080011d1
 80011c8:	080011f1 	.word	0x080011f1
 80011cc:	08001201 	.word	0x08001201
         case ControlMode::CADENCE:
             setCadence(value);
 80011d0:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 80011d4:	ed97 0a00 	vldr	s0, [r7]
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f842 	bl	8001262 <_ZN15MotorController10setCadenceEff>
             break;
 80011de:	e01a      	b.n	8001216 <_ZN15MotorController14setInstructionEf+0x7e>
         case ControlMode::TORQUE:
             setTorque(value);
 80011e0:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 80011e4:	ed97 0a00 	vldr	s0, [r7]
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f858 	bl	800129e <_ZN15MotorController9setTorqueEff>
             break;
 80011ee:	e012      	b.n	8001216 <_ZN15MotorController14setInstructionEf+0x7e>
         case ControlMode::POWER_CONCENTRIC:
             setPowerConcentric(value);
 80011f0:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 80011f4:	ed97 0a00 	vldr	s0, [r7]
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 f981 	bl	8001500 <_ZN15MotorController18setPowerConcentricEff>
             break;
 80011fe:	e00a      	b.n	8001216 <_ZN15MotorController14setInstructionEf+0x7e>
         case ControlMode::POWER_ECCENTRIC:
             setPowerEccentric(value);
 8001200:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 8001204:	ed97 0a00 	vldr	s0, [r7]
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 f9d1 	bl	80015b0 <_ZN15MotorController17setPowerEccentricEff>
             break;
 800120e:	e002      	b.n	8001216 <_ZN15MotorController14setInstructionEf+0x7e>
     if (controlMode == ControlMode::LINEAR) return;  // linear se gère dynamiquement
 8001210:	bf00      	nop
 8001212:	e000      	b.n	8001216 <_ZN15MotorController14setInstructionEf+0x7e>
         default:
             break;
 8001214:	bf00      	nop
     }
 }
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <_ZN15MotorController13setLinearGainEf>:

 void MotorController::setLinearGain(float gain)
 {
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	ed87 0a00 	vstr	s0, [r7]
     linearGain = gain;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	615a      	str	r2, [r3, #20]
 }
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <_ZN15MotorController17setTorqueConstantEf>:

 void MotorController::setTorqueConstant(float torquecst)
 {
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	ed87 0a00 	vstr	s0, [r7]
    torqueConstant = torquecst;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	619a      	str	r2, [r3, #24]
    computations.setTorqueConstant(torquecst);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3324      	adds	r3, #36	@ 0x24
 8001250:	ed97 0a00 	vldr	s0, [r7]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff13 	bl	8001080 <_ZN17MotorComputations17setTorqueConstantEf>

 }
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_ZN15MotorController10setCadenceEff>:
 {
    ramp = rampRate;
 }

 void MotorController::setCadence(float rpm, float rampRate) //Implémenter une version avec rampRate
 {
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	ed87 0a02 	vstr	s0, [r7, #8]
 800126e:	edc7 0a01 	vstr	s1, [r7, #4]
     float value = applyDirection(rpm);
 8001272:	ed97 0a02 	vldr	s0, [r7, #8]
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f000 fab8 	bl	80017ec <_ZN15MotorController14applyDirectionEf>
 800127c:	ed87 0a05 	vstr	s0, [r7, #20]
     //sendCommand("v 0 %.2f\n", value);
     vesc->setRPM(value);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001284:	edd7 7a05 	vldr	s15, [r7, #20]
 8001288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800128c:	ee17 1a90 	vmov	r1, s15
 8001290:	4618      	mov	r0, r3
 8001292:	f000 ff19 	bl	80020c8 <_ZN13VESCInterface6setRPMEl>
 }
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <_ZN15MotorController9setTorqueEff>:

 void MotorController::setTorque(float torque, float rampRate) //Implementer une version avec rampRate
 {
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	ed87 0a02 	vstr	s0, [r7, #8]
 80012aa:	edc7 0a01 	vstr	s1, [r7, #4]
     float effectiveTorque = applyDirection(torque);
 80012ae:	ed97 0a02 	vldr	s0, [r7, #8]
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f000 fa9a 	bl	80017ec <_ZN15MotorController14applyDirectionEf>
 80012b8:	ed87 0a05 	vstr	s0, [r7, #20]
     float current = computations.computeCurrentFromTorque(effectiveTorque);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	3324      	adds	r3, #36	@ 0x24
 80012c0:	ed97 0a05 	vldr	s0, [r7, #20]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fe79 	bl	8000fbc <_ZNK17MotorComputations24computeCurrentFromTorqueEf>
 80012ca:	ed87 0a04 	vstr	s0, [r7, #16]
     vesc->setCurrent(current);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d2:	ed97 0a04 	vldr	s0, [r7, #16]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 fec6 	bl	8002068 <_ZN13VESCInterface10setCurrentEf>
 }
 80012dc:	bf00      	nop
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <_ZN15MotorController10getCadenceEv>:

 float MotorController::getCadence()
 {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
    float rpmValue = vesc->getRPM();  // Lire la vitesse moteur (en tr/min)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 ff0b 	bl	800210c <_ZN13VESCInterface6getRPMEv>
 80012f6:	ed87 0a03 	vstr	s0, [r7, #12]

    if (rpmValue < 0.0f) {
 80012fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80012fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001306:	d507      	bpl.n	8001318 <_ZN15MotorController10getCadenceEv+0x34>
        // Affichage erreur si lecture échouée
        screen->showError("Erreur: réception cadence");
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800130c:	4906      	ldr	r1, [pc, #24]	@ (8001328 <_ZN15MotorController10getCadenceEv+0x44>)
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fcf8 	bl	8001d04 <_ZN13ScreenDisplay9showErrorEPKc>
        return -1.0f;
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <_ZN15MotorController10getCadenceEv+0x48>)
 8001316:	e000      	b.n	800131a <_ZN15MotorController10getCadenceEv+0x36>
    }

    return rpmValue;  // Retourne directement la cadence (RPM)
 8001318:	68fb      	ldr	r3, [r7, #12]
 }
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eeb0 0a67 	vmov.f32	s0, s15
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	0800e428 	.word	0x0800e428
 800132c:	bf800000 	.word	0xbf800000

08001330 <_ZN15MotorController9getTorqueEv>:

 float MotorController::getTorque() {
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
    float current = vesc->getCurrent();  // Récupère le courant réel du moteur
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133c:	4618      	mov	r0, r3
 800133e:	f000 ff57 	bl	80021f0 <_ZN13VESCInterface10getCurrentEv>
 8001342:	ed87 0a03 	vstr	s0, [r7, #12]

    if (current < 0.0f) {
 8001346:	edd7 7a03 	vldr	s15, [r7, #12]
 800134a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800134e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001352:	d508      	bpl.n	8001366 <_ZN15MotorController9getTorqueEv+0x36>
        screen->showError("Erreur: réception courant");
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001358:	490e      	ldr	r1, [pc, #56]	@ (8001394 <_ZN15MotorController9getTorqueEv+0x64>)
 800135a:	4618      	mov	r0, r3
 800135c:	f000 fcd2 	bl	8001d04 <_ZN13ScreenDisplay9showErrorEPKc>
        return -1.0f;  // Erreur de lecture
 8001360:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8001364:	e010      	b.n	8001388 <_ZN15MotorController9getTorqueEv+0x58>
    }

    float torque = computations.computeTorqueFromCurrent(current);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3324      	adds	r3, #36	@ 0x24
 800136a:	ed97 0a03 	vldr	s0, [r7, #12]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fe10 	bl	8000f94 <_ZNK17MotorComputations24computeTorqueFromCurrentEf>
 8001374:	ed87 0a02 	vstr	s0, [r7, #8]
    return applyDirection(torque);  // Respecte le sens FORWARD/REVERSE
 8001378:	ed97 0a02 	vldr	s0, [r7, #8]
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 fa35 	bl	80017ec <_ZN15MotorController14applyDirectionEf>
 8001382:	eef0 7a40 	vmov.f32	s15, s0
 8001386:	bf00      	nop
}
 8001388:	eeb0 0a67 	vmov.f32	s0, s15
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	0800e444 	.word	0x0800e444

08001398 <_ZN15MotorController12getDutyCycleEv>:

float MotorController::getDutyCycle()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
    float duty = vesc->getDutyCycle();  // Lecture via VESCInterface
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 ff6b 	bl	8002280 <_ZN13VESCInterface12getDutyCycleEv>
 80013aa:	ed87 0a03 	vstr	s0, [r7, #12]

    if (duty < -1.1f || duty > 1.1f) {  // Valeur hors plage → erreur
 80013ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80013b2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001414 <_ZN15MotorController12getDutyCycleEv+0x7c>
 80013b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013be:	d408      	bmi.n	80013d2 <_ZN15MotorController12getDutyCycleEv+0x3a>
 80013c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80013c4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001418 <_ZN15MotorController12getDutyCycleEv+0x80>
 80013c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d0:	dd08      	ble.n	80013e4 <_ZN15MotorController12getDutyCycleEv+0x4c>
        screen->showError("Erreur: Duty invalide");
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013d6:	4911      	ldr	r1, [pc, #68]	@ (800141c <_ZN15MotorController12getDutyCycleEv+0x84>)
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 fc93 	bl	8001d04 <_ZN13ScreenDisplay9showErrorEPKc>
        return -2.0f;
 80013de:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80013e2:	e010      	b.n	8001406 <_ZN15MotorController12getDutyCycleEv+0x6e>
    }

    if (duty > 0.95f)
 80013e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80013e8:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001420 <_ZN15MotorController12getDutyCycleEv+0x88>
 80013ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f4:	dd06      	ble.n	8001404 <_ZN15MotorController12getDutyCycleEv+0x6c>
    {
        screen->sendText("t0", "ALERTE: Duty élevé !");
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <_ZN15MotorController12getDutyCycleEv+0x8c>)
 80013fc:	490a      	ldr	r1, [pc, #40]	@ (8001428 <_ZN15MotorController12getDutyCycleEv+0x90>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 fb94 	bl	8001b2c <_ZN13ScreenDisplay8sendTextEPKcS1_>
    }

    return duty;
 8001404:	68fb      	ldr	r3, [r7, #12]
}
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eeb0 0a67 	vmov.f32	s0, s15
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	bf8ccccd 	.word	0xbf8ccccd
 8001418:	3f8ccccd 	.word	0x3f8ccccd
 800141c:	0800e460 	.word	0x0800e460
 8001420:	3f733333 	.word	0x3f733333
 8001424:	0800e478 	.word	0x0800e478
 8001428:	0800e490 	.word	0x0800e490

0800142c <_ZN15MotorController8getPowerEv>:

float MotorController::getPower() {
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
    float torque = getTorque();
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff7b 	bl	8001330 <_ZN15MotorController9getTorqueEv>
 800143a:	ed87 0a05 	vstr	s0, [r7, #20]

    if (torque < 0.0f) {
 800143e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001442:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144a:	d507      	bpl.n	800145c <_ZN15MotorController8getPowerEv+0x30>
        screen->showError("Erreur: couple invalide");
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001450:	491a      	ldr	r1, [pc, #104]	@ (80014bc <_ZN15MotorController8getPowerEv+0x90>)
 8001452:	4618      	mov	r0, r3
 8001454:	f000 fc56 	bl	8001d04 <_ZN13ScreenDisplay9showErrorEPKc>
        return -1.0f;
 8001458:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <_ZN15MotorController8getPowerEv+0x94>)
 800145a:	e028      	b.n	80014ae <_ZN15MotorController8getPowerEv+0x82>
    }

    float cadence = getCadence();  // tr/min
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff41 	bl	80012e4 <_ZN15MotorController10getCadenceEv>
 8001462:	ed87 0a04 	vstr	s0, [r7, #16]

    if (cadence < 0.0f) {
 8001466:	edd7 7a04 	vldr	s15, [r7, #16]
 800146a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800146e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001472:	d507      	bpl.n	8001484 <_ZN15MotorController8getPowerEv+0x58>
        screen->showError("Erreur: réception cadence");
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001478:	4912      	ldr	r1, [pc, #72]	@ (80014c4 <_ZN15MotorController8getPowerEv+0x98>)
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fc42 	bl	8001d04 <_ZN13ScreenDisplay9showErrorEPKc>
        return -1.0f;
 8001480:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <_ZN15MotorController8getPowerEv+0x94>)
 8001482:	e014      	b.n	80014ae <_ZN15MotorController8getPowerEv+0x82>
    }

    // Conversion cadence → vitesse angulaire ω (rad/s)
    float omega = computations.computeOmega(cadence);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3324      	adds	r3, #36	@ 0x24
 8001488:	ed97 0a04 	vldr	s0, [r7, #16]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fdab 	bl	8000fe8 <_ZNK17MotorComputations12computeOmegaEf>
 8001492:	ed87 0a03 	vstr	s0, [r7, #12]

    // Puissance mécanique P = τ × ω
    float power = computations.computePower(torque, omega);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3324      	adds	r3, #36	@ 0x24
 800149a:	edd7 0a03 	vldr	s1, [r7, #12]
 800149e:	ed97 0a05 	vldr	s0, [r7, #20]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fdd2 	bl	800104c <_ZNK17MotorComputations12computePowerEff>
 80014a8:	ed87 0a02 	vstr	s0, [r7, #8]

    return power;  // En watts signé
 80014ac:	68bb      	ldr	r3, [r7, #8]
}
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eeb0 0a67 	vmov.f32	s0, s15
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	0800e494 	.word	0x0800e494
 80014c0:	bf800000 	.word	0xbf800000
 80014c4:	0800e428 	.word	0x0800e428

080014c8 <_ZN15MotorController14getControlModeEv>:

ControlMode MotorController::getControlMode() {
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
    return controlMode;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZN15MotorController7getGainEv>:

float MotorController::getGain() {
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
    return linearGain;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	ee07 3a90 	vmov	s15, r3
}
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <_ZN15MotorController18setPowerConcentricEff>:

 void MotorController::setPowerConcentric(float power, float rampRate)
 {
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	@ 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	ed87 0a02 	vstr	s0, [r7, #8]
 800150c:	edc7 0a01 	vstr	s1, [r7, #4]
    float cadence = getCadence();  // Lecture de la vitesse réelle
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f7ff fee7 	bl	80012e4 <_ZN15MotorController10getCadenceEv>
 8001516:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

    // Vérifie si getCadence() a échoué (renvoie une valeur d’erreur)
    if (cadence < 0.0f)
 800151a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800151e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001526:	d506      	bpl.n	8001536 <_ZN15MotorController18setPowerConcentricEff+0x36>
    {
        screen->showError("Erreur: réception cadence");
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800152c:	491f      	ldr	r1, [pc, #124]	@ (80015ac <_ZN15MotorController18setPowerConcentricEff+0xac>)
 800152e:	4618      	mov	r0, r3
 8001530:	f000 fbe8 	bl	8001d04 <_ZN13ScreenDisplay9showErrorEPKc>
        return;
 8001534:	e036      	b.n	80015a4 <_ZN15MotorController18setPowerConcentricEff+0xa4>
    }

    // Sécurité : éviter division par zéro ou valeurs trop basses
    if (cadence < 1.0f)
 8001536:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800153a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800153e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001546:	d502      	bpl.n	800154e <_ZN15MotorController18setPowerConcentricEff+0x4e>
    {
        cadence = 1.0f;
 8001548:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Conversion cadence (tr/min) → vitesse angulaire ω (rad/s)
    float omega = computations.computeOmega(cadence);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3324      	adds	r3, #36	@ 0x24
 8001552:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fd46 	bl	8000fe8 <_ZNK17MotorComputations12computeOmegaEf>
 800155c:	ed87 0a08 	vstr	s0, [r7, #32]

    // Calcul du couple réel à appliquer : τ = P / ω
    float torque = power / omega;
 8001560:	edd7 6a02 	vldr	s13, [r7, #8]
 8001564:	ed97 7a08 	vldr	s14, [r7, #32]
 8001568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800156c:	edc7 7a07 	vstr	s15, [r7, #28]

    // Appliquer la direction (FORWARD ou REVERSE)
    float effectiveTorque = applyDirection(torque);
 8001570:	ed97 0a07 	vldr	s0, [r7, #28]
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f000 f939 	bl	80017ec <_ZN15MotorController14applyDirectionEf>
 800157a:	ed87 0a06 	vstr	s0, [r7, #24]

    // Conversion couple → courant moteur : I = τ / Kt
    float current = computations.computeCurrentFromTorque(effectiveTorque);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	3324      	adds	r3, #36	@ 0x24
 8001582:	ed97 0a06 	vldr	s0, [r7, #24]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fd18 	bl	8000fbc <_ZNK17MotorComputations24computeCurrentFromTorqueEf>
 800158c:	ed87 0a05 	vstr	s0, [r7, #20]
    lastAppliedCurrent = current;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	61da      	str	r2, [r3, #28]

    // Envoi de la commande au VESC
    vesc->setCurrent(current);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	ed97 0a05 	vldr	s0, [r7, #20]
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fd62 	bl	8002068 <_ZN13VESCInterface10setCurrentEf>
 }
 80015a4:	3728      	adds	r7, #40	@ 0x28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	0800e428 	.word	0x0800e428

080015b0 <_ZN15MotorController17setPowerEccentricEff>:


 void MotorController::setPowerEccentric(float power, float rampRate)
 {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	@ 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80015bc:	edc7 0a01 	vstr	s1, [r7, #4]
    float cadence = getCadence();  // Lecture de la vitesse réelle
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f7ff fe8f 	bl	80012e4 <_ZN15MotorController10getCadenceEv>
 80015c6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

    // Vérifie si la lecture a échoué
    if (cadence < 0.0f)
 80015ca:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80015ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d6:	d506      	bpl.n	80015e6 <_ZN15MotorController17setPowerEccentricEff+0x36>
    {
        screen->showError("Erreur: réception cadence");
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015dc:	4920      	ldr	r1, [pc, #128]	@ (8001660 <_ZN15MotorController17setPowerEccentricEff+0xb0>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fb90 	bl	8001d04 <_ZN13ScreenDisplay9showErrorEPKc>
        return;
 80015e4:	e038      	b.n	8001658 <_ZN15MotorController17setPowerEccentricEff+0xa8>
    }

    // Sécurité : éviter division par zéro
    if (cadence < 1.0f)
 80015e6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80015ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80015ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f6:	d502      	bpl.n	80015fe <_ZN15MotorController17setPowerEccentricEff+0x4e>
    {
        cadence = 1.0f;
 80015f8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Conversion cadence → vitesse angulaire ω (rad/s)
    float omega = computations.computeOmega(cadence);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	3324      	adds	r3, #36	@ 0x24
 8001602:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fcee 	bl	8000fe8 <_ZNK17MotorComputations12computeOmegaEf>
 800160c:	ed87 0a08 	vstr	s0, [r7, #32]

    // Calcul du couple nécessaire (négatif pour excentrique)
    float torque = -power / omega;
 8001610:	edd7 7a02 	vldr	s15, [r7, #8]
 8001614:	eef1 6a67 	vneg.f32	s13, s15
 8001618:	ed97 7a08 	vldr	s14, [r7, #32]
 800161c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001620:	edc7 7a07 	vstr	s15, [r7, #28]

    // Applique la direction choisie (FORWARD ou REVERSE)
    float effectiveTorque = applyDirection(torque);
 8001624:	ed97 0a07 	vldr	s0, [r7, #28]
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f000 f8df 	bl	80017ec <_ZN15MotorController14applyDirectionEf>
 800162e:	ed87 0a06 	vstr	s0, [r7, #24]

    // Conversion couple → courant moteur : I = τ / Kt
    float current = computations.computeCurrentFromTorque(effectiveTorque);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	3324      	adds	r3, #36	@ 0x24
 8001636:	ed97 0a06 	vldr	s0, [r7, #24]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fcbe 	bl	8000fbc <_ZNK17MotorComputations24computeCurrentFromTorqueEf>
 8001640:	ed87 0a05 	vstr	s0, [r7, #20]
    lastAppliedCurrent = current;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	61da      	str	r2, [r3, #28]

    // Envoi au VESC
    vesc->setCurrent(current);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fd08 	bl	8002068 <_ZN13VESCInterface10setCurrentEf>
 }
 8001658:	3728      	adds	r7, #40	@ 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	0800e428 	.word	0x0800e428

08001664 <_ZN15MotorController9setLinearEff>:


 void MotorController::setLinear(float gain, float cadence) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001670:	edc7 0a01 	vstr	s1, [r7, #4]
     linearGain = gain;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	615a      	str	r2, [r3, #20]
     float torque = linearGain * cadence;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001680:	ed97 7a01 	vldr	s14, [r7, #4]
 8001684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001688:	edc7 7a07 	vstr	s15, [r7, #28]
     float value = applyDirection(torque);
 800168c:	ed97 0a07 	vldr	s0, [r7, #28]
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f000 f8ab 	bl	80017ec <_ZN15MotorController14applyDirectionEf>
 8001696:	ed87 0a06 	vstr	s0, [r7, #24]
     // Conversion couple → courant : I = τ / Kt
     float current = computations.computeCurrentFromTorque(value);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3324      	adds	r3, #36	@ 0x24
 800169e:	ed97 0a06 	vldr	s0, [r7, #24]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fc8a 	bl	8000fbc <_ZNK17MotorComputations24computeCurrentFromTorqueEf>
 80016a8:	ed87 0a05 	vstr	s0, [r7, #20]
     lastAppliedCurrent = current;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	61da      	str	r2, [r3, #28]

     // Envoi au VESC
     vesc->setCurrent(current);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b6:	ed97 0a05 	vldr	s0, [r7, #20]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fcd4 	bl	8002068 <_ZN13VESCInterface10setCurrentEf>
 }
 80016c0:	bf00      	nop
 80016c2:	3720      	adds	r7, #32
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_ZN15MotorController6updateEf>:

 void MotorController::update(float measured_cadence) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	ed87 0a00 	vstr	s0, [r7]
     if (controlMode == ControlMode::LINEAR) {
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2b04      	cmp	r3, #4
 80016da:	d109      	bne.n	80016f0 <_ZN15MotorController6updateEf+0x28>
         setLinear(linearGain, measured_cadence);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	edd3 7a05 	vldr	s15, [r3, #20]
 80016e2:	edd7 0a00 	vldr	s1, [r7]
 80016e6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ffba 	bl	8001664 <_ZN15MotorController9setLinearEff>
     }
 }
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <_ZN15MotorController4stopEf>:

 void MotorController::stop(float rampRate)
 {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	ed87 0a00 	vstr	s0, [r7]
    // Lire le courant actuel
    float current = lastAppliedCurrent;  // À maintenir dans ta classe
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	617b      	str	r3, [r7, #20]
    const float timeStepMs = 50.0f;      // Intervalle entre chaque pas (50 ms)
 800170a:	4b34      	ldr	r3, [pc, #208]	@ (80017dc <_ZN15MotorController4stopEf+0xe4>)
 800170c:	613b      	str	r3, [r7, #16]
    const float timeStepS = timeStepMs / 1000.0f; //conversion en secondes
 800170e:	4b34      	ldr	r3, [pc, #208]	@ (80017e0 <_ZN15MotorController4stopEf+0xe8>)
 8001710:	60fb      	str	r3, [r7, #12]
    const float maxStep = rampRate * timeStepS; //On calcule combien on doit diminuer le courant à chaque pas
 8001712:	edd7 7a00 	vldr	s15, [r7]
 8001716:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80017e4 <_ZN15MotorController4stopEf+0xec>
 800171a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800171e:	edc7 7a02 	vstr	s15, [r7, #8]

    while (fabs(current) > 0.05f)
 8001722:	e035      	b.n	8001790 <_ZN15MotorController4stopEf+0x98>
    {  // Tant qu'on n'est pas (quasiment) à 0
        if (current > 0) //Si le courant est positif, on le réduit vers zéro
 8001724:	edd7 7a05 	vldr	s15, [r7, #20]
 8001728:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800172c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001730:	dd12      	ble.n	8001758 <_ZN15MotorController4stopEf+0x60>
        {
            current -= maxStep;
 8001732:	ed97 7a05 	vldr	s14, [r7, #20]
 8001736:	edd7 7a02 	vldr	s15, [r7, #8]
 800173a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173e:	edc7 7a05 	vstr	s15, [r7, #20]
            if (current < 0) current = 0.0f;
 8001742:	edd7 7a05 	vldr	s15, [r7, #20]
 8001746:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174e:	d515      	bpl.n	800177c <_ZN15MotorController4stopEf+0x84>
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	e011      	b.n	800177c <_ZN15MotorController4stopEf+0x84>
        }
        else //Si le courant est négatif (ex : freinage), on l’augmente vers zéro

        {
            current += maxStep;
 8001758:	ed97 7a05 	vldr	s14, [r7, #20]
 800175c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001764:	edc7 7a05 	vstr	s15, [r7, #20]
            if (current > 0) current = 0.0f;
 8001768:	edd7 7a05 	vldr	s15, [r7, #20]
 800176c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	dd02      	ble.n	800177c <_ZN15MotorController4stopEf+0x84>
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
        }

        vesc->setCurrent(current);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001780:	ed97 0a05 	vldr	s0, [r7, #20]
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fc6f 	bl	8002068 <_ZN13VESCInterface10setCurrentEf>
        HAL_Delay(static_cast<uint32_t>(timeStepMs));
 800178a:	2032      	movs	r0, #50	@ 0x32
 800178c:	f001 fd68 	bl	8003260 <HAL_Delay>
    while (fabs(current) > 0.05f)
 8001790:	ed97 0a05 	vldr	s0, [r7, #20]
 8001794:	f7ff fc83 	bl	800109e <_ZSt4fabsf>
 8001798:	eef0 7a40 	vmov.f32	s15, s0
 800179c:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80017e4 <_ZN15MotorController4stopEf+0xec>
 80017a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a8:	bfcc      	ite	gt
 80017aa:	2301      	movgt	r3, #1
 80017ac:	2300      	movle	r3, #0
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1b7      	bne.n	8001724 <_ZN15MotorController4stopEf+0x2c>
    }

    // Finalise à zéro pour s'assurer que c'est bien arrêté
    vesc->setCurrent(0.0f);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b8:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80017e8 <_ZN15MotorController4stopEf+0xf0>
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 fc53 	bl	8002068 <_ZN13VESCInterface10setCurrentEf>
    instruction = 0.0f;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
    lastAppliedCurrent = 0.0f;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
}
 80017d2:	bf00      	nop
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	42480000 	.word	0x42480000
 80017e0:	3d4ccccd 	.word	0x3d4ccccd
 80017e4:	3d4ccccd 	.word	0x3d4ccccd
 80017e8:	00000000 	.word	0x00000000

080017ec <_ZN15MotorController14applyDirectionEf>:

 float MotorController::applyDirection(float value) {
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	ed87 0a00 	vstr	s0, [r7]
     return (direction == DirectionMode::REVERSE) ? -value : value;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d104      	bne.n	800180a <_ZN15MotorController14applyDirectionEf+0x1e>
 8001800:	edd7 7a00 	vldr	s15, [r7]
 8001804:	eef1 7a67 	vneg.f32	s15, s15
 8001808:	e001      	b.n	800180e <_ZN15MotorController14applyDirectionEf+0x22>
 800180a:	edd7 7a00 	vldr	s15, [r7]
 }
 800180e:	eeb0 0a67 	vmov.f32	s0, s15
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_ZN15MotorController16updateFromScreenEv>:
 else
     return value;*/


void MotorController::updateFromScreen()
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
    if (!screen) return;  // Sécurité : écran non initialisé
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001828:	2b00      	cmp	r3, #0
 800182a:	d073      	beq.n	8001914 <_ZN15MotorController16updateFromScreenEv+0xf8>

    DirectionMode selectedDirection = screen->getDirection();
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001830:	4618      	mov	r0, r3
 8001832:	f000 fba1 	bl	8001f78 <_ZN13ScreenDisplay12getDirectionEv>
 8001836:	61f8      	str	r0, [r7, #28]
    setDirection(selectedDirection);
 8001838:	69f9      	ldr	r1, [r7, #28]
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff fc90 	bl	8001160 <_ZN15MotorController12setDirectionE13DirectionMode>

    ControlMode selectedMode = screen->getMode();
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001844:	4618      	mov	r0, r3
 8001846:	f000 faf5 	bl	8001e34 <_ZN13ScreenDisplay7getModeEv>
 800184a:	61b8      	str	r0, [r7, #24]
    setControlMode(selectedMode);
 800184c:	69b9      	ldr	r1, [r7, #24]
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fc94 	bl	800117c <_ZN15MotorController14setControlModeE11ControlMode>

    switch (controlMode)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b04      	cmp	r3, #4
 800185a:	d841      	bhi.n	80018e0 <_ZN15MotorController16updateFromScreenEv+0xc4>
 800185c:	a201      	add	r2, pc, #4	@ (adr r2, 8001864 <_ZN15MotorController16updateFromScreenEv+0x48>)
 800185e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001862:	bf00      	nop
 8001864:	08001893 	.word	0x08001893
 8001868:	08001879 	.word	0x08001879
 800186c:	080018ad 	.word	0x080018ad
 8001870:	080018ad 	.word	0x080018ad
 8001874:	080018c7 	.word	0x080018c7
    {
        case ControlMode::CADENCE:
        {
            float rpm = screen->getUserCadence();
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800187c:	4618      	mov	r0, r3
 800187e:	f000 fa91 	bl	8001da4 <_ZN13ScreenDisplay14getUserCadenceEv>
 8001882:	ed87 0a03 	vstr	s0, [r7, #12]
            setInstruction(rpm);
 8001886:	ed97 0a03 	vldr	s0, [r7, #12]
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff fc84 	bl	8001198 <_ZN15MotorController14setInstructionEf>
            break;
 8001890:	e027      	b.n	80018e2 <_ZN15MotorController16updateFromScreenEv+0xc6>
        }

        case ControlMode::TORQUE:
        {
            float torque = screen->getUserTorque();
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001896:	4618      	mov	r0, r3
 8001898:	f000 fab4 	bl	8001e04 <_ZN13ScreenDisplay13getUserTorqueEv>
 800189c:	ed87 0a02 	vstr	s0, [r7, #8]
            setInstruction(torque);
 80018a0:	ed97 0a02 	vldr	s0, [r7, #8]
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff fc77 	bl	8001198 <_ZN15MotorController14setInstructionEf>
            break;
 80018aa:	e01a      	b.n	80018e2 <_ZN15MotorController16updateFromScreenEv+0xc6>
        }

        case ControlMode::POWER_CONCENTRIC:
        case ControlMode::POWER_ECCENTRIC:
        {
            float power = screen->getUserPower();
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 fa8f 	bl	8001dd4 <_ZN13ScreenDisplay12getUserPowerEv>
 80018b6:	ed87 0a04 	vstr	s0, [r7, #16]
            setInstruction(power);
 80018ba:	ed97 0a04 	vldr	s0, [r7, #16]
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff fc6a 	bl	8001198 <_ZN15MotorController14setInstructionEf>
            break;
 80018c4:	e00d      	b.n	80018e2 <_ZN15MotorController16updateFromScreenEv+0xc6>
        }

        case ControlMode::LINEAR:
        {
            float gain = screen->getUserLinearGain();
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 fae0 	bl	8001e90 <_ZN13ScreenDisplay17getUserLinearGainEv>
 80018d0:	ed87 0a05 	vstr	s0, [r7, #20]
            setLinearGain(gain);
 80018d4:	ed97 0a05 	vldr	s0, [r7, #20]
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff fc9f 	bl	800121c <_ZN15MotorController13setLinearGainEf>
            break;
 80018de:	e000      	b.n	80018e2 <_ZN15MotorController16updateFromScreenEv+0xc6>
        }

        default:
            break;
 80018e0:	bf00      	nop
    }
    if (screen->getStop())
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fb2e 	bl	8001f48 <_ZN13ScreenDisplay7getStopEv>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d004      	beq.n	80018fc <_ZN15MotorController16updateFromScreenEv+0xe0>
    {
        stop(3.0f);  // Stop progressif avec rampRate = 3 A/s (à adapter si besoin)
 80018f2:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff fefe 	bl	80016f8 <_ZN15MotorController4stopEf>
    }

    if (screen->getCalibrateRequest())
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001900:	4618      	mov	r0, r3
 8001902:	f000 fb51 	bl	8001fa8 <_ZN13ScreenDisplay19getCalibrateRequestEv>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d004      	beq.n	8001916 <_ZN15MotorController16updateFromScreenEv+0xfa>
    {
        calibrateTorqueConstant();
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f865 	bl	80019dc <_ZN15MotorController23calibrateTorqueConstantEv>
 8001912:	e000      	b.n	8001916 <_ZN15MotorController16updateFromScreenEv+0xfa>
    if (!screen) return;  // Sécurité : écran non initialisé
 8001914:	bf00      	nop
    }

}
 8001916:	3720      	adds	r7, #32
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <_ZN15MotorController12updateScreenEv>:

void MotorController::updateScreen() {
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	@ 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
    if (!screen) return;  // Sécurité : écran non initialisé
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001928:	2b00      	cmp	r3, #0
 800192a:	d052      	beq.n	80019d2 <_ZN15MotorController12updateScreenEv+0xb6>

    float rpm     = getCadence();
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff fcd9 	bl	80012e4 <_ZN15MotorController10getCadenceEv>
 8001932:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float torque  = getTorque();
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff fcfa 	bl	8001330 <_ZN15MotorController9getTorqueEv>
 800193c:	ed87 0a08 	vstr	s0, [r7, #32]
    float power   = getPower();
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff fd73 	bl	800142c <_ZN15MotorController8getPowerEv>
 8001946:	ed87 0a07 	vstr	s0, [r7, #28]
    float dutyCycle = getDutyCycle();
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff fd24 	bl	8001398 <_ZN15MotorController12getDutyCycleEv>
 8001950:	ed87 0a06 	vstr	s0, [r7, #24]
    ControlMode mode = getControlMode();
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff fdb7 	bl	80014c8 <_ZN15MotorController14getControlModeEv>
 800195a:	6178      	str	r0, [r7, #20]
    float LinearGain = getGain();
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff fdbf 	bl	80014e0 <_ZN15MotorController7getGainEv>
 8001962:	ed87 0a04 	vstr	s0, [r7, #16]
    DirectionMode direction = screen->getDirection();
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800196a:	4618      	mov	r0, r3
 800196c:	f000 fb04 	bl	8001f78 <_ZN13ScreenDisplay12getDirectionEv>
 8001970:	60f8      	str	r0, [r7, #12]

    // Affichage à l’écran
    //screen->showWelcome();
    screen->showCadence(rpm);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001976:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800197a:	4618      	mov	r0, r3
 800197c:	f000 f91e 	bl	8001bbc <_ZN13ScreenDisplay11showCadenceEf>
    screen->showTorque(torque);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001984:	ed97 0a08 	vldr	s0, [r7, #32]
 8001988:	4618      	mov	r0, r3
 800198a:	f000 f92d 	bl	8001be8 <_ZN13ScreenDisplay10showTorqueEf>
    screen->showPower(power);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001992:	ed97 0a07 	vldr	s0, [r7, #28]
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f93c 	bl	8001c14 <_ZN13ScreenDisplay9showPowerEf>
    screen->showDutyCycle(dutyCycle);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019a0:	ed97 0a06 	vldr	s0, [r7, #24]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 fa93 	bl	8001ed0 <_ZN13ScreenDisplay13showDutyCycleEf>
    screen->showMode(mode);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ae:	6979      	ldr	r1, [r7, #20]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 f955 	bl	8001c60 <_ZN13ScreenDisplay8showModeE11ControlMode>
    screen->showGain(LinearGain);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ba:	ed97 0a04 	vldr	s0, [r7, #16]
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f98a 	bl	8001cd8 <_ZN13ScreenDisplay8showGainEf>
    screen->showDirection(direction);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019c8:	68f9      	ldr	r1, [r7, #12]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 faa0 	bl	8001f10 <_ZN13ScreenDisplay13showDirectionE13DirectionMode>
 80019d0:	e000      	b.n	80019d4 <_ZN15MotorController12updateScreenEv+0xb8>
    if (!screen) return;  // Sécurité : écran non initialisé
 80019d2:	bf00      	nop
}
 80019d4:	3728      	adds	r7, #40	@ 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <_ZN15MotorController23calibrateTorqueConstantEv>:

void MotorController::calibrateTorqueConstant() {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
    const float testCurrent = 5.0f;  // Appliquer 5 A
 80019e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a90 <_ZN15MotorController23calibrateTorqueConstantEv+0xb4>)
 80019e6:	617b      	str	r3, [r7, #20]
    vesc->setCurrent(testCurrent);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ec:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 fb39 	bl	8002068 <_ZN13VESCInterface10setCurrentEf>

    HAL_Delay(1000);  // Attente pour stabilisation (1 sec)
 80019f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019fa:	f001 fc31 	bl	8003260 <HAL_Delay>

    float measuredTorque = getTorque();
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff fc96 	bl	8001330 <_ZN15MotorController9getTorqueEv>
 8001a04:	ed87 0a04 	vstr	s0, [r7, #16]

    vesc->setCurrent(0.0f);  // Sécurité : stop après mesure
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0c:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8001a94 <_ZN15MotorController23calibrateTorqueConstantEv+0xb8>
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fb29 	bl	8002068 <_ZN13VESCInterface10setCurrentEf>

    if (measuredTorque <= 0.0f) {
 8001a16:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a22:	d806      	bhi.n	8001a32 <_ZN15MotorController23calibrateTorqueConstantEv+0x56>
        screen->showError("Erreur: pas de couple");
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a28:	491b      	ldr	r1, [pc, #108]	@ (8001a98 <_ZN15MotorController23calibrateTorqueConstantEv+0xbc>)
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f96a 	bl	8001d04 <_ZN13ScreenDisplay9showErrorEPKc>
        return;
 8001a30:	e02b      	b.n	8001a8a <_ZN15MotorController23calibrateTorqueConstantEv+0xae>
    }

    float newKt = measuredTorque / testCurrent; //simple calcule a partir des valeurs mesurées
 8001a32:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a36:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001a3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a3e:	edc7 7a03 	vstr	s15, [r7, #12]

    if (newKt > 0.01f && newKt < 1.0f) { //documentation
 8001a42:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a46:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001a9c <_ZN15MotorController23calibrateTorqueConstantEv+0xc0>
 8001a4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a52:	dd14      	ble.n	8001a7e <_ZN15MotorController23calibrateTorqueConstantEv+0xa2>
 8001a54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a64:	d50b      	bpl.n	8001a7e <_ZN15MotorController23calibrateTorqueConstantEv+0xa2>
        screen->showCalibrationStatus(true);  // ✅ calibration OK
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 fab3 	bl	8001fd8 <_ZN13ScreenDisplay21showCalibrationStatusEb>
        setTorqueConstant(newKt);
 8001a72:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fbdf 	bl	800123a <_ZN15MotorController17setTorqueConstantEf>
 8001a7c:	e005      	b.n	8001a8a <_ZN15MotorController23calibrateTorqueConstantEv+0xae>
    } else {
        screen->showCalibrationStatus(false); // ❌ calibration échouée
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 faa7 	bl	8001fd8 <_ZN13ScreenDisplay21showCalibrationStatusEb>
    }
}
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40a00000 	.word	0x40a00000
 8001a94:	00000000 	.word	0x00000000
 8001a98:	0800e4ac 	.word	0x0800e4ac
 8001a9c:	3c23d70a 	.word	0x3c23d70a

08001aa0 <_ZN15MotorController9getscreenEv>:
/*On donne 1.95A au moteur, il fournit 0.39 Nm,
ce qui devient 15 Nm au pédalier via le réducteur.
On n'a pas à tenir compte de la réduction dans le code*/

ScreenDisplay* MotorController::getscreen()
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
    return screen;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <_ZN13ScreenDisplayC1EP20__UART_HandleTypeDef>:


 #include "../Inc/ScreenDisplay.hpp"
 #include "../Inc/MotorController.hpp"

 ScreenDisplay::ScreenDisplay(UART_HandleTypeDef* EcranUart) : ecran_uart(EcranUart) {}
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <_ZN13ScreenDisplay11sendCommandEPKc>:

 void ScreenDisplay::sendCommand(const char* cmd) {
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
     HAL_UART_Transmit(ecran_uart, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681c      	ldr	r4, [r3, #0]
 8001ae6:	6838      	ldr	r0, [r7, #0]
 8001ae8:	f7fe fbc2 	bl	8000270 <strlen>
 8001aec:	4603      	mov	r3, r0
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	f04f 33ff 	mov.w	r3, #4294967295
 8001af4:	6839      	ldr	r1, [r7, #0]
 8001af6:	4620      	mov	r0, r4
 8001af8:	f005 fcbb 	bl	8007472 <HAL_UART_Transmit>
     uint8_t end[3] = {0xFF, 0xFF, 0xFF};
 8001afc:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <_ZN13ScreenDisplay11sendCommandEPKc+0x50>)
 8001afe:	f107 030c 	add.w	r3, r7, #12
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	4611      	mov	r1, r2
 8001b06:	8019      	strh	r1, [r3, #0]
 8001b08:	3302      	adds	r3, #2
 8001b0a:	0c12      	lsrs	r2, r2, #16
 8001b0c:	701a      	strb	r2, [r3, #0]
     HAL_UART_Transmit(ecran_uart, end, 3, HAL_MAX_DELAY);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	f107 010c 	add.w	r1, r7, #12
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	f005 fca9 	bl	8007472 <HAL_UART_Transmit>
 }
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd90      	pop	{r4, r7, pc}
 8001b28:	0800e4c4 	.word	0x0800e4c4

08001b2c <_ZN13ScreenDisplay8sendTextEPKcS1_>:

 void ScreenDisplay::sendText(const char* component, const char* message) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b096      	sub	sp, #88	@ 0x58
 8001b30:	af02      	add	r7, sp, #8
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
     char buffer[64];
     snprintf(buffer, sizeof(buffer), "%s.txt=\"%s\"", component, message);
 8001b38:	f107 0010 	add.w	r0, r7, #16
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4a07      	ldr	r2, [pc, #28]	@ (8001b60 <_ZN13ScreenDisplay8sendTextEPKcS1_+0x34>)
 8001b44:	2140      	movs	r1, #64	@ 0x40
 8001b46:	f00a fbd7 	bl	800c2f8 <sniprintf>
     sendCommand(buffer);
 8001b4a:	f107 0310 	add.w	r3, r7, #16
 8001b4e:	4619      	mov	r1, r3
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f7ff ffc1 	bl	8001ad8 <_ZN13ScreenDisplay11sendCommandEPKc>
 }
 8001b56:	bf00      	nop
 8001b58:	3750      	adds	r7, #80	@ 0x50
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	0800e4c8 	.word	0x0800e4c8

08001b64 <_ZN13ScreenDisplay9sendValueEPKcfS1_>:

 void ScreenDisplay::sendValue(const char* component, float value, const char* format)
 // Afficher un nombre (float) dans un champ texte (t1, cad, pow, etc.) sur l’écran Nextion,
 //en utilisant un format personnalisé (ex : %.1f ou %.2f).
 {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b09e      	sub	sp, #120	@ 0x78
 8001b68:	af02      	add	r7, sp, #8
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b72:	603a      	str	r2, [r7, #0]
     char valueStr[32];
     snprintf(valueStr, sizeof(valueStr), format, value);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7fe fce7 	bl	8000548 <__aeabi_f2d>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8001b82:	e9cd 2300 	strd	r2, r3, [sp]
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	2120      	movs	r1, #32
 8001b8a:	f00a fbb5 	bl	800c2f8 <sniprintf>

     char buffer[64];
     snprintf(buffer, sizeof(buffer), "%s.txt=\"%s\"", component, valueStr);
 8001b8e:	f107 0010 	add.w	r0, r7, #16
 8001b92:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4a07      	ldr	r2, [pc, #28]	@ (8001bb8 <_ZN13ScreenDisplay9sendValueEPKcfS1_+0x54>)
 8001b9c:	2140      	movs	r1, #64	@ 0x40
 8001b9e:	f00a fbab 	bl	800c2f8 <sniprintf>
     sendCommand(buffer);
 8001ba2:	f107 0310 	add.w	r3, r7, #16
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f7ff ff95 	bl	8001ad8 <_ZN13ScreenDisplay11sendCommandEPKc>
 }
 8001bae:	bf00      	nop
 8001bb0:	3770      	adds	r7, #112	@ 0x70
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	0800e4c8 	.word	0x0800e4c8

08001bbc <_ZN13ScreenDisplay11showCadenceEf>:

 // --- Fonctions spécifiques de haut niveau ---

 void ScreenDisplay::showCadence(float rpm) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	ed87 0a00 	vstr	s0, [r7]
     sendValue("cad_val", rpm);  // champ texte nommé "cad"
 8001bc8:	4a05      	ldr	r2, [pc, #20]	@ (8001be0 <_ZN13ScreenDisplay11showCadenceEf+0x24>)
 8001bca:	ed97 0a00 	vldr	s0, [r7]
 8001bce:	4905      	ldr	r1, [pc, #20]	@ (8001be4 <_ZN13ScreenDisplay11showCadenceEf+0x28>)
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ffc7 	bl	8001b64 <_ZN13ScreenDisplay9sendValueEPKcfS1_>
 }
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	0800e4d4 	.word	0x0800e4d4
 8001be4:	0800e4dc 	.word	0x0800e4dc

08001be8 <_ZN13ScreenDisplay10showTorqueEf>:

 void ScreenDisplay::showTorque(float torque) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	ed87 0a00 	vstr	s0, [r7]
     sendValue("tor_val", torque);  // champ texte nommé "tor"
 8001bf4:	4a05      	ldr	r2, [pc, #20]	@ (8001c0c <_ZN13ScreenDisplay10showTorqueEf+0x24>)
 8001bf6:	ed97 0a00 	vldr	s0, [r7]
 8001bfa:	4905      	ldr	r1, [pc, #20]	@ (8001c10 <_ZN13ScreenDisplay10showTorqueEf+0x28>)
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ffb1 	bl	8001b64 <_ZN13ScreenDisplay9sendValueEPKcfS1_>
 }
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	0800e4d4 	.word	0x0800e4d4
 8001c10:	0800e4e4 	.word	0x0800e4e4

08001c14 <_ZN13ScreenDisplay9showPowerEf>:

 void ScreenDisplay::showPower(float power) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	ed87 0a00 	vstr	s0, [r7]
     sendValue("pow_val", power);  // champ texte nommé "pow"
 8001c20:	4a05      	ldr	r2, [pc, #20]	@ (8001c38 <_ZN13ScreenDisplay9showPowerEf+0x24>)
 8001c22:	ed97 0a00 	vldr	s0, [r7]
 8001c26:	4905      	ldr	r1, [pc, #20]	@ (8001c3c <_ZN13ScreenDisplay9showPowerEf+0x28>)
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ff9b 	bl	8001b64 <_ZN13ScreenDisplay9sendValueEPKcfS1_>
 }
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	0800e4d4 	.word	0x0800e4d4
 8001c3c:	0800e4ec 	.word	0x0800e4ec

08001c40 <_ZN13ScreenDisplay8showModeEPKc>:

 void ScreenDisplay::showMode(const char* modeName) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
     sendText("mode_show", modeName);  // champ texte nommé "mode"
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	4903      	ldr	r1, [pc, #12]	@ (8001c5c <_ZN13ScreenDisplay8showModeEPKc+0x1c>)
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ff6c 	bl	8001b2c <_ZN13ScreenDisplay8sendTextEPKcS1_>
 }
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	0800e4f4 	.word	0x0800e4f4

08001c60 <_ZN13ScreenDisplay8showModeE11ControlMode>:

 void ScreenDisplay::showMode(ControlMode mode) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
    const char* modeStr = "Inconnu";
 8001c6a:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <_ZN13ScreenDisplay8showModeE11ControlMode+0x60>)
 8001c6c:	60fb      	str	r3, [r7, #12]

    switch (mode) {
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d81c      	bhi.n	8001cae <_ZN13ScreenDisplay8showModeE11ControlMode+0x4e>
 8001c74:	a201      	add	r2, pc, #4	@ (adr r2, 8001c7c <_ZN13ScreenDisplay8showModeE11ControlMode+0x1c>)
 8001c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7a:	bf00      	nop
 8001c7c:	08001c97 	.word	0x08001c97
 8001c80:	08001c91 	.word	0x08001c91
 8001c84:	08001c9d 	.word	0x08001c9d
 8001c88:	08001ca3 	.word	0x08001ca3
 8001c8c:	08001ca9 	.word	0x08001ca9
        case ControlMode::CADENCE:           modeStr = "Cadence"; break;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <_ZN13ScreenDisplay8showModeE11ControlMode+0x64>)
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	e00c      	b.n	8001cb0 <_ZN13ScreenDisplay8showModeE11ControlMode+0x50>
        case ControlMode::TORQUE:            modeStr = "Couple"; break;
 8001c96:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc8 <_ZN13ScreenDisplay8showModeE11ControlMode+0x68>)
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	e009      	b.n	8001cb0 <_ZN13ScreenDisplay8showModeE11ControlMode+0x50>
        case ControlMode::POWER_CONCENTRIC:  modeStr = "POWER_CONCENTRIC"; break;
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ccc <_ZN13ScreenDisplay8showModeE11ControlMode+0x6c>)
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	e006      	b.n	8001cb0 <_ZN13ScreenDisplay8showModeE11ControlMode+0x50>
        case ControlMode::POWER_ECCENTRIC:   modeStr = "POWER_ECCENTRIC"; break;
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <_ZN13ScreenDisplay8showModeE11ControlMode+0x70>)
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	e003      	b.n	8001cb0 <_ZN13ScreenDisplay8showModeE11ControlMode+0x50>
        case ControlMode::LINEAR:            modeStr = "Lineaire"; break;
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <_ZN13ScreenDisplay8showModeE11ControlMode+0x74>)
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	e000      	b.n	8001cb0 <_ZN13ScreenDisplay8showModeE11ControlMode+0x50>
        default: break;
 8001cae:	bf00      	nop
    }

    showMode(modeStr);  // ← Appelle ta version existante
 8001cb0:	68f9      	ldr	r1, [r7, #12]
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ffc4 	bl	8001c40 <_ZN13ScreenDisplay8showModeEPKc>
}
 8001cb8:	bf00      	nop
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	0800e500 	.word	0x0800e500
 8001cc4:	0800e508 	.word	0x0800e508
 8001cc8:	0800e510 	.word	0x0800e510
 8001ccc:	0800e518 	.word	0x0800e518
 8001cd0:	0800e52c 	.word	0x0800e52c
 8001cd4:	0800e53c 	.word	0x0800e53c

08001cd8 <_ZN13ScreenDisplay8showGainEf>:


 void ScreenDisplay::showGain(float LinearGain) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	ed87 0a00 	vstr	s0, [r7]
    sendValue("gain_val", LinearGain);  // champ texte nommé "gain"
 8001ce4:	4a05      	ldr	r2, [pc, #20]	@ (8001cfc <_ZN13ScreenDisplay8showGainEf+0x24>)
 8001ce6:	ed97 0a00 	vldr	s0, [r7]
 8001cea:	4905      	ldr	r1, [pc, #20]	@ (8001d00 <_ZN13ScreenDisplay8showGainEf+0x28>)
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ff39 	bl	8001b64 <_ZN13ScreenDisplay9sendValueEPKcfS1_>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	0800e4d4 	.word	0x0800e4d4
 8001d00:	0800e548 	.word	0x0800e548

08001d04 <_ZN13ScreenDisplay9showErrorEPKc>:

 void ScreenDisplay::showError(const char* message) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
     sendText("err", message);  // champ texte nommé "err"
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	4903      	ldr	r1, [pc, #12]	@ (8001d20 <_ZN13ScreenDisplay9showErrorEPKc+0x1c>)
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ff0a 	bl	8001b2c <_ZN13ScreenDisplay8sendTextEPKcS1_>
 }
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	0800e554 	.word	0x0800e554

08001d24 <_ZN13ScreenDisplay11showWelcomeEv>:

 void ScreenDisplay::showWelcome(){
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
     sendText("t0", "Ergocycle S2M Ready!");
 8001d2c:	4a04      	ldr	r2, [pc, #16]	@ (8001d40 <_ZN13ScreenDisplay11showWelcomeEv+0x1c>)
 8001d2e:	4905      	ldr	r1, [pc, #20]	@ (8001d44 <_ZN13ScreenDisplay11showWelcomeEv+0x20>)
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fefb 	bl	8001b2c <_ZN13ScreenDisplay8sendTextEPKcS1_>
 }
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	0800e558 	.word	0x0800e558
 8001d44:	0800e570 	.word	0x0800e570

08001d48 <_ZN13ScreenDisplay9readInt32Ev>:
 void ScreenDisplay::clearScreen() {
     sendCommand("cls BLACK");  // Efface l'écran
 }

 int32_t ScreenDisplay::readInt32()
 {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
    uint8_t response[8]; //On crée un tableau pour recevoir jusqu’à 8 octets en provenance de l’écran Nextion, via l’UART

    //La réponse ressemble à ça: 0x71 [val0] [val1] [val2] [val3] 0xFF 0xFF 0xFF avec de val0 à val3 le message qui nous interesse cdé en little indian
    if (HAL_UART_Receive(ecran_uart, response, 8, 100) != HAL_OK) {
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	f107 010c 	add.w	r1, r7, #12
 8001d58:	2364      	movs	r3, #100	@ 0x64
 8001d5a:	2208      	movs	r2, #8
 8001d5c:	f005 fc14 	bl	8007588 <HAL_UART_Receive>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	bf14      	ite	ne
 8001d66:	2301      	movne	r3, #1
 8001d68:	2300      	moveq	r3, #0
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <_ZN13ScreenDisplay9readInt32Ev+0x2e>
        return -1;
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295
 8001d74:	e012      	b.n	8001d9c <_ZN13ScreenDisplay9readInt32Ev+0x54>
    }

    if (response[0] != 0x71) return -1;
 8001d76:	7b3b      	ldrb	r3, [r7, #12]
 8001d78:	2b71      	cmp	r3, #113	@ 0x71
 8001d7a:	d002      	beq.n	8001d82 <_ZN13ScreenDisplay9readInt32Ev+0x3a>
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d80:	e00c      	b.n	8001d9c <_ZN13ScreenDisplay9readInt32Ev+0x54>

    int32_t value = (response[1]) |
 8001d82:	7b7b      	ldrb	r3, [r7, #13]
 8001d84:	461a      	mov	r2, r3
                    (response[2] << 8) |
 8001d86:	7bbb      	ldrb	r3, [r7, #14]
 8001d88:	021b      	lsls	r3, r3, #8
    int32_t value = (response[1]) |
 8001d8a:	431a      	orrs	r2, r3
                    (response[3] << 16) |
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	041b      	lsls	r3, r3, #16
                    (response[2] << 8) |
 8001d90:	431a      	orrs	r2, r3
                    (response[4] << 24);
 8001d92:	7c3b      	ldrb	r3, [r7, #16]
 8001d94:	061b      	lsls	r3, r3, #24
    int32_t value = (response[1]) |
 8001d96:	4313      	orrs	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]
    //response[1] = octet le moins significatif (LSB)
    //response[4] = octet le plus significatif (MSB)

    return value;
 8001d9a:	697b      	ldr	r3, [r7, #20]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_ZN13ScreenDisplay14getUserCadenceEv>:

 float ScreenDisplay::getUserCadence() {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
    sendCommand("get cad.val");  // cad : champ de cadence
 8001dac:	4908      	ldr	r1, [pc, #32]	@ (8001dd0 <_ZN13ScreenDisplay14getUserCadenceEv+0x2c>)
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff fe92 	bl	8001ad8 <_ZN13ScreenDisplay11sendCommandEPKc>
    int32_t value = readInt32();
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ffc7 	bl	8001d48 <_ZN13ScreenDisplay9readInt32Ev>
 8001dba:	60f8      	str	r0, [r7, #12]
    return static_cast<float>(value);  // en tr/min
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	0800e580 	.word	0x0800e580

08001dd4 <_ZN13ScreenDisplay12getUserPowerEv>:

float ScreenDisplay::getUserPower() {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    sendCommand("get pow.val");  // pow : champ de puissance
 8001ddc:	4908      	ldr	r1, [pc, #32]	@ (8001e00 <_ZN13ScreenDisplay12getUserPowerEv+0x2c>)
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff fe7a 	bl	8001ad8 <_ZN13ScreenDisplay11sendCommandEPKc>
    int32_t value = readInt32();
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ffaf 	bl	8001d48 <_ZN13ScreenDisplay9readInt32Ev>
 8001dea:	60f8      	str	r0, [r7, #12]
    return static_cast<float>(value);  // en watts
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	ee07 3a90 	vmov	s15, r3
 8001df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001df6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	0800e58c 	.word	0x0800e58c

08001e04 <_ZN13ScreenDisplay13getUserTorqueEv>:

float ScreenDisplay::getUserTorque() {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
    sendCommand("get tor.val");  // tor : champ de couple
 8001e0c:	4908      	ldr	r1, [pc, #32]	@ (8001e30 <_ZN13ScreenDisplay13getUserTorqueEv+0x2c>)
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fe62 	bl	8001ad8 <_ZN13ScreenDisplay11sendCommandEPKc>
    int32_t value = readInt32();
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ff97 	bl	8001d48 <_ZN13ScreenDisplay9readInt32Ev>
 8001e1a:	60f8      	str	r0, [r7, #12]
    return static_cast<float>(value);  // en Nm
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	ee07 3a90 	vmov	s15, r3
 8001e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001e26:	eeb0 0a67 	vmov.f32	s0, s15
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	0800e598 	.word	0x0800e598

08001e34 <_ZN13ScreenDisplay7getModeEv>:

ControlMode ScreenDisplay::getMode() {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
    sendCommand("get mode.val");  // Lire la valeur du composant 'mode'
 8001e3c:	4913      	ldr	r1, [pc, #76]	@ (8001e8c <_ZN13ScreenDisplay7getModeEv+0x58>)
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff fe4a 	bl	8001ad8 <_ZN13ScreenDisplay11sendCommandEPKc>
    int32_t value = readInt32();
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff7f 	bl	8001d48 <_ZN13ScreenDisplay9readInt32Ev>
 8001e4a:	60f8      	str	r0, [r7, #12]

    switch (value) {
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d816      	bhi.n	8001e80 <_ZN13ScreenDisplay7getModeEv+0x4c>
 8001e52:	a201      	add	r2, pc, #4	@ (adr r2, 8001e58 <_ZN13ScreenDisplay7getModeEv+0x24>)
 8001e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e58:	08001e6d 	.word	0x08001e6d
 8001e5c:	08001e71 	.word	0x08001e71
 8001e60:	08001e75 	.word	0x08001e75
 8001e64:	08001e79 	.word	0x08001e79
 8001e68:	08001e7d 	.word	0x08001e7d
        case 0: return ControlMode::CADENCE;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e008      	b.n	8001e82 <_ZN13ScreenDisplay7getModeEv+0x4e>
        case 1: return ControlMode::TORQUE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e006      	b.n	8001e82 <_ZN13ScreenDisplay7getModeEv+0x4e>
        case 2: return ControlMode::POWER_CONCENTRIC;
 8001e74:	2302      	movs	r3, #2
 8001e76:	e004      	b.n	8001e82 <_ZN13ScreenDisplay7getModeEv+0x4e>
        case 3: return ControlMode::POWER_ECCENTRIC;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e002      	b.n	8001e82 <_ZN13ScreenDisplay7getModeEv+0x4e>
        case 4: return ControlMode::LINEAR;
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	e000      	b.n	8001e82 <_ZN13ScreenDisplay7getModeEv+0x4e>
        default: return ControlMode::CADENCE;  // valeur par défaut si erreur
 8001e80:	2301      	movs	r3, #1
    }
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	0800e5a4 	.word	0x0800e5a4

08001e90 <_ZN13ScreenDisplay17getUserLinearGainEv>:

float ScreenDisplay::getUserLinearGain() {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
    sendCommand("get gain.val");  // Demande à l’écran la valeur du champ gain
 8001e98:	490b      	ldr	r1, [pc, #44]	@ (8001ec8 <_ZN13ScreenDisplay17getUserLinearGainEv+0x38>)
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fe1c 	bl	8001ad8 <_ZN13ScreenDisplay11sendCommandEPKc>
    int32_t value = readInt32();  // Lit la réponse binaire (format Nextion)
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff51 	bl	8001d48 <_ZN13ScreenDisplay9readInt32Ev>
 8001ea6:	60f8      	str	r0, [r7, #12]

    return static_cast<float>(value) / 100.0f;  // Conversionenfloat
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	ee07 3a90 	vmov	s15, r3
 8001eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001ecc <_ZN13ScreenDisplay17getUserLinearGainEv+0x3c>
 8001eb6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001eba:	eef0 7a66 	vmov.f32	s15, s13
}
 8001ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	0800e5b4 	.word	0x0800e5b4
 8001ecc:	42c80000 	.word	0x42c80000

08001ed0 <_ZN13ScreenDisplay13showDutyCycleEf>:

void ScreenDisplay::showDutyCycle(float duty) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	ed87 0a00 	vstr	s0, [r7]
    // Convertir duty cycle en pourcentage
    float percent = duty * 100.0f;
 8001edc:	edd7 7a00 	vldr	s15, [r7]
 8001ee0:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001f04 <_ZN13ScreenDisplay13showDutyCycleEf+0x34>
 8001ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee8:	edc7 7a03 	vstr	s15, [r7, #12]

    // Affiche sur un champ texte appelé "duty"
    sendValue("duty", percent, "%.1f");
 8001eec:	4a06      	ldr	r2, [pc, #24]	@ (8001f08 <_ZN13ScreenDisplay13showDutyCycleEf+0x38>)
 8001eee:	ed97 0a03 	vldr	s0, [r7, #12]
 8001ef2:	4906      	ldr	r1, [pc, #24]	@ (8001f0c <_ZN13ScreenDisplay13showDutyCycleEf+0x3c>)
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff fe35 	bl	8001b64 <_ZN13ScreenDisplay9sendValueEPKcfS1_>
}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	42c80000 	.word	0x42c80000
 8001f08:	0800e4d4 	.word	0x0800e4d4
 8001f0c:	0800e5c4 	.word	0x0800e5c4

08001f10 <_ZN13ScreenDisplay13showDirectionE13DirectionMode>:

void ScreenDisplay::showDirection(DirectionMode dir_show) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
    const char* label = (dir_show == DirectionMode::REVERSE) ? "REVERSE" : "FORWARD";
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <_ZN13ScreenDisplay13showDirectionE13DirectionMode+0x14>
 8001f20:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <_ZN13ScreenDisplay13showDirectionE13DirectionMode+0x2c>)
 8001f22:	e000      	b.n	8001f26 <_ZN13ScreenDisplay13showDirectionE13DirectionMode+0x16>
 8001f24:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <_ZN13ScreenDisplay13showDirectionE13DirectionMode+0x30>)
 8001f26:	60fb      	str	r3, [r7, #12]
    sendText("dir_show", label);
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4906      	ldr	r1, [pc, #24]	@ (8001f44 <_ZN13ScreenDisplay13showDirectionE13DirectionMode+0x34>)
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff fdfd 	bl	8001b2c <_ZN13ScreenDisplay8sendTextEPKcS1_>
}
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	0800e5cc 	.word	0x0800e5cc
 8001f40:	0800e5d4 	.word	0x0800e5d4
 8001f44:	0800e5dc 	.word	0x0800e5dc

08001f48 <_ZN13ScreenDisplay7getStopEv>:

bool ScreenDisplay::getStop() {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
    sendCommand("get stop.val");     // Demande la valeur du bouton "stop"
 8001f50:	4908      	ldr	r1, [pc, #32]	@ (8001f74 <_ZN13ScreenDisplay7getStopEv+0x2c>)
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff fdc0 	bl	8001ad8 <_ZN13ScreenDisplay11sendCommandEPKc>
    int32_t value = readInt32();     // Réception du int32
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff fef5 	bl	8001d48 <_ZN13ScreenDisplay9readInt32Ev>
 8001f5e:	60f8      	str	r0, [r7, #12]

    return (value == 1);             // Retourne vrai si activé
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	bf0c      	ite	eq
 8001f66:	2301      	moveq	r3, #1
 8001f68:	2300      	movne	r3, #0
 8001f6a:	b2db      	uxtb	r3, r3
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	0800e5e8 	.word	0x0800e5e8

08001f78 <_ZN13ScreenDisplay12getDirectionEv>:

DirectionMode ScreenDisplay::getDirection() {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
    sendCommand("get dir.val");     // dir
 8001f80:	4908      	ldr	r1, [pc, #32]	@ (8001fa4 <_ZN13ScreenDisplay12getDirectionEv+0x2c>)
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff fda8 	bl	8001ad8 <_ZN13ScreenDisplay11sendCommandEPKc>
    int32_t value = readInt32();    // Lecture 0 ou 1
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff fedd 	bl	8001d48 <_ZN13ScreenDisplay9readInt32Ev>
 8001f8e:	60f8      	str	r0, [r7, #12]
    return (value == 1) ? DirectionMode::REVERSE : DirectionMode::FORWARD;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d101      	bne.n	8001f9a <_ZN13ScreenDisplay12getDirectionEv+0x22>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <_ZN13ScreenDisplay12getDirectionEv+0x24>
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	0800e5f8 	.word	0x0800e5f8

08001fa8 <_ZN13ScreenDisplay19getCalibrateRequestEv>:
    int32_t value = readInt32();  // Lit la réponse binaire (format Nextion)

    return static_cast<float>(value);
}

bool ScreenDisplay::getCalibrateRequest() {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
    sendCommand("get btn_calib.val");  // Lire l'état du bouton calibration btn_calib
 8001fb0:	4908      	ldr	r1, [pc, #32]	@ (8001fd4 <_ZN13ScreenDisplay19getCalibrateRequestEv+0x2c>)
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fd90 	bl	8001ad8 <_ZN13ScreenDisplay11sendCommandEPKc>
    int32_t value = readInt32();
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff fec5 	bl	8001d48 <_ZN13ScreenDisplay9readInt32Ev>
 8001fbe:	60f8      	str	r0, [r7, #12]
    return (value == 1);  // 1 = pressé
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	bf0c      	ite	eq
 8001fc6:	2301      	moveq	r3, #1
 8001fc8:	2300      	movne	r3, #0
 8001fca:	b2db      	uxtb	r3, r3
    //configurer calib_state aussi
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	0800e614 	.word	0x0800e614

08001fd8 <_ZN13ScreenDisplay21showCalibrationStatusEb>:

void ScreenDisplay::showCalibrationStatus(bool success) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	70fb      	strb	r3, [r7, #3]
    if (success) {
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <_ZN13ScreenDisplay21showCalibrationStatusEb+0x1e>
        sendText("calib_stat", "Calibration OK");
 8001fea:	4a07      	ldr	r2, [pc, #28]	@ (8002008 <_ZN13ScreenDisplay21showCalibrationStatusEb+0x30>)
 8001fec:	4907      	ldr	r1, [pc, #28]	@ (800200c <_ZN13ScreenDisplay21showCalibrationStatusEb+0x34>)
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff fd9c 	bl	8001b2c <_ZN13ScreenDisplay8sendTextEPKcS1_>
    } else {
        sendText("calib_stat", "Erreur calibration");
    }
}
 8001ff4:	e004      	b.n	8002000 <_ZN13ScreenDisplay21showCalibrationStatusEb+0x28>
        sendText("calib_stat", "Erreur calibration");
 8001ff6:	4a06      	ldr	r2, [pc, #24]	@ (8002010 <_ZN13ScreenDisplay21showCalibrationStatusEb+0x38>)
 8001ff8:	4904      	ldr	r1, [pc, #16]	@ (800200c <_ZN13ScreenDisplay21showCalibrationStatusEb+0x34>)
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff fd96 	bl	8001b2c <_ZN13ScreenDisplay8sendTextEPKcS1_>
}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	0800e628 	.word	0x0800e628
 800200c:	0800e638 	.word	0x0800e638
 8002010:	0800e644 	.word	0x0800e644

08002014 <_ZN13VESCInterfaceC1EP20__UART_HandleTypeDef>:
//C'est VESCI qui décide
#define COMM_SET_CURRENT    5
#define COMM_SET_RPM        8
#define COMM_GET_VALUES     4

VESCInterface::VESCInterface(UART_HandleTypeDef* ControlUart)
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
    : control_uart(ControlUart), rpm(0.0f), inputCurrent(0.0f), dutyCycle(0.0f)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    {
        screen = new ScreenDisplay(screen_uart);
 8002042:	2004      	movs	r0, #4
 8002044:	f009 fb60 	bl	800b708 <_Znwj>
 8002048:	4603      	mov	r3, r0
 800204a:	461c      	mov	r4, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4619      	mov	r1, r3
 8002052:	4620      	mov	r0, r4
 8002054:	f7ff fd30 	bl	8001ab8 <_ZN13ScreenDisplayC1EP20__UART_HandleTypeDef>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f8c3 40d4 	str.w	r4, [r3, #212]	@ 0xd4
    }
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	bd90      	pop	{r4, r7, pc}

08002068 <_ZN13VESCInterface10setCurrentEf>:

void VESCInterface::setCurrent(float current)
//Cette fonction sert à envoyer une commande au VESC pour lui demander: aplique un courant current (en ampères) au moteur
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	ed87 0a00 	vstr	s0, [r7]
    uint8_t payload[5];
    payload[0] = COMM_SET_CURRENT;
 8002074:	2305      	movs	r3, #5
 8002076:	733b      	strb	r3, [r7, #12]
    int32_t iCurrent = static_cast<int32_t>/*Ecriture de la valeur en mA sur 32bits donc 4 octets*/(current * 1000.0f/*Conversion du float en mA*/);
 8002078:	edd7 7a00 	vldr	s15, [r7]
 800207c:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80020c4 <_ZN13VESCInterface10setCurrentEf+0x5c>
 8002080:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002084:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002088:	ee17 3a90 	vmov	r3, s15
 800208c:	617b      	str	r3, [r7, #20]
    //On chisit 32 bits car ca permet de représenter un grand intervalles de courants (de -2M à +2M mA)
    payload[1] = (iCurrent >> 24) & 0xFF; //payload[1] comporte le premier octet le plus fort
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	0e1b      	lsrs	r3, r3, #24
 8002092:	b2db      	uxtb	r3, r3
 8002094:	737b      	strb	r3, [r7, #13]
    payload[2] = (iCurrent >> 16) & 0xFF; //payload[2] comporte le deuxième octet le plus fort
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	141b      	asrs	r3, r3, #16
 800209a:	b2db      	uxtb	r3, r3
 800209c:	73bb      	strb	r3, [r7, #14]
    payload[3] = (iCurrent >> 8) & 0xFF; //payload[3] comporte le troisième octet le plus fort
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	121b      	asrs	r3, r3, #8
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	73fb      	strb	r3, [r7, #15]
    payload[4] = iCurrent & 0xFF; ////payload[4] comporte l'octet le plus faible
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	743b      	strb	r3, [r7, #16]
    //pour 3,5A payload = [commande, 0x00, 0x00, 0x0D, 0xAC]
    sendPacket(payload, 5); //le 5 est la longueur du message
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	2205      	movs	r2, #5
 80020b2:	4619      	mov	r1, r3
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f92b 	bl	8002310 <_ZN13VESCInterface10sendPacketEPht>
}
 80020ba:	bf00      	nop
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	447a0000 	.word	0x447a0000

080020c8 <_ZN13VESCInterface6setRPMEl>:

void VESCInterface::setRPM(int32_t rpmValue) //Un int32_t peut stocker de -2,147,483,648  →  +2,147,483,647 (en tr/min) ce qui est suffisant pour tout les moteurs
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
    uint8_t payload[5];
    payload[0] = COMM_SET_RPM;
 80020d2:	2308      	movs	r3, #8
 80020d4:	723b      	strb	r3, [r7, #8]
    payload[1] = (rpmValue >> 24) & 0xFF;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	0e1b      	lsrs	r3, r3, #24
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	727b      	strb	r3, [r7, #9]
    payload[2] = (rpmValue >> 16) & 0xFF;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	141b      	asrs	r3, r3, #16
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	72bb      	strb	r3, [r7, #10]
    payload[3] = (rpmValue >> 8) & 0xFF;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	121b      	asrs	r3, r3, #8
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	72fb      	strb	r3, [r7, #11]
    payload[4] = rpmValue & 0xFF;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	733b      	strb	r3, [r7, #12]
    sendPacket(payload, 5);
 80020f4:	f107 0308 	add.w	r3, r7, #8
 80020f8:	2205      	movs	r2, #5
 80020fa:	4619      	mov	r1, r3
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f907 	bl	8002310 <_ZN13VESCInterface10sendPacketEPht>
}
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <_ZN13VESCInterface6getRPMEv>:

float VESCInterface::getRPM() {
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
    if (getValues())
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f811 	bl	800213c <_ZN13VESCInterface9getValuesEv>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <_ZN13VESCInterface6getRPMEv+0x1c>
    {
        return rpm;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002126:	e000      	b.n	800212a <_ZN13VESCInterface6getRPMEv+0x1e>
    }
    return -1.0f;
 8002128:	4b03      	ldr	r3, [pc, #12]	@ (8002138 <_ZN13VESCInterface6getRPMEv+0x2c>)
}
 800212a:	ee07 3a90 	vmov	s15, r3
 800212e:	eeb0 0a67 	vmov.f32	s0, s15
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	bf800000 	.word	0xbf800000

0800213c <_ZN13VESCInterface9getValuesEv>:

bool VESCInterface::getValues()
//Cette fonction permet de lire l'etat actuel du moteur
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
    uint8_t cmd = COMM_GET_VALUES;
 8002144:	2304      	movs	r3, #4
 8002146:	73fb      	strb	r3, [r7, #15]
    sendPacket(&cmd, 1);
 8002148:	f107 030f 	add.w	r3, r7, #15
 800214c:	2201      	movs	r2, #1
 800214e:	4619      	mov	r1, r3
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f8dd 	bl	8002310 <_ZN13VESCInterface10sendPacketEPht>

    uint16_t len;
    if (!receivePacket(rxBuffer, len)) return false;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800215c:	f107 020c 	add.w	r2, r7, #12
 8002160:	2364      	movs	r3, #100	@ 0x64
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f93e 	bl	80023e4 <_ZN13VESCInterface13receivePacketEPhRtm>
 8002168:	4603      	mov	r3, r0
 800216a:	f083 0301 	eor.w	r3, r3, #1
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <_ZN13VESCInterface9getValuesEv+0x3c>
 8002174:	2300      	movs	r3, #0
 8002176:	e036      	b.n	80021e6 <_ZN13VESCInterface9getValuesEv+0xaa>

    if (rxBuffer[0] != COMM_GET_VALUES) return false; //rxBuffer[0] n’est pas le 1er octet total de la trame C’est le 1er octet du payload
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800217e:	2b04      	cmp	r3, #4
 8002180:	d001      	beq.n	8002186 <_ZN13VESCInterface9getValuesEv+0x4a>
 8002182:	2300      	movs	r3, #0
 8002184:	e02f      	b.n	80021e6 <_ZN13VESCInterface9getValuesEv+0xaa>

    uint8_t* ptr = &rxBuffer[1]; //On fait pointer ptr vers la première donnée utile
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3349      	adds	r3, #73	@ 0x49
 800218a:	617b      	str	r3, [r7, #20]

    ptr += 4;  //  saute Temp FET
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	3304      	adds	r3, #4
 8002190:	617b      	str	r3, [r7, #20]
    ptr += 4;  //  saute Temp moteur
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	3304      	adds	r3, #4
 8002196:	617b      	str	r3, [r7, #20]
    ptr += 4;  //  saute courant moteur
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	3304      	adds	r3, #4
 800219c:	617b      	str	r3, [r7, #20]
    ptr += 4;  //  saute courant batterie (input current)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	3304      	adds	r3, #4
 80021a2:	617b      	str	r3, [r7, #20]
    ptr += 4;  //  saute ID moteur
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	3304      	adds	r3, #4
 80021a8:	617b      	str	r3, [r7, #20]
    ptr += 4;  //  saute IQ moteur
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	3304      	adds	r3, #4
 80021ae:	617b      	str	r3, [r7, #20]

    //Après ces 6 sauts, ptr pointe maintenant vers le champ suivant : le RPM (encodé sur 4 octets)

    int32_t rpmRaw = (ptr[0] << 24) | (ptr[1] << 16) | (ptr[2] << 8) | ptr[3];
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	061a      	lsls	r2, r3, #24
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	3301      	adds	r3, #1
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	041b      	lsls	r3, r3, #16
 80021be:	431a      	orrs	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	3302      	adds	r3, #2
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	4313      	orrs	r3, r2
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	3203      	adds	r2, #3
 80021ce:	7812      	ldrb	r2, [r2, #0]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
    rpm = static_cast<float>(rpmRaw);
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	ee07 3a90 	vmov	s15, r3
 80021da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
    return true;
 80021e4:	2301      	movs	r3, #1
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <_ZN13VESCInterface10getCurrentEv>:

float VESCInterface::getCurrent() {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
    uint8_t cmd = COMM_GET_VALUES;
 80021f8:	2304      	movs	r3, #4
 80021fa:	74fb      	strb	r3, [r7, #19]
    sendPacket(&cmd, 1);
 80021fc:	f107 0313 	add.w	r3, r7, #19
 8002200:	2201      	movs	r2, #1
 8002202:	4619      	mov	r1, r3
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f883 	bl	8002310 <_ZN13VESCInterface10sendPacketEPht>

    uint16_t len;
    if (!receivePacket(rxBuffer, len)) return -1.0f;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8002210:	f107 0210 	add.w	r2, r7, #16
 8002214:	2364      	movs	r3, #100	@ 0x64
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f8e4 	bl	80023e4 <_ZN13VESCInterface13receivePacketEPhRtm>
 800221c:	4603      	mov	r3, r0
 800221e:	f083 0301 	eor.w	r3, r3, #1
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <_ZN13VESCInterface10getCurrentEv+0x3c>
 8002228:	4b14      	ldr	r3, [pc, #80]	@ (800227c <_ZN13VESCInterface10getCurrentEv+0x8c>)
 800222a:	e01f      	b.n	800226c <_ZN13VESCInterface10getCurrentEv+0x7c>

    if (rxBuffer[0] != COMM_GET_VALUES) return -1.0f;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002232:	2b04      	cmp	r3, #4
 8002234:	d001      	beq.n	800223a <_ZN13VESCInterface10getCurrentEv+0x4a>
 8002236:	4b11      	ldr	r3, [pc, #68]	@ (800227c <_ZN13VESCInterface10getCurrentEv+0x8c>)
 8002238:	e018      	b.n	800226c <_ZN13VESCInterface10getCurrentEv+0x7c>

    uint8_t* ptr = &rxBuffer[1]; // Pointeur sur le début du payload (après code commande)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3349      	adds	r3, #73	@ 0x49
 800223e:	617b      	str	r3, [r7, #20]

    ptr += 4;  // Temp FET
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	3304      	adds	r3, #4
 8002244:	617b      	str	r3, [r7, #20]
    ptr += 4;  // Temp motor
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	3304      	adds	r3, #4
 800224a:	617b      	str	r3, [r7, #20]
    ptr += 4;  // Current motor
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	3304      	adds	r3, #4
 8002250:	617b      	str	r3, [r7, #20]
        uint8_t b[4];
    } uCurrent;
    /*Une union est un type spécial qui permet de partager la même zone mémoire entre plusieurs variables.
    Ça veut dire que toutes les variables dans la union occupent le même espace mémoire, on peux accéder à ces données sous différentes formes.*/

    uCurrent.b[0] = ptr[0];
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	733b      	strb	r3, [r7, #12]
    uCurrent.b[1] = ptr[1];
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	785b      	ldrb	r3, [r3, #1]
 800225c:	737b      	strb	r3, [r7, #13]
    uCurrent.b[2] = ptr[2];
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	789b      	ldrb	r3, [r3, #2]
 8002262:	73bb      	strb	r3, [r7, #14]
    uCurrent.b[3] = ptr[3];
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	78db      	ldrb	r3, [r3, #3]
 8002268:	73fb      	strb	r3, [r7, #15]

    return uCurrent.f;  // En ampères
 800226a:	68fb      	ldr	r3, [r7, #12]
}
 800226c:	ee07 3a90 	vmov	s15, r3
 8002270:	eeb0 0a67 	vmov.f32	s0, s15
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	bf800000 	.word	0xbf800000

08002280 <_ZN13VESCInterface12getDutyCycleEv>:

float VESCInterface::getDutyCycle() {
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
    uint8_t cmd = COMM_GET_VALUES;
 8002288:	2304      	movs	r3, #4
 800228a:	74fb      	strb	r3, [r7, #19]
    sendPacket(&cmd, 1);
 800228c:	f107 0313 	add.w	r3, r7, #19
 8002290:	2201      	movs	r2, #1
 8002292:	4619      	mov	r1, r3
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f83b 	bl	8002310 <_ZN13VESCInterface10sendPacketEPht>

    uint16_t len;
    if (!receivePacket(rxBuffer, len)) return -1.0f;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80022a0:	f107 0210 	add.w	r2, r7, #16
 80022a4:	2364      	movs	r3, #100	@ 0x64
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f89c 	bl	80023e4 <_ZN13VESCInterface13receivePacketEPhRtm>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f083 0301 	eor.w	r3, r3, #1
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <_ZN13VESCInterface12getDutyCycleEv+0x3c>
 80022b8:	4b14      	ldr	r3, [pc, #80]	@ (800230c <_ZN13VESCInterface12getDutyCycleEv+0x8c>)
 80022ba:	e01f      	b.n	80022fc <_ZN13VESCInterface12getDutyCycleEv+0x7c>
    if (rxBuffer[0] != COMM_GET_VALUES) return -1.0f;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	d001      	beq.n	80022ca <_ZN13VESCInterface12getDutyCycleEv+0x4a>
 80022c6:	4b11      	ldr	r3, [pc, #68]	@ (800230c <_ZN13VESCInterface12getDutyCycleEv+0x8c>)
 80022c8:	e018      	b.n	80022fc <_ZN13VESCInterface12getDutyCycleEv+0x7c>

    uint8_t* ptr = &rxBuffer[1];
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3349      	adds	r3, #73	@ 0x49
 80022ce:	617b      	str	r3, [r7, #20]
    ptr += 4 * 6;  // Skip to RPM
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	3318      	adds	r3, #24
 80022d4:	617b      	str	r3, [r7, #20]
    ptr += 4;      // RPM
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	3304      	adds	r3, #4
 80022da:	617b      	str	r3, [r7, #20]
    ptr += 4;      // Input voltage. La tension de ta batterie
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	3304      	adds	r3, #4
 80022e0:	617b      	str	r3, [r7, #20]
    union {
        float f;
        uint8_t b[4];
    } uDuty;

    uDuty.b[0] = ptr[0];
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	733b      	strb	r3, [r7, #12]
    uDuty.b[1] = ptr[1];
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	785b      	ldrb	r3, [r3, #1]
 80022ec:	737b      	strb	r3, [r7, #13]
    uDuty.b[2] = ptr[2];
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	789b      	ldrb	r3, [r3, #2]
 80022f2:	73bb      	strb	r3, [r7, #14]
    uDuty.b[3] = ptr[3];
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	78db      	ldrb	r3, [r3, #3]
 80022f8:	73fb      	strb	r3, [r7, #15]

    return uDuty.f;  // entre -1.0 et 1.0
 80022fa:	68fb      	ldr	r3, [r7, #12]
}
 80022fc:	ee07 3a90 	vmov	s15, r3
 8002300:	eeb0 0a67 	vmov.f32	s0, s15
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	bf800000 	.word	0xbf800000

08002310 <_ZN13VESCInterface10sendPacketEPht>:

void VESCInterface::sendPacket(uint8_t* data, uint16_t len) {
 8002310:	b580      	push	{r7, lr}
 8002312:	b0a6      	sub	sp, #152	@ 0x98
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	4613      	mov	r3, r2
 800231c:	80fb      	strh	r3, [r7, #6]
    uint8_t packet[128]; //trame finale à envoyer au VESC. (128 octets = largement suffisant pour n'importe quelle commande)
    uint16_t index = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    packet[index++] = 2; //2 est le start bite. packet[0] = 0x02
 8002324:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	f8a7 2096 	strh.w	r2, [r7, #150]	@ 0x96
 800232e:	3398      	adds	r3, #152	@ 0x98
 8002330:	443b      	add	r3, r7
 8002332:	2202      	movs	r2, #2
 8002334:	f803 2c84 	strb.w	r2, [r3, #-132]
    packet[index++] = len; //la longueur de la trame
 8002338:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	f8a7 2096 	strh.w	r2, [r7, #150]	@ 0x96
 8002342:	88fa      	ldrh	r2, [r7, #6]
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	3398      	adds	r3, #152	@ 0x98
 8002348:	443b      	add	r3, r7
 800234a:	f803 2c84 	strb.w	r2, [r3, #-132]

    memcpy(&packet[index], data, len); //On copie le contenu de la trame dans packet
 800234e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8002352:	f107 0214 	add.w	r2, r7, #20
 8002356:	4413      	add	r3, r2
 8002358:	88fa      	ldrh	r2, [r7, #6]
 800235a:	68b9      	ldr	r1, [r7, #8]
 800235c:	4618      	mov	r0, r3
 800235e:	f00a f918 	bl	800c592 <memcpy>
    index += len;
 8002362:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	4413      	add	r3, r2
 800236a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    uint16_t crc = crc16(data, len); //On calcule le CRC (vérification) sur le `payload`. C'est une sorte de signature numérique qui permt de s'assurer que les données n'ont pas été modifiés ors de l'envoi.
 800236e:	88fb      	ldrh	r3, [r7, #6]
 8002370:	461a      	mov	r2, r3
 8002372:	68b9      	ldr	r1, [r7, #8]
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 f896 	bl	80024a6 <_ZN13VESCInterface5crc16EPKht>
 800237a:	4603      	mov	r3, r0
 800237c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
    packet[index++] = (crc >> 8) & 0xFF; //Le crc est sur deux octets donc en l'envoi en deux fois
 8002380:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	b29a      	uxth	r2, r3
 8002388:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800238c:	1c59      	adds	r1, r3, #1
 800238e:	f8a7 1096 	strh.w	r1, [r7, #150]	@ 0x96
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	3398      	adds	r3, #152	@ 0x98
 8002396:	443b      	add	r3, r7
 8002398:	f803 2c84 	strb.w	r2, [r3, #-132]
    packet[index++] = crc & 0xFF;
 800239c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	f8a7 2096 	strh.w	r2, [r7, #150]	@ 0x96
 80023a6:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	3398      	adds	r3, #152	@ 0x98
 80023ae:	443b      	add	r3, r7
 80023b0:	f803 2c84 	strb.w	r2, [r3, #-132]

    packet[index++] = 3;// Le bit de stop
 80023b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	f8a7 2096 	strh.w	r2, [r7, #150]	@ 0x96
 80023be:	3398      	adds	r3, #152	@ 0x98
 80023c0:	443b      	add	r3, r7
 80023c2:	2203      	movs	r2, #3
 80023c4:	f803 2c84 	strb.w	r2, [r3, #-132]

    HAL_UART_Transmit(control_uart, packet, index, HAL_MAX_DELAY);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 80023d0:	f107 0114 	add.w	r1, r7, #20
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295
 80023d8:	f005 f84b 	bl	8007472 <HAL_UART_Transmit>
}
 80023dc:	bf00      	nop
 80023de:	3798      	adds	r7, #152	@ 0x98
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <_ZN13VESCInterface13receivePacketEPhRtm>:

bool VESCInterface::receivePacket(uint8_t* buffer, uint16_t& len, uint32_t timeout) //On passe len en parametre parce qu'on veut la remplir et pouvoir l'utiliser plus tard
//Lit la réponse envoyée par le VESC via UART, et vérifie qu’elle est correcte.
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]
    uint8_t header[2];
    if (HAL_UART_Receive(control_uart, header, 2, timeout) != HAL_OK) return false;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	f107 0114 	add.w	r1, r7, #20
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2202      	movs	r2, #2
 80023fe:	f005 f8c3 	bl	8007588 <HAL_UART_Receive>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf14      	ite	ne
 8002408:	2301      	movne	r3, #1
 800240a:	2300      	moveq	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <_ZN13VESCInterface13receivePacketEPhRtm+0x32>
 8002412:	2300      	movs	r3, #0
 8002414:	e043      	b.n	800249e <_ZN13VESCInterface13receivePacketEPhRtm+0xba>

    if (header[0] != 2) return false;
 8002416:	7d3b      	ldrb	r3, [r7, #20]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d001      	beq.n	8002420 <_ZN13VESCInterface13receivePacketEPhRtm+0x3c>
 800241c:	2300      	movs	r3, #0
 800241e:	e03e      	b.n	800249e <_ZN13VESCInterface13receivePacketEPhRtm+0xba>
    len = header[1];
 8002420:	7d7b      	ldrb	r3, [r7, #21]
 8002422:	461a      	mov	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	801a      	strh	r2, [r3, #0]

    if (HAL_UART_Receive(control_uart, buffer, len + 3, timeout) != HAL_OK) return false;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	3303      	adds	r3, #3
 8002432:	b29a      	uxth	r2, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	f005 f8a6 	bl	8007588 <HAL_UART_Receive>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	bf14      	ite	ne
 8002442:	2301      	movne	r3, #1
 8002444:	2300      	moveq	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <_ZN13VESCInterface13receivePacketEPhRtm+0x6c>
 800244c:	2300      	movs	r3, #0
 800244e:	e026      	b.n	800249e <_ZN13VESCInterface13receivePacketEPhRtm+0xba>
    - len octets de payload (les données utiles)
    - +2 octets de CRC
    - +1 octet de fin de trame (0x03)
    Si ça échoue : retour `false`.*/

    uint16_t received_crc = (buffer[len] << 8) | buffer[len + 1]; //On reconstitue le CRC reçu à partir des 2 derniers octets du payload
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4413      	add	r3, r2
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	b21b      	sxth	r3, r3
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	b21a      	sxth	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	3301      	adds	r3, #1
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	440b      	add	r3, r1
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	b21b      	sxth	r3, r3
 8002470:	4313      	orrs	r3, r2
 8002472:	b21b      	sxth	r3, r3
 8002474:	82fb      	strh	r3, [r7, #22]
    if (crc16(buffer, len) != received_crc) return false;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f811 	bl	80024a6 <_ZN13VESCInterface5crc16EPKht>
 8002484:	4603      	mov	r3, r0
 8002486:	461a      	mov	r2, r3
 8002488:	8afb      	ldrh	r3, [r7, #22]
 800248a:	4293      	cmp	r3, r2
 800248c:	bf14      	ite	ne
 800248e:	2301      	movne	r3, #1
 8002490:	2300      	moveq	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <_ZN13VESCInterface13receivePacketEPhRtm+0xb8>
 8002498:	2300      	movs	r3, #0
 800249a:	e000      	b.n	800249e <_ZN13VESCInterface13receivePacketEPhRtm+0xba>

    return true;
 800249c:	2301      	movs	r3, #1
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <_ZN13VESCInterface5crc16EPKht>:

uint16_t VESCInterface::crc16(const uint8_t* data, uint16_t len) {
 80024a6:	b480      	push	{r7}
 80024a8:	b087      	sub	sp, #28
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	4613      	mov	r3, r2
 80024b2:	80fb      	strh	r3, [r7, #6]
    uint16_t crc = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	82fb      	strh	r3, [r7, #22]
    for (uint16_t i = 0; i < len; i++) {
 80024b8:	2300      	movs	r3, #0
 80024ba:	82bb      	strh	r3, [r7, #20]
 80024bc:	e033      	b.n	8002526 <_ZN13VESCInterface5crc16EPKht+0x80>
        crc = (uint8_t)(crc >> 8) | (crc << 8);
 80024be:	8afb      	ldrh	r3, [r7, #22]
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	b21a      	sxth	r2, r3
 80024c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80024cc:	021b      	lsls	r3, r3, #8
 80024ce:	b21b      	sxth	r3, r3
 80024d0:	4313      	orrs	r3, r2
 80024d2:	b21b      	sxth	r3, r3
 80024d4:	82fb      	strh	r3, [r7, #22]
        crc ^= data[i];
 80024d6:	8abb      	ldrh	r3, [r7, #20]
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	4413      	add	r3, r2
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	8afb      	ldrh	r3, [r7, #22]
 80024e2:	4053      	eors	r3, r2
 80024e4:	82fb      	strh	r3, [r7, #22]
        crc ^= (uint8_t)(crc & 0xFF) >> 4;
 80024e6:	8afb      	ldrh	r3, [r7, #22]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	8afb      	ldrh	r3, [r7, #22]
 80024f2:	4053      	eors	r3, r2
 80024f4:	82fb      	strh	r3, [r7, #22]
        crc ^= (crc << 8) << 4;
 80024f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80024fa:	031b      	lsls	r3, r3, #12
 80024fc:	b21a      	sxth	r2, r3
 80024fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002502:	4053      	eors	r3, r2
 8002504:	b21b      	sxth	r3, r3
 8002506:	82fb      	strh	r3, [r7, #22]
        crc ^= ((crc & 0xFF) << 4) << 1;
 8002508:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800250c:	015b      	lsls	r3, r3, #5
 800250e:	b21b      	sxth	r3, r3
 8002510:	f403 53ff 	and.w	r3, r3, #8160	@ 0x1fe0
 8002514:	b21a      	sxth	r2, r3
 8002516:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800251a:	4053      	eors	r3, r2
 800251c:	b21b      	sxth	r3, r3
 800251e:	82fb      	strh	r3, [r7, #22]
    for (uint16_t i = 0; i < len; i++) {
 8002520:	8abb      	ldrh	r3, [r7, #20]
 8002522:	3301      	adds	r3, #1
 8002524:	82bb      	strh	r3, [r7, #20]
 8002526:	8aba      	ldrh	r2, [r7, #20]
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	429a      	cmp	r2, r3
 800252c:	d3c7      	bcc.n	80024be <_ZN13VESCInterface5crc16EPKht+0x18>
    }
    return crc;
 800252e:	8afb      	ldrh	r3, [r7, #22]
}
 8002530:	4618      	mov	r0, r3
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002542:	f000 fe1b 	bl	800317c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002546:	f000 f86b 	bl	8002620 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800254a:	f000 f9ff 	bl	800294c <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 800254e:	f000 f8dd 	bl	800270c <_ZL12MX_I2C1_Initv>
  MX_I2S3_Init();
 8002552:	f000 f90f 	bl	8002774 <_ZL12MX_I2S3_Initv>
  MX_SPI1_Init();
 8002556:	f000 f961 	bl	800281c <_ZL12MX_SPI1_Initv>
  MX_USB_HOST_Init();
 800255a:	f008 fdcb 	bl	800b0f4 <MX_USB_HOST_Init>
  MX_IWDG_Init();
 800255e:	f000 f93d 	bl	80027dc <_ZL12MX_IWDG_Initv>
  MX_USART2_UART_Init();
 8002562:	f000 f997 	bl	8002894 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 8002566:	f000 f9c3 	bl	80028f0 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_IWDG_Refresh(&hiwdg);
 800256a:	4828      	ldr	r0, [pc, #160]	@ (800260c <main+0xd0>)
 800256c:	f004 f8be 	bl	80066ec <HAL_IWDG_Refresh>

  //Création du contrôleur moteur : USART3 = VESC, USART2 = Ecran
  motor = new MotorController(&huart3, &huart2, initialTorqueConstant);
 8002570:	2050      	movs	r0, #80	@ 0x50
 8002572:	f009 f8c9 	bl	800b708 <_Znwj>
 8002576:	4603      	mov	r3, r0
 8002578:	461c      	mov	r4, r3
 800257a:	4b25      	ldr	r3, [pc, #148]	@ (8002610 <main+0xd4>)
 800257c:	edd3 7a00 	vldr	s15, [r3]
 8002580:	eeb0 0a67 	vmov.f32	s0, s15
 8002584:	4a23      	ldr	r2, [pc, #140]	@ (8002614 <main+0xd8>)
 8002586:	4924      	ldr	r1, [pc, #144]	@ (8002618 <main+0xdc>)
 8002588:	4620      	mov	r0, r4
 800258a:	f7fe fd99 	bl	80010c0 <_ZN15MotorControllerC1EP20__UART_HandleTypeDefS1_f>
 800258e:	4b23      	ldr	r3, [pc, #140]	@ (800261c <main+0xe0>)
 8002590:	601c      	str	r4, [r3, #0]
  motor->calibrateTorqueConstant();
 8002592:	4b22      	ldr	r3, [pc, #136]	@ (800261c <main+0xe0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fa20 	bl	80019dc <_ZN15MotorController23calibrateTorqueConstantEv>
  HAL_Delay(500);
 800259c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80025a0:	f000 fe5e 	bl	8003260 <HAL_Delay>

  // Afficher les valeurs initiales
  motor->updateScreen();
 80025a4:	4b1d      	ldr	r3, [pc, #116]	@ (800261c <main+0xe0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff f9b7 	bl	800191c <_ZN15MotorController12updateScreenEv>
  HAL_Delay(100);
 80025ae:	2064      	movs	r0, #100	@ 0x64
 80025b0:	f000 fe56 	bl	8003260 <HAL_Delay>
  motor->getscreen()->showWelcome();
 80025b4:	4b19      	ldr	r3, [pc, #100]	@ (800261c <main+0xe0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fa71 	bl	8001aa0 <_ZN15MotorController9getscreenEv>
 80025be:	4603      	mov	r3, r0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fbaf 	bl	8001d24 <_ZN13ScreenDisplay11showWelcomeEv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_IWDG_Refresh(&hiwdg);  // Rafraîchit le Watchdog
 80025c6:	4811      	ldr	r0, [pc, #68]	@ (800260c <main+0xd0>)
 80025c8:	f004 f890 	bl	80066ec <HAL_IWDG_Refresh>

    // Met à jour les paramètres utilisateur (mode, direction, stop, etc.)
    motor->updateFromScreen();
 80025cc:	4b13      	ldr	r3, [pc, #76]	@ (800261c <main+0xe0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff f923 	bl	800181c <_ZN15MotorController16updateFromScreenEv>

    // Lecture de la cadence actuelle (depuis VESC)
    float cadence = motor->getCadence();
 80025d6:	4b11      	ldr	r3, [pc, #68]	@ (800261c <main+0xe0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe fe82 	bl	80012e4 <_ZN15MotorController10getCadenceEv>
 80025e0:	ed87 0a01 	vstr	s0, [r7, #4]

    // Mise à jour dynamique du moteur (mode LINEAR si actif)
    motor->update(cadence);
 80025e4:	4b0d      	ldr	r3, [pc, #52]	@ (800261c <main+0xe0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	ed97 0a01 	vldr	s0, [r7, #4]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff f86b 	bl	80016c8 <_ZN15MotorController6updateEf>

    // Affiche les valeurs sur l'écran (couple, duty, etc.)
    motor->updateScreen();
 80025f2:	4b0a      	ldr	r3, [pc, #40]	@ (800261c <main+0xe0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff f990 	bl	800191c <_ZN15MotorController12updateScreenEv>

    HAL_Delay(100);  // rafraîchissement toutes les 100 ms
 80025fc:	2064      	movs	r0, #100	@ 0x64
 80025fe:	f000 fe2f 	bl	8003260 <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8002602:	f008 fd9d 	bl	800b140 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
  }
 8002606:	bf00      	nop
 8002608:	e7dd      	b.n	80025c6 <main+0x8a>
 800260a:	bf00      	nop
 800260c:	200002b0 	.word	0x200002b0
 8002610:	20000000 	.word	0x20000000
 8002614:	20000314 	.word	0x20000314
 8002618:	2000035c 	.word	0x2000035c
 800261c:	200003a4 	.word	0x200003a4

08002620 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b094      	sub	sp, #80	@ 0x50
 8002624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002626:	f107 0320 	add.w	r3, r7, #32
 800262a:	2230      	movs	r2, #48	@ 0x30
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f009 fedb 	bl	800c3ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002634:	f107 030c 	add.w	r3, r7, #12
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002644:	2300      	movs	r3, #0
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	4b2e      	ldr	r3, [pc, #184]	@ (8002704 <_Z18SystemClock_Configv+0xe4>)
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	4a2d      	ldr	r2, [pc, #180]	@ (8002704 <_Z18SystemClock_Configv+0xe4>)
 800264e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002652:	6413      	str	r3, [r2, #64]	@ 0x40
 8002654:	4b2b      	ldr	r3, [pc, #172]	@ (8002704 <_Z18SystemClock_Configv+0xe4>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002660:	2300      	movs	r3, #0
 8002662:	607b      	str	r3, [r7, #4]
 8002664:	4b28      	ldr	r3, [pc, #160]	@ (8002708 <_Z18SystemClock_Configv+0xe8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a27      	ldr	r2, [pc, #156]	@ (8002708 <_Z18SystemClock_Configv+0xe8>)
 800266a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b25      	ldr	r3, [pc, #148]	@ (8002708 <_Z18SystemClock_Configv+0xe8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800267c:	2309      	movs	r3, #9
 800267e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002680:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002684:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002686:	2301      	movs	r3, #1
 8002688:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800268a:	2302      	movs	r3, #2
 800268c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800268e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002694:	2308      	movs	r3, #8
 8002696:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002698:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800269c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800269e:	2302      	movs	r3, #2
 80026a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80026a2:	2307      	movs	r3, #7
 80026a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026a6:	f107 0320 	add.w	r3, r7, #32
 80026aa:	4618      	mov	r0, r3
 80026ac:	f004 f82e 	bl	800670c <HAL_RCC_OscConfig>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	bf14      	ite	ne
 80026b6:	2301      	movne	r3, #1
 80026b8:	2300      	moveq	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 80026c0:	f000 fa42 	bl	8002b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026c4:	230f      	movs	r3, #15
 80026c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026c8:	2302      	movs	r3, #2
 80026ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80026d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80026d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80026dc:	f107 030c 	add.w	r3, r7, #12
 80026e0:	2105      	movs	r1, #5
 80026e2:	4618      	mov	r0, r3
 80026e4:	f004 fa8a 	bl	8006bfc <HAL_RCC_ClockConfig>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	bf14      	ite	ne
 80026ee:	2301      	movne	r3, #1
 80026f0:	2300      	moveq	r3, #0
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <_Z18SystemClock_Configv+0xdc>
  {
    Error_Handler();
 80026f8:	f000 fa26 	bl	8002b48 <Error_Handler>
  }
}
 80026fc:	bf00      	nop
 80026fe:	3750      	adds	r7, #80	@ 0x50
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40023800 	.word	0x40023800
 8002708:	40007000 	.word	0x40007000

0800270c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002710:	4b15      	ldr	r3, [pc, #84]	@ (8002768 <_ZL12MX_I2C1_Initv+0x5c>)
 8002712:	4a16      	ldr	r2, [pc, #88]	@ (800276c <_ZL12MX_I2C1_Initv+0x60>)
 8002714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002716:	4b14      	ldr	r3, [pc, #80]	@ (8002768 <_ZL12MX_I2C1_Initv+0x5c>)
 8002718:	4a15      	ldr	r2, [pc, #84]	@ (8002770 <_ZL12MX_I2C1_Initv+0x64>)
 800271a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800271c:	4b12      	ldr	r3, [pc, #72]	@ (8002768 <_ZL12MX_I2C1_Initv+0x5c>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002722:	4b11      	ldr	r3, [pc, #68]	@ (8002768 <_ZL12MX_I2C1_Initv+0x5c>)
 8002724:	2200      	movs	r2, #0
 8002726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002728:	4b0f      	ldr	r3, [pc, #60]	@ (8002768 <_ZL12MX_I2C1_Initv+0x5c>)
 800272a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800272e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002730:	4b0d      	ldr	r3, [pc, #52]	@ (8002768 <_ZL12MX_I2C1_Initv+0x5c>)
 8002732:	2200      	movs	r2, #0
 8002734:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002736:	4b0c      	ldr	r3, [pc, #48]	@ (8002768 <_ZL12MX_I2C1_Initv+0x5c>)
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800273c:	4b0a      	ldr	r3, [pc, #40]	@ (8002768 <_ZL12MX_I2C1_Initv+0x5c>)
 800273e:	2200      	movs	r2, #0
 8002740:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002742:	4b09      	ldr	r3, [pc, #36]	@ (8002768 <_ZL12MX_I2C1_Initv+0x5c>)
 8002744:	2200      	movs	r2, #0
 8002746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002748:	4807      	ldr	r0, [pc, #28]	@ (8002768 <_ZL12MX_I2C1_Initv+0x5c>)
 800274a:	f003 f9a9 	bl	8005aa0 <HAL_I2C_Init>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf14      	ite	ne
 8002754:	2301      	movne	r3, #1
 8002756:	2300      	moveq	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800275e:	f000 f9f3 	bl	8002b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000214 	.word	0x20000214
 800276c:	40005400 	.word	0x40005400
 8002770:	000186a0 	.word	0x000186a0

08002774 <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002778:	4b15      	ldr	r3, [pc, #84]	@ (80027d0 <_ZL12MX_I2S3_Initv+0x5c>)
 800277a:	4a16      	ldr	r2, [pc, #88]	@ (80027d4 <_ZL12MX_I2S3_Initv+0x60>)
 800277c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800277e:	4b14      	ldr	r3, [pc, #80]	@ (80027d0 <_ZL12MX_I2S3_Initv+0x5c>)
 8002780:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002784:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002786:	4b12      	ldr	r3, [pc, #72]	@ (80027d0 <_ZL12MX_I2S3_Initv+0x5c>)
 8002788:	2200      	movs	r2, #0
 800278a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800278c:	4b10      	ldr	r3, [pc, #64]	@ (80027d0 <_ZL12MX_I2S3_Initv+0x5c>)
 800278e:	2200      	movs	r2, #0
 8002790:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002792:	4b0f      	ldr	r3, [pc, #60]	@ (80027d0 <_ZL12MX_I2S3_Initv+0x5c>)
 8002794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002798:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800279a:	4b0d      	ldr	r3, [pc, #52]	@ (80027d0 <_ZL12MX_I2S3_Initv+0x5c>)
 800279c:	4a0e      	ldr	r2, [pc, #56]	@ (80027d8 <_ZL12MX_I2S3_Initv+0x64>)
 800279e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80027a0:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <_ZL12MX_I2S3_Initv+0x5c>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80027a6:	4b0a      	ldr	r3, [pc, #40]	@ (80027d0 <_ZL12MX_I2S3_Initv+0x5c>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80027ac:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <_ZL12MX_I2S3_Initv+0x5c>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80027b2:	4807      	ldr	r0, [pc, #28]	@ (80027d0 <_ZL12MX_I2S3_Initv+0x5c>)
 80027b4:	f003 fab8 	bl	8005d28 <HAL_I2S_Init>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	bf14      	ite	ne
 80027be:	2301      	movne	r3, #1
 80027c0:	2300      	moveq	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <_ZL12MX_I2S3_Initv+0x58>
  {
    Error_Handler();
 80027c8:	f000 f9be 	bl	8002b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80027cc:	bf00      	nop
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000268 	.word	0x20000268
 80027d4:	40003c00 	.word	0x40003c00
 80027d8:	00017700 	.word	0x00017700

080027dc <_ZL12MX_IWDG_Initv>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80027e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <_ZL12MX_IWDG_Initv+0x38>)
 80027e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002818 <_ZL12MX_IWDG_Initv+0x3c>)
 80027e4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80027e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002814 <_ZL12MX_IWDG_Initv+0x38>)
 80027e8:	2204      	movs	r2, #4
 80027ea:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80027ec:	4b09      	ldr	r3, [pc, #36]	@ (8002814 <_ZL12MX_IWDG_Initv+0x38>)
 80027ee:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80027f2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80027f4:	4807      	ldr	r0, [pc, #28]	@ (8002814 <_ZL12MX_IWDG_Initv+0x38>)
 80027f6:	f003 ff37 	bl	8006668 <HAL_IWDG_Init>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	bf14      	ite	ne
 8002800:	2301      	movne	r3, #1
 8002802:	2300      	moveq	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <_ZL12MX_IWDG_Initv+0x32>
  {
    Error_Handler();
 800280a:	f000 f99d 	bl	8002b48 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	200002b0 	.word	0x200002b0
 8002818:	40003000 	.word	0x40003000

0800281c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002820:	4b1a      	ldr	r3, [pc, #104]	@ (800288c <_ZL12MX_SPI1_Initv+0x70>)
 8002822:	4a1b      	ldr	r2, [pc, #108]	@ (8002890 <_ZL12MX_SPI1_Initv+0x74>)
 8002824:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002826:	4b19      	ldr	r3, [pc, #100]	@ (800288c <_ZL12MX_SPI1_Initv+0x70>)
 8002828:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800282c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800282e:	4b17      	ldr	r3, [pc, #92]	@ (800288c <_ZL12MX_SPI1_Initv+0x70>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002834:	4b15      	ldr	r3, [pc, #84]	@ (800288c <_ZL12MX_SPI1_Initv+0x70>)
 8002836:	2200      	movs	r2, #0
 8002838:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800283a:	4b14      	ldr	r3, [pc, #80]	@ (800288c <_ZL12MX_SPI1_Initv+0x70>)
 800283c:	2200      	movs	r2, #0
 800283e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002840:	4b12      	ldr	r3, [pc, #72]	@ (800288c <_ZL12MX_SPI1_Initv+0x70>)
 8002842:	2200      	movs	r2, #0
 8002844:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002846:	4b11      	ldr	r3, [pc, #68]	@ (800288c <_ZL12MX_SPI1_Initv+0x70>)
 8002848:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800284c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800284e:	4b0f      	ldr	r3, [pc, #60]	@ (800288c <_ZL12MX_SPI1_Initv+0x70>)
 8002850:	2200      	movs	r2, #0
 8002852:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002854:	4b0d      	ldr	r3, [pc, #52]	@ (800288c <_ZL12MX_SPI1_Initv+0x70>)
 8002856:	2200      	movs	r2, #0
 8002858:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800285a:	4b0c      	ldr	r3, [pc, #48]	@ (800288c <_ZL12MX_SPI1_Initv+0x70>)
 800285c:	2200      	movs	r2, #0
 800285e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002860:	4b0a      	ldr	r3, [pc, #40]	@ (800288c <_ZL12MX_SPI1_Initv+0x70>)
 8002862:	2200      	movs	r2, #0
 8002864:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002866:	4b09      	ldr	r3, [pc, #36]	@ (800288c <_ZL12MX_SPI1_Initv+0x70>)
 8002868:	220a      	movs	r2, #10
 800286a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800286c:	4807      	ldr	r0, [pc, #28]	@ (800288c <_ZL12MX_SPI1_Initv+0x70>)
 800286e:	f004 fd27 	bl	80072c0 <HAL_SPI_Init>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf14      	ite	ne
 8002878:	2301      	movne	r3, #1
 800287a:	2300      	moveq	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8002882:	f000 f961 	bl	8002b48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	200002bc 	.word	0x200002bc
 8002890:	40013000 	.word	0x40013000

08002894 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002898:	4b13      	ldr	r3, [pc, #76]	@ (80028e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800289a:	4a14      	ldr	r2, [pc, #80]	@ (80028ec <_ZL19MX_USART2_UART_Initv+0x58>)
 800289c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800289e:	4b12      	ldr	r3, [pc, #72]	@ (80028e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80028a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028a6:	4b10      	ldr	r3, [pc, #64]	@ (80028e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028ac:	4b0e      	ldr	r3, [pc, #56]	@ (80028e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028b2:	4b0d      	ldr	r3, [pc, #52]	@ (80028e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028b8:	4b0b      	ldr	r3, [pc, #44]	@ (80028e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028ba:	220c      	movs	r2, #12
 80028bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028be:	4b0a      	ldr	r3, [pc, #40]	@ (80028e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028c4:	4b08      	ldr	r3, [pc, #32]	@ (80028e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028ca:	4807      	ldr	r0, [pc, #28]	@ (80028e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028cc:	f004 fd81 	bl	80073d2 <HAL_UART_Init>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	bf14      	ite	ne
 80028d6:	2301      	movne	r3, #1
 80028d8:	2300      	moveq	r3, #0
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80028e0:	f000 f932 	bl	8002b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028e4:	bf00      	nop
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000314 	.word	0x20000314
 80028ec:	40004400 	.word	0x40004400

080028f0 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028f4:	4b13      	ldr	r3, [pc, #76]	@ (8002944 <_ZL19MX_USART3_UART_Initv+0x54>)
 80028f6:	4a14      	ldr	r2, [pc, #80]	@ (8002948 <_ZL19MX_USART3_UART_Initv+0x58>)
 80028f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80028fa:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <_ZL19MX_USART3_UART_Initv+0x54>)
 80028fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002900:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002902:	4b10      	ldr	r3, [pc, #64]	@ (8002944 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002908:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <_ZL19MX_USART3_UART_Initv+0x54>)
 800290a:	2200      	movs	r2, #0
 800290c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800290e:	4b0d      	ldr	r3, [pc, #52]	@ (8002944 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002910:	2200      	movs	r2, #0
 8002912:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002914:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002916:	220c      	movs	r2, #12
 8002918:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800291a:	4b0a      	ldr	r3, [pc, #40]	@ (8002944 <_ZL19MX_USART3_UART_Initv+0x54>)
 800291c:	2200      	movs	r2, #0
 800291e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002920:	4b08      	ldr	r3, [pc, #32]	@ (8002944 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002922:	2200      	movs	r2, #0
 8002924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002926:	4807      	ldr	r0, [pc, #28]	@ (8002944 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002928:	f004 fd53 	bl	80073d2 <HAL_UART_Init>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	bf14      	ite	ne
 8002932:	2301      	movne	r3, #1
 8002934:	2300      	moveq	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 800293c:	f000 f904 	bl	8002b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}
 8002944:	2000035c 	.word	0x2000035c
 8002948:	40004800 	.word	0x40004800

0800294c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08c      	sub	sp, #48	@ 0x30
 8002950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002952:	f107 031c 	add.w	r3, r7, #28
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	609a      	str	r2, [r3, #8]
 800295e:	60da      	str	r2, [r3, #12]
 8002960:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	4b72      	ldr	r3, [pc, #456]	@ (8002b30 <_ZL12MX_GPIO_Initv+0x1e4>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296a:	4a71      	ldr	r2, [pc, #452]	@ (8002b30 <_ZL12MX_GPIO_Initv+0x1e4>)
 800296c:	f043 0310 	orr.w	r3, r3, #16
 8002970:	6313      	str	r3, [r2, #48]	@ 0x30
 8002972:	4b6f      	ldr	r3, [pc, #444]	@ (8002b30 <_ZL12MX_GPIO_Initv+0x1e4>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	4b6b      	ldr	r3, [pc, #428]	@ (8002b30 <_ZL12MX_GPIO_Initv+0x1e4>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	4a6a      	ldr	r2, [pc, #424]	@ (8002b30 <_ZL12MX_GPIO_Initv+0x1e4>)
 8002988:	f043 0304 	orr.w	r3, r3, #4
 800298c:	6313      	str	r3, [r2, #48]	@ 0x30
 800298e:	4b68      	ldr	r3, [pc, #416]	@ (8002b30 <_ZL12MX_GPIO_Initv+0x1e4>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	4b64      	ldr	r3, [pc, #400]	@ (8002b30 <_ZL12MX_GPIO_Initv+0x1e4>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	4a63      	ldr	r2, [pc, #396]	@ (8002b30 <_ZL12MX_GPIO_Initv+0x1e4>)
 80029a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029aa:	4b61      	ldr	r3, [pc, #388]	@ (8002b30 <_ZL12MX_GPIO_Initv+0x1e4>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002b30 <_ZL12MX_GPIO_Initv+0x1e4>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	4a5c      	ldr	r2, [pc, #368]	@ (8002b30 <_ZL12MX_GPIO_Initv+0x1e4>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c6:	4b5a      	ldr	r3, [pc, #360]	@ (8002b30 <_ZL12MX_GPIO_Initv+0x1e4>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	4b56      	ldr	r3, [pc, #344]	@ (8002b30 <_ZL12MX_GPIO_Initv+0x1e4>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	4a55      	ldr	r2, [pc, #340]	@ (8002b30 <_ZL12MX_GPIO_Initv+0x1e4>)
 80029dc:	f043 0302 	orr.w	r3, r3, #2
 80029e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e2:	4b53      	ldr	r3, [pc, #332]	@ (8002b30 <_ZL12MX_GPIO_Initv+0x1e4>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	4b4f      	ldr	r3, [pc, #316]	@ (8002b30 <_ZL12MX_GPIO_Initv+0x1e4>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	4a4e      	ldr	r2, [pc, #312]	@ (8002b30 <_ZL12MX_GPIO_Initv+0x1e4>)
 80029f8:	f043 0308 	orr.w	r3, r3, #8
 80029fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002b30 <_ZL12MX_GPIO_Initv+0x1e4>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	607b      	str	r3, [r7, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2108      	movs	r1, #8
 8002a0e:	4849      	ldr	r0, [pc, #292]	@ (8002b34 <_ZL12MX_GPIO_Initv+0x1e8>)
 8002a10:	f000 fef8 	bl	8003804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002a14:	2201      	movs	r2, #1
 8002a16:	2101      	movs	r1, #1
 8002a18:	4847      	ldr	r0, [pc, #284]	@ (8002b38 <_ZL12MX_GPIO_Initv+0x1ec>)
 8002a1a:	f000 fef3 	bl	8003804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8002a24:	4845      	ldr	r0, [pc, #276]	@ (8002b3c <_ZL12MX_GPIO_Initv+0x1f0>)
 8002a26:	f000 feed 	bl	8003804 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002a2a:	2308      	movs	r3, #8
 8002a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a36:	2300      	movs	r3, #0
 8002a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002a3a:	f107 031c 	add.w	r3, r7, #28
 8002a3e:	4619      	mov	r1, r3
 8002a40:	483c      	ldr	r0, [pc, #240]	@ (8002b34 <_ZL12MX_GPIO_Initv+0x1e8>)
 8002a42:	f000 fd43 	bl	80034cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002a46:	2301      	movs	r3, #1
 8002a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a52:	2300      	movs	r3, #0
 8002a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002a56:	f107 031c 	add.w	r3, r7, #28
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4836      	ldr	r0, [pc, #216]	@ (8002b38 <_ZL12MX_GPIO_Initv+0x1ec>)
 8002a5e:	f000 fd35 	bl	80034cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002a62:	2308      	movs	r3, #8
 8002a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a72:	2305      	movs	r3, #5
 8002a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002a76:	f107 031c 	add.w	r3, r7, #28
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	482e      	ldr	r0, [pc, #184]	@ (8002b38 <_ZL12MX_GPIO_Initv+0x1ec>)
 8002a7e:	f000 fd25 	bl	80034cc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a82:	2301      	movs	r3, #1
 8002a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002a86:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a90:	f107 031c 	add.w	r3, r7, #28
 8002a94:	4619      	mov	r1, r3
 8002a96:	482a      	ldr	r0, [pc, #168]	@ (8002b40 <_ZL12MX_GPIO_Initv+0x1f4>)
 8002a98:	f000 fd18 	bl	80034cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002aa8:	f107 031c 	add.w	r3, r7, #28
 8002aac:	4619      	mov	r1, r3
 8002aae:	4825      	ldr	r0, [pc, #148]	@ (8002b44 <_ZL12MX_GPIO_Initv+0x1f8>)
 8002ab0:	f000 fd0c 	bl	80034cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002ab4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aba:	2302      	movs	r3, #2
 8002abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ac6:	2305      	movs	r3, #5
 8002ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002aca:	f107 031c 	add.w	r3, r7, #28
 8002ace:	4619      	mov	r1, r3
 8002ad0:	481c      	ldr	r0, [pc, #112]	@ (8002b44 <_ZL12MX_GPIO_Initv+0x1f8>)
 8002ad2:	f000 fcfb 	bl	80034cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002ad6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8002ada:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002adc:	2301      	movs	r3, #1
 8002ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ae8:	f107 031c 	add.w	r3, r7, #28
 8002aec:	4619      	mov	r1, r3
 8002aee:	4813      	ldr	r0, [pc, #76]	@ (8002b3c <_ZL12MX_GPIO_Initv+0x1f0>)
 8002af0:	f000 fcec 	bl	80034cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002af4:	2320      	movs	r3, #32
 8002af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002af8:	2300      	movs	r3, #0
 8002afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002b00:	f107 031c 	add.w	r3, r7, #28
 8002b04:	4619      	mov	r1, r3
 8002b06:	480d      	ldr	r0, [pc, #52]	@ (8002b3c <_ZL12MX_GPIO_Initv+0x1f0>)
 8002b08:	f000 fce0 	bl	80034cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b10:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002b1a:	f107 031c 	add.w	r3, r7, #28
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4804      	ldr	r0, [pc, #16]	@ (8002b34 <_ZL12MX_GPIO_Initv+0x1e8>)
 8002b22:	f000 fcd3 	bl	80034cc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002b26:	bf00      	nop
 8002b28:	3730      	adds	r7, #48	@ 0x30
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40020800 	.word	0x40020800
 8002b3c:	40020c00 	.word	0x40020c00
 8002b40:	40020000 	.word	0x40020000
 8002b44:	40020400 	.word	0x40020400

08002b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b4c:	b672      	cpsid	i
}
 8002b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b50:	bf00      	nop
 8002b52:	e7fd      	b.n	8002b50 <Error_Handler+0x8>

08002b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ba0 <HAL_MspInit+0x4c>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	4a0f      	ldr	r2, [pc, #60]	@ (8002ba0 <HAL_MspInit+0x4c>)
 8002b64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba0 <HAL_MspInit+0x4c>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b72:	607b      	str	r3, [r7, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <HAL_MspInit+0x4c>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ba0 <HAL_MspInit+0x4c>)
 8002b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b86:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <HAL_MspInit+0x4c>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b92:	2007      	movs	r0, #7
 8002b94:	f000 fc58 	bl	8003448 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40023800 	.word	0x40023800

08002ba4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08a      	sub	sp, #40	@ 0x28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bac:	f107 0314 	add.w	r3, r7, #20
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a19      	ldr	r2, [pc, #100]	@ (8002c28 <HAL_I2C_MspInit+0x84>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d12c      	bne.n	8002c20 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	4b18      	ldr	r3, [pc, #96]	@ (8002c2c <HAL_I2C_MspInit+0x88>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	4a17      	ldr	r2, [pc, #92]	@ (8002c2c <HAL_I2C_MspInit+0x88>)
 8002bd0:	f043 0302 	orr.w	r3, r3, #2
 8002bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bd6:	4b15      	ldr	r3, [pc, #84]	@ (8002c2c <HAL_I2C_MspInit+0x88>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002be2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002be8:	2312      	movs	r3, #18
 8002bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bec:	2301      	movs	r3, #1
 8002bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bf4:	2304      	movs	r3, #4
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf8:	f107 0314 	add.w	r3, r7, #20
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	480c      	ldr	r0, [pc, #48]	@ (8002c30 <HAL_I2C_MspInit+0x8c>)
 8002c00:	f000 fc64 	bl	80034cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	4b08      	ldr	r3, [pc, #32]	@ (8002c2c <HAL_I2C_MspInit+0x88>)
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	4a07      	ldr	r2, [pc, #28]	@ (8002c2c <HAL_I2C_MspInit+0x88>)
 8002c0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c12:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c14:	4b05      	ldr	r3, [pc, #20]	@ (8002c2c <HAL_I2C_MspInit+0x88>)
 8002c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002c20:	bf00      	nop
 8002c22:	3728      	adds	r7, #40	@ 0x28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40005400 	.word	0x40005400
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40020400 	.word	0x40020400

08002c34 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08e      	sub	sp, #56	@ 0x38
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c4c:	f107 0314 	add.w	r3, r7, #20
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a31      	ldr	r2, [pc, #196]	@ (8002d24 <HAL_I2S_MspInit+0xf0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d15a      	bne.n	8002d1a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002c64:	2301      	movs	r3, #1
 8002c66:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002c68:	23c0      	movs	r3, #192	@ 0xc0
 8002c6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c70:	f107 0314 	add.w	r3, r7, #20
 8002c74:	4618      	mov	r0, r3
 8002c76:	f004 f9e1 	bl	800703c <HAL_RCCEx_PeriphCLKConfig>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002c80:	f7ff ff62 	bl	8002b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	4b27      	ldr	r3, [pc, #156]	@ (8002d28 <HAL_I2S_MspInit+0xf4>)
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	4a26      	ldr	r2, [pc, #152]	@ (8002d28 <HAL_I2S_MspInit+0xf4>)
 8002c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c92:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c94:	4b24      	ldr	r3, [pc, #144]	@ (8002d28 <HAL_I2S_MspInit+0xf4>)
 8002c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	4b20      	ldr	r3, [pc, #128]	@ (8002d28 <HAL_I2S_MspInit+0xf4>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d28 <HAL_I2S_MspInit+0xf4>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d28 <HAL_I2S_MspInit+0xf4>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	4b19      	ldr	r3, [pc, #100]	@ (8002d28 <HAL_I2S_MspInit+0xf4>)
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc4:	4a18      	ldr	r2, [pc, #96]	@ (8002d28 <HAL_I2S_MspInit+0xf4>)
 8002cc6:	f043 0304 	orr.w	r3, r3, #4
 8002cca:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ccc:	4b16      	ldr	r3, [pc, #88]	@ (8002d28 <HAL_I2S_MspInit+0xf4>)
 8002cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002cd8:	2310      	movs	r3, #16
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ce8:	2306      	movs	r3, #6
 8002cea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	480e      	ldr	r0, [pc, #56]	@ (8002d2c <HAL_I2S_MspInit+0xf8>)
 8002cf4:	f000 fbea 	bl	80034cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002cf8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8002cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d06:	2300      	movs	r3, #0
 8002d08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d0a:	2306      	movs	r3, #6
 8002d0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d12:	4619      	mov	r1, r3
 8002d14:	4806      	ldr	r0, [pc, #24]	@ (8002d30 <HAL_I2S_MspInit+0xfc>)
 8002d16:	f000 fbd9 	bl	80034cc <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002d1a:	bf00      	nop
 8002d1c:	3738      	adds	r7, #56	@ 0x38
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40003c00 	.word	0x40003c00
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	40020000 	.word	0x40020000
 8002d30:	40020800 	.word	0x40020800

08002d34 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08a      	sub	sp, #40	@ 0x28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3c:	f107 0314 	add.w	r3, r7, #20
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a19      	ldr	r2, [pc, #100]	@ (8002db8 <HAL_SPI_MspInit+0x84>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d12b      	bne.n	8002dae <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	4b18      	ldr	r3, [pc, #96]	@ (8002dbc <HAL_SPI_MspInit+0x88>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5e:	4a17      	ldr	r2, [pc, #92]	@ (8002dbc <HAL_SPI_MspInit+0x88>)
 8002d60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d66:	4b15      	ldr	r3, [pc, #84]	@ (8002dbc <HAL_SPI_MspInit+0x88>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	4b11      	ldr	r3, [pc, #68]	@ (8002dbc <HAL_SPI_MspInit+0x88>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	4a10      	ldr	r2, [pc, #64]	@ (8002dbc <HAL_SPI_MspInit+0x88>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d82:	4b0e      	ldr	r3, [pc, #56]	@ (8002dbc <HAL_SPI_MspInit+0x88>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002d8e:	23e0      	movs	r3, #224	@ 0xe0
 8002d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d92:	2302      	movs	r3, #2
 8002d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d9e:	2305      	movs	r3, #5
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da2:	f107 0314 	add.w	r3, r7, #20
 8002da6:	4619      	mov	r1, r3
 8002da8:	4805      	ldr	r0, [pc, #20]	@ (8002dc0 <HAL_SPI_MspInit+0x8c>)
 8002daa:	f000 fb8f 	bl	80034cc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002dae:	bf00      	nop
 8002db0:	3728      	adds	r7, #40	@ 0x28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40013000 	.word	0x40013000
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	40020000 	.word	0x40020000

08002dc4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08c      	sub	sp, #48	@ 0x30
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dcc:	f107 031c 	add.w	r3, r7, #28
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a42      	ldr	r2, [pc, #264]	@ (8002eec <HAL_UART_MspInit+0x128>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d12c      	bne.n	8002e40 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	4b41      	ldr	r3, [pc, #260]	@ (8002ef0 <HAL_UART_MspInit+0x12c>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	4a40      	ldr	r2, [pc, #256]	@ (8002ef0 <HAL_UART_MspInit+0x12c>)
 8002df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002df6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ef0 <HAL_UART_MspInit+0x12c>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfe:	61bb      	str	r3, [r7, #24]
 8002e00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef0 <HAL_UART_MspInit+0x12c>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	4a39      	ldr	r2, [pc, #228]	@ (8002ef0 <HAL_UART_MspInit+0x12c>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e12:	4b37      	ldr	r3, [pc, #220]	@ (8002ef0 <HAL_UART_MspInit+0x12c>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = Ecran_TX_Pin|Ecran_RX_Pin;
 8002e1e:	230c      	movs	r3, #12
 8002e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e22:	2302      	movs	r3, #2
 8002e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e2e:	2307      	movs	r3, #7
 8002e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e32:	f107 031c 	add.w	r3, r7, #28
 8002e36:	4619      	mov	r1, r3
 8002e38:	482e      	ldr	r0, [pc, #184]	@ (8002ef4 <HAL_UART_MspInit+0x130>)
 8002e3a:	f000 fb47 	bl	80034cc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e3e:	e050      	b.n	8002ee2 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a2c      	ldr	r2, [pc, #176]	@ (8002ef8 <HAL_UART_MspInit+0x134>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d14b      	bne.n	8002ee2 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	4b28      	ldr	r3, [pc, #160]	@ (8002ef0 <HAL_UART_MspInit+0x12c>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	4a27      	ldr	r2, [pc, #156]	@ (8002ef0 <HAL_UART_MspInit+0x12c>)
 8002e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e5a:	4b25      	ldr	r3, [pc, #148]	@ (8002ef0 <HAL_UART_MspInit+0x12c>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	4b21      	ldr	r3, [pc, #132]	@ (8002ef0 <HAL_UART_MspInit+0x12c>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	4a20      	ldr	r2, [pc, #128]	@ (8002ef0 <HAL_UART_MspInit+0x12c>)
 8002e70:	f043 0302 	orr.w	r3, r3, #2
 8002e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e76:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef0 <HAL_UART_MspInit+0x12c>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef0 <HAL_UART_MspInit+0x12c>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	4a19      	ldr	r2, [pc, #100]	@ (8002ef0 <HAL_UART_MspInit+0x12c>)
 8002e8c:	f043 0308 	orr.w	r3, r3, #8
 8002e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e92:	4b17      	ldr	r3, [pc, #92]	@ (8002ef0 <HAL_UART_MspInit+0x12c>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Cntroller_RX_Pin;
 8002e9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eac:	2303      	movs	r3, #3
 8002eae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002eb0:	2307      	movs	r3, #7
 8002eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Cntroller_RX_GPIO_Port, &GPIO_InitStruct);
 8002eb4:	f107 031c 	add.w	r3, r7, #28
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4810      	ldr	r0, [pc, #64]	@ (8002efc <HAL_UART_MspInit+0x138>)
 8002ebc:	f000 fb06 	bl	80034cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Controller_TX_Pin;
 8002ec0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ed2:	2307      	movs	r3, #7
 8002ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Controller_TX_GPIO_Port, &GPIO_InitStruct);
 8002ed6:	f107 031c 	add.w	r3, r7, #28
 8002eda:	4619      	mov	r1, r3
 8002edc:	4808      	ldr	r0, [pc, #32]	@ (8002f00 <HAL_UART_MspInit+0x13c>)
 8002ede:	f000 faf5 	bl	80034cc <HAL_GPIO_Init>
}
 8002ee2:	bf00      	nop
 8002ee4:	3730      	adds	r7, #48	@ 0x30
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40004400 	.word	0x40004400
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40020000 	.word	0x40020000
 8002ef8:	40004800 	.word	0x40004800
 8002efc:	40020400 	.word	0x40020400
 8002f00:	40020c00 	.word	0x40020c00

08002f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f08:	bf00      	nop
 8002f0a:	e7fd      	b.n	8002f08 <NMI_Handler+0x4>

08002f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f10:	bf00      	nop
 8002f12:	e7fd      	b.n	8002f10 <HardFault_Handler+0x4>

08002f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f18:	bf00      	nop
 8002f1a:	e7fd      	b.n	8002f18 <MemManage_Handler+0x4>

08002f1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f20:	bf00      	nop
 8002f22:	e7fd      	b.n	8002f20 <BusFault_Handler+0x4>

08002f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f28:	bf00      	nop
 8002f2a:	e7fd      	b.n	8002f28 <UsageFault_Handler+0x4>

08002f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f5a:	f000 f961 	bl	8003220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002f68:	4802      	ldr	r0, [pc, #8]	@ (8002f74 <OTG_FS_IRQHandler+0x10>)
 8002f6a:	f000 ff45 	bl	8003df8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	2000078c 	.word	0x2000078c

08002f78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return 1;
 8002f7c:	2301      	movs	r3, #1
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <_kill>:

int _kill(int pid, int sig)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f92:	f009 fad1 	bl	800c538 <__errno>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2216      	movs	r2, #22
 8002f9a:	601a      	str	r2, [r3, #0]
  return -1;
 8002f9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <_exit>:

void _exit (int status)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ffe7 	bl	8002f88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fba:	bf00      	nop
 8002fbc:	e7fd      	b.n	8002fba <_exit+0x12>

08002fbe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b086      	sub	sp, #24
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	e00a      	b.n	8002fe6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fd0:	f3af 8000 	nop.w
 8002fd4:	4601      	mov	r1, r0
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	60ba      	str	r2, [r7, #8]
 8002fdc:	b2ca      	uxtb	r2, r1
 8002fde:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	dbf0      	blt.n	8002fd0 <_read+0x12>
  }

  return len;
 8002fee:	687b      	ldr	r3, [r7, #4]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	e009      	b.n	800301e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	60ba      	str	r2, [r7, #8]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	3301      	adds	r3, #1
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	429a      	cmp	r2, r3
 8003024:	dbf1      	blt.n	800300a <_write+0x12>
  }
  return len;
 8003026:	687b      	ldr	r3, [r7, #4]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <_close>:

int _close(int file)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003038:	f04f 33ff 	mov.w	r3, #4294967295
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003058:	605a      	str	r2, [r3, #4]
  return 0;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <_isatty>:

int _isatty(int file)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003070:	2301      	movs	r3, #1
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800307e:	b480      	push	{r7}
 8003080:	b085      	sub	sp, #20
 8003082:	af00      	add	r7, sp, #0
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030a0:	4a14      	ldr	r2, [pc, #80]	@ (80030f4 <_sbrk+0x5c>)
 80030a2:	4b15      	ldr	r3, [pc, #84]	@ (80030f8 <_sbrk+0x60>)
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030ac:	4b13      	ldr	r3, [pc, #76]	@ (80030fc <_sbrk+0x64>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030b4:	4b11      	ldr	r3, [pc, #68]	@ (80030fc <_sbrk+0x64>)
 80030b6:	4a12      	ldr	r2, [pc, #72]	@ (8003100 <_sbrk+0x68>)
 80030b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ba:	4b10      	ldr	r3, [pc, #64]	@ (80030fc <_sbrk+0x64>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d207      	bcs.n	80030d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030c8:	f009 fa36 	bl	800c538 <__errno>
 80030cc:	4603      	mov	r3, r0
 80030ce:	220c      	movs	r2, #12
 80030d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030d2:	f04f 33ff 	mov.w	r3, #4294967295
 80030d6:	e009      	b.n	80030ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030d8:	4b08      	ldr	r3, [pc, #32]	@ (80030fc <_sbrk+0x64>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030de:	4b07      	ldr	r3, [pc, #28]	@ (80030fc <_sbrk+0x64>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4413      	add	r3, r2
 80030e6:	4a05      	ldr	r2, [pc, #20]	@ (80030fc <_sbrk+0x64>)
 80030e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030ea:	68fb      	ldr	r3, [r7, #12]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20020000 	.word	0x20020000
 80030f8:	00000400 	.word	0x00000400
 80030fc:	200003a8 	.word	0x200003a8
 8003100:	20000cc0 	.word	0x20000cc0

08003104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003108:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <SystemInit+0x20>)
 800310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310e:	4a05      	ldr	r2, [pc, #20]	@ (8003124 <SystemInit+0x20>)
 8003110:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003114:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	e000ed00 	.word	0xe000ed00

08003128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003128:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003160 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800312c:	f7ff ffea 	bl	8003104 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003130:	480c      	ldr	r0, [pc, #48]	@ (8003164 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003132:	490d      	ldr	r1, [pc, #52]	@ (8003168 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003134:	4a0d      	ldr	r2, [pc, #52]	@ (800316c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003138:	e002      	b.n	8003140 <LoopCopyDataInit>

0800313a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800313a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800313c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800313e:	3304      	adds	r3, #4

08003140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003144:	d3f9      	bcc.n	800313a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003146:	4a0a      	ldr	r2, [pc, #40]	@ (8003170 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003148:	4c0a      	ldr	r4, [pc, #40]	@ (8003174 <LoopFillZerobss+0x22>)
  movs r3, #0
 800314a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800314c:	e001      	b.n	8003152 <LoopFillZerobss>

0800314e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800314e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003150:	3204      	adds	r2, #4

08003152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003154:	d3fb      	bcc.n	800314e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003156:	f009 f9f5 	bl	800c544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800315a:	f7ff f9ef 	bl	800253c <main>
  bx  lr    
 800315e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003160:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003168:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800316c:	0800e9fc 	.word	0x0800e9fc
  ldr r2, =_sbss
 8003170:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003174:	20000cbc 	.word	0x20000cbc

08003178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003178:	e7fe      	b.n	8003178 <ADC_IRQHandler>
	...

0800317c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003180:	4b0e      	ldr	r3, [pc, #56]	@ (80031bc <HAL_Init+0x40>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a0d      	ldr	r2, [pc, #52]	@ (80031bc <HAL_Init+0x40>)
 8003186:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800318a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800318c:	4b0b      	ldr	r3, [pc, #44]	@ (80031bc <HAL_Init+0x40>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0a      	ldr	r2, [pc, #40]	@ (80031bc <HAL_Init+0x40>)
 8003192:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003196:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003198:	4b08      	ldr	r3, [pc, #32]	@ (80031bc <HAL_Init+0x40>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a07      	ldr	r2, [pc, #28]	@ (80031bc <HAL_Init+0x40>)
 800319e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031a4:	2003      	movs	r0, #3
 80031a6:	f000 f94f 	bl	8003448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031aa:	2000      	movs	r0, #0
 80031ac:	f000 f808 	bl	80031c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031b0:	f7ff fcd0 	bl	8002b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40023c00 	.word	0x40023c00

080031c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031c8:	4b12      	ldr	r3, [pc, #72]	@ (8003214 <HAL_InitTick+0x54>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4b12      	ldr	r3, [pc, #72]	@ (8003218 <HAL_InitTick+0x58>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	4619      	mov	r1, r3
 80031d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80031da:	fbb2 f3f3 	udiv	r3, r2, r3
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 f967 	bl	80034b2 <HAL_SYSTICK_Config>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e00e      	b.n	800320c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b0f      	cmp	r3, #15
 80031f2:	d80a      	bhi.n	800320a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031f4:	2200      	movs	r2, #0
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	f04f 30ff 	mov.w	r0, #4294967295
 80031fc:	f000 f92f 	bl	800345e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003200:	4a06      	ldr	r2, [pc, #24]	@ (800321c <HAL_InitTick+0x5c>)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	e000      	b.n	800320c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20000004 	.word	0x20000004
 8003218:	2000000c 	.word	0x2000000c
 800321c:	20000008 	.word	0x20000008

08003220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003224:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <HAL_IncTick+0x20>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <HAL_IncTick+0x24>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4413      	add	r3, r2
 8003230:	4a04      	ldr	r2, [pc, #16]	@ (8003244 <HAL_IncTick+0x24>)
 8003232:	6013      	str	r3, [r2, #0]
}
 8003234:	bf00      	nop
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	2000000c 	.word	0x2000000c
 8003244:	200003ac 	.word	0x200003ac

08003248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  return uwTick;
 800324c:	4b03      	ldr	r3, [pc, #12]	@ (800325c <HAL_GetTick+0x14>)
 800324e:	681b      	ldr	r3, [r3, #0]
}
 8003250:	4618      	mov	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	200003ac 	.word	0x200003ac

08003260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003268:	f7ff ffee 	bl	8003248 <HAL_GetTick>
 800326c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003278:	d005      	beq.n	8003286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800327a:	4b0a      	ldr	r3, [pc, #40]	@ (80032a4 <HAL_Delay+0x44>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4413      	add	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003286:	bf00      	nop
 8003288:	f7ff ffde 	bl	8003248 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	429a      	cmp	r2, r3
 8003296:	d8f7      	bhi.n	8003288 <HAL_Delay+0x28>
  {
  }
}
 8003298:	bf00      	nop
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	2000000c 	.word	0x2000000c

080032a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032b8:	4b0c      	ldr	r3, [pc, #48]	@ (80032ec <__NVIC_SetPriorityGrouping+0x44>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032c4:	4013      	ands	r3, r2
 80032c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032da:	4a04      	ldr	r2, [pc, #16]	@ (80032ec <__NVIC_SetPriorityGrouping+0x44>)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	60d3      	str	r3, [r2, #12]
}
 80032e0:	bf00      	nop
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032f4:	4b04      	ldr	r3, [pc, #16]	@ (8003308 <__NVIC_GetPriorityGrouping+0x18>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	0a1b      	lsrs	r3, r3, #8
 80032fa:	f003 0307 	and.w	r3, r3, #7
}
 80032fe:	4618      	mov	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331a:	2b00      	cmp	r3, #0
 800331c:	db0b      	blt.n	8003336 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	f003 021f 	and.w	r2, r3, #31
 8003324:	4907      	ldr	r1, [pc, #28]	@ (8003344 <__NVIC_EnableIRQ+0x38>)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	2001      	movs	r0, #1
 800332e:	fa00 f202 	lsl.w	r2, r0, r2
 8003332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	e000e100 	.word	0xe000e100

08003348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	6039      	str	r1, [r7, #0]
 8003352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003358:	2b00      	cmp	r3, #0
 800335a:	db0a      	blt.n	8003372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	490c      	ldr	r1, [pc, #48]	@ (8003394 <__NVIC_SetPriority+0x4c>)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	0112      	lsls	r2, r2, #4
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	440b      	add	r3, r1
 800336c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003370:	e00a      	b.n	8003388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	b2da      	uxtb	r2, r3
 8003376:	4908      	ldr	r1, [pc, #32]	@ (8003398 <__NVIC_SetPriority+0x50>)
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	3b04      	subs	r3, #4
 8003380:	0112      	lsls	r2, r2, #4
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	440b      	add	r3, r1
 8003386:	761a      	strb	r2, [r3, #24]
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000e100 	.word	0xe000e100
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800339c:	b480      	push	{r7}
 800339e:	b089      	sub	sp, #36	@ 0x24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f1c3 0307 	rsb	r3, r3, #7
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	bf28      	it	cs
 80033ba:	2304      	movcs	r3, #4
 80033bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	3304      	adds	r3, #4
 80033c2:	2b06      	cmp	r3, #6
 80033c4:	d902      	bls.n	80033cc <NVIC_EncodePriority+0x30>
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3b03      	subs	r3, #3
 80033ca:	e000      	b.n	80033ce <NVIC_EncodePriority+0x32>
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d0:	f04f 32ff 	mov.w	r2, #4294967295
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43da      	mvns	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	401a      	ands	r2, r3
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033e4:	f04f 31ff 	mov.w	r1, #4294967295
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	fa01 f303 	lsl.w	r3, r1, r3
 80033ee:	43d9      	mvns	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f4:	4313      	orrs	r3, r2
         );
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3724      	adds	r7, #36	@ 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003414:	d301      	bcc.n	800341a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003416:	2301      	movs	r3, #1
 8003418:	e00f      	b.n	800343a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341a:	4a0a      	ldr	r2, [pc, #40]	@ (8003444 <SysTick_Config+0x40>)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003422:	210f      	movs	r1, #15
 8003424:	f04f 30ff 	mov.w	r0, #4294967295
 8003428:	f7ff ff8e 	bl	8003348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800342c:	4b05      	ldr	r3, [pc, #20]	@ (8003444 <SysTick_Config+0x40>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003432:	4b04      	ldr	r3, [pc, #16]	@ (8003444 <SysTick_Config+0x40>)
 8003434:	2207      	movs	r2, #7
 8003436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	e000e010 	.word	0xe000e010

08003448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ff29 	bl	80032a8 <__NVIC_SetPriorityGrouping>
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	4603      	mov	r3, r0
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003470:	f7ff ff3e 	bl	80032f0 <__NVIC_GetPriorityGrouping>
 8003474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	6978      	ldr	r0, [r7, #20]
 800347c:	f7ff ff8e 	bl	800339c <NVIC_EncodePriority>
 8003480:	4602      	mov	r2, r0
 8003482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003486:	4611      	mov	r1, r2
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff5d 	bl	8003348 <__NVIC_SetPriority>
}
 800348e:	bf00      	nop
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	4603      	mov	r3, r0
 800349e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff ff31 	bl	800330c <__NVIC_EnableIRQ>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ffa2 	bl	8003404 <SysTick_Config>
 80034c0:	4603      	mov	r3, r0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b089      	sub	sp, #36	@ 0x24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034de:	2300      	movs	r3, #0
 80034e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
 80034e6:	e16b      	b.n	80037c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034e8:	2201      	movs	r2, #1
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4013      	ands	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	429a      	cmp	r2, r3
 8003502:	f040 815a 	bne.w	80037ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	2b01      	cmp	r3, #1
 8003510:	d005      	beq.n	800351e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800351a:	2b02      	cmp	r3, #2
 800351c:	d130      	bne.n	8003580 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	2203      	movs	r2, #3
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43db      	mvns	r3, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4013      	ands	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4313      	orrs	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003554:	2201      	movs	r2, #1
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	091b      	lsrs	r3, r3, #4
 800356a:	f003 0201 	and.w	r2, r3, #1
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4313      	orrs	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 0303 	and.w	r3, r3, #3
 8003588:	2b03      	cmp	r3, #3
 800358a:	d017      	beq.n	80035bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	2203      	movs	r2, #3
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4013      	ands	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d123      	bne.n	8003610 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	08da      	lsrs	r2, r3, #3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3208      	adds	r2, #8
 80035d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	220f      	movs	r2, #15
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4013      	ands	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4313      	orrs	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	08da      	lsrs	r2, r3, #3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3208      	adds	r2, #8
 800360a:	69b9      	ldr	r1, [r7, #24]
 800360c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	2203      	movs	r2, #3
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4013      	ands	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 0203 	and.w	r2, r3, #3
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4313      	orrs	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80b4 	beq.w	80037ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	4b60      	ldr	r3, [pc, #384]	@ (80037d8 <HAL_GPIO_Init+0x30c>)
 8003658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365a:	4a5f      	ldr	r2, [pc, #380]	@ (80037d8 <HAL_GPIO_Init+0x30c>)
 800365c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003660:	6453      	str	r3, [r2, #68]	@ 0x44
 8003662:	4b5d      	ldr	r3, [pc, #372]	@ (80037d8 <HAL_GPIO_Init+0x30c>)
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800366e:	4a5b      	ldr	r2, [pc, #364]	@ (80037dc <HAL_GPIO_Init+0x310>)
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	089b      	lsrs	r3, r3, #2
 8003674:	3302      	adds	r3, #2
 8003676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	220f      	movs	r2, #15
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4013      	ands	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a52      	ldr	r2, [pc, #328]	@ (80037e0 <HAL_GPIO_Init+0x314>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d02b      	beq.n	80036f2 <HAL_GPIO_Init+0x226>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a51      	ldr	r2, [pc, #324]	@ (80037e4 <HAL_GPIO_Init+0x318>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d025      	beq.n	80036ee <HAL_GPIO_Init+0x222>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a50      	ldr	r2, [pc, #320]	@ (80037e8 <HAL_GPIO_Init+0x31c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d01f      	beq.n	80036ea <HAL_GPIO_Init+0x21e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a4f      	ldr	r2, [pc, #316]	@ (80037ec <HAL_GPIO_Init+0x320>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d019      	beq.n	80036e6 <HAL_GPIO_Init+0x21a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a4e      	ldr	r2, [pc, #312]	@ (80037f0 <HAL_GPIO_Init+0x324>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d013      	beq.n	80036e2 <HAL_GPIO_Init+0x216>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a4d      	ldr	r2, [pc, #308]	@ (80037f4 <HAL_GPIO_Init+0x328>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00d      	beq.n	80036de <HAL_GPIO_Init+0x212>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a4c      	ldr	r2, [pc, #304]	@ (80037f8 <HAL_GPIO_Init+0x32c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d007      	beq.n	80036da <HAL_GPIO_Init+0x20e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a4b      	ldr	r2, [pc, #300]	@ (80037fc <HAL_GPIO_Init+0x330>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d101      	bne.n	80036d6 <HAL_GPIO_Init+0x20a>
 80036d2:	2307      	movs	r3, #7
 80036d4:	e00e      	b.n	80036f4 <HAL_GPIO_Init+0x228>
 80036d6:	2308      	movs	r3, #8
 80036d8:	e00c      	b.n	80036f4 <HAL_GPIO_Init+0x228>
 80036da:	2306      	movs	r3, #6
 80036dc:	e00a      	b.n	80036f4 <HAL_GPIO_Init+0x228>
 80036de:	2305      	movs	r3, #5
 80036e0:	e008      	b.n	80036f4 <HAL_GPIO_Init+0x228>
 80036e2:	2304      	movs	r3, #4
 80036e4:	e006      	b.n	80036f4 <HAL_GPIO_Init+0x228>
 80036e6:	2303      	movs	r3, #3
 80036e8:	e004      	b.n	80036f4 <HAL_GPIO_Init+0x228>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e002      	b.n	80036f4 <HAL_GPIO_Init+0x228>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <HAL_GPIO_Init+0x228>
 80036f2:	2300      	movs	r3, #0
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	f002 0203 	and.w	r2, r2, #3
 80036fa:	0092      	lsls	r2, r2, #2
 80036fc:	4093      	lsls	r3, r2
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4313      	orrs	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003704:	4935      	ldr	r1, [pc, #212]	@ (80037dc <HAL_GPIO_Init+0x310>)
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	089b      	lsrs	r3, r3, #2
 800370a:	3302      	adds	r3, #2
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003712:	4b3b      	ldr	r3, [pc, #236]	@ (8003800 <HAL_GPIO_Init+0x334>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	43db      	mvns	r3, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4013      	ands	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003736:	4a32      	ldr	r2, [pc, #200]	@ (8003800 <HAL_GPIO_Init+0x334>)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800373c:	4b30      	ldr	r3, [pc, #192]	@ (8003800 <HAL_GPIO_Init+0x334>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	43db      	mvns	r3, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4013      	ands	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003760:	4a27      	ldr	r2, [pc, #156]	@ (8003800 <HAL_GPIO_Init+0x334>)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003766:	4b26      	ldr	r3, [pc, #152]	@ (8003800 <HAL_GPIO_Init+0x334>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800378a:	4a1d      	ldr	r2, [pc, #116]	@ (8003800 <HAL_GPIO_Init+0x334>)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003790:	4b1b      	ldr	r3, [pc, #108]	@ (8003800 <HAL_GPIO_Init+0x334>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	43db      	mvns	r3, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4013      	ands	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037b4:	4a12      	ldr	r2, [pc, #72]	@ (8003800 <HAL_GPIO_Init+0x334>)
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	3301      	adds	r3, #1
 80037be:	61fb      	str	r3, [r7, #28]
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	2b0f      	cmp	r3, #15
 80037c4:	f67f ae90 	bls.w	80034e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037c8:	bf00      	nop
 80037ca:	bf00      	nop
 80037cc:	3724      	adds	r7, #36	@ 0x24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40023800 	.word	0x40023800
 80037dc:	40013800 	.word	0x40013800
 80037e0:	40020000 	.word	0x40020000
 80037e4:	40020400 	.word	0x40020400
 80037e8:	40020800 	.word	0x40020800
 80037ec:	40020c00 	.word	0x40020c00
 80037f0:	40021000 	.word	0x40021000
 80037f4:	40021400 	.word	0x40021400
 80037f8:	40021800 	.word	0x40021800
 80037fc:	40021c00 	.word	0x40021c00
 8003800:	40013c00 	.word	0x40013c00

08003804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	807b      	strh	r3, [r7, #2]
 8003810:	4613      	mov	r3, r2
 8003812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003814:	787b      	ldrb	r3, [r7, #1]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800381a:	887a      	ldrh	r2, [r7, #2]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003820:	e003      	b.n	800382a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003822:	887b      	ldrh	r3, [r7, #2]
 8003824:	041a      	lsls	r2, r3, #16
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	619a      	str	r2, [r3, #24]
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b086      	sub	sp, #24
 800383a:	af02      	add	r7, sp, #8
 800383c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e059      	b.n	80038fc <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f007 fca4 	bl	800b1b0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2203      	movs	r2, #3
 800386c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003876:	d102      	bne.n	800387e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f004 fabd 	bl	8007e02 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	7c1a      	ldrb	r2, [r3, #16]
 8003890:	f88d 2000 	strb.w	r2, [sp]
 8003894:	3304      	adds	r3, #4
 8003896:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003898:	f004 fa3e 	bl	8007d18 <USB_CoreInit>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e026      	b.n	80038fc <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2101      	movs	r1, #1
 80038b4:	4618      	mov	r0, r3
 80038b6:	f004 fab5 	bl	8007e24 <USB_SetCurrentMode>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e017      	b.n	80038fc <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	7c1a      	ldrb	r2, [r3, #16]
 80038d4:	f88d 2000 	strb.w	r2, [sp]
 80038d8:	3304      	adds	r3, #4
 80038da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038dc:	f004 fc58 	bl	8008190 <USB_HostInit>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2202      	movs	r2, #2
 80038ea:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e004      	b.n	80038fc <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003904:	b590      	push	{r4, r7, lr}
 8003906:	b08b      	sub	sp, #44	@ 0x2c
 8003908:	af04      	add	r7, sp, #16
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	4608      	mov	r0, r1
 800390e:	4611      	mov	r1, r2
 8003910:	461a      	mov	r2, r3
 8003912:	4603      	mov	r3, r0
 8003914:	70fb      	strb	r3, [r7, #3]
 8003916:	460b      	mov	r3, r1
 8003918:	70bb      	strb	r3, [r7, #2]
 800391a:	4613      	mov	r3, r2
 800391c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800391e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003920:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <HAL_HCD_HC_Init+0x2c>
 800392c:	2302      	movs	r3, #2
 800392e:	e09d      	b.n	8003a6c <HAL_HCD_HC_Init+0x168>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	3319      	adds	r3, #25
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800394c:	78fa      	ldrb	r2, [r7, #3]
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	1a9b      	subs	r3, r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	3314      	adds	r3, #20
 800395c:	787a      	ldrb	r2, [r7, #1]
 800395e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003960:	78fa      	ldrb	r2, [r7, #3]
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	1a9b      	subs	r3, r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	3315      	adds	r3, #21
 8003970:	78fa      	ldrb	r2, [r7, #3]
 8003972:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003974:	78fa      	ldrb	r2, [r7, #3]
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	1a9b      	subs	r3, r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	3326      	adds	r3, #38	@ 0x26
 8003984:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003988:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800398a:	78fa      	ldrb	r2, [r7, #3]
 800398c:	78bb      	ldrb	r3, [r7, #2]
 800398e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003992:	b2d8      	uxtb	r0, r3
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	3316      	adds	r3, #22
 80039a2:	4602      	mov	r2, r0
 80039a4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	4619      	mov	r1, r3
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fbc8 	bl	8004140 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80039b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	da0a      	bge.n	80039ce <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	3317      	adds	r3, #23
 80039c8:	2201      	movs	r2, #1
 80039ca:	701a      	strb	r2, [r3, #0]
 80039cc:	e009      	b.n	80039e2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80039ce:	78fa      	ldrb	r2, [r7, #3]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	3317      	adds	r3, #23
 80039de:	2200      	movs	r2, #0
 80039e0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f004 fd36 	bl	8008458 <USB_GetHostSpeed>
 80039ec:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80039ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d10b      	bne.n	8003a0e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80039f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d107      	bne.n	8003a0e <HAL_HCD_HC_Init+0x10a>
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d104      	bne.n	8003a0e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2bbc      	cmp	r3, #188	@ 0xbc
 8003a08:	d901      	bls.n	8003a0e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003a0a:	23bc      	movs	r3, #188	@ 0xbc
 8003a0c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003a0e:	78fa      	ldrb	r2, [r7, #3]
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	1a9b      	subs	r3, r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	3318      	adds	r3, #24
 8003a1e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003a22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003a24:	78fa      	ldrb	r2, [r7, #3]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	b298      	uxth	r0, r3
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	1a9b      	subs	r3, r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	3328      	adds	r3, #40	@ 0x28
 8003a38:	4602      	mov	r2, r0
 8003a3a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	787c      	ldrb	r4, [r7, #1]
 8003a46:	78ba      	ldrb	r2, [r7, #2]
 8003a48:	78f9      	ldrb	r1, [r7, #3]
 8003a4a:	9302      	str	r3, [sp, #8]
 8003a4c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003a50:	9301      	str	r3, [sp, #4]
 8003a52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	4623      	mov	r3, r4
 8003a5a:	f004 fd25 	bl	80084a8 <USB_HC_Init>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd90      	pop	{r4, r7, pc}

08003a74 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <HAL_HCD_HC_Halt+0x1e>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e00f      	b.n	8003ab2 <HAL_HCD_HC_Halt+0x3e>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f005 f8b7 	bl	8008c16 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4603      	mov	r3, r0
 8003acc:	70fb      	strb	r3, [r7, #3]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	70bb      	strb	r3, [r7, #2]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	3317      	adds	r3, #23
 8003ae6:	78ba      	ldrb	r2, [r7, #2]
 8003ae8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003aea:	78fa      	ldrb	r2, [r7, #3]
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	3326      	adds	r3, #38	@ 0x26
 8003afa:	787a      	ldrb	r2, [r7, #1]
 8003afc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003afe:	7c3b      	ldrb	r3, [r7, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d114      	bne.n	8003b2e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	332a      	adds	r3, #42	@ 0x2a
 8003b14:	2203      	movs	r2, #3
 8003b16:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003b18:	78fa      	ldrb	r2, [r7, #3]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	3319      	adds	r3, #25
 8003b28:	7f3a      	ldrb	r2, [r7, #28]
 8003b2a:	701a      	strb	r2, [r3, #0]
 8003b2c:	e009      	b.n	8003b42 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	332a      	adds	r3, #42	@ 0x2a
 8003b3e:	2202      	movs	r2, #2
 8003b40:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003b42:	787b      	ldrb	r3, [r7, #1]
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	f200 8102 	bhi.w	8003d4e <HAL_HCD_HC_SubmitRequest+0x292>
 8003b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b50 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003b61 	.word	0x08003b61
 8003b54:	08003d39 	.word	0x08003d39
 8003b58:	08003c25 	.word	0x08003c25
 8003b5c:	08003caf 	.word	0x08003caf
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003b60:	7c3b      	ldrb	r3, [r7, #16]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	f040 80f5 	bne.w	8003d52 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003b68:	78bb      	ldrb	r3, [r7, #2]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d12d      	bne.n	8003bca <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003b6e:	8b3b      	ldrh	r3, [r7, #24]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d109      	bne.n	8003b88 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003b74:	78fa      	ldrb	r2, [r7, #3]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	333d      	adds	r3, #61	@ 0x3d
 8003b84:	2201      	movs	r2, #1
 8003b86:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	333d      	adds	r3, #61	@ 0x3d
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10a      	bne.n	8003bb4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b9e:	78fa      	ldrb	r2, [r7, #3]
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	332a      	adds	r3, #42	@ 0x2a
 8003bae:	2200      	movs	r2, #0
 8003bb0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003bb2:	e0ce      	b.n	8003d52 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bb4:	78fa      	ldrb	r2, [r7, #3]
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	332a      	adds	r3, #42	@ 0x2a
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	701a      	strb	r2, [r3, #0]
      break;
 8003bc8:	e0c3      	b.n	8003d52 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003bca:	78fa      	ldrb	r2, [r7, #3]
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	440b      	add	r3, r1
 8003bd8:	331a      	adds	r3, #26
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	f040 80b8 	bne.w	8003d52 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003be2:	78fa      	ldrb	r2, [r7, #3]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	333c      	adds	r3, #60	@ 0x3c
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10a      	bne.n	8003c0e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	332a      	adds	r3, #42	@ 0x2a
 8003c08:	2200      	movs	r2, #0
 8003c0a:	701a      	strb	r2, [r3, #0]
      break;
 8003c0c:	e0a1      	b.n	8003d52 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c0e:	78fa      	ldrb	r2, [r7, #3]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	1a9b      	subs	r3, r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	332a      	adds	r3, #42	@ 0x2a
 8003c1e:	2202      	movs	r2, #2
 8003c20:	701a      	strb	r2, [r3, #0]
      break;
 8003c22:	e096      	b.n	8003d52 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003c24:	78bb      	ldrb	r3, [r7, #2]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d120      	bne.n	8003c6c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003c2a:	78fa      	ldrb	r2, [r7, #3]
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	1a9b      	subs	r3, r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	333d      	adds	r3, #61	@ 0x3d
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10a      	bne.n	8003c56 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	332a      	adds	r3, #42	@ 0x2a
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003c54:	e07e      	b.n	8003d54 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c56:	78fa      	ldrb	r2, [r7, #3]
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	332a      	adds	r3, #42	@ 0x2a
 8003c66:	2202      	movs	r2, #2
 8003c68:	701a      	strb	r2, [r3, #0]
      break;
 8003c6a:	e073      	b.n	8003d54 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003c6c:	78fa      	ldrb	r2, [r7, #3]
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	333c      	adds	r3, #60	@ 0x3c
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10a      	bne.n	8003c98 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c82:	78fa      	ldrb	r2, [r7, #3]
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	4613      	mov	r3, r2
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	1a9b      	subs	r3, r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	440b      	add	r3, r1
 8003c90:	332a      	adds	r3, #42	@ 0x2a
 8003c92:	2200      	movs	r2, #0
 8003c94:	701a      	strb	r2, [r3, #0]
      break;
 8003c96:	e05d      	b.n	8003d54 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c98:	78fa      	ldrb	r2, [r7, #3]
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	1a9b      	subs	r3, r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	332a      	adds	r3, #42	@ 0x2a
 8003ca8:	2202      	movs	r2, #2
 8003caa:	701a      	strb	r2, [r3, #0]
      break;
 8003cac:	e052      	b.n	8003d54 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003cae:	78bb      	ldrb	r3, [r7, #2]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d120      	bne.n	8003cf6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	333d      	adds	r3, #61	@ 0x3d
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10a      	bne.n	8003ce0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cca:	78fa      	ldrb	r2, [r7, #3]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	332a      	adds	r3, #42	@ 0x2a
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003cde:	e039      	b.n	8003d54 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	332a      	adds	r3, #42	@ 0x2a
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	701a      	strb	r2, [r3, #0]
      break;
 8003cf4:	e02e      	b.n	8003d54 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003cf6:	78fa      	ldrb	r2, [r7, #3]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	1a9b      	subs	r3, r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	333c      	adds	r3, #60	@ 0x3c
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10a      	bne.n	8003d22 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d0c:	78fa      	ldrb	r2, [r7, #3]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	332a      	adds	r3, #42	@ 0x2a
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	701a      	strb	r2, [r3, #0]
      break;
 8003d20:	e018      	b.n	8003d54 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d22:	78fa      	ldrb	r2, [r7, #3]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	1a9b      	subs	r3, r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	332a      	adds	r3, #42	@ 0x2a
 8003d32:	2202      	movs	r2, #2
 8003d34:	701a      	strb	r2, [r3, #0]
      break;
 8003d36:	e00d      	b.n	8003d54 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d38:	78fa      	ldrb	r2, [r7, #3]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	332a      	adds	r3, #42	@ 0x2a
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]
      break;
 8003d4c:	e002      	b.n	8003d54 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003d4e:	bf00      	nop
 8003d50:	e000      	b.n	8003d54 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003d52:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003d54:	78fa      	ldrb	r2, [r7, #3]
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	1a9b      	subs	r3, r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	332c      	adds	r3, #44	@ 0x2c
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	8b39      	ldrh	r1, [r7, #24]
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4403      	add	r3, r0
 8003d78:	3334      	adds	r3, #52	@ 0x34
 8003d7a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003d7c:	78fa      	ldrb	r2, [r7, #3]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	334c      	adds	r3, #76	@ 0x4c
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003d90:	78fa      	ldrb	r2, [r7, #3]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	3338      	adds	r3, #56	@ 0x38
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003da4:	78fa      	ldrb	r2, [r7, #3]
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	3315      	adds	r3, #21
 8003db4:	78fa      	ldrb	r2, [r7, #3]
 8003db6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003db8:	78fa      	ldrb	r2, [r7, #3]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	334d      	adds	r3, #77	@ 0x4d
 8003dc8:	2200      	movs	r2, #0
 8003dca:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	78fa      	ldrb	r2, [r7, #3]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	3310      	adds	r3, #16
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	4413      	add	r3, r2
 8003de0:	1d19      	adds	r1, r3, #4
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	799b      	ldrb	r3, [r3, #6]
 8003de6:	461a      	mov	r2, r3
 8003de8:	f004 fc8a 	bl	8008700 <USB_HC_StartXfer>
 8003dec:	4603      	mov	r3, r0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop

08003df8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f004 f97e 	bl	8008110 <USB_GetMode>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	f040 80fb 	bne.w	8004012 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f004 f941 	bl	80080a8 <USB_ReadInterrupts>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 80f1 	beq.w	8004010 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f004 f938 	bl	80080a8 <USB_ReadInterrupts>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e42:	d104      	bne.n	8003e4e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003e4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f004 f928 	bl	80080a8 <USB_ReadInterrupts>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e62:	d104      	bne.n	8003e6e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003e6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f004 f918 	bl	80080a8 <USB_ReadInterrupts>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e82:	d104      	bne.n	8003e8e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003e8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f004 f908 	bl	80080a8 <USB_ReadInterrupts>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d103      	bne.n	8003eaa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f004 f8fa 	bl	80080a8 <USB_ReadInterrupts>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003eba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ebe:	d120      	bne.n	8003f02 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003ec8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d113      	bne.n	8003f02 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003eda:	2110      	movs	r1, #16
 8003edc:	6938      	ldr	r0, [r7, #16]
 8003ede:	f003 ffed 	bl	8007ebc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003ee2:	6938      	ldr	r0, [r7, #16]
 8003ee4:	f004 f81c 	bl	8007f20 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	7a5b      	ldrb	r3, [r3, #9]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d105      	bne.n	8003efc <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f004 fa0e 	bl	8008318 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f007 f9d5 	bl	800b2ac <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f004 f8ce 	bl	80080a8 <USB_ReadInterrupts>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f16:	d102      	bne.n	8003f1e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f001 fd4d 	bl	80059b8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f004 f8c0 	bl	80080a8 <USB_ReadInterrupts>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d106      	bne.n	8003f40 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f007 f99e 	bl	800b274 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f004 f8af 	bl	80080a8 <USB_ReadInterrupts>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f54:	d139      	bne.n	8003fca <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f004 fe4a 	bl	8008bf4 <USB_HC_ReadInterrupt>
 8003f60:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f62:	2300      	movs	r3, #0
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	e025      	b.n	8003fb4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d018      	beq.n	8003fae <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f92:	d106      	bne.n	8003fa2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	4619      	mov	r1, r3
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f905 	bl	80041aa <HCD_HC_IN_IRQHandler>
 8003fa0:	e005      	b.n	8003fae <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 ff67 	bl	8004e7c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	795b      	ldrb	r3, [r3, #5]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d3d3      	bcc.n	8003f68 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f004 f86a 	bl	80080a8 <USB_ReadInterrupts>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	2b10      	cmp	r3, #16
 8003fdc:	d101      	bne.n	8003fe2 <HAL_HCD_IRQHandler+0x1ea>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <HAL_HCD_IRQHandler+0x1ec>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d014      	beq.n	8004012 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0210 	bic.w	r2, r2, #16
 8003ff6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f001 fbfe 	bl	80057fa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699a      	ldr	r2, [r3, #24]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0210 	orr.w	r2, r2, #16
 800400c:	619a      	str	r2, [r3, #24]
 800400e:	e000      	b.n	8004012 <HAL_HCD_IRQHandler+0x21a>
      return;
 8004010:	bf00      	nop
    }
  }
}
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_HCD_Start+0x16>
 800402a:	2302      	movs	r3, #2
 800402c:	e013      	b.n	8004056 <HAL_HCD_Start+0x3e>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2101      	movs	r1, #1
 800403c:	4618      	mov	r0, r3
 800403e:	f004 f9d2 	bl	80083e6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f003 feca 	bl	8007de0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b082      	sub	sp, #8
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_HCD_Stop+0x16>
 8004070:	2302      	movs	r3, #2
 8004072:	e00d      	b.n	8004090 <HAL_HCD_Stop+0x32>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f004 ff25 	bl	8008ed0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f004 f974 	bl	8008392 <USB_ResetPort>
 80040aa:	4603      	mov	r3, r0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80040c0:	78fa      	ldrb	r2, [r7, #3]
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	4613      	mov	r3, r2
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	1a9b      	subs	r3, r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	334c      	adds	r3, #76	@ 0x4c
 80040d0:	781b      	ldrb	r3, [r3, #0]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	460b      	mov	r3, r1
 80040e8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80040ea:	78fa      	ldrb	r2, [r7, #3]
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	3338      	adds	r3, #56	@ 0x38
 80040fa:	681b      	ldr	r3, [r3, #0]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f004 f9b6 	bl	8008486 <USB_GetCurrentFrame>
 800411a:	4603      	mov	r3, r0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f004 f991 	bl	8008458 <USB_GetHostSpeed>
 8004136:	4603      	mov	r3, r0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800414c:	78fa      	ldrb	r2, [r7, #3]
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	4613      	mov	r3, r2
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	1a9b      	subs	r3, r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	331a      	adds	r3, #26
 800415c:	2200      	movs	r2, #0
 800415e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004160:	78fa      	ldrb	r2, [r7, #3]
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	1a9b      	subs	r3, r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	331b      	adds	r3, #27
 8004170:	2200      	movs	r2, #0
 8004172:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004174:	78fa      	ldrb	r2, [r7, #3]
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	4613      	mov	r3, r2
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	1a9b      	subs	r3, r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	3325      	adds	r3, #37	@ 0x25
 8004184:	2200      	movs	r2, #0
 8004186:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	3324      	adds	r3, #36	@ 0x24
 8004198:	2200      	movs	r2, #0
 800419a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b086      	sub	sp, #24
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	460b      	mov	r3, r1
 80041b4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	78fa      	ldrb	r2, [r7, #3]
 80041c6:	4611      	mov	r1, r2
 80041c8:	4618      	mov	r0, r3
 80041ca:	f003 ff80 	bl	80080ce <USB_ReadChInterrupts>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d11a      	bne.n	800420e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041e4:	461a      	mov	r2, r3
 80041e6:	2304      	movs	r3, #4
 80041e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80041ea:	78fa      	ldrb	r2, [r7, #3]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	334d      	adds	r3, #77	@ 0x4d
 80041fa:	2207      	movs	r2, #7
 80041fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	78fa      	ldrb	r2, [r7, #3]
 8004204:	4611      	mov	r1, r2
 8004206:	4618      	mov	r0, r3
 8004208:	f004 fd05 	bl	8008c16 <USB_HC_Halt>
 800420c:	e09e      	b.n	800434c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	78fa      	ldrb	r2, [r7, #3]
 8004214:	4611      	mov	r1, r2
 8004216:	4618      	mov	r0, r3
 8004218:	f003 ff59 	bl	80080ce <USB_ReadChInterrupts>
 800421c:	4603      	mov	r3, r0
 800421e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004226:	d11b      	bne.n	8004260 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004228:	78fb      	ldrb	r3, [r7, #3]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	4413      	add	r3, r2
 8004230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004234:	461a      	mov	r2, r3
 8004236:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800423a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800423c:	78fa      	ldrb	r2, [r7, #3]
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	334d      	adds	r3, #77	@ 0x4d
 800424c:	2208      	movs	r2, #8
 800424e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	78fa      	ldrb	r2, [r7, #3]
 8004256:	4611      	mov	r1, r2
 8004258:	4618      	mov	r0, r3
 800425a:	f004 fcdc 	bl	8008c16 <USB_HC_Halt>
 800425e:	e075      	b.n	800434c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	78fa      	ldrb	r2, [r7, #3]
 8004266:	4611      	mov	r1, r2
 8004268:	4618      	mov	r0, r3
 800426a:	f003 ff30 	bl	80080ce <USB_ReadChInterrupts>
 800426e:	4603      	mov	r3, r0
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b08      	cmp	r3, #8
 8004276:	d11a      	bne.n	80042ae <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	4413      	add	r3, r2
 8004280:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004284:	461a      	mov	r2, r3
 8004286:	2308      	movs	r3, #8
 8004288:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800428a:	78fa      	ldrb	r2, [r7, #3]
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	4613      	mov	r3, r2
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	1a9b      	subs	r3, r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	334d      	adds	r3, #77	@ 0x4d
 800429a:	2206      	movs	r2, #6
 800429c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	78fa      	ldrb	r2, [r7, #3]
 80042a4:	4611      	mov	r1, r2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f004 fcb5 	bl	8008c16 <USB_HC_Halt>
 80042ac:	e04e      	b.n	800434c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	78fa      	ldrb	r2, [r7, #3]
 80042b4:	4611      	mov	r1, r2
 80042b6:	4618      	mov	r0, r3
 80042b8:	f003 ff09 	bl	80080ce <USB_ReadChInterrupts>
 80042bc:	4603      	mov	r3, r0
 80042be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042c6:	d11b      	bne.n	8004300 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80042c8:	78fb      	ldrb	r3, [r7, #3]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042d4:	461a      	mov	r2, r3
 80042d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80042dc:	78fa      	ldrb	r2, [r7, #3]
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	4613      	mov	r3, r2
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	440b      	add	r3, r1
 80042ea:	334d      	adds	r3, #77	@ 0x4d
 80042ec:	2209      	movs	r2, #9
 80042ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	78fa      	ldrb	r2, [r7, #3]
 80042f6:	4611      	mov	r1, r2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f004 fc8c 	bl	8008c16 <USB_HC_Halt>
 80042fe:	e025      	b.n	800434c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	78fa      	ldrb	r2, [r7, #3]
 8004306:	4611      	mov	r1, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f003 fee0 	bl	80080ce <USB_ReadChInterrupts>
 800430e:	4603      	mov	r3, r0
 8004310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004314:	2b80      	cmp	r3, #128	@ 0x80
 8004316:	d119      	bne.n	800434c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4413      	add	r3, r2
 8004320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004324:	461a      	mov	r2, r3
 8004326:	2380      	movs	r3, #128	@ 0x80
 8004328:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800432a:	78fa      	ldrb	r2, [r7, #3]
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	334d      	adds	r3, #77	@ 0x4d
 800433a:	2207      	movs	r2, #7
 800433c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	78fa      	ldrb	r2, [r7, #3]
 8004344:	4611      	mov	r1, r2
 8004346:	4618      	mov	r0, r3
 8004348:	f004 fc65 	bl	8008c16 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	78fa      	ldrb	r2, [r7, #3]
 8004352:	4611      	mov	r1, r2
 8004354:	4618      	mov	r0, r3
 8004356:	f003 feba 	bl	80080ce <USB_ReadChInterrupts>
 800435a:	4603      	mov	r3, r0
 800435c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004364:	d112      	bne.n	800438c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	78fa      	ldrb	r2, [r7, #3]
 800436c:	4611      	mov	r1, r2
 800436e:	4618      	mov	r0, r3
 8004370:	f004 fc51 	bl	8008c16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	4413      	add	r3, r2
 800437c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004380:	461a      	mov	r2, r3
 8004382:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004386:	6093      	str	r3, [r2, #8]
 8004388:	f000 bd75 	b.w	8004e76 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	4611      	mov	r1, r2
 8004394:	4618      	mov	r0, r3
 8004396:	f003 fe9a 	bl	80080ce <USB_ReadChInterrupts>
 800439a:	4603      	mov	r3, r0
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	f040 8128 	bne.w	80045f6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80043a6:	78fb      	ldrb	r3, [r7, #3]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043b2:	461a      	mov	r2, r3
 80043b4:	2320      	movs	r3, #32
 80043b6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80043b8:	78fa      	ldrb	r2, [r7, #3]
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	4613      	mov	r3, r2
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	331b      	adds	r3, #27
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d119      	bne.n	8004402 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80043ce:	78fa      	ldrb	r2, [r7, #3]
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	4613      	mov	r3, r2
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	1a9b      	subs	r3, r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	331b      	adds	r3, #27
 80043de:	2200      	movs	r2, #0
 80043e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80043e2:	78fb      	ldrb	r3, [r7, #3]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	78fa      	ldrb	r2, [r7, #3]
 80043f2:	0151      	lsls	r1, r2, #5
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	440a      	add	r2, r1
 80043f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004400:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	799b      	ldrb	r3, [r3, #6]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d01b      	beq.n	8004442 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800440a:	78fa      	ldrb	r2, [r7, #3]
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	4613      	mov	r3, r2
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	1a9b      	subs	r3, r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	440b      	add	r3, r1
 8004418:	3330      	adds	r3, #48	@ 0x30
 800441a:	6819      	ldr	r1, [r3, #0]
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4413      	add	r3, r2
 8004424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800442e:	78fa      	ldrb	r2, [r7, #3]
 8004430:	1ac9      	subs	r1, r1, r3
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	4613      	mov	r3, r2
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4403      	add	r3, r0
 800443e:	3338      	adds	r3, #56	@ 0x38
 8004440:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	334d      	adds	r3, #77	@ 0x4d
 8004452:	2201      	movs	r2, #1
 8004454:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004456:	78fa      	ldrb	r2, [r7, #3]
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	1a9b      	subs	r3, r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	3344      	adds	r3, #68	@ 0x44
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	4413      	add	r3, r2
 8004472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004476:	461a      	mov	r2, r3
 8004478:	2301      	movs	r3, #1
 800447a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800447c:	78fa      	ldrb	r2, [r7, #3]
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	4613      	mov	r3, r2
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	3326      	adds	r3, #38	@ 0x26
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004492:	78fa      	ldrb	r2, [r7, #3]
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	440b      	add	r3, r1
 80044a0:	3326      	adds	r3, #38	@ 0x26
 80044a2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d110      	bne.n	80044ca <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	78fa      	ldrb	r2, [r7, #3]
 80044ae:	4611      	mov	r1, r2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f004 fbb0 	bl	8008c16 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80044b6:	78fb      	ldrb	r3, [r7, #3]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044c2:	461a      	mov	r2, r3
 80044c4:	2310      	movs	r3, #16
 80044c6:	6093      	str	r3, [r2, #8]
 80044c8:	e03d      	b.n	8004546 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80044ca:	78fa      	ldrb	r2, [r7, #3]
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	3326      	adds	r3, #38	@ 0x26
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d00a      	beq.n	80044f6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80044e0:	78fa      	ldrb	r2, [r7, #3]
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	4613      	mov	r3, r2
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	3326      	adds	r3, #38	@ 0x26
 80044f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d127      	bne.n	8004546 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80044f6:	78fb      	ldrb	r3, [r7, #3]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	0151      	lsls	r1, r2, #5
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	440a      	add	r2, r1
 800450c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004510:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004514:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004516:	78fa      	ldrb	r2, [r7, #3]
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	334c      	adds	r3, #76	@ 0x4c
 8004526:	2201      	movs	r2, #1
 8004528:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800452a:	78fa      	ldrb	r2, [r7, #3]
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	1a9b      	subs	r3, r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	334c      	adds	r3, #76	@ 0x4c
 800453a:	781a      	ldrb	r2, [r3, #0]
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	4619      	mov	r1, r3
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f006 fec1 	bl	800b2c8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	799b      	ldrb	r3, [r3, #6]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d13b      	bne.n	80045c6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800454e:	78fa      	ldrb	r2, [r7, #3]
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	3338      	adds	r3, #56	@ 0x38
 800455e:	6819      	ldr	r1, [r3, #0]
 8004560:	78fa      	ldrb	r2, [r7, #3]
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4403      	add	r3, r0
 800456e:	3328      	adds	r3, #40	@ 0x28
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	440b      	add	r3, r1
 8004574:	1e59      	subs	r1, r3, #1
 8004576:	78fa      	ldrb	r2, [r7, #3]
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	1a9b      	subs	r3, r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4403      	add	r3, r0
 8004584:	3328      	adds	r3, #40	@ 0x28
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	fbb1 f3f3 	udiv	r3, r1, r3
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8470 	beq.w	8004e76 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	333c      	adds	r3, #60	@ 0x3c
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	78fa      	ldrb	r2, [r7, #3]
 80045aa:	f083 0301 	eor.w	r3, r3, #1
 80045ae:	b2d8      	uxtb	r0, r3
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	1a9b      	subs	r3, r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	440b      	add	r3, r1
 80045bc:	333c      	adds	r3, #60	@ 0x3c
 80045be:	4602      	mov	r2, r0
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	f000 bc58 	b.w	8004e76 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80045c6:	78fa      	ldrb	r2, [r7, #3]
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	4613      	mov	r3, r2
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	333c      	adds	r3, #60	@ 0x3c
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	78fa      	ldrb	r2, [r7, #3]
 80045da:	f083 0301 	eor.w	r3, r3, #1
 80045de:	b2d8      	uxtb	r0, r3
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	333c      	adds	r3, #60	@ 0x3c
 80045ee:	4602      	mov	r2, r0
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	f000 bc40 	b.w	8004e76 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	4611      	mov	r1, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f003 fd65 	bl	80080ce <USB_ReadChInterrupts>
 8004604:	4603      	mov	r3, r0
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b20      	cmp	r3, #32
 800460c:	d131      	bne.n	8004672 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	4413      	add	r3, r2
 8004616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800461a:	461a      	mov	r2, r3
 800461c:	2320      	movs	r3, #32
 800461e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004620:	78fa      	ldrb	r2, [r7, #3]
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	4613      	mov	r3, r2
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	1a9b      	subs	r3, r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	331a      	adds	r3, #26
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b01      	cmp	r3, #1
 8004634:	f040 841f 	bne.w	8004e76 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004638:	78fa      	ldrb	r2, [r7, #3]
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	331b      	adds	r3, #27
 8004648:	2201      	movs	r2, #1
 800464a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800464c:	78fa      	ldrb	r2, [r7, #3]
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	1a9b      	subs	r3, r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	334d      	adds	r3, #77	@ 0x4d
 800465c:	2203      	movs	r2, #3
 800465e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	78fa      	ldrb	r2, [r7, #3]
 8004666:	4611      	mov	r1, r2
 8004668:	4618      	mov	r0, r3
 800466a:	f004 fad4 	bl	8008c16 <USB_HC_Halt>
 800466e:	f000 bc02 	b.w	8004e76 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	78fa      	ldrb	r2, [r7, #3]
 8004678:	4611      	mov	r1, r2
 800467a:	4618      	mov	r0, r3
 800467c:	f003 fd27 	bl	80080ce <USB_ReadChInterrupts>
 8004680:	4603      	mov	r3, r0
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b02      	cmp	r3, #2
 8004688:	f040 8305 	bne.w	8004c96 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800468c:	78fb      	ldrb	r3, [r7, #3]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	4413      	add	r3, r2
 8004694:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004698:	461a      	mov	r2, r3
 800469a:	2302      	movs	r3, #2
 800469c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800469e:	78fa      	ldrb	r2, [r7, #3]
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	1a9b      	subs	r3, r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	334d      	adds	r3, #77	@ 0x4d
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d114      	bne.n	80046de <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046b4:	78fa      	ldrb	r2, [r7, #3]
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	4613      	mov	r3, r2
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	1a9b      	subs	r3, r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	334d      	adds	r3, #77	@ 0x4d
 80046c4:	2202      	movs	r2, #2
 80046c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80046c8:	78fa      	ldrb	r2, [r7, #3]
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	334c      	adds	r3, #76	@ 0x4c
 80046d8:	2201      	movs	r2, #1
 80046da:	701a      	strb	r2, [r3, #0]
 80046dc:	e2cc      	b.n	8004c78 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80046de:	78fa      	ldrb	r2, [r7, #3]
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	4613      	mov	r3, r2
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	1a9b      	subs	r3, r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	334d      	adds	r3, #77	@ 0x4d
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b06      	cmp	r3, #6
 80046f2:	d114      	bne.n	800471e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046f4:	78fa      	ldrb	r2, [r7, #3]
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	334d      	adds	r3, #77	@ 0x4d
 8004704:	2202      	movs	r2, #2
 8004706:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004708:	78fa      	ldrb	r2, [r7, #3]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	334c      	adds	r3, #76	@ 0x4c
 8004718:	2205      	movs	r2, #5
 800471a:	701a      	strb	r2, [r3, #0]
 800471c:	e2ac      	b.n	8004c78 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800471e:	78fa      	ldrb	r2, [r7, #3]
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	1a9b      	subs	r3, r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	334d      	adds	r3, #77	@ 0x4d
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b07      	cmp	r3, #7
 8004732:	d00b      	beq.n	800474c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004734:	78fa      	ldrb	r2, [r7, #3]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	1a9b      	subs	r3, r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	334d      	adds	r3, #77	@ 0x4d
 8004744:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004746:	2b09      	cmp	r3, #9
 8004748:	f040 80a6 	bne.w	8004898 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800474c:	78fa      	ldrb	r2, [r7, #3]
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	1a9b      	subs	r3, r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	334d      	adds	r3, #77	@ 0x4d
 800475c:	2202      	movs	r2, #2
 800475e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004760:	78fa      	ldrb	r2, [r7, #3]
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	4613      	mov	r3, r2
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	1a9b      	subs	r3, r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	3344      	adds	r3, #68	@ 0x44
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	1c59      	adds	r1, r3, #1
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	1a9b      	subs	r3, r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4403      	add	r3, r0
 8004780:	3344      	adds	r3, #68	@ 0x44
 8004782:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004784:	78fa      	ldrb	r2, [r7, #3]
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	4613      	mov	r3, r2
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	3344      	adds	r3, #68	@ 0x44
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d943      	bls.n	8004822 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800479a:	78fa      	ldrb	r2, [r7, #3]
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	1a9b      	subs	r3, r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	3344      	adds	r3, #68	@ 0x44
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80047ae:	78fa      	ldrb	r2, [r7, #3]
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	440b      	add	r3, r1
 80047bc:	331a      	adds	r3, #26
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d123      	bne.n	800480c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80047c4:	78fa      	ldrb	r2, [r7, #3]
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	4613      	mov	r3, r2
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	1a9b      	subs	r3, r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	331b      	adds	r3, #27
 80047d4:	2200      	movs	r2, #0
 80047d6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80047d8:	78fa      	ldrb	r2, [r7, #3]
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	331c      	adds	r3, #28
 80047e8:	2200      	movs	r2, #0
 80047ea:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80047ec:	78fb      	ldrb	r3, [r7, #3]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	78fa      	ldrb	r2, [r7, #3]
 80047fc:	0151      	lsls	r1, r2, #5
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	440a      	add	r2, r1
 8004802:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800480a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	334c      	adds	r3, #76	@ 0x4c
 800481c:	2204      	movs	r2, #4
 800481e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004820:	e229      	b.n	8004c76 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004822:	78fa      	ldrb	r2, [r7, #3]
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	1a9b      	subs	r3, r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	334c      	adds	r3, #76	@ 0x4c
 8004832:	2202      	movs	r2, #2
 8004834:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	1a9b      	subs	r3, r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	440b      	add	r3, r1
 8004844:	3326      	adds	r3, #38	@ 0x26
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00b      	beq.n	8004864 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800484c:	78fa      	ldrb	r2, [r7, #3]
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	3326      	adds	r3, #38	@ 0x26
 800485c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800485e:	2b02      	cmp	r3, #2
 8004860:	f040 8209 	bne.w	8004c76 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	4413      	add	r3, r2
 800486c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800487a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004882:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4413      	add	r3, r2
 800488c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004890:	461a      	mov	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004896:	e1ee      	b.n	8004c76 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004898:	78fa      	ldrb	r2, [r7, #3]
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	4613      	mov	r3, r2
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	1a9b      	subs	r3, r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	334d      	adds	r3, #77	@ 0x4d
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	2b05      	cmp	r3, #5
 80048ac:	f040 80c8 	bne.w	8004a40 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048b0:	78fa      	ldrb	r2, [r7, #3]
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	4613      	mov	r3, r2
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	440b      	add	r3, r1
 80048be:	334d      	adds	r3, #77	@ 0x4d
 80048c0:	2202      	movs	r2, #2
 80048c2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80048c4:	78fa      	ldrb	r2, [r7, #3]
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	4613      	mov	r3, r2
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	1a9b      	subs	r3, r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	331b      	adds	r3, #27
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	f040 81ce 	bne.w	8004c78 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80048dc:	78fa      	ldrb	r2, [r7, #3]
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	4613      	mov	r3, r2
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	3326      	adds	r3, #38	@ 0x26
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d16b      	bne.n	80049ca <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80048f2:	78fa      	ldrb	r2, [r7, #3]
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	4613      	mov	r3, r2
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	3348      	adds	r3, #72	@ 0x48
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	1c59      	adds	r1, r3, #1
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	4613      	mov	r3, r2
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	1a9b      	subs	r3, r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4403      	add	r3, r0
 8004912:	3348      	adds	r3, #72	@ 0x48
 8004914:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004916:	78fa      	ldrb	r2, [r7, #3]
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	4613      	mov	r3, r2
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	440b      	add	r3, r1
 8004924:	3348      	adds	r3, #72	@ 0x48
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b02      	cmp	r3, #2
 800492a:	d943      	bls.n	80049b4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800492c:	78fa      	ldrb	r2, [r7, #3]
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	4613      	mov	r3, r2
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	1a9b      	subs	r3, r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	3348      	adds	r3, #72	@ 0x48
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004940:	78fa      	ldrb	r2, [r7, #3]
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	4613      	mov	r3, r2
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	1a9b      	subs	r3, r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	331b      	adds	r3, #27
 8004950:	2200      	movs	r2, #0
 8004952:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004954:	78fa      	ldrb	r2, [r7, #3]
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	4613      	mov	r3, r2
 800495a:	011b      	lsls	r3, r3, #4
 800495c:	1a9b      	subs	r3, r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	440b      	add	r3, r1
 8004962:	3344      	adds	r3, #68	@ 0x44
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d809      	bhi.n	800497e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800496a:	78fa      	ldrb	r2, [r7, #3]
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	4613      	mov	r3, r2
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	1a9b      	subs	r3, r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	440b      	add	r3, r1
 8004978:	331c      	adds	r3, #28
 800497a:	2201      	movs	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800497e:	78fb      	ldrb	r3, [r7, #3]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	4413      	add	r3, r2
 8004986:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	78fa      	ldrb	r2, [r7, #3]
 800498e:	0151      	lsls	r1, r2, #5
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	440a      	add	r2, r1
 8004994:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004998:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800499c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800499e:	78fa      	ldrb	r2, [r7, #3]
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	4613      	mov	r3, r2
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	1a9b      	subs	r3, r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	440b      	add	r3, r1
 80049ac:	334c      	adds	r3, #76	@ 0x4c
 80049ae:	2204      	movs	r2, #4
 80049b0:	701a      	strb	r2, [r3, #0]
 80049b2:	e014      	b.n	80049de <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049b4:	78fa      	ldrb	r2, [r7, #3]
 80049b6:	6879      	ldr	r1, [r7, #4]
 80049b8:	4613      	mov	r3, r2
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	1a9b      	subs	r3, r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	334c      	adds	r3, #76	@ 0x4c
 80049c4:	2202      	movs	r2, #2
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	e009      	b.n	80049de <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049ca:	78fa      	ldrb	r2, [r7, #3]
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	4613      	mov	r3, r2
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	1a9b      	subs	r3, r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	440b      	add	r3, r1
 80049d8:	334c      	adds	r3, #76	@ 0x4c
 80049da:	2202      	movs	r2, #2
 80049dc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049de:	78fa      	ldrb	r2, [r7, #3]
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	4613      	mov	r3, r2
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	1a9b      	subs	r3, r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	440b      	add	r3, r1
 80049ec:	3326      	adds	r3, #38	@ 0x26
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00b      	beq.n	8004a0c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80049f4:	78fa      	ldrb	r2, [r7, #3]
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	4613      	mov	r3, r2
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	1a9b      	subs	r3, r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	3326      	adds	r3, #38	@ 0x26
 8004a04:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	f040 8136 	bne.w	8004c78 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a0c:	78fb      	ldrb	r3, [r7, #3]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a22:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a2a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a2c:	78fb      	ldrb	r3, [r7, #3]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a38:	461a      	mov	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	e11b      	b.n	8004c78 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004a40:	78fa      	ldrb	r2, [r7, #3]
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	4613      	mov	r3, r2
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	1a9b      	subs	r3, r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	334d      	adds	r3, #77	@ 0x4d
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	f040 8081 	bne.w	8004b5a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a58:	78fa      	ldrb	r2, [r7, #3]
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	1a9b      	subs	r3, r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	440b      	add	r3, r1
 8004a66:	334d      	adds	r3, #77	@ 0x4d
 8004a68:	2202      	movs	r2, #2
 8004a6a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004a6c:	78fa      	ldrb	r2, [r7, #3]
 8004a6e:	6879      	ldr	r1, [r7, #4]
 8004a70:	4613      	mov	r3, r2
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	1a9b      	subs	r3, r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	440b      	add	r3, r1
 8004a7a:	331b      	adds	r3, #27
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	f040 80fa 	bne.w	8004c78 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a84:	78fa      	ldrb	r2, [r7, #3]
 8004a86:	6879      	ldr	r1, [r7, #4]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	1a9b      	subs	r3, r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	334c      	adds	r3, #76	@ 0x4c
 8004a94:	2202      	movs	r2, #2
 8004a96:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004a98:	78fb      	ldrb	r3, [r7, #3]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	78fa      	ldrb	r2, [r7, #3]
 8004aa8:	0151      	lsls	r1, r2, #5
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	440a      	add	r2, r1
 8004aae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ab2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ab6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	0151      	lsls	r1, r2, #5
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	440a      	add	r2, r1
 8004ace:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ad6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	78fa      	ldrb	r2, [r7, #3]
 8004ae8:	0151      	lsls	r1, r2, #5
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	440a      	add	r2, r1
 8004aee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004af2:	f023 0320 	bic.w	r3, r3, #32
 8004af6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004af8:	78fa      	ldrb	r2, [r7, #3]
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	4613      	mov	r3, r2
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	1a9b      	subs	r3, r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	440b      	add	r3, r1
 8004b06:	3326      	adds	r3, #38	@ 0x26
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00b      	beq.n	8004b26 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004b0e:	78fa      	ldrb	r2, [r7, #3]
 8004b10:	6879      	ldr	r1, [r7, #4]
 8004b12:	4613      	mov	r3, r2
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	1a9b      	subs	r3, r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	440b      	add	r3, r1
 8004b1c:	3326      	adds	r3, #38	@ 0x26
 8004b1e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	f040 80a9 	bne.w	8004c78 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b26:	78fb      	ldrb	r3, [r7, #3]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b3c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b44:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b46:	78fb      	ldrb	r3, [r7, #3]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b52:	461a      	mov	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	e08e      	b.n	8004c78 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004b5a:	78fa      	ldrb	r2, [r7, #3]
 8004b5c:	6879      	ldr	r1, [r7, #4]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	1a9b      	subs	r3, r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	440b      	add	r3, r1
 8004b68:	334d      	adds	r3, #77	@ 0x4d
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d143      	bne.n	8004bf8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b70:	78fa      	ldrb	r2, [r7, #3]
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	4613      	mov	r3, r2
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	1a9b      	subs	r3, r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	334d      	adds	r3, #77	@ 0x4d
 8004b80:	2202      	movs	r2, #2
 8004b82:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b84:	78fa      	ldrb	r2, [r7, #3]
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	1a9b      	subs	r3, r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	334c      	adds	r3, #76	@ 0x4c
 8004b94:	2202      	movs	r2, #2
 8004b96:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b98:	78fa      	ldrb	r2, [r7, #3]
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	3326      	adds	r3, #38	@ 0x26
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004bae:	78fa      	ldrb	r2, [r7, #3]
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	440b      	add	r3, r1
 8004bbc:	3326      	adds	r3, #38	@ 0x26
 8004bbe:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d159      	bne.n	8004c78 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004bc4:	78fb      	ldrb	r3, [r7, #3]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004bda:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004be2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	e03f      	b.n	8004c78 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004bf8:	78fa      	ldrb	r2, [r7, #3]
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	1a9b      	subs	r3, r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	334d      	adds	r3, #77	@ 0x4d
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d126      	bne.n	8004c5c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c0e:	78fa      	ldrb	r2, [r7, #3]
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	4613      	mov	r3, r2
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	1a9b      	subs	r3, r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	334d      	adds	r3, #77	@ 0x4d
 8004c1e:	2202      	movs	r2, #2
 8004c20:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	1a9b      	subs	r3, r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	3344      	adds	r3, #68	@ 0x44
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	1c59      	adds	r1, r3, #1
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	1a9b      	subs	r3, r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4403      	add	r3, r0
 8004c42:	3344      	adds	r3, #68	@ 0x44
 8004c44:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c46:	78fa      	ldrb	r2, [r7, #3]
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	1a9b      	subs	r3, r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	440b      	add	r3, r1
 8004c54:	334c      	adds	r3, #76	@ 0x4c
 8004c56:	2204      	movs	r2, #4
 8004c58:	701a      	strb	r2, [r3, #0]
 8004c5a:	e00d      	b.n	8004c78 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004c5c:	78fa      	ldrb	r2, [r7, #3]
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	4613      	mov	r3, r2
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	1a9b      	subs	r3, r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	440b      	add	r3, r1
 8004c6a:	334d      	adds	r3, #77	@ 0x4d
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	f000 8100 	beq.w	8004e74 <HCD_HC_IN_IRQHandler+0xcca>
 8004c74:	e000      	b.n	8004c78 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004c76:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004c78:	78fa      	ldrb	r2, [r7, #3]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	334c      	adds	r3, #76	@ 0x4c
 8004c88:	781a      	ldrb	r2, [r3, #0]
 8004c8a:	78fb      	ldrb	r3, [r7, #3]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f006 fb1a 	bl	800b2c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004c94:	e0ef      	b.n	8004e76 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	78fa      	ldrb	r2, [r7, #3]
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f003 fa15 	bl	80080ce <USB_ReadChInterrupts>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004caa:	2b40      	cmp	r3, #64	@ 0x40
 8004cac:	d12f      	bne.n	8004d0e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cba:	461a      	mov	r2, r3
 8004cbc:	2340      	movs	r3, #64	@ 0x40
 8004cbe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004cc0:	78fa      	ldrb	r2, [r7, #3]
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	1a9b      	subs	r3, r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	334d      	adds	r3, #77	@ 0x4d
 8004cd0:	2205      	movs	r2, #5
 8004cd2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004cd4:	78fa      	ldrb	r2, [r7, #3]
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	440b      	add	r3, r1
 8004ce2:	331a      	adds	r3, #26
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d109      	bne.n	8004cfe <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004cea:	78fa      	ldrb	r2, [r7, #3]
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	1a9b      	subs	r3, r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	440b      	add	r3, r1
 8004cf8:	3344      	adds	r3, #68	@ 0x44
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	78fa      	ldrb	r2, [r7, #3]
 8004d04:	4611      	mov	r1, r2
 8004d06:	4618      	mov	r0, r3
 8004d08:	f003 ff85 	bl	8008c16 <USB_HC_Halt>
 8004d0c:	e0b3      	b.n	8004e76 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	78fa      	ldrb	r2, [r7, #3]
 8004d14:	4611      	mov	r1, r2
 8004d16:	4618      	mov	r0, r3
 8004d18:	f003 f9d9 	bl	80080ce <USB_ReadChInterrupts>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	f003 0310 	and.w	r3, r3, #16
 8004d22:	2b10      	cmp	r3, #16
 8004d24:	f040 80a7 	bne.w	8004e76 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004d28:	78fa      	ldrb	r2, [r7, #3]
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	1a9b      	subs	r3, r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	3326      	adds	r3, #38	@ 0x26
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d11b      	bne.n	8004d76 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004d3e:	78fa      	ldrb	r2, [r7, #3]
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	1a9b      	subs	r3, r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	3344      	adds	r3, #68	@ 0x44
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004d52:	78fa      	ldrb	r2, [r7, #3]
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	1a9b      	subs	r3, r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	440b      	add	r3, r1
 8004d60:	334d      	adds	r3, #77	@ 0x4d
 8004d62:	2204      	movs	r2, #4
 8004d64:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	78fa      	ldrb	r2, [r7, #3]
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f003 ff51 	bl	8008c16 <USB_HC_Halt>
 8004d74:	e03f      	b.n	8004df6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d76:	78fa      	ldrb	r2, [r7, #3]
 8004d78:	6879      	ldr	r1, [r7, #4]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	1a9b      	subs	r3, r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	440b      	add	r3, r1
 8004d84:	3326      	adds	r3, #38	@ 0x26
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004d8c:	78fa      	ldrb	r2, [r7, #3]
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	4613      	mov	r3, r2
 8004d92:	011b      	lsls	r3, r3, #4
 8004d94:	1a9b      	subs	r3, r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	3326      	adds	r3, #38	@ 0x26
 8004d9c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d129      	bne.n	8004df6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004da2:	78fa      	ldrb	r2, [r7, #3]
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	4613      	mov	r3, r2
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	1a9b      	subs	r3, r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	3344      	adds	r3, #68	@ 0x44
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	799b      	ldrb	r3, [r3, #6]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HCD_HC_IN_IRQHandler+0xc2a>
 8004dbe:	78fa      	ldrb	r2, [r7, #3]
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	011b      	lsls	r3, r3, #4
 8004dc6:	1a9b      	subs	r3, r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	440b      	add	r3, r1
 8004dcc:	331b      	adds	r3, #27
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d110      	bne.n	8004df6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004dd4:	78fa      	ldrb	r2, [r7, #3]
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	1a9b      	subs	r3, r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	334d      	adds	r3, #77	@ 0x4d
 8004de4:	2204      	movs	r2, #4
 8004de6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	78fa      	ldrb	r2, [r7, #3]
 8004dee:	4611      	mov	r1, r2
 8004df0:	4618      	mov	r0, r3
 8004df2:	f003 ff10 	bl	8008c16 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004df6:	78fa      	ldrb	r2, [r7, #3]
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	011b      	lsls	r3, r3, #4
 8004dfe:	1a9b      	subs	r3, r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	440b      	add	r3, r1
 8004e04:	331b      	adds	r3, #27
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d129      	bne.n	8004e60 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004e0c:	78fa      	ldrb	r2, [r7, #3]
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	4613      	mov	r3, r2
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	1a9b      	subs	r3, r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	440b      	add	r3, r1
 8004e1a:	331b      	adds	r3, #27
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	78fa      	ldrb	r2, [r7, #3]
 8004e30:	0151      	lsls	r1, r2, #5
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	440a      	add	r2, r1
 8004e36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e3e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	78fa      	ldrb	r2, [r7, #3]
 8004e50:	0151      	lsls	r1, r2, #5
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	440a      	add	r2, r1
 8004e56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e5a:	f043 0320 	orr.w	r3, r3, #32
 8004e5e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	2310      	movs	r3, #16
 8004e70:	6093      	str	r3, [r2, #8]
 8004e72:	e000      	b.n	8004e76 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004e74:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	78fa      	ldrb	r2, [r7, #3]
 8004e98:	4611      	mov	r1, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f003 f917 	bl	80080ce <USB_ReadChInterrupts>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d11b      	bne.n	8004ee2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	2304      	movs	r3, #4
 8004eba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004ebc:	78fa      	ldrb	r2, [r7, #3]
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	1a9b      	subs	r3, r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	334d      	adds	r3, #77	@ 0x4d
 8004ecc:	2207      	movs	r2, #7
 8004ece:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	78fa      	ldrb	r2, [r7, #3]
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f003 fe9c 	bl	8008c16 <USB_HC_Halt>
 8004ede:	f000 bc89 	b.w	80057f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	78fa      	ldrb	r2, [r7, #3]
 8004ee8:	4611      	mov	r1, r2
 8004eea:	4618      	mov	r0, r3
 8004eec:	f003 f8ef 	bl	80080ce <USB_ReadChInterrupts>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	f040 8082 	bne.w	8005000 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f08:	461a      	mov	r2, r3
 8004f0a:	2320      	movs	r3, #32
 8004f0c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004f0e:	78fa      	ldrb	r2, [r7, #3]
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	1a9b      	subs	r3, r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	3319      	adds	r3, #25
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d124      	bne.n	8004f6e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004f24:	78fa      	ldrb	r2, [r7, #3]
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	1a9b      	subs	r3, r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	3319      	adds	r3, #25
 8004f34:	2200      	movs	r2, #0
 8004f36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f38:	78fa      	ldrb	r2, [r7, #3]
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	1a9b      	subs	r3, r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	440b      	add	r3, r1
 8004f46:	334c      	adds	r3, #76	@ 0x4c
 8004f48:	2202      	movs	r2, #2
 8004f4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004f4c:	78fa      	ldrb	r2, [r7, #3]
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	4613      	mov	r3, r2
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	1a9b      	subs	r3, r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	440b      	add	r3, r1
 8004f5a:	334d      	adds	r3, #77	@ 0x4d
 8004f5c:	2203      	movs	r2, #3
 8004f5e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	78fa      	ldrb	r2, [r7, #3]
 8004f66:	4611      	mov	r1, r2
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f003 fe54 	bl	8008c16 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004f6e:	78fa      	ldrb	r2, [r7, #3]
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	1a9b      	subs	r3, r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	331a      	adds	r3, #26
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	f040 8437 	bne.w	80057f4 <HCD_HC_OUT_IRQHandler+0x978>
 8004f86:	78fa      	ldrb	r2, [r7, #3]
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	1a9b      	subs	r3, r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	440b      	add	r3, r1
 8004f94:	331b      	adds	r3, #27
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f040 842b 	bne.w	80057f4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004f9e:	78fa      	ldrb	r2, [r7, #3]
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	1a9b      	subs	r3, r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	440b      	add	r3, r1
 8004fac:	3326      	adds	r3, #38	@ 0x26
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d009      	beq.n	8004fc8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004fb4:	78fa      	ldrb	r2, [r7, #3]
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	1a9b      	subs	r3, r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	331b      	adds	r3, #27
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004fc8:	78fa      	ldrb	r2, [r7, #3]
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	011b      	lsls	r3, r3, #4
 8004fd0:	1a9b      	subs	r3, r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	334d      	adds	r3, #77	@ 0x4d
 8004fd8:	2203      	movs	r2, #3
 8004fda:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	78fa      	ldrb	r2, [r7, #3]
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f003 fe16 	bl	8008c16 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004fea:	78fa      	ldrb	r2, [r7, #3]
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	1a9b      	subs	r3, r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	440b      	add	r3, r1
 8004ff8:	3344      	adds	r3, #68	@ 0x44
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	e3f9      	b.n	80057f4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	78fa      	ldrb	r2, [r7, #3]
 8005006:	4611      	mov	r1, r2
 8005008:	4618      	mov	r0, r3
 800500a:	f003 f860 	bl	80080ce <USB_ReadChInterrupts>
 800500e:	4603      	mov	r3, r0
 8005010:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005018:	d111      	bne.n	800503e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4413      	add	r3, r2
 8005022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005026:	461a      	mov	r2, r3
 8005028:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800502c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	78fa      	ldrb	r2, [r7, #3]
 8005034:	4611      	mov	r1, r2
 8005036:	4618      	mov	r0, r3
 8005038:	f003 fded 	bl	8008c16 <USB_HC_Halt>
 800503c:	e3da      	b.n	80057f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	78fa      	ldrb	r2, [r7, #3]
 8005044:	4611      	mov	r1, r2
 8005046:	4618      	mov	r0, r3
 8005048:	f003 f841 	bl	80080ce <USB_ReadChInterrupts>
 800504c:	4603      	mov	r3, r0
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b01      	cmp	r3, #1
 8005054:	d168      	bne.n	8005128 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005056:	78fa      	ldrb	r2, [r7, #3]
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	4613      	mov	r3, r2
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	1a9b      	subs	r3, r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	440b      	add	r3, r1
 8005064:	3344      	adds	r3, #68	@ 0x44
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	78fa      	ldrb	r2, [r7, #3]
 8005070:	4611      	mov	r1, r2
 8005072:	4618      	mov	r0, r3
 8005074:	f003 f82b 	bl	80080ce <USB_ReadChInterrupts>
 8005078:	4603      	mov	r3, r0
 800507a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800507e:	2b40      	cmp	r3, #64	@ 0x40
 8005080:	d112      	bne.n	80050a8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005082:	78fa      	ldrb	r2, [r7, #3]
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	4613      	mov	r3, r2
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	1a9b      	subs	r3, r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	440b      	add	r3, r1
 8005090:	3319      	adds	r3, #25
 8005092:	2201      	movs	r2, #1
 8005094:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005096:	78fb      	ldrb	r3, [r7, #3]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	4413      	add	r3, r2
 800509e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050a2:	461a      	mov	r2, r3
 80050a4:	2340      	movs	r3, #64	@ 0x40
 80050a6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80050a8:	78fa      	ldrb	r2, [r7, #3]
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	4613      	mov	r3, r2
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	1a9b      	subs	r3, r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	331b      	adds	r3, #27
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d019      	beq.n	80050f2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80050be:	78fa      	ldrb	r2, [r7, #3]
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	4613      	mov	r3, r2
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	1a9b      	subs	r3, r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	440b      	add	r3, r1
 80050cc:	331b      	adds	r3, #27
 80050ce:	2200      	movs	r2, #0
 80050d0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80050d2:	78fb      	ldrb	r3, [r7, #3]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	78fa      	ldrb	r2, [r7, #3]
 80050e2:	0151      	lsls	r1, r2, #5
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	440a      	add	r2, r1
 80050e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80050ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050f0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80050f2:	78fb      	ldrb	r3, [r7, #3]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050fe:	461a      	mov	r2, r3
 8005100:	2301      	movs	r3, #1
 8005102:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005104:	78fa      	ldrb	r2, [r7, #3]
 8005106:	6879      	ldr	r1, [r7, #4]
 8005108:	4613      	mov	r3, r2
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	1a9b      	subs	r3, r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
 8005112:	334d      	adds	r3, #77	@ 0x4d
 8005114:	2201      	movs	r2, #1
 8005116:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	78fa      	ldrb	r2, [r7, #3]
 800511e:	4611      	mov	r1, r2
 8005120:	4618      	mov	r0, r3
 8005122:	f003 fd78 	bl	8008c16 <USB_HC_Halt>
 8005126:	e365      	b.n	80057f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	78fa      	ldrb	r2, [r7, #3]
 800512e:	4611      	mov	r1, r2
 8005130:	4618      	mov	r0, r3
 8005132:	f002 ffcc 	bl	80080ce <USB_ReadChInterrupts>
 8005136:	4603      	mov	r3, r0
 8005138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800513c:	2b40      	cmp	r3, #64	@ 0x40
 800513e:	d139      	bne.n	80051b4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005140:	78fa      	ldrb	r2, [r7, #3]
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	1a9b      	subs	r3, r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	334d      	adds	r3, #77	@ 0x4d
 8005150:	2205      	movs	r2, #5
 8005152:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005154:	78fa      	ldrb	r2, [r7, #3]
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	4613      	mov	r3, r2
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	1a9b      	subs	r3, r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	331a      	adds	r3, #26
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d109      	bne.n	800517e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800516a:	78fa      	ldrb	r2, [r7, #3]
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	4613      	mov	r3, r2
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	1a9b      	subs	r3, r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	440b      	add	r3, r1
 8005178:	3319      	adds	r3, #25
 800517a:	2201      	movs	r2, #1
 800517c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800517e:	78fa      	ldrb	r2, [r7, #3]
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	4613      	mov	r3, r2
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	1a9b      	subs	r3, r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	440b      	add	r3, r1
 800518c:	3344      	adds	r3, #68	@ 0x44
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	78fa      	ldrb	r2, [r7, #3]
 8005198:	4611      	mov	r1, r2
 800519a:	4618      	mov	r0, r3
 800519c:	f003 fd3b 	bl	8008c16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051ac:	461a      	mov	r2, r3
 80051ae:	2340      	movs	r3, #64	@ 0x40
 80051b0:	6093      	str	r3, [r2, #8]
 80051b2:	e31f      	b.n	80057f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	78fa      	ldrb	r2, [r7, #3]
 80051ba:	4611      	mov	r1, r2
 80051bc:	4618      	mov	r0, r3
 80051be:	f002 ff86 	bl	80080ce <USB_ReadChInterrupts>
 80051c2:	4603      	mov	r3, r0
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d11a      	bne.n	8005202 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80051cc:	78fb      	ldrb	r3, [r7, #3]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051d8:	461a      	mov	r2, r3
 80051da:	2308      	movs	r3, #8
 80051dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80051de:	78fa      	ldrb	r2, [r7, #3]
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	4613      	mov	r3, r2
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	1a9b      	subs	r3, r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	440b      	add	r3, r1
 80051ec:	334d      	adds	r3, #77	@ 0x4d
 80051ee:	2206      	movs	r2, #6
 80051f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	78fa      	ldrb	r2, [r7, #3]
 80051f8:	4611      	mov	r1, r2
 80051fa:	4618      	mov	r0, r3
 80051fc:	f003 fd0b 	bl	8008c16 <USB_HC_Halt>
 8005200:	e2f8      	b.n	80057f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	78fa      	ldrb	r2, [r7, #3]
 8005208:	4611      	mov	r1, r2
 800520a:	4618      	mov	r0, r3
 800520c:	f002 ff5f 	bl	80080ce <USB_ReadChInterrupts>
 8005210:	4603      	mov	r3, r0
 8005212:	f003 0310 	and.w	r3, r3, #16
 8005216:	2b10      	cmp	r3, #16
 8005218:	d144      	bne.n	80052a4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800521a:	78fa      	ldrb	r2, [r7, #3]
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	4613      	mov	r3, r2
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	1a9b      	subs	r3, r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	3344      	adds	r3, #68	@ 0x44
 800522a:	2200      	movs	r2, #0
 800522c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800522e:	78fa      	ldrb	r2, [r7, #3]
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	4613      	mov	r3, r2
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	1a9b      	subs	r3, r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	334d      	adds	r3, #77	@ 0x4d
 800523e:	2204      	movs	r2, #4
 8005240:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005242:	78fa      	ldrb	r2, [r7, #3]
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	4613      	mov	r3, r2
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	1a9b      	subs	r3, r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	440b      	add	r3, r1
 8005250:	3319      	adds	r3, #25
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d114      	bne.n	8005282 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005258:	78fa      	ldrb	r2, [r7, #3]
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	4613      	mov	r3, r2
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	1a9b      	subs	r3, r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	440b      	add	r3, r1
 8005266:	3318      	adds	r3, #24
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d109      	bne.n	8005282 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800526e:	78fa      	ldrb	r2, [r7, #3]
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	4613      	mov	r3, r2
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	1a9b      	subs	r3, r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	440b      	add	r3, r1
 800527c:	3319      	adds	r3, #25
 800527e:	2201      	movs	r2, #1
 8005280:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	78fa      	ldrb	r2, [r7, #3]
 8005288:	4611      	mov	r1, r2
 800528a:	4618      	mov	r0, r3
 800528c:	f003 fcc3 	bl	8008c16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	4413      	add	r3, r2
 8005298:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800529c:	461a      	mov	r2, r3
 800529e:	2310      	movs	r3, #16
 80052a0:	6093      	str	r3, [r2, #8]
 80052a2:	e2a7      	b.n	80057f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	78fa      	ldrb	r2, [r7, #3]
 80052aa:	4611      	mov	r1, r2
 80052ac:	4618      	mov	r0, r3
 80052ae:	f002 ff0e 	bl	80080ce <USB_ReadChInterrupts>
 80052b2:	4603      	mov	r3, r0
 80052b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b8:	2b80      	cmp	r3, #128	@ 0x80
 80052ba:	f040 8083 	bne.w	80053c4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	799b      	ldrb	r3, [r3, #6]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d111      	bne.n	80052ea <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80052c6:	78fa      	ldrb	r2, [r7, #3]
 80052c8:	6879      	ldr	r1, [r7, #4]
 80052ca:	4613      	mov	r3, r2
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	1a9b      	subs	r3, r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	440b      	add	r3, r1
 80052d4:	334d      	adds	r3, #77	@ 0x4d
 80052d6:	2207      	movs	r2, #7
 80052d8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	78fa      	ldrb	r2, [r7, #3]
 80052e0:	4611      	mov	r1, r2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f003 fc97 	bl	8008c16 <USB_HC_Halt>
 80052e8:	e062      	b.n	80053b0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80052ea:	78fa      	ldrb	r2, [r7, #3]
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	4613      	mov	r3, r2
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	1a9b      	subs	r3, r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	440b      	add	r3, r1
 80052f8:	3344      	adds	r3, #68	@ 0x44
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	1c59      	adds	r1, r3, #1
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	4613      	mov	r3, r2
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	1a9b      	subs	r3, r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4403      	add	r3, r0
 800530a:	3344      	adds	r3, #68	@ 0x44
 800530c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800530e:	78fa      	ldrb	r2, [r7, #3]
 8005310:	6879      	ldr	r1, [r7, #4]
 8005312:	4613      	mov	r3, r2
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	1a9b      	subs	r3, r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	440b      	add	r3, r1
 800531c:	3344      	adds	r3, #68	@ 0x44
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d922      	bls.n	800536a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005324:	78fa      	ldrb	r2, [r7, #3]
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	4613      	mov	r3, r2
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	3344      	adds	r3, #68	@ 0x44
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005338:	78fa      	ldrb	r2, [r7, #3]
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	4613      	mov	r3, r2
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	1a9b      	subs	r3, r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	334c      	adds	r3, #76	@ 0x4c
 8005348:	2204      	movs	r2, #4
 800534a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800534c:	78fa      	ldrb	r2, [r7, #3]
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	4613      	mov	r3, r2
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	334c      	adds	r3, #76	@ 0x4c
 800535c:	781a      	ldrb	r2, [r3, #0]
 800535e:	78fb      	ldrb	r3, [r7, #3]
 8005360:	4619      	mov	r1, r3
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f005 ffb0 	bl	800b2c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005368:	e022      	b.n	80053b0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800536a:	78fa      	ldrb	r2, [r7, #3]
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	4613      	mov	r3, r2
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	1a9b      	subs	r3, r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	334c      	adds	r3, #76	@ 0x4c
 800537a:	2202      	movs	r2, #2
 800537c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800537e:	78fb      	ldrb	r3, [r7, #3]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	4413      	add	r3, r2
 8005386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005394:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800539c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800539e:	78fb      	ldrb	r3, [r7, #3]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053aa:	461a      	mov	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053bc:	461a      	mov	r2, r3
 80053be:	2380      	movs	r3, #128	@ 0x80
 80053c0:	6093      	str	r3, [r2, #8]
 80053c2:	e217      	b.n	80057f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	78fa      	ldrb	r2, [r7, #3]
 80053ca:	4611      	mov	r1, r2
 80053cc:	4618      	mov	r0, r3
 80053ce:	f002 fe7e 	bl	80080ce <USB_ReadChInterrupts>
 80053d2:	4603      	mov	r3, r0
 80053d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053dc:	d11b      	bne.n	8005416 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80053de:	78fa      	ldrb	r2, [r7, #3]
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	1a9b      	subs	r3, r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	440b      	add	r3, r1
 80053ec:	334d      	adds	r3, #77	@ 0x4d
 80053ee:	2209      	movs	r2, #9
 80053f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	78fa      	ldrb	r2, [r7, #3]
 80053f8:	4611      	mov	r1, r2
 80053fa:	4618      	mov	r0, r3
 80053fc:	f003 fc0b 	bl	8008c16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	4413      	add	r3, r2
 8005408:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800540c:	461a      	mov	r2, r3
 800540e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005412:	6093      	str	r3, [r2, #8]
 8005414:	e1ee      	b.n	80057f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	78fa      	ldrb	r2, [r7, #3]
 800541c:	4611      	mov	r1, r2
 800541e:	4618      	mov	r0, r3
 8005420:	f002 fe55 	bl	80080ce <USB_ReadChInterrupts>
 8005424:	4603      	mov	r3, r0
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b02      	cmp	r3, #2
 800542c:	f040 81df 	bne.w	80057ee <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005430:	78fb      	ldrb	r3, [r7, #3]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	4413      	add	r3, r2
 8005438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800543c:	461a      	mov	r2, r3
 800543e:	2302      	movs	r3, #2
 8005440:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005442:	78fa      	ldrb	r2, [r7, #3]
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	4613      	mov	r3, r2
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	1a9b      	subs	r3, r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	440b      	add	r3, r1
 8005450:	334d      	adds	r3, #77	@ 0x4d
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b01      	cmp	r3, #1
 8005456:	f040 8093 	bne.w	8005580 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800545a:	78fa      	ldrb	r2, [r7, #3]
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	334d      	adds	r3, #77	@ 0x4d
 800546a:	2202      	movs	r2, #2
 800546c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800546e:	78fa      	ldrb	r2, [r7, #3]
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	4613      	mov	r3, r2
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	1a9b      	subs	r3, r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	440b      	add	r3, r1
 800547c:	334c      	adds	r3, #76	@ 0x4c
 800547e:	2201      	movs	r2, #1
 8005480:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005482:	78fa      	ldrb	r2, [r7, #3]
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	4613      	mov	r3, r2
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	1a9b      	subs	r3, r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	440b      	add	r3, r1
 8005490:	3326      	adds	r3, #38	@ 0x26
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d00b      	beq.n	80054b0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005498:	78fa      	ldrb	r2, [r7, #3]
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	4613      	mov	r3, r2
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	1a9b      	subs	r3, r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	3326      	adds	r3, #38	@ 0x26
 80054a8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	f040 8190 	bne.w	80057d0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	799b      	ldrb	r3, [r3, #6]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d115      	bne.n	80054e4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80054b8:	78fa      	ldrb	r2, [r7, #3]
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	4613      	mov	r3, r2
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	1a9b      	subs	r3, r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	440b      	add	r3, r1
 80054c6:	333d      	adds	r3, #61	@ 0x3d
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	78fa      	ldrb	r2, [r7, #3]
 80054cc:	f083 0301 	eor.w	r3, r3, #1
 80054d0:	b2d8      	uxtb	r0, r3
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	4613      	mov	r3, r2
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	1a9b      	subs	r3, r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	333d      	adds	r3, #61	@ 0x3d
 80054e0:	4602      	mov	r2, r0
 80054e2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	799b      	ldrb	r3, [r3, #6]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	f040 8171 	bne.w	80057d0 <HCD_HC_OUT_IRQHandler+0x954>
 80054ee:	78fa      	ldrb	r2, [r7, #3]
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	4613      	mov	r3, r2
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	1a9b      	subs	r3, r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	440b      	add	r3, r1
 80054fc:	3334      	adds	r3, #52	@ 0x34
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 8165 	beq.w	80057d0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005506:	78fa      	ldrb	r2, [r7, #3]
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	4613      	mov	r3, r2
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	1a9b      	subs	r3, r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	3334      	adds	r3, #52	@ 0x34
 8005516:	6819      	ldr	r1, [r3, #0]
 8005518:	78fa      	ldrb	r2, [r7, #3]
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	4613      	mov	r3, r2
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	1a9b      	subs	r3, r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4403      	add	r3, r0
 8005526:	3328      	adds	r3, #40	@ 0x28
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	440b      	add	r3, r1
 800552c:	1e59      	subs	r1, r3, #1
 800552e:	78fa      	ldrb	r2, [r7, #3]
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	4613      	mov	r3, r2
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	1a9b      	subs	r3, r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4403      	add	r3, r0
 800553c:	3328      	adds	r3, #40	@ 0x28
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	fbb1 f3f3 	udiv	r3, r1, r3
 8005544:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 813f 	beq.w	80057d0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005552:	78fa      	ldrb	r2, [r7, #3]
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	4613      	mov	r3, r2
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	1a9b      	subs	r3, r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	440b      	add	r3, r1
 8005560:	333d      	adds	r3, #61	@ 0x3d
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	78fa      	ldrb	r2, [r7, #3]
 8005566:	f083 0301 	eor.w	r3, r3, #1
 800556a:	b2d8      	uxtb	r0, r3
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	4613      	mov	r3, r2
 8005570:	011b      	lsls	r3, r3, #4
 8005572:	1a9b      	subs	r3, r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	440b      	add	r3, r1
 8005578:	333d      	adds	r3, #61	@ 0x3d
 800557a:	4602      	mov	r2, r0
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	e127      	b.n	80057d0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005580:	78fa      	ldrb	r2, [r7, #3]
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	4613      	mov	r3, r2
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	1a9b      	subs	r3, r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	440b      	add	r3, r1
 800558e:	334d      	adds	r3, #77	@ 0x4d
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b03      	cmp	r3, #3
 8005594:	d120      	bne.n	80055d8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005596:	78fa      	ldrb	r2, [r7, #3]
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	1a9b      	subs	r3, r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	334d      	adds	r3, #77	@ 0x4d
 80055a6:	2202      	movs	r2, #2
 80055a8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80055aa:	78fa      	ldrb	r2, [r7, #3]
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	1a9b      	subs	r3, r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	331b      	adds	r3, #27
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	f040 8107 	bne.w	80057d0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80055c2:	78fa      	ldrb	r2, [r7, #3]
 80055c4:	6879      	ldr	r1, [r7, #4]
 80055c6:	4613      	mov	r3, r2
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	1a9b      	subs	r3, r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	440b      	add	r3, r1
 80055d0:	334c      	adds	r3, #76	@ 0x4c
 80055d2:	2202      	movs	r2, #2
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	e0fb      	b.n	80057d0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80055d8:	78fa      	ldrb	r2, [r7, #3]
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	4613      	mov	r3, r2
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	1a9b      	subs	r3, r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	440b      	add	r3, r1
 80055e6:	334d      	adds	r3, #77	@ 0x4d
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d13a      	bne.n	8005664 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055ee:	78fa      	ldrb	r2, [r7, #3]
 80055f0:	6879      	ldr	r1, [r7, #4]
 80055f2:	4613      	mov	r3, r2
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	1a9b      	subs	r3, r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	440b      	add	r3, r1
 80055fc:	334d      	adds	r3, #77	@ 0x4d
 80055fe:	2202      	movs	r2, #2
 8005600:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005602:	78fa      	ldrb	r2, [r7, #3]
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	334c      	adds	r3, #76	@ 0x4c
 8005612:	2202      	movs	r2, #2
 8005614:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005616:	78fa      	ldrb	r2, [r7, #3]
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	4613      	mov	r3, r2
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	1a9b      	subs	r3, r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	440b      	add	r3, r1
 8005624:	331b      	adds	r3, #27
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b01      	cmp	r3, #1
 800562a:	f040 80d1 	bne.w	80057d0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800562e:	78fa      	ldrb	r2, [r7, #3]
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	1a9b      	subs	r3, r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	331b      	adds	r3, #27
 800563e:	2200      	movs	r2, #0
 8005640:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005642:	78fb      	ldrb	r3, [r7, #3]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	4413      	add	r3, r2
 800564a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	78fa      	ldrb	r2, [r7, #3]
 8005652:	0151      	lsls	r1, r2, #5
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	440a      	add	r2, r1
 8005658:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800565c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005660:	6053      	str	r3, [r2, #4]
 8005662:	e0b5      	b.n	80057d0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005664:	78fa      	ldrb	r2, [r7, #3]
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	4613      	mov	r3, r2
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	1a9b      	subs	r3, r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	334d      	adds	r3, #77	@ 0x4d
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	2b05      	cmp	r3, #5
 8005678:	d114      	bne.n	80056a4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800567a:	78fa      	ldrb	r2, [r7, #3]
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	4613      	mov	r3, r2
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	1a9b      	subs	r3, r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	440b      	add	r3, r1
 8005688:	334d      	adds	r3, #77	@ 0x4d
 800568a:	2202      	movs	r2, #2
 800568c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	4613      	mov	r3, r2
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	334c      	adds	r3, #76	@ 0x4c
 800569e:	2202      	movs	r2, #2
 80056a0:	701a      	strb	r2, [r3, #0]
 80056a2:	e095      	b.n	80057d0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80056a4:	78fa      	ldrb	r2, [r7, #3]
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	1a9b      	subs	r3, r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	334d      	adds	r3, #77	@ 0x4d
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b06      	cmp	r3, #6
 80056b8:	d114      	bne.n	80056e4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056ba:	78fa      	ldrb	r2, [r7, #3]
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	4613      	mov	r3, r2
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	1a9b      	subs	r3, r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	440b      	add	r3, r1
 80056c8:	334d      	adds	r3, #77	@ 0x4d
 80056ca:	2202      	movs	r2, #2
 80056cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80056ce:	78fa      	ldrb	r2, [r7, #3]
 80056d0:	6879      	ldr	r1, [r7, #4]
 80056d2:	4613      	mov	r3, r2
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	334c      	adds	r3, #76	@ 0x4c
 80056de:	2205      	movs	r2, #5
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	e075      	b.n	80057d0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80056e4:	78fa      	ldrb	r2, [r7, #3]
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	4613      	mov	r3, r2
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	1a9b      	subs	r3, r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	440b      	add	r3, r1
 80056f2:	334d      	adds	r3, #77	@ 0x4d
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b07      	cmp	r3, #7
 80056f8:	d00a      	beq.n	8005710 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80056fa:	78fa      	ldrb	r2, [r7, #3]
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	4613      	mov	r3, r2
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	1a9b      	subs	r3, r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	440b      	add	r3, r1
 8005708:	334d      	adds	r3, #77	@ 0x4d
 800570a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800570c:	2b09      	cmp	r3, #9
 800570e:	d170      	bne.n	80057f2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005710:	78fa      	ldrb	r2, [r7, #3]
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	4613      	mov	r3, r2
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	1a9b      	subs	r3, r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	440b      	add	r3, r1
 800571e:	334d      	adds	r3, #77	@ 0x4d
 8005720:	2202      	movs	r2, #2
 8005722:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005724:	78fa      	ldrb	r2, [r7, #3]
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	4613      	mov	r3, r2
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	1a9b      	subs	r3, r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	440b      	add	r3, r1
 8005732:	3344      	adds	r3, #68	@ 0x44
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	1c59      	adds	r1, r3, #1
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	1a9b      	subs	r3, r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4403      	add	r3, r0
 8005744:	3344      	adds	r3, #68	@ 0x44
 8005746:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005748:	78fa      	ldrb	r2, [r7, #3]
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	4613      	mov	r3, r2
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	1a9b      	subs	r3, r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	3344      	adds	r3, #68	@ 0x44
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b02      	cmp	r3, #2
 800575c:	d914      	bls.n	8005788 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800575e:	78fa      	ldrb	r2, [r7, #3]
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	4613      	mov	r3, r2
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	1a9b      	subs	r3, r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	440b      	add	r3, r1
 800576c:	3344      	adds	r3, #68	@ 0x44
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005772:	78fa      	ldrb	r2, [r7, #3]
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	4613      	mov	r3, r2
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	1a9b      	subs	r3, r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	440b      	add	r3, r1
 8005780:	334c      	adds	r3, #76	@ 0x4c
 8005782:	2204      	movs	r2, #4
 8005784:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005786:	e022      	b.n	80057ce <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005788:	78fa      	ldrb	r2, [r7, #3]
 800578a:	6879      	ldr	r1, [r7, #4]
 800578c:	4613      	mov	r3, r2
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	1a9b      	subs	r3, r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	440b      	add	r3, r1
 8005796:	334c      	adds	r3, #76	@ 0x4c
 8005798:	2202      	movs	r2, #2
 800579a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80057b2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80057ba:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80057bc:	78fb      	ldrb	r3, [r7, #3]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057c8:	461a      	mov	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80057ce:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80057d0:	78fa      	ldrb	r2, [r7, #3]
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	4613      	mov	r3, r2
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	1a9b      	subs	r3, r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	440b      	add	r3, r1
 80057de:	334c      	adds	r3, #76	@ 0x4c
 80057e0:	781a      	ldrb	r2, [r3, #0]
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	4619      	mov	r1, r3
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f005 fd6e 	bl	800b2c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80057ec:	e002      	b.n	80057f4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80057ee:	bf00      	nop
 80057f0:	e000      	b.n	80057f4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80057f2:	bf00      	nop
  }
}
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b08a      	sub	sp, #40	@ 0x28
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	0c5b      	lsrs	r3, r3, #17
 8005820:	f003 030f 	and.w	r3, r3, #15
 8005824:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	091b      	lsrs	r3, r3, #4
 800582a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800582e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2b02      	cmp	r3, #2
 8005834:	d004      	beq.n	8005840 <HCD_RXQLVL_IRQHandler+0x46>
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b05      	cmp	r3, #5
 800583a:	f000 80b6 	beq.w	80059aa <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800583e:	e0b7      	b.n	80059b0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 80b3 	beq.w	80059ae <HCD_RXQLVL_IRQHandler+0x1b4>
 8005848:	6879      	ldr	r1, [r7, #4]
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	4613      	mov	r3, r2
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	1a9b      	subs	r3, r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	332c      	adds	r3, #44	@ 0x2c
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 80a7 	beq.w	80059ae <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	4613      	mov	r3, r2
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	1a9b      	subs	r3, r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	3338      	adds	r3, #56	@ 0x38
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	18d1      	adds	r1, r2, r3
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	4613      	mov	r3, r2
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	1a9b      	subs	r3, r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4403      	add	r3, r0
 8005884:	3334      	adds	r3, #52	@ 0x34
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4299      	cmp	r1, r3
 800588a:	f200 8083 	bhi.w	8005994 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6818      	ldr	r0, [r3, #0]
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	4613      	mov	r3, r2
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	1a9b      	subs	r3, r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	440b      	add	r3, r1
 80058a0:	332c      	adds	r3, #44	@ 0x2c
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	b292      	uxth	r2, r2
 80058a8:	4619      	mov	r1, r3
 80058aa:	f002 fba5 	bl	8007ff8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	4613      	mov	r3, r2
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	1a9b      	subs	r3, r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	440b      	add	r3, r1
 80058bc:	332c      	adds	r3, #44	@ 0x2c
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	18d1      	adds	r1, r2, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	4613      	mov	r3, r2
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	1a9b      	subs	r3, r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4403      	add	r3, r0
 80058d2:	332c      	adds	r3, #44	@ 0x2c
 80058d4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80058d6:	6879      	ldr	r1, [r7, #4]
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	4613      	mov	r3, r2
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	1a9b      	subs	r3, r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	440b      	add	r3, r1
 80058e4:	3338      	adds	r3, #56	@ 0x38
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	18d1      	adds	r1, r2, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	4613      	mov	r3, r2
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	1a9b      	subs	r3, r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4403      	add	r3, r0
 80058fa:	3338      	adds	r3, #56	@ 0x38
 80058fc:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	4413      	add	r3, r2
 8005906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	0cdb      	lsrs	r3, r3, #19
 800590e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005912:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005914:	6879      	ldr	r1, [r7, #4]
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	4613      	mov	r3, r2
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	1a9b      	subs	r3, r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	3328      	adds	r3, #40	@ 0x28
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	461a      	mov	r2, r3
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	4293      	cmp	r3, r2
 800592c:	d13f      	bne.n	80059ae <HCD_RXQLVL_IRQHandler+0x1b4>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d03c      	beq.n	80059ae <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	4413      	add	r3, r2
 800593c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800594a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005952:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	4413      	add	r3, r2
 800595c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005960:	461a      	mov	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005966:	6879      	ldr	r1, [r7, #4]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	4613      	mov	r3, r2
 800596c:	011b      	lsls	r3, r3, #4
 800596e:	1a9b      	subs	r3, r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	440b      	add	r3, r1
 8005974:	333c      	adds	r3, #60	@ 0x3c
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	f083 0301 	eor.w	r3, r3, #1
 800597c:	b2d8      	uxtb	r0, r3
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	4613      	mov	r3, r2
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	1a9b      	subs	r3, r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	440b      	add	r3, r1
 800598c:	333c      	adds	r3, #60	@ 0x3c
 800598e:	4602      	mov	r2, r0
 8005990:	701a      	strb	r2, [r3, #0]
      break;
 8005992:	e00c      	b.n	80059ae <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	4613      	mov	r3, r2
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	1a9b      	subs	r3, r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	334c      	adds	r3, #76	@ 0x4c
 80059a4:	2204      	movs	r2, #4
 80059a6:	701a      	strb	r2, [r3, #0]
      break;
 80059a8:	e001      	b.n	80059ae <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80059aa:	bf00      	nop
 80059ac:	e000      	b.n	80059b0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80059ae:	bf00      	nop
  }
}
 80059b0:	bf00      	nop
 80059b2:	3728      	adds	r7, #40	@ 0x28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80059e4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d10b      	bne.n	8005a08 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d102      	bne.n	8005a00 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f005 fc48 	bl	800b290 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f043 0302 	orr.w	r3, r3, #2
 8005a06:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f003 0308 	and.w	r3, r3, #8
 8005a0e:	2b08      	cmp	r3, #8
 8005a10:	d132      	bne.n	8005a78 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f043 0308 	orr.w	r3, r3, #8
 8005a18:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d126      	bne.n	8005a72 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	7a5b      	ldrb	r3, [r3, #9]
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d113      	bne.n	8005a54 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005a32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a36:	d106      	bne.n	8005a46 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2102      	movs	r1, #2
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f002 fc6a 	bl	8008318 <USB_InitFSLSPClkSel>
 8005a44:	e011      	b.n	8005a6a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f002 fc63 	bl	8008318 <USB_InitFSLSPClkSel>
 8005a52:	e00a      	b.n	8005a6a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	79db      	ldrb	r3, [r3, #7]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d106      	bne.n	8005a6a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a62:	461a      	mov	r2, r3
 8005a64:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005a68:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f005 fc3a 	bl	800b2e4 <HAL_HCD_PortEnabled_Callback>
 8005a70:	e002      	b.n	8005a78 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f005 fc44 	bl	800b300 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f003 0320 	and.w	r3, r3, #32
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	d103      	bne.n	8005a8a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f043 0320 	orr.w	r3, r3, #32
 8005a88:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a90:	461a      	mov	r2, r3
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	6013      	str	r3, [r2, #0]
}
 8005a96:	bf00      	nop
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e12b      	b.n	8005d0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fd f86c 	bl	8002ba4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2224      	movs	r2, #36	@ 0x24
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0201 	bic.w	r2, r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005af2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b04:	f001 fa72 	bl	8006fec <HAL_RCC_GetPCLK1Freq>
 8005b08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	4a81      	ldr	r2, [pc, #516]	@ (8005d14 <HAL_I2C_Init+0x274>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d807      	bhi.n	8005b24 <HAL_I2C_Init+0x84>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4a80      	ldr	r2, [pc, #512]	@ (8005d18 <HAL_I2C_Init+0x278>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	bf94      	ite	ls
 8005b1c:	2301      	movls	r3, #1
 8005b1e:	2300      	movhi	r3, #0
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	e006      	b.n	8005b32 <HAL_I2C_Init+0x92>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4a7d      	ldr	r2, [pc, #500]	@ (8005d1c <HAL_I2C_Init+0x27c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	bf94      	ite	ls
 8005b2c:	2301      	movls	r3, #1
 8005b2e:	2300      	movhi	r3, #0
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e0e7      	b.n	8005d0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	4a78      	ldr	r2, [pc, #480]	@ (8005d20 <HAL_I2C_Init+0x280>)
 8005b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b42:	0c9b      	lsrs	r3, r3, #18
 8005b44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	4a6a      	ldr	r2, [pc, #424]	@ (8005d14 <HAL_I2C_Init+0x274>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d802      	bhi.n	8005b74 <HAL_I2C_Init+0xd4>
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	3301      	adds	r3, #1
 8005b72:	e009      	b.n	8005b88 <HAL_I2C_Init+0xe8>
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005b7a:	fb02 f303 	mul.w	r3, r2, r3
 8005b7e:	4a69      	ldr	r2, [pc, #420]	@ (8005d24 <HAL_I2C_Init+0x284>)
 8005b80:	fba2 2303 	umull	r2, r3, r2, r3
 8005b84:	099b      	lsrs	r3, r3, #6
 8005b86:	3301      	adds	r3, #1
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6812      	ldr	r2, [r2, #0]
 8005b8c:	430b      	orrs	r3, r1
 8005b8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005b9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	495c      	ldr	r1, [pc, #368]	@ (8005d14 <HAL_I2C_Init+0x274>)
 8005ba4:	428b      	cmp	r3, r1
 8005ba6:	d819      	bhi.n	8005bdc <HAL_I2C_Init+0x13c>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	1e59      	subs	r1, r3, #1
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bb6:	1c59      	adds	r1, r3, #1
 8005bb8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005bbc:	400b      	ands	r3, r1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <HAL_I2C_Init+0x138>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	1e59      	subs	r1, r3, #1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd6:	e051      	b.n	8005c7c <HAL_I2C_Init+0x1dc>
 8005bd8:	2304      	movs	r3, #4
 8005bda:	e04f      	b.n	8005c7c <HAL_I2C_Init+0x1dc>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d111      	bne.n	8005c08 <HAL_I2C_Init+0x168>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	1e58      	subs	r0, r3, #1
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6859      	ldr	r1, [r3, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	440b      	add	r3, r1
 8005bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	bf0c      	ite	eq
 8005c00:	2301      	moveq	r3, #1
 8005c02:	2300      	movne	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	e012      	b.n	8005c2e <HAL_I2C_Init+0x18e>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	1e58      	subs	r0, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6859      	ldr	r1, [r3, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	440b      	add	r3, r1
 8005c16:	0099      	lsls	r1, r3, #2
 8005c18:	440b      	add	r3, r1
 8005c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c1e:	3301      	adds	r3, #1
 8005c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	bf0c      	ite	eq
 8005c28:	2301      	moveq	r3, #1
 8005c2a:	2300      	movne	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <HAL_I2C_Init+0x196>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e022      	b.n	8005c7c <HAL_I2C_Init+0x1dc>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10e      	bne.n	8005c5c <HAL_I2C_Init+0x1bc>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	1e58      	subs	r0, r3, #1
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6859      	ldr	r1, [r3, #4]
 8005c46:	460b      	mov	r3, r1
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	440b      	add	r3, r1
 8005c4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c50:	3301      	adds	r3, #1
 8005c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c5a:	e00f      	b.n	8005c7c <HAL_I2C_Init+0x1dc>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	1e58      	subs	r0, r3, #1
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6859      	ldr	r1, [r3, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	440b      	add	r3, r1
 8005c6a:	0099      	lsls	r1, r3, #2
 8005c6c:	440b      	add	r3, r1
 8005c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c72:	3301      	adds	r3, #1
 8005c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c7c:	6879      	ldr	r1, [r7, #4]
 8005c7e:	6809      	ldr	r1, [r1, #0]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69da      	ldr	r2, [r3, #28]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005caa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6911      	ldr	r1, [r2, #16]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	68d2      	ldr	r2, [r2, #12]
 8005cb6:	4311      	orrs	r1, r2
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6812      	ldr	r2, [r2, #0]
 8005cbc:	430b      	orrs	r3, r1
 8005cbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	695a      	ldr	r2, [r3, #20]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0201 	orr.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	000186a0 	.word	0x000186a0
 8005d18:	001e847f 	.word	0x001e847f
 8005d1c:	003d08ff 	.word	0x003d08ff
 8005d20:	431bde83 	.word	0x431bde83
 8005d24:	10624dd3 	.word	0x10624dd3

08005d28 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e128      	b.n	8005f8c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d109      	bne.n	8005d5a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a90      	ldr	r2, [pc, #576]	@ (8005f94 <HAL_I2S_Init+0x26c>)
 8005d52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7fc ff6d 	bl	8002c34 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	6812      	ldr	r2, [r2, #0]
 8005d6c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005d70:	f023 030f 	bic.w	r3, r3, #15
 8005d74:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d060      	beq.n	8005e48 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d102      	bne.n	8005d94 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005d8e:	2310      	movs	r3, #16
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	e001      	b.n	8005d98 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005d94:	2320      	movs	r3, #32
 8005d96:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	2b20      	cmp	r3, #32
 8005d9e:	d802      	bhi.n	8005da6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005da6:	2001      	movs	r0, #1
 8005da8:	f001 fa2a 	bl	8007200 <HAL_RCCEx_GetPeriphCLKFreq>
 8005dac:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005db6:	d125      	bne.n	8005e04 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d010      	beq.n	8005de2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dca:	4613      	mov	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ddc:	3305      	adds	r3, #5
 8005dde:	613b      	str	r3, [r7, #16]
 8005de0:	e01f      	b.n	8005e22 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	461a      	mov	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfe:	3305      	adds	r3, #5
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	e00e      	b.n	8005e22 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	461a      	mov	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1e:	3305      	adds	r3, #5
 8005e20:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	4a5c      	ldr	r2, [pc, #368]	@ (8005f98 <HAL_I2S_Init+0x270>)
 8005e26:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2a:	08db      	lsrs	r3, r3, #3
 8005e2c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	085b      	lsrs	r3, r3, #1
 8005e3e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	021b      	lsls	r3, r3, #8
 8005e44:	61bb      	str	r3, [r7, #24]
 8005e46:	e003      	b.n	8005e50 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005e48:	2302      	movs	r3, #2
 8005e4a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d902      	bls.n	8005e5c <HAL_I2S_Init+0x134>
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	2bff      	cmp	r3, #255	@ 0xff
 8005e5a:	d907      	bls.n	8005e6c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e60:	f043 0210 	orr.w	r2, r3, #16
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e08f      	b.n	8005f8c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	ea42 0103 	orr.w	r1, r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69fa      	ldr	r2, [r7, #28]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005e8a:	f023 030f 	bic.w	r3, r3, #15
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6851      	ldr	r1, [r2, #4]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6892      	ldr	r2, [r2, #8]
 8005e96:	4311      	orrs	r1, r2
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	68d2      	ldr	r2, [r2, #12]
 8005e9c:	4311      	orrs	r1, r2
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	6992      	ldr	r2, [r2, #24]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005eae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d161      	bne.n	8005f7c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a38      	ldr	r2, [pc, #224]	@ (8005f9c <HAL_I2S_Init+0x274>)
 8005ebc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a37      	ldr	r2, [pc, #220]	@ (8005fa0 <HAL_I2S_Init+0x278>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d101      	bne.n	8005ecc <HAL_I2S_Init+0x1a4>
 8005ec8:	4b36      	ldr	r3, [pc, #216]	@ (8005fa4 <HAL_I2S_Init+0x27c>)
 8005eca:	e001      	b.n	8005ed0 <HAL_I2S_Init+0x1a8>
 8005ecc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	4932      	ldr	r1, [pc, #200]	@ (8005fa0 <HAL_I2S_Init+0x278>)
 8005ed8:	428a      	cmp	r2, r1
 8005eda:	d101      	bne.n	8005ee0 <HAL_I2S_Init+0x1b8>
 8005edc:	4a31      	ldr	r2, [pc, #196]	@ (8005fa4 <HAL_I2S_Init+0x27c>)
 8005ede:	e001      	b.n	8005ee4 <HAL_I2S_Init+0x1bc>
 8005ee0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005ee4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005ee8:	f023 030f 	bic.w	r3, r3, #15
 8005eec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a2b      	ldr	r2, [pc, #172]	@ (8005fa0 <HAL_I2S_Init+0x278>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d101      	bne.n	8005efc <HAL_I2S_Init+0x1d4>
 8005ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8005fa4 <HAL_I2S_Init+0x27c>)
 8005efa:	e001      	b.n	8005f00 <HAL_I2S_Init+0x1d8>
 8005efc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f00:	2202      	movs	r2, #2
 8005f02:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a25      	ldr	r2, [pc, #148]	@ (8005fa0 <HAL_I2S_Init+0x278>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d101      	bne.n	8005f12 <HAL_I2S_Init+0x1ea>
 8005f0e:	4b25      	ldr	r3, [pc, #148]	@ (8005fa4 <HAL_I2S_Init+0x27c>)
 8005f10:	e001      	b.n	8005f16 <HAL_I2S_Init+0x1ee>
 8005f12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f22:	d003      	beq.n	8005f2c <HAL_I2S_Init+0x204>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d103      	bne.n	8005f34 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005f2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	e001      	b.n	8005f38 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005f34:	2300      	movs	r3, #0
 8005f36:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005f42:	4313      	orrs	r3, r2
 8005f44:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005f56:	4313      	orrs	r3, r2
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	897b      	ldrh	r3, [r7, #10]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005f64:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a0d      	ldr	r2, [pc, #52]	@ (8005fa0 <HAL_I2S_Init+0x278>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d101      	bne.n	8005f74 <HAL_I2S_Init+0x24c>
 8005f70:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa4 <HAL_I2S_Init+0x27c>)
 8005f72:	e001      	b.n	8005f78 <HAL_I2S_Init+0x250>
 8005f74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f78:	897a      	ldrh	r2, [r7, #10]
 8005f7a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3720      	adds	r7, #32
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	0800609f 	.word	0x0800609f
 8005f98:	cccccccd 	.word	0xcccccccd
 8005f9c:	080061b5 	.word	0x080061b5
 8005fa0:	40003800 	.word	0x40003800
 8005fa4:	40003400 	.word	0x40003400

08005fa8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff0:	881a      	ldrh	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffc:	1c9a      	adds	r2, r3, #2
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006006:	b29b      	uxth	r3, r3
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006014:	b29b      	uxth	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10e      	bne.n	8006038 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006028:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff ffb8 	bl	8005fa8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006038:	bf00      	nop
 800603a:	3708      	adds	r7, #8
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006052:	b292      	uxth	r2, r2
 8006054:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605a:	1c9a      	adds	r2, r3, #2
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006064:	b29b      	uxth	r3, r3
 8006066:	3b01      	subs	r3, #1
 8006068:	b29a      	uxth	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006072:	b29b      	uxth	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10e      	bne.n	8006096 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006086:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7ff ff93 	bl	8005fbc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006096:	bf00      	nop
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b086      	sub	sp, #24
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d13a      	bne.n	8006130 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d109      	bne.n	80060d8 <I2S_IRQHandler+0x3a>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ce:	2b40      	cmp	r3, #64	@ 0x40
 80060d0:	d102      	bne.n	80060d8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff ffb4 	bl	8006040 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060de:	2b40      	cmp	r3, #64	@ 0x40
 80060e0:	d126      	bne.n	8006130 <I2S_IRQHandler+0x92>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d11f      	bne.n	8006130 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80060fe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006100:	2300      	movs	r3, #0
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	613b      	str	r3, [r7, #16]
 8006114:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006122:	f043 0202 	orr.w	r2, r3, #2
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7ff ff50 	bl	8005fd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b03      	cmp	r3, #3
 800613a:	d136      	bne.n	80061aa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b02      	cmp	r3, #2
 8006144:	d109      	bne.n	800615a <I2S_IRQHandler+0xbc>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006150:	2b80      	cmp	r3, #128	@ 0x80
 8006152:	d102      	bne.n	800615a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7ff ff45 	bl	8005fe4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f003 0308 	and.w	r3, r3, #8
 8006160:	2b08      	cmp	r3, #8
 8006162:	d122      	bne.n	80061aa <I2S_IRQHandler+0x10c>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b20      	cmp	r3, #32
 8006170:	d11b      	bne.n	80061aa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006180:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800619c:	f043 0204 	orr.w	r2, r3, #4
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7ff ff13 	bl	8005fd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061aa:	bf00      	nop
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
	...

080061b4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b088      	sub	sp, #32
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a92      	ldr	r2, [pc, #584]	@ (8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d101      	bne.n	80061d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80061ce:	4b92      	ldr	r3, [pc, #584]	@ (8006418 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80061d0:	e001      	b.n	80061d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80061d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a8b      	ldr	r2, [pc, #556]	@ (8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d101      	bne.n	80061f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80061ec:	4b8a      	ldr	r3, [pc, #552]	@ (8006418 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80061ee:	e001      	b.n	80061f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80061f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006200:	d004      	beq.n	800620c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	f040 8099 	bne.w	800633e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b02      	cmp	r3, #2
 8006214:	d107      	bne.n	8006226 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f925 	bl	8006470 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b01      	cmp	r3, #1
 800622e:	d107      	bne.n	8006240 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006236:	2b00      	cmp	r3, #0
 8006238:	d002      	beq.n	8006240 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f9c8 	bl	80065d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006246:	2b40      	cmp	r3, #64	@ 0x40
 8006248:	d13a      	bne.n	80062c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f003 0320 	and.w	r3, r3, #32
 8006250:	2b00      	cmp	r3, #0
 8006252:	d035      	beq.n	80062c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a6e      	ldr	r2, [pc, #440]	@ (8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d101      	bne.n	8006262 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800625e:	4b6e      	ldr	r3, [pc, #440]	@ (8006418 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006260:	e001      	b.n	8006266 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006262:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4969      	ldr	r1, [pc, #420]	@ (8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800626e:	428b      	cmp	r3, r1
 8006270:	d101      	bne.n	8006276 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006272:	4b69      	ldr	r3, [pc, #420]	@ (8006418 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006274:	e001      	b.n	800627a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006276:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800627a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800627e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800628e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006290:	2300      	movs	r3, #0
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b2:	f043 0202 	orr.w	r2, r3, #2
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7ff fe88 	bl	8005fd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	f003 0308 	and.w	r3, r3, #8
 80062c6:	2b08      	cmp	r3, #8
 80062c8:	f040 80c3 	bne.w	8006452 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f003 0320 	and.w	r3, r3, #32
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 80bd 	beq.w	8006452 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80062e6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a49      	ldr	r2, [pc, #292]	@ (8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d101      	bne.n	80062f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80062f2:	4b49      	ldr	r3, [pc, #292]	@ (8006418 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80062f4:	e001      	b.n	80062fa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80062f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4944      	ldr	r1, [pc, #272]	@ (8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006302:	428b      	cmp	r3, r1
 8006304:	d101      	bne.n	800630a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006306:	4b44      	ldr	r3, [pc, #272]	@ (8006418 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006308:	e001      	b.n	800630e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800630a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800630e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006312:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006314:	2300      	movs	r3, #0
 8006316:	60bb      	str	r3, [r7, #8]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	60bb      	str	r3, [r7, #8]
 8006320:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800632e:	f043 0204 	orr.w	r2, r3, #4
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7ff fe4a 	bl	8005fd0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800633c:	e089      	b.n	8006452 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b02      	cmp	r3, #2
 8006346:	d107      	bne.n	8006358 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f8be 	bl	80064d4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b01      	cmp	r3, #1
 8006360:	d107      	bne.n	8006372 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	d002      	beq.n	8006372 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f8fd 	bl	800656c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006378:	2b40      	cmp	r3, #64	@ 0x40
 800637a:	d12f      	bne.n	80063dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f003 0320 	and.w	r3, r3, #32
 8006382:	2b00      	cmp	r3, #0
 8006384:	d02a      	beq.n	80063dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006394:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a1e      	ldr	r2, [pc, #120]	@ (8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d101      	bne.n	80063a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80063a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006418 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063a2:	e001      	b.n	80063a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80063a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4919      	ldr	r1, [pc, #100]	@ (8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063b0:	428b      	cmp	r3, r1
 80063b2:	d101      	bne.n	80063b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80063b4:	4b18      	ldr	r3, [pc, #96]	@ (8006418 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063b6:	e001      	b.n	80063bc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80063b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80063c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ce:	f043 0202 	orr.w	r2, r3, #2
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7ff fdfa 	bl	8005fd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b08      	cmp	r3, #8
 80063e4:	d136      	bne.n	8006454 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f003 0320 	and.w	r3, r3, #32
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d031      	beq.n	8006454 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a07      	ldr	r2, [pc, #28]	@ (8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d101      	bne.n	80063fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80063fa:	4b07      	ldr	r3, [pc, #28]	@ (8006418 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063fc:	e001      	b.n	8006402 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80063fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4902      	ldr	r1, [pc, #8]	@ (8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800640a:	428b      	cmp	r3, r1
 800640c:	d106      	bne.n	800641c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800640e:	4b02      	ldr	r3, [pc, #8]	@ (8006418 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006410:	e006      	b.n	8006420 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006412:	bf00      	nop
 8006414:	40003800 	.word	0x40003800
 8006418:	40003400 	.word	0x40003400
 800641c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006420:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006424:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006434:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006442:	f043 0204 	orr.w	r2, r3, #4
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7ff fdc0 	bl	8005fd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006450:	e000      	b.n	8006454 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006452:	bf00      	nop
}
 8006454:	bf00      	nop
 8006456:	3720      	adds	r7, #32
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647c:	1c99      	adds	r1, r3, #2
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	6251      	str	r1, [r2, #36]	@ 0x24
 8006482:	881a      	ldrh	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800648e:	b29b      	uxth	r3, r3
 8006490:	3b01      	subs	r3, #1
 8006492:	b29a      	uxth	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800649c:	b29b      	uxth	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d113      	bne.n	80064ca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80064b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d106      	bne.n	80064ca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7ff ffc9 	bl	800645c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064ca:	bf00      	nop
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e0:	1c99      	adds	r1, r3, #2
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6251      	str	r1, [r2, #36]	@ 0x24
 80064e6:	8819      	ldrh	r1, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006564 <I2SEx_TxISR_I2SExt+0x90>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d101      	bne.n	80064f6 <I2SEx_TxISR_I2SExt+0x22>
 80064f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006568 <I2SEx_TxISR_I2SExt+0x94>)
 80064f4:	e001      	b.n	80064fa <I2SEx_TxISR_I2SExt+0x26>
 80064f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064fa:	460a      	mov	r2, r1
 80064fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006502:	b29b      	uxth	r3, r3
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d121      	bne.n	800655a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a12      	ldr	r2, [pc, #72]	@ (8006564 <I2SEx_TxISR_I2SExt+0x90>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d101      	bne.n	8006524 <I2SEx_TxISR_I2SExt+0x50>
 8006520:	4b11      	ldr	r3, [pc, #68]	@ (8006568 <I2SEx_TxISR_I2SExt+0x94>)
 8006522:	e001      	b.n	8006528 <I2SEx_TxISR_I2SExt+0x54>
 8006524:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	490d      	ldr	r1, [pc, #52]	@ (8006564 <I2SEx_TxISR_I2SExt+0x90>)
 8006530:	428b      	cmp	r3, r1
 8006532:	d101      	bne.n	8006538 <I2SEx_TxISR_I2SExt+0x64>
 8006534:	4b0c      	ldr	r3, [pc, #48]	@ (8006568 <I2SEx_TxISR_I2SExt+0x94>)
 8006536:	e001      	b.n	800653c <I2SEx_TxISR_I2SExt+0x68>
 8006538:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800653c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006540:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006546:	b29b      	uxth	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d106      	bne.n	800655a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7ff ff81 	bl	800645c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800655a:	bf00      	nop
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	40003800 	.word	0x40003800
 8006568:	40003400 	.word	0x40003400

0800656c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68d8      	ldr	r0, [r3, #12]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657e:	1c99      	adds	r1, r3, #2
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006584:	b282      	uxth	r2, r0
 8006586:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800658c:	b29b      	uxth	r3, r3
 800658e:	3b01      	subs	r3, #1
 8006590:	b29a      	uxth	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800659a:	b29b      	uxth	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	d113      	bne.n	80065c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80065ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d106      	bne.n	80065c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff ff4a 	bl	800645c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065c8:	bf00      	nop
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a20      	ldr	r2, [pc, #128]	@ (8006660 <I2SEx_RxISR_I2SExt+0x90>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d101      	bne.n	80065e6 <I2SEx_RxISR_I2SExt+0x16>
 80065e2:	4b20      	ldr	r3, [pc, #128]	@ (8006664 <I2SEx_RxISR_I2SExt+0x94>)
 80065e4:	e001      	b.n	80065ea <I2SEx_RxISR_I2SExt+0x1a>
 80065e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065ea:	68d8      	ldr	r0, [r3, #12]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f0:	1c99      	adds	r1, r3, #2
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80065f6:	b282      	uxth	r2, r0
 80065f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80065fe:	b29b      	uxth	r3, r3
 8006600:	3b01      	subs	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d121      	bne.n	8006656 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a12      	ldr	r2, [pc, #72]	@ (8006660 <I2SEx_RxISR_I2SExt+0x90>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d101      	bne.n	8006620 <I2SEx_RxISR_I2SExt+0x50>
 800661c:	4b11      	ldr	r3, [pc, #68]	@ (8006664 <I2SEx_RxISR_I2SExt+0x94>)
 800661e:	e001      	b.n	8006624 <I2SEx_RxISR_I2SExt+0x54>
 8006620:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	490d      	ldr	r1, [pc, #52]	@ (8006660 <I2SEx_RxISR_I2SExt+0x90>)
 800662c:	428b      	cmp	r3, r1
 800662e:	d101      	bne.n	8006634 <I2SEx_RxISR_I2SExt+0x64>
 8006630:	4b0c      	ldr	r3, [pc, #48]	@ (8006664 <I2SEx_RxISR_I2SExt+0x94>)
 8006632:	e001      	b.n	8006638 <I2SEx_RxISR_I2SExt+0x68>
 8006634:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006638:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800663c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006642:	b29b      	uxth	r3, r3
 8006644:	2b00      	cmp	r3, #0
 8006646:	d106      	bne.n	8006656 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff ff03 	bl	800645c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006656:	bf00      	nop
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	40003800 	.word	0x40003800
 8006664:	40003400 	.word	0x40003400

08006668 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e034      	b.n	80066e4 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8006682:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f245 5255 	movw	r2, #21845	@ 0x5555
 800668c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6852      	ldr	r2, [r2, #4]
 8006696:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	6892      	ldr	r2, [r2, #8]
 80066a0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80066a2:	f7fc fdd1 	bl	8003248 <HAL_GetTick>
 80066a6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80066a8:	e00f      	b.n	80066ca <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80066aa:	f7fc fdcd 	bl	8003248 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	2b31      	cmp	r3, #49	@ 0x31
 80066b6:	d908      	bls.n	80066ca <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e00c      	b.n	80066e4 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f003 0303 	and.w	r3, r3, #3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e8      	bne.n	80066aa <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80066e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80066fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e267      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d075      	beq.n	8006816 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800672a:	4b88      	ldr	r3, [pc, #544]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 030c 	and.w	r3, r3, #12
 8006732:	2b04      	cmp	r3, #4
 8006734:	d00c      	beq.n	8006750 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006736:	4b85      	ldr	r3, [pc, #532]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800673e:	2b08      	cmp	r3, #8
 8006740:	d112      	bne.n	8006768 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006742:	4b82      	ldr	r3, [pc, #520]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800674a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800674e:	d10b      	bne.n	8006768 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006750:	4b7e      	ldr	r3, [pc, #504]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d05b      	beq.n	8006814 <HAL_RCC_OscConfig+0x108>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d157      	bne.n	8006814 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e242      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006770:	d106      	bne.n	8006780 <HAL_RCC_OscConfig+0x74>
 8006772:	4b76      	ldr	r3, [pc, #472]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a75      	ldr	r2, [pc, #468]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	e01d      	b.n	80067bc <HAL_RCC_OscConfig+0xb0>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006788:	d10c      	bne.n	80067a4 <HAL_RCC_OscConfig+0x98>
 800678a:	4b70      	ldr	r3, [pc, #448]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a6f      	ldr	r2, [pc, #444]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	4b6d      	ldr	r3, [pc, #436]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a6c      	ldr	r2, [pc, #432]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 800679c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067a0:	6013      	str	r3, [r2, #0]
 80067a2:	e00b      	b.n	80067bc <HAL_RCC_OscConfig+0xb0>
 80067a4:	4b69      	ldr	r3, [pc, #420]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a68      	ldr	r2, [pc, #416]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 80067aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	4b66      	ldr	r3, [pc, #408]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a65      	ldr	r2, [pc, #404]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 80067b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d013      	beq.n	80067ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c4:	f7fc fd40 	bl	8003248 <HAL_GetTick>
 80067c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067ca:	e008      	b.n	80067de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067cc:	f7fc fd3c 	bl	8003248 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	2b64      	cmp	r3, #100	@ 0x64
 80067d8:	d901      	bls.n	80067de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e207      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067de:	4b5b      	ldr	r3, [pc, #364]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0f0      	beq.n	80067cc <HAL_RCC_OscConfig+0xc0>
 80067ea:	e014      	b.n	8006816 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ec:	f7fc fd2c 	bl	8003248 <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067f4:	f7fc fd28 	bl	8003248 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b64      	cmp	r3, #100	@ 0x64
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e1f3      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006806:	4b51      	ldr	r3, [pc, #324]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1f0      	bne.n	80067f4 <HAL_RCC_OscConfig+0xe8>
 8006812:	e000      	b.n	8006816 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d063      	beq.n	80068ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006822:	4b4a      	ldr	r3, [pc, #296]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 030c 	and.w	r3, r3, #12
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00b      	beq.n	8006846 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800682e:	4b47      	ldr	r3, [pc, #284]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006836:	2b08      	cmp	r3, #8
 8006838:	d11c      	bne.n	8006874 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800683a:	4b44      	ldr	r3, [pc, #272]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d116      	bne.n	8006874 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006846:	4b41      	ldr	r3, [pc, #260]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d005      	beq.n	800685e <HAL_RCC_OscConfig+0x152>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d001      	beq.n	800685e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e1c7      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800685e:	4b3b      	ldr	r3, [pc, #236]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	4937      	ldr	r1, [pc, #220]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 800686e:	4313      	orrs	r3, r2
 8006870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006872:	e03a      	b.n	80068ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d020      	beq.n	80068be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800687c:	4b34      	ldr	r3, [pc, #208]	@ (8006950 <HAL_RCC_OscConfig+0x244>)
 800687e:	2201      	movs	r2, #1
 8006880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006882:	f7fc fce1 	bl	8003248 <HAL_GetTick>
 8006886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006888:	e008      	b.n	800689c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800688a:	f7fc fcdd 	bl	8003248 <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d901      	bls.n	800689c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e1a8      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800689c:	4b2b      	ldr	r3, [pc, #172]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0f0      	beq.n	800688a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068a8:	4b28      	ldr	r3, [pc, #160]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	00db      	lsls	r3, r3, #3
 80068b6:	4925      	ldr	r1, [pc, #148]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	600b      	str	r3, [r1, #0]
 80068bc:	e015      	b.n	80068ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068be:	4b24      	ldr	r3, [pc, #144]	@ (8006950 <HAL_RCC_OscConfig+0x244>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c4:	f7fc fcc0 	bl	8003248 <HAL_GetTick>
 80068c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068ca:	e008      	b.n	80068de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068cc:	f7fc fcbc 	bl	8003248 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d901      	bls.n	80068de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e187      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068de:	4b1b      	ldr	r3, [pc, #108]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1f0      	bne.n	80068cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0308 	and.w	r3, r3, #8
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d036      	beq.n	8006964 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d016      	beq.n	800692c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068fe:	4b15      	ldr	r3, [pc, #84]	@ (8006954 <HAL_RCC_OscConfig+0x248>)
 8006900:	2201      	movs	r2, #1
 8006902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006904:	f7fc fca0 	bl	8003248 <HAL_GetTick>
 8006908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800690a:	e008      	b.n	800691e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800690c:	f7fc fc9c 	bl	8003248 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b02      	cmp	r3, #2
 8006918:	d901      	bls.n	800691e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e167      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800691e:	4b0b      	ldr	r3, [pc, #44]	@ (800694c <HAL_RCC_OscConfig+0x240>)
 8006920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d0f0      	beq.n	800690c <HAL_RCC_OscConfig+0x200>
 800692a:	e01b      	b.n	8006964 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800692c:	4b09      	ldr	r3, [pc, #36]	@ (8006954 <HAL_RCC_OscConfig+0x248>)
 800692e:	2200      	movs	r2, #0
 8006930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006932:	f7fc fc89 	bl	8003248 <HAL_GetTick>
 8006936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006938:	e00e      	b.n	8006958 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800693a:	f7fc fc85 	bl	8003248 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b02      	cmp	r3, #2
 8006946:	d907      	bls.n	8006958 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e150      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
 800694c:	40023800 	.word	0x40023800
 8006950:	42470000 	.word	0x42470000
 8006954:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006958:	4b88      	ldr	r3, [pc, #544]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 800695a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1ea      	bne.n	800693a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 8097 	beq.w	8006aa0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006972:	2300      	movs	r3, #0
 8006974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006976:	4b81      	ldr	r3, [pc, #516]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800697a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10f      	bne.n	80069a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006982:	2300      	movs	r3, #0
 8006984:	60bb      	str	r3, [r7, #8]
 8006986:	4b7d      	ldr	r3, [pc, #500]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800698a:	4a7c      	ldr	r2, [pc, #496]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 800698c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006990:	6413      	str	r3, [r2, #64]	@ 0x40
 8006992:	4b7a      	ldr	r3, [pc, #488]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800699a:	60bb      	str	r3, [r7, #8]
 800699c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800699e:	2301      	movs	r3, #1
 80069a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069a2:	4b77      	ldr	r3, [pc, #476]	@ (8006b80 <HAL_RCC_OscConfig+0x474>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d118      	bne.n	80069e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069ae:	4b74      	ldr	r3, [pc, #464]	@ (8006b80 <HAL_RCC_OscConfig+0x474>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a73      	ldr	r2, [pc, #460]	@ (8006b80 <HAL_RCC_OscConfig+0x474>)
 80069b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069ba:	f7fc fc45 	bl	8003248 <HAL_GetTick>
 80069be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069c0:	e008      	b.n	80069d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069c2:	f7fc fc41 	bl	8003248 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d901      	bls.n	80069d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e10c      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069d4:	4b6a      	ldr	r3, [pc, #424]	@ (8006b80 <HAL_RCC_OscConfig+0x474>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d0f0      	beq.n	80069c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d106      	bne.n	80069f6 <HAL_RCC_OscConfig+0x2ea>
 80069e8:	4b64      	ldr	r3, [pc, #400]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 80069ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ec:	4a63      	ldr	r2, [pc, #396]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 80069ee:	f043 0301 	orr.w	r3, r3, #1
 80069f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80069f4:	e01c      	b.n	8006a30 <HAL_RCC_OscConfig+0x324>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	2b05      	cmp	r3, #5
 80069fc:	d10c      	bne.n	8006a18 <HAL_RCC_OscConfig+0x30c>
 80069fe:	4b5f      	ldr	r3, [pc, #380]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a02:	4a5e      	ldr	r2, [pc, #376]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a04:	f043 0304 	orr.w	r3, r3, #4
 8006a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a0a:	4b5c      	ldr	r3, [pc, #368]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a0e:	4a5b      	ldr	r2, [pc, #364]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a10:	f043 0301 	orr.w	r3, r3, #1
 8006a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a16:	e00b      	b.n	8006a30 <HAL_RCC_OscConfig+0x324>
 8006a18:	4b58      	ldr	r3, [pc, #352]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a1c:	4a57      	ldr	r2, [pc, #348]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a1e:	f023 0301 	bic.w	r3, r3, #1
 8006a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a24:	4b55      	ldr	r3, [pc, #340]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a28:	4a54      	ldr	r2, [pc, #336]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a2a:	f023 0304 	bic.w	r3, r3, #4
 8006a2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d015      	beq.n	8006a64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a38:	f7fc fc06 	bl	8003248 <HAL_GetTick>
 8006a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a3e:	e00a      	b.n	8006a56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a40:	f7fc fc02 	bl	8003248 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e0cb      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a56:	4b49      	ldr	r3, [pc, #292]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d0ee      	beq.n	8006a40 <HAL_RCC_OscConfig+0x334>
 8006a62:	e014      	b.n	8006a8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a64:	f7fc fbf0 	bl	8003248 <HAL_GetTick>
 8006a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a6a:	e00a      	b.n	8006a82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a6c:	f7fc fbec 	bl	8003248 <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d901      	bls.n	8006a82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e0b5      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a82:	4b3e      	ldr	r3, [pc, #248]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a86:	f003 0302 	and.w	r3, r3, #2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1ee      	bne.n	8006a6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a8e:	7dfb      	ldrb	r3, [r7, #23]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d105      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a94:	4b39      	ldr	r3, [pc, #228]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a98:	4a38      	ldr	r2, [pc, #224]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 80a1 	beq.w	8006bec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006aaa:	4b34      	ldr	r3, [pc, #208]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 030c 	and.w	r3, r3, #12
 8006ab2:	2b08      	cmp	r3, #8
 8006ab4:	d05c      	beq.n	8006b70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d141      	bne.n	8006b42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006abe:	4b31      	ldr	r3, [pc, #196]	@ (8006b84 <HAL_RCC_OscConfig+0x478>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac4:	f7fc fbc0 	bl	8003248 <HAL_GetTick>
 8006ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aca:	e008      	b.n	8006ade <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006acc:	f7fc fbbc 	bl	8003248 <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d901      	bls.n	8006ade <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e087      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ade:	4b27      	ldr	r3, [pc, #156]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1f0      	bne.n	8006acc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	69da      	ldr	r2, [r3, #28]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	431a      	orrs	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af8:	019b      	lsls	r3, r3, #6
 8006afa:	431a      	orrs	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b00:	085b      	lsrs	r3, r3, #1
 8006b02:	3b01      	subs	r3, #1
 8006b04:	041b      	lsls	r3, r3, #16
 8006b06:	431a      	orrs	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0c:	061b      	lsls	r3, r3, #24
 8006b0e:	491b      	ldr	r1, [pc, #108]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b14:	4b1b      	ldr	r3, [pc, #108]	@ (8006b84 <HAL_RCC_OscConfig+0x478>)
 8006b16:	2201      	movs	r2, #1
 8006b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b1a:	f7fc fb95 	bl	8003248 <HAL_GetTick>
 8006b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b20:	e008      	b.n	8006b34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b22:	f7fc fb91 	bl	8003248 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d901      	bls.n	8006b34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e05c      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b34:	4b11      	ldr	r3, [pc, #68]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d0f0      	beq.n	8006b22 <HAL_RCC_OscConfig+0x416>
 8006b40:	e054      	b.n	8006bec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b42:	4b10      	ldr	r3, [pc, #64]	@ (8006b84 <HAL_RCC_OscConfig+0x478>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b48:	f7fc fb7e 	bl	8003248 <HAL_GetTick>
 8006b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b4e:	e008      	b.n	8006b62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b50:	f7fc fb7a 	bl	8003248 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e045      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b62:	4b06      	ldr	r3, [pc, #24]	@ (8006b7c <HAL_RCC_OscConfig+0x470>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1f0      	bne.n	8006b50 <HAL_RCC_OscConfig+0x444>
 8006b6e:	e03d      	b.n	8006bec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d107      	bne.n	8006b88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e038      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
 8006b7c:	40023800 	.word	0x40023800
 8006b80:	40007000 	.word	0x40007000
 8006b84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b88:	4b1b      	ldr	r3, [pc, #108]	@ (8006bf8 <HAL_RCC_OscConfig+0x4ec>)
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d028      	beq.n	8006be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d121      	bne.n	8006be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d11a      	bne.n	8006be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006bb8:	4013      	ands	r3, r2
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006bbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d111      	bne.n	8006be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bce:	085b      	lsrs	r3, r3, #1
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d107      	bne.n	8006be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d001      	beq.n	8006bec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e000      	b.n	8006bee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3718      	adds	r7, #24
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	40023800 	.word	0x40023800

08006bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e0cc      	b.n	8006daa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c10:	4b68      	ldr	r3, [pc, #416]	@ (8006db4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0307 	and.w	r3, r3, #7
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d90c      	bls.n	8006c38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c1e:	4b65      	ldr	r3, [pc, #404]	@ (8006db4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	b2d2      	uxtb	r2, r2
 8006c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c26:	4b63      	ldr	r3, [pc, #396]	@ (8006db4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0307 	and.w	r3, r3, #7
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d001      	beq.n	8006c38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e0b8      	b.n	8006daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d020      	beq.n	8006c86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0304 	and.w	r3, r3, #4
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d005      	beq.n	8006c5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c50:	4b59      	ldr	r3, [pc, #356]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	4a58      	ldr	r2, [pc, #352]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006c5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0308 	and.w	r3, r3, #8
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d005      	beq.n	8006c74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c68:	4b53      	ldr	r3, [pc, #332]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	4a52      	ldr	r2, [pc, #328]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006c72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c74:	4b50      	ldr	r3, [pc, #320]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	494d      	ldr	r1, [pc, #308]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d044      	beq.n	8006d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d107      	bne.n	8006caa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c9a:	4b47      	ldr	r3, [pc, #284]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d119      	bne.n	8006cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e07f      	b.n	8006daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d003      	beq.n	8006cba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d107      	bne.n	8006cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cba:	4b3f      	ldr	r3, [pc, #252]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d109      	bne.n	8006cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e06f      	b.n	8006daa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cca:	4b3b      	ldr	r3, [pc, #236]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e067      	b.n	8006daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cda:	4b37      	ldr	r3, [pc, #220]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f023 0203 	bic.w	r2, r3, #3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	4934      	ldr	r1, [pc, #208]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cec:	f7fc faac 	bl	8003248 <HAL_GetTick>
 8006cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cf2:	e00a      	b.n	8006d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cf4:	f7fc faa8 	bl	8003248 <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e04f      	b.n	8006daa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f003 020c 	and.w	r2, r3, #12
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d1eb      	bne.n	8006cf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d1c:	4b25      	ldr	r3, [pc, #148]	@ (8006db4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d20c      	bcs.n	8006d44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d2a:	4b22      	ldr	r3, [pc, #136]	@ (8006db4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d32:	4b20      	ldr	r3, [pc, #128]	@ (8006db4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d001      	beq.n	8006d44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e032      	b.n	8006daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d008      	beq.n	8006d62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d50:	4b19      	ldr	r3, [pc, #100]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	4916      	ldr	r1, [pc, #88]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0308 	and.w	r3, r3, #8
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d009      	beq.n	8006d82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d6e:	4b12      	ldr	r3, [pc, #72]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	00db      	lsls	r3, r3, #3
 8006d7c:	490e      	ldr	r1, [pc, #56]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d82:	f000 f821 	bl	8006dc8 <HAL_RCC_GetSysClockFreq>
 8006d86:	4602      	mov	r2, r0
 8006d88:	4b0b      	ldr	r3, [pc, #44]	@ (8006db8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	091b      	lsrs	r3, r3, #4
 8006d8e:	f003 030f 	and.w	r3, r3, #15
 8006d92:	490a      	ldr	r1, [pc, #40]	@ (8006dbc <HAL_RCC_ClockConfig+0x1c0>)
 8006d94:	5ccb      	ldrb	r3, [r1, r3]
 8006d96:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9a:	4a09      	ldr	r2, [pc, #36]	@ (8006dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006d9e:	4b09      	ldr	r3, [pc, #36]	@ (8006dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fc fa0c 	bl	80031c0 <HAL_InitTick>

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	40023c00 	.word	0x40023c00
 8006db8:	40023800 	.word	0x40023800
 8006dbc:	0800e65c 	.word	0x0800e65c
 8006dc0:	20000004 	.word	0x20000004
 8006dc4:	20000008 	.word	0x20000008

08006dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dcc:	b094      	sub	sp, #80	@ 0x50
 8006dce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006de0:	4b79      	ldr	r3, [pc, #484]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f003 030c 	and.w	r3, r3, #12
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d00d      	beq.n	8006e08 <HAL_RCC_GetSysClockFreq+0x40>
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	f200 80e1 	bhi.w	8006fb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <HAL_RCC_GetSysClockFreq+0x34>
 8006df6:	2b04      	cmp	r3, #4
 8006df8:	d003      	beq.n	8006e02 <HAL_RCC_GetSysClockFreq+0x3a>
 8006dfa:	e0db      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006dfc:	4b73      	ldr	r3, [pc, #460]	@ (8006fcc <HAL_RCC_GetSysClockFreq+0x204>)
 8006dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e00:	e0db      	b.n	8006fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e02:	4b73      	ldr	r3, [pc, #460]	@ (8006fd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006e04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e06:	e0d8      	b.n	8006fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e08:	4b6f      	ldr	r3, [pc, #444]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e10:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e12:	4b6d      	ldr	r3, [pc, #436]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d063      	beq.n	8006ee6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	099b      	lsrs	r3, r3, #6
 8006e24:	2200      	movs	r2, #0
 8006e26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e30:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e32:	2300      	movs	r3, #0
 8006e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006e3a:	4622      	mov	r2, r4
 8006e3c:	462b      	mov	r3, r5
 8006e3e:	f04f 0000 	mov.w	r0, #0
 8006e42:	f04f 0100 	mov.w	r1, #0
 8006e46:	0159      	lsls	r1, r3, #5
 8006e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e4c:	0150      	lsls	r0, r2, #5
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	4621      	mov	r1, r4
 8006e54:	1a51      	subs	r1, r2, r1
 8006e56:	6139      	str	r1, [r7, #16]
 8006e58:	4629      	mov	r1, r5
 8006e5a:	eb63 0301 	sbc.w	r3, r3, r1
 8006e5e:	617b      	str	r3, [r7, #20]
 8006e60:	f04f 0200 	mov.w	r2, #0
 8006e64:	f04f 0300 	mov.w	r3, #0
 8006e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e6c:	4659      	mov	r1, fp
 8006e6e:	018b      	lsls	r3, r1, #6
 8006e70:	4651      	mov	r1, sl
 8006e72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e76:	4651      	mov	r1, sl
 8006e78:	018a      	lsls	r2, r1, #6
 8006e7a:	4651      	mov	r1, sl
 8006e7c:	ebb2 0801 	subs.w	r8, r2, r1
 8006e80:	4659      	mov	r1, fp
 8006e82:	eb63 0901 	sbc.w	r9, r3, r1
 8006e86:	f04f 0200 	mov.w	r2, #0
 8006e8a:	f04f 0300 	mov.w	r3, #0
 8006e8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e9a:	4690      	mov	r8, r2
 8006e9c:	4699      	mov	r9, r3
 8006e9e:	4623      	mov	r3, r4
 8006ea0:	eb18 0303 	adds.w	r3, r8, r3
 8006ea4:	60bb      	str	r3, [r7, #8]
 8006ea6:	462b      	mov	r3, r5
 8006ea8:	eb49 0303 	adc.w	r3, r9, r3
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	f04f 0200 	mov.w	r2, #0
 8006eb2:	f04f 0300 	mov.w	r3, #0
 8006eb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006eba:	4629      	mov	r1, r5
 8006ebc:	024b      	lsls	r3, r1, #9
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	024a      	lsls	r2, r1, #9
 8006ec8:	4610      	mov	r0, r2
 8006eca:	4619      	mov	r1, r3
 8006ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ece:	2200      	movs	r2, #0
 8006ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ed4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ed8:	f7f9 feb6 	bl	8000c48 <__aeabi_uldivmod>
 8006edc:	4602      	mov	r2, r0
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ee4:	e058      	b.n	8006f98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ee6:	4b38      	ldr	r3, [pc, #224]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	099b      	lsrs	r3, r3, #6
 8006eec:	2200      	movs	r2, #0
 8006eee:	4618      	mov	r0, r3
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ef6:	623b      	str	r3, [r7, #32]
 8006ef8:	2300      	movs	r3, #0
 8006efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006efc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f00:	4642      	mov	r2, r8
 8006f02:	464b      	mov	r3, r9
 8006f04:	f04f 0000 	mov.w	r0, #0
 8006f08:	f04f 0100 	mov.w	r1, #0
 8006f0c:	0159      	lsls	r1, r3, #5
 8006f0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f12:	0150      	lsls	r0, r2, #5
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	4641      	mov	r1, r8
 8006f1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f1e:	4649      	mov	r1, r9
 8006f20:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f24:	f04f 0200 	mov.w	r2, #0
 8006f28:	f04f 0300 	mov.w	r3, #0
 8006f2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006f30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006f34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006f38:	ebb2 040a 	subs.w	r4, r2, sl
 8006f3c:	eb63 050b 	sbc.w	r5, r3, fp
 8006f40:	f04f 0200 	mov.w	r2, #0
 8006f44:	f04f 0300 	mov.w	r3, #0
 8006f48:	00eb      	lsls	r3, r5, #3
 8006f4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f4e:	00e2      	lsls	r2, r4, #3
 8006f50:	4614      	mov	r4, r2
 8006f52:	461d      	mov	r5, r3
 8006f54:	4643      	mov	r3, r8
 8006f56:	18e3      	adds	r3, r4, r3
 8006f58:	603b      	str	r3, [r7, #0]
 8006f5a:	464b      	mov	r3, r9
 8006f5c:	eb45 0303 	adc.w	r3, r5, r3
 8006f60:	607b      	str	r3, [r7, #4]
 8006f62:	f04f 0200 	mov.w	r2, #0
 8006f66:	f04f 0300 	mov.w	r3, #0
 8006f6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f6e:	4629      	mov	r1, r5
 8006f70:	028b      	lsls	r3, r1, #10
 8006f72:	4621      	mov	r1, r4
 8006f74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f78:	4621      	mov	r1, r4
 8006f7a:	028a      	lsls	r2, r1, #10
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f82:	2200      	movs	r2, #0
 8006f84:	61bb      	str	r3, [r7, #24]
 8006f86:	61fa      	str	r2, [r7, #28]
 8006f88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f8c:	f7f9 fe5c 	bl	8000c48 <__aeabi_uldivmod>
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	4613      	mov	r3, r2
 8006f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006f98:	4b0b      	ldr	r3, [pc, #44]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	0c1b      	lsrs	r3, r3, #16
 8006f9e:	f003 0303 	and.w	r3, r3, #3
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	005b      	lsls	r3, r3, #1
 8006fa6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006fa8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006fb2:	e002      	b.n	8006fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fb4:	4b05      	ldr	r3, [pc, #20]	@ (8006fcc <HAL_RCC_GetSysClockFreq+0x204>)
 8006fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3750      	adds	r7, #80	@ 0x50
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fc6:	bf00      	nop
 8006fc8:	40023800 	.word	0x40023800
 8006fcc:	00f42400 	.word	0x00f42400
 8006fd0:	007a1200 	.word	0x007a1200

08006fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fd8:	4b03      	ldr	r3, [pc, #12]	@ (8006fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fda:	681b      	ldr	r3, [r3, #0]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	20000004 	.word	0x20000004

08006fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ff0:	f7ff fff0 	bl	8006fd4 <HAL_RCC_GetHCLKFreq>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	4b05      	ldr	r3, [pc, #20]	@ (800700c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	0a9b      	lsrs	r3, r3, #10
 8006ffc:	f003 0307 	and.w	r3, r3, #7
 8007000:	4903      	ldr	r1, [pc, #12]	@ (8007010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007002:	5ccb      	ldrb	r3, [r1, r3]
 8007004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007008:	4618      	mov	r0, r3
 800700a:	bd80      	pop	{r7, pc}
 800700c:	40023800 	.word	0x40023800
 8007010:	0800e66c 	.word	0x0800e66c

08007014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007018:	f7ff ffdc 	bl	8006fd4 <HAL_RCC_GetHCLKFreq>
 800701c:	4602      	mov	r2, r0
 800701e:	4b05      	ldr	r3, [pc, #20]	@ (8007034 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	0b5b      	lsrs	r3, r3, #13
 8007024:	f003 0307 	and.w	r3, r3, #7
 8007028:	4903      	ldr	r1, [pc, #12]	@ (8007038 <HAL_RCC_GetPCLK2Freq+0x24>)
 800702a:	5ccb      	ldrb	r3, [r1, r3]
 800702c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007030:	4618      	mov	r0, r3
 8007032:	bd80      	pop	{r7, pc}
 8007034:	40023800 	.word	0x40023800
 8007038:	0800e66c 	.word	0x0800e66c

0800703c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007048:	2300      	movs	r3, #0
 800704a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b00      	cmp	r3, #0
 8007056:	d105      	bne.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007060:	2b00      	cmp	r3, #0
 8007062:	d035      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007064:	4b62      	ldr	r3, [pc, #392]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007066:	2200      	movs	r2, #0
 8007068:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800706a:	f7fc f8ed 	bl	8003248 <HAL_GetTick>
 800706e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007070:	e008      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007072:	f7fc f8e9 	bl	8003248 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	2b02      	cmp	r3, #2
 800707e:	d901      	bls.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e0b0      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007084:	4b5b      	ldr	r3, [pc, #364]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1f0      	bne.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	019a      	lsls	r2, r3, #6
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	071b      	lsls	r3, r3, #28
 800709c:	4955      	ldr	r1, [pc, #340]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80070a4:	4b52      	ldr	r3, [pc, #328]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80070a6:	2201      	movs	r2, #1
 80070a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070aa:	f7fc f8cd 	bl	8003248 <HAL_GetTick>
 80070ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070b0:	e008      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80070b2:	f7fc f8c9 	bl	8003248 <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d901      	bls.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e090      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070c4:	4b4b      	ldr	r3, [pc, #300]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0f0      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 8083 	beq.w	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	4b44      	ldr	r3, [pc, #272]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e6:	4a43      	ldr	r2, [pc, #268]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80070ee:	4b41      	ldr	r3, [pc, #260]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80070f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070f6:	60fb      	str	r3, [r7, #12]
 80070f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80070fa:	4b3f      	ldr	r3, [pc, #252]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a3e      	ldr	r2, [pc, #248]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007104:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007106:	f7fc f89f 	bl	8003248 <HAL_GetTick>
 800710a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800710c:	e008      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800710e:	f7fc f89b 	bl	8003248 <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	2b02      	cmp	r3, #2
 800711a:	d901      	bls.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e062      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007120:	4b35      	ldr	r3, [pc, #212]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007128:	2b00      	cmp	r3, #0
 800712a:	d0f0      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800712c:	4b31      	ldr	r3, [pc, #196]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800712e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007130:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007134:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d02f      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	429a      	cmp	r2, r3
 8007148:	d028      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800714a:	4b2a      	ldr	r3, [pc, #168]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800714c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800714e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007152:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007154:	4b29      	ldr	r3, [pc, #164]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007156:	2201      	movs	r2, #1
 8007158:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800715a:	4b28      	ldr	r3, [pc, #160]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007160:	4a24      	ldr	r2, [pc, #144]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007166:	4b23      	ldr	r3, [pc, #140]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	2b01      	cmp	r3, #1
 8007170:	d114      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007172:	f7fc f869 	bl	8003248 <HAL_GetTick>
 8007176:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007178:	e00a      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800717a:	f7fc f865 	bl	8003248 <HAL_GetTick>
 800717e:	4602      	mov	r2, r0
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007188:	4293      	cmp	r3, r2
 800718a:	d901      	bls.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e02a      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007190:	4b18      	ldr	r3, [pc, #96]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0ee      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071a8:	d10d      	bne.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80071aa:	4b12      	ldr	r3, [pc, #72]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80071ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071be:	490d      	ldr	r1, [pc, #52]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	608b      	str	r3, [r1, #8]
 80071c4:	e005      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80071c6:	4b0b      	ldr	r3, [pc, #44]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	4a0a      	ldr	r2, [pc, #40]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071cc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80071d0:	6093      	str	r3, [r2, #8]
 80071d2:	4b08      	ldr	r3, [pc, #32]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071d4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071de:	4905      	ldr	r1, [pc, #20]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	42470068 	.word	0x42470068
 80071f4:	40023800 	.word	0x40023800
 80071f8:	40007000 	.word	0x40007000
 80071fc:	42470e40 	.word	0x42470e40

08007200 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d13f      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800721e:	4b24      	ldr	r3, [pc, #144]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007226:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d006      	beq.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007234:	d12f      	bne.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007236:	4b1f      	ldr	r3, [pc, #124]	@ (80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007238:	617b      	str	r3, [r7, #20]
          break;
 800723a:	e02f      	b.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800723c:	4b1c      	ldr	r3, [pc, #112]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007244:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007248:	d108      	bne.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800724a:	4b19      	ldr	r3, [pc, #100]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007252:	4a19      	ldr	r2, [pc, #100]	@ (80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007254:	fbb2 f3f3 	udiv	r3, r2, r3
 8007258:	613b      	str	r3, [r7, #16]
 800725a:	e007      	b.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800725c:	4b14      	ldr	r3, [pc, #80]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007264:	4a15      	ldr	r2, [pc, #84]	@ (80072bc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007266:	fbb2 f3f3 	udiv	r3, r2, r3
 800726a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800726c:	4b10      	ldr	r3, [pc, #64]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800726e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007272:	099b      	lsrs	r3, r3, #6
 8007274:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	fb02 f303 	mul.w	r3, r2, r3
 800727e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007280:	4b0b      	ldr	r3, [pc, #44]	@ (80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007282:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007286:	0f1b      	lsrs	r3, r3, #28
 8007288:	f003 0307 	and.w	r3, r3, #7
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007292:	617b      	str	r3, [r7, #20]
          break;
 8007294:	e002      	b.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8007296:	2300      	movs	r3, #0
 8007298:	617b      	str	r3, [r7, #20]
          break;
 800729a:	bf00      	nop
        }
      }
      break;
 800729c:	e000      	b.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800729e:	bf00      	nop
    }
  }
  return frequency;
 80072a0:	697b      	ldr	r3, [r7, #20]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	40023800 	.word	0x40023800
 80072b4:	00bb8000 	.word	0x00bb8000
 80072b8:	007a1200 	.word	0x007a1200
 80072bc:	00f42400 	.word	0x00f42400

080072c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d101      	bne.n	80072d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e07b      	b.n	80073ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d108      	bne.n	80072ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072e2:	d009      	beq.n	80072f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	61da      	str	r2, [r3, #28]
 80072ea:	e005      	b.n	80072f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d106      	bne.n	8007318 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7fb fd0e 	bl	8002d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800732e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007340:	431a      	orrs	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800734a:	431a      	orrs	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	f003 0302 	and.w	r3, r3, #2
 8007354:	431a      	orrs	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	431a      	orrs	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007368:	431a      	orrs	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800737c:	ea42 0103 	orr.w	r1, r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007384:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	430a      	orrs	r2, r1
 800738e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	0c1b      	lsrs	r3, r3, #16
 8007396:	f003 0104 	and.w	r1, r3, #4
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739e:	f003 0210 	and.w	r2, r3, #16
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	430a      	orrs	r2, r1
 80073a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	69da      	ldr	r2, [r3, #28]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b082      	sub	sp, #8
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e042      	b.n	800746a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d106      	bne.n	80073fe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7fb fce3 	bl	8002dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2224      	movs	r2, #36	@ 0x24
 8007402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68da      	ldr	r2, [r3, #12]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007414:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fa0a 	bl	8007830 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	691a      	ldr	r2, [r3, #16]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800742a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	695a      	ldr	r2, [r3, #20]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800743a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68da      	ldr	r2, [r3, #12]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800744a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2220      	movs	r2, #32
 8007456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2220      	movs	r2, #32
 800745e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b08a      	sub	sp, #40	@ 0x28
 8007476:	af02      	add	r7, sp, #8
 8007478:	60f8      	str	r0, [r7, #12]
 800747a:	60b9      	str	r1, [r7, #8]
 800747c:	603b      	str	r3, [r7, #0]
 800747e:	4613      	mov	r3, r2
 8007480:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b20      	cmp	r3, #32
 8007490:	d175      	bne.n	800757e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <HAL_UART_Transmit+0x2c>
 8007498:	88fb      	ldrh	r3, [r7, #6]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e06e      	b.n	8007580 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2221      	movs	r2, #33	@ 0x21
 80074ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074b0:	f7fb feca 	bl	8003248 <HAL_GetTick>
 80074b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	88fa      	ldrh	r2, [r7, #6]
 80074ba:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	88fa      	ldrh	r2, [r7, #6]
 80074c0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074ca:	d108      	bne.n	80074de <HAL_UART_Transmit+0x6c>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d104      	bne.n	80074de <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80074d4:	2300      	movs	r3, #0
 80074d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	61bb      	str	r3, [r7, #24]
 80074dc:	e003      	b.n	80074e6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074e6:	e02e      	b.n	8007546 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	2200      	movs	r2, #0
 80074f0:	2180      	movs	r1, #128	@ 0x80
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 f8df 	bl	80076b6 <UART_WaitOnFlagUntilTimeout>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d005      	beq.n	800750a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2220      	movs	r2, #32
 8007502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e03a      	b.n	8007580 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10b      	bne.n	8007528 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	461a      	mov	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800751e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	3302      	adds	r3, #2
 8007524:	61bb      	str	r3, [r7, #24]
 8007526:	e007      	b.n	8007538 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	781a      	ldrb	r2, [r3, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	3301      	adds	r3, #1
 8007536:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800753c:	b29b      	uxth	r3, r3
 800753e:	3b01      	subs	r3, #1
 8007540:	b29a      	uxth	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800754a:	b29b      	uxth	r3, r3
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1cb      	bne.n	80074e8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	2200      	movs	r2, #0
 8007558:	2140      	movs	r1, #64	@ 0x40
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f000 f8ab 	bl	80076b6 <UART_WaitOnFlagUntilTimeout>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d005      	beq.n	8007572 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2220      	movs	r2, #32
 800756a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e006      	b.n	8007580 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2220      	movs	r2, #32
 8007576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800757a:	2300      	movs	r3, #0
 800757c:	e000      	b.n	8007580 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800757e:	2302      	movs	r3, #2
  }
}
 8007580:	4618      	mov	r0, r3
 8007582:	3720      	adds	r7, #32
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08a      	sub	sp, #40	@ 0x28
 800758c:	af02      	add	r7, sp, #8
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	603b      	str	r3, [r7, #0]
 8007594:	4613      	mov	r3, r2
 8007596:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b20      	cmp	r3, #32
 80075a6:	f040 8081 	bne.w	80076ac <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d002      	beq.n	80075b6 <HAL_UART_Receive+0x2e>
 80075b0:	88fb      	ldrh	r3, [r7, #6]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e079      	b.n	80076ae <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2222      	movs	r2, #34	@ 0x22
 80075c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075ce:	f7fb fe3b 	bl	8003248 <HAL_GetTick>
 80075d2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	88fa      	ldrh	r2, [r7, #6]
 80075d8:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	88fa      	ldrh	r2, [r7, #6]
 80075de:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075e8:	d108      	bne.n	80075fc <HAL_UART_Receive+0x74>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d104      	bne.n	80075fc <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80075f2:	2300      	movs	r3, #0
 80075f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	61bb      	str	r3, [r7, #24]
 80075fa:	e003      	b.n	8007604 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007600:	2300      	movs	r3, #0
 8007602:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007604:	e047      	b.n	8007696 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2200      	movs	r2, #0
 800760e:	2120      	movs	r1, #32
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f000 f850 	bl	80076b6 <UART_WaitOnFlagUntilTimeout>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d005      	beq.n	8007628 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2220      	movs	r2, #32
 8007620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e042      	b.n	80076ae <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10c      	bne.n	8007648 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	b29b      	uxth	r3, r3
 8007636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800763a:	b29a      	uxth	r2, r3
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	3302      	adds	r3, #2
 8007644:	61bb      	str	r3, [r7, #24]
 8007646:	e01f      	b.n	8007688 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007650:	d007      	beq.n	8007662 <HAL_UART_Receive+0xda>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10a      	bne.n	8007670 <HAL_UART_Receive+0xe8>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d106      	bne.n	8007670 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	b2da      	uxtb	r2, r3
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	701a      	strb	r2, [r3, #0]
 800766e:	e008      	b.n	8007682 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	b2db      	uxtb	r3, r3
 8007678:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800767c:	b2da      	uxtb	r2, r3
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	3301      	adds	r3, #1
 8007686:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800768c:	b29b      	uxth	r3, r3
 800768e:	3b01      	subs	r3, #1
 8007690:	b29a      	uxth	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800769a:	b29b      	uxth	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1b2      	bne.n	8007606 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2220      	movs	r2, #32
 80076a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	e000      	b.n	80076ae <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80076ac:	2302      	movs	r3, #2
  }
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3720      	adds	r7, #32
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b086      	sub	sp, #24
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	60f8      	str	r0, [r7, #12]
 80076be:	60b9      	str	r1, [r7, #8]
 80076c0:	603b      	str	r3, [r7, #0]
 80076c2:	4613      	mov	r3, r2
 80076c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076c6:	e03b      	b.n	8007740 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ce:	d037      	beq.n	8007740 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076d0:	f7fb fdba 	bl	8003248 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	6a3a      	ldr	r2, [r7, #32]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d302      	bcc.n	80076e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e03a      	b.n	8007760 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f003 0304 	and.w	r3, r3, #4
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d023      	beq.n	8007740 <UART_WaitOnFlagUntilTimeout+0x8a>
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2b80      	cmp	r3, #128	@ 0x80
 80076fc:	d020      	beq.n	8007740 <UART_WaitOnFlagUntilTimeout+0x8a>
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	2b40      	cmp	r3, #64	@ 0x40
 8007702:	d01d      	beq.n	8007740 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0308 	and.w	r3, r3, #8
 800770e:	2b08      	cmp	r3, #8
 8007710:	d116      	bne.n	8007740 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007712:	2300      	movs	r3, #0
 8007714:	617b      	str	r3, [r7, #20]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	617b      	str	r3, [r7, #20]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	617b      	str	r3, [r7, #20]
 8007726:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 f81d 	bl	8007768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2208      	movs	r2, #8
 8007732:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e00f      	b.n	8007760 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	4013      	ands	r3, r2
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	429a      	cmp	r2, r3
 800774e:	bf0c      	ite	eq
 8007750:	2301      	moveq	r3, #1
 8007752:	2300      	movne	r3, #0
 8007754:	b2db      	uxtb	r3, r3
 8007756:	461a      	mov	r2, r3
 8007758:	79fb      	ldrb	r3, [r7, #7]
 800775a:	429a      	cmp	r2, r3
 800775c:	d0b4      	beq.n	80076c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007768:	b480      	push	{r7}
 800776a:	b095      	sub	sp, #84	@ 0x54
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	330c      	adds	r3, #12
 8007776:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800777a:	e853 3f00 	ldrex	r3, [r3]
 800777e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007782:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007786:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	330c      	adds	r3, #12
 800778e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007790:	643a      	str	r2, [r7, #64]	@ 0x40
 8007792:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007794:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007796:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007798:	e841 2300 	strex	r3, r2, [r1]
 800779c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800779e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1e5      	bne.n	8007770 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3314      	adds	r3, #20
 80077aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ac:	6a3b      	ldr	r3, [r7, #32]
 80077ae:	e853 3f00 	ldrex	r3, [r3]
 80077b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	f023 0301 	bic.w	r3, r3, #1
 80077ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	3314      	adds	r3, #20
 80077c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077cc:	e841 2300 	strex	r3, r2, [r1]
 80077d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e5      	bne.n	80077a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d119      	bne.n	8007814 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	330c      	adds	r3, #12
 80077e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	e853 3f00 	ldrex	r3, [r3]
 80077ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f023 0310 	bic.w	r3, r3, #16
 80077f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	330c      	adds	r3, #12
 80077fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007800:	61ba      	str	r2, [r7, #24]
 8007802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007804:	6979      	ldr	r1, [r7, #20]
 8007806:	69ba      	ldr	r2, [r7, #24]
 8007808:	e841 2300 	strex	r3, r2, [r1]
 800780c:	613b      	str	r3, [r7, #16]
   return(result);
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1e5      	bne.n	80077e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2220      	movs	r2, #32
 8007818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007822:	bf00      	nop
 8007824:	3754      	adds	r7, #84	@ 0x54
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
	...

08007830 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007834:	b0c0      	sub	sp, #256	@ 0x100
 8007836:	af00      	add	r7, sp, #0
 8007838:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800783c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800784c:	68d9      	ldr	r1, [r3, #12]
 800784e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	ea40 0301 	orr.w	r3, r0, r1
 8007858:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800785a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800785e:	689a      	ldr	r2, [r3, #8]
 8007860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	431a      	orrs	r2, r3
 8007868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	431a      	orrs	r2, r3
 8007870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	4313      	orrs	r3, r2
 8007878:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800787c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007888:	f021 010c 	bic.w	r1, r1, #12
 800788c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007896:	430b      	orrs	r3, r1
 8007898:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800789a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80078a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078aa:	6999      	ldr	r1, [r3, #24]
 80078ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	ea40 0301 	orr.w	r3, r0, r1
 80078b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	4b8f      	ldr	r3, [pc, #572]	@ (8007afc <UART_SetConfig+0x2cc>)
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d005      	beq.n	80078d0 <UART_SetConfig+0xa0>
 80078c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	4b8d      	ldr	r3, [pc, #564]	@ (8007b00 <UART_SetConfig+0x2d0>)
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d104      	bne.n	80078da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078d0:	f7ff fba0 	bl	8007014 <HAL_RCC_GetPCLK2Freq>
 80078d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80078d8:	e003      	b.n	80078e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078da:	f7ff fb87 	bl	8006fec <HAL_RCC_GetPCLK1Freq>
 80078de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078ec:	f040 810c 	bne.w	8007b08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078f4:	2200      	movs	r2, #0
 80078f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80078fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007902:	4622      	mov	r2, r4
 8007904:	462b      	mov	r3, r5
 8007906:	1891      	adds	r1, r2, r2
 8007908:	65b9      	str	r1, [r7, #88]	@ 0x58
 800790a:	415b      	adcs	r3, r3
 800790c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800790e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007912:	4621      	mov	r1, r4
 8007914:	eb12 0801 	adds.w	r8, r2, r1
 8007918:	4629      	mov	r1, r5
 800791a:	eb43 0901 	adc.w	r9, r3, r1
 800791e:	f04f 0200 	mov.w	r2, #0
 8007922:	f04f 0300 	mov.w	r3, #0
 8007926:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800792a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800792e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007932:	4690      	mov	r8, r2
 8007934:	4699      	mov	r9, r3
 8007936:	4623      	mov	r3, r4
 8007938:	eb18 0303 	adds.w	r3, r8, r3
 800793c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007940:	462b      	mov	r3, r5
 8007942:	eb49 0303 	adc.w	r3, r9, r3
 8007946:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800794a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007956:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800795a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800795e:	460b      	mov	r3, r1
 8007960:	18db      	adds	r3, r3, r3
 8007962:	653b      	str	r3, [r7, #80]	@ 0x50
 8007964:	4613      	mov	r3, r2
 8007966:	eb42 0303 	adc.w	r3, r2, r3
 800796a:	657b      	str	r3, [r7, #84]	@ 0x54
 800796c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007970:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007974:	f7f9 f968 	bl	8000c48 <__aeabi_uldivmod>
 8007978:	4602      	mov	r2, r0
 800797a:	460b      	mov	r3, r1
 800797c:	4b61      	ldr	r3, [pc, #388]	@ (8007b04 <UART_SetConfig+0x2d4>)
 800797e:	fba3 2302 	umull	r2, r3, r3, r2
 8007982:	095b      	lsrs	r3, r3, #5
 8007984:	011c      	lsls	r4, r3, #4
 8007986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800798a:	2200      	movs	r2, #0
 800798c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007990:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007994:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007998:	4642      	mov	r2, r8
 800799a:	464b      	mov	r3, r9
 800799c:	1891      	adds	r1, r2, r2
 800799e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80079a0:	415b      	adcs	r3, r3
 80079a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80079a8:	4641      	mov	r1, r8
 80079aa:	eb12 0a01 	adds.w	sl, r2, r1
 80079ae:	4649      	mov	r1, r9
 80079b0:	eb43 0b01 	adc.w	fp, r3, r1
 80079b4:	f04f 0200 	mov.w	r2, #0
 80079b8:	f04f 0300 	mov.w	r3, #0
 80079bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079c8:	4692      	mov	sl, r2
 80079ca:	469b      	mov	fp, r3
 80079cc:	4643      	mov	r3, r8
 80079ce:	eb1a 0303 	adds.w	r3, sl, r3
 80079d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079d6:	464b      	mov	r3, r9
 80079d8:	eb4b 0303 	adc.w	r3, fp, r3
 80079dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80079e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80079f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80079f4:	460b      	mov	r3, r1
 80079f6:	18db      	adds	r3, r3, r3
 80079f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80079fa:	4613      	mov	r3, r2
 80079fc:	eb42 0303 	adc.w	r3, r2, r3
 8007a00:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007a06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007a0a:	f7f9 f91d 	bl	8000c48 <__aeabi_uldivmod>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	4611      	mov	r1, r2
 8007a14:	4b3b      	ldr	r3, [pc, #236]	@ (8007b04 <UART_SetConfig+0x2d4>)
 8007a16:	fba3 2301 	umull	r2, r3, r3, r1
 8007a1a:	095b      	lsrs	r3, r3, #5
 8007a1c:	2264      	movs	r2, #100	@ 0x64
 8007a1e:	fb02 f303 	mul.w	r3, r2, r3
 8007a22:	1acb      	subs	r3, r1, r3
 8007a24:	00db      	lsls	r3, r3, #3
 8007a26:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007a2a:	4b36      	ldr	r3, [pc, #216]	@ (8007b04 <UART_SetConfig+0x2d4>)
 8007a2c:	fba3 2302 	umull	r2, r3, r3, r2
 8007a30:	095b      	lsrs	r3, r3, #5
 8007a32:	005b      	lsls	r3, r3, #1
 8007a34:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007a38:	441c      	add	r4, r3
 8007a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a44:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007a48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007a4c:	4642      	mov	r2, r8
 8007a4e:	464b      	mov	r3, r9
 8007a50:	1891      	adds	r1, r2, r2
 8007a52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007a54:	415b      	adcs	r3, r3
 8007a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007a5c:	4641      	mov	r1, r8
 8007a5e:	1851      	adds	r1, r2, r1
 8007a60:	6339      	str	r1, [r7, #48]	@ 0x30
 8007a62:	4649      	mov	r1, r9
 8007a64:	414b      	adcs	r3, r1
 8007a66:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a68:	f04f 0200 	mov.w	r2, #0
 8007a6c:	f04f 0300 	mov.w	r3, #0
 8007a70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007a74:	4659      	mov	r1, fp
 8007a76:	00cb      	lsls	r3, r1, #3
 8007a78:	4651      	mov	r1, sl
 8007a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a7e:	4651      	mov	r1, sl
 8007a80:	00ca      	lsls	r2, r1, #3
 8007a82:	4610      	mov	r0, r2
 8007a84:	4619      	mov	r1, r3
 8007a86:	4603      	mov	r3, r0
 8007a88:	4642      	mov	r2, r8
 8007a8a:	189b      	adds	r3, r3, r2
 8007a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a90:	464b      	mov	r3, r9
 8007a92:	460a      	mov	r2, r1
 8007a94:	eb42 0303 	adc.w	r3, r2, r3
 8007a98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007aa8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007aac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	18db      	adds	r3, r3, r3
 8007ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	eb42 0303 	adc.w	r3, r2, r3
 8007abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007abe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007ac2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007ac6:	f7f9 f8bf 	bl	8000c48 <__aeabi_uldivmod>
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	4b0d      	ldr	r3, [pc, #52]	@ (8007b04 <UART_SetConfig+0x2d4>)
 8007ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ad4:	095b      	lsrs	r3, r3, #5
 8007ad6:	2164      	movs	r1, #100	@ 0x64
 8007ad8:	fb01 f303 	mul.w	r3, r1, r3
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	00db      	lsls	r3, r3, #3
 8007ae0:	3332      	adds	r3, #50	@ 0x32
 8007ae2:	4a08      	ldr	r2, [pc, #32]	@ (8007b04 <UART_SetConfig+0x2d4>)
 8007ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae8:	095b      	lsrs	r3, r3, #5
 8007aea:	f003 0207 	and.w	r2, r3, #7
 8007aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4422      	add	r2, r4
 8007af6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007af8:	e106      	b.n	8007d08 <UART_SetConfig+0x4d8>
 8007afa:	bf00      	nop
 8007afc:	40011000 	.word	0x40011000
 8007b00:	40011400 	.word	0x40011400
 8007b04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007b16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007b1a:	4642      	mov	r2, r8
 8007b1c:	464b      	mov	r3, r9
 8007b1e:	1891      	adds	r1, r2, r2
 8007b20:	6239      	str	r1, [r7, #32]
 8007b22:	415b      	adcs	r3, r3
 8007b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b2a:	4641      	mov	r1, r8
 8007b2c:	1854      	adds	r4, r2, r1
 8007b2e:	4649      	mov	r1, r9
 8007b30:	eb43 0501 	adc.w	r5, r3, r1
 8007b34:	f04f 0200 	mov.w	r2, #0
 8007b38:	f04f 0300 	mov.w	r3, #0
 8007b3c:	00eb      	lsls	r3, r5, #3
 8007b3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b42:	00e2      	lsls	r2, r4, #3
 8007b44:	4614      	mov	r4, r2
 8007b46:	461d      	mov	r5, r3
 8007b48:	4643      	mov	r3, r8
 8007b4a:	18e3      	adds	r3, r4, r3
 8007b4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b50:	464b      	mov	r3, r9
 8007b52:	eb45 0303 	adc.w	r3, r5, r3
 8007b56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b6a:	f04f 0200 	mov.w	r2, #0
 8007b6e:	f04f 0300 	mov.w	r3, #0
 8007b72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007b76:	4629      	mov	r1, r5
 8007b78:	008b      	lsls	r3, r1, #2
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b80:	4621      	mov	r1, r4
 8007b82:	008a      	lsls	r2, r1, #2
 8007b84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007b88:	f7f9 f85e 	bl	8000c48 <__aeabi_uldivmod>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	460b      	mov	r3, r1
 8007b90:	4b60      	ldr	r3, [pc, #384]	@ (8007d14 <UART_SetConfig+0x4e4>)
 8007b92:	fba3 2302 	umull	r2, r3, r3, r2
 8007b96:	095b      	lsrs	r3, r3, #5
 8007b98:	011c      	lsls	r4, r3, #4
 8007b9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ba4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007ba8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007bac:	4642      	mov	r2, r8
 8007bae:	464b      	mov	r3, r9
 8007bb0:	1891      	adds	r1, r2, r2
 8007bb2:	61b9      	str	r1, [r7, #24]
 8007bb4:	415b      	adcs	r3, r3
 8007bb6:	61fb      	str	r3, [r7, #28]
 8007bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bbc:	4641      	mov	r1, r8
 8007bbe:	1851      	adds	r1, r2, r1
 8007bc0:	6139      	str	r1, [r7, #16]
 8007bc2:	4649      	mov	r1, r9
 8007bc4:	414b      	adcs	r3, r1
 8007bc6:	617b      	str	r3, [r7, #20]
 8007bc8:	f04f 0200 	mov.w	r2, #0
 8007bcc:	f04f 0300 	mov.w	r3, #0
 8007bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007bd4:	4659      	mov	r1, fp
 8007bd6:	00cb      	lsls	r3, r1, #3
 8007bd8:	4651      	mov	r1, sl
 8007bda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bde:	4651      	mov	r1, sl
 8007be0:	00ca      	lsls	r2, r1, #3
 8007be2:	4610      	mov	r0, r2
 8007be4:	4619      	mov	r1, r3
 8007be6:	4603      	mov	r3, r0
 8007be8:	4642      	mov	r2, r8
 8007bea:	189b      	adds	r3, r3, r2
 8007bec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007bf0:	464b      	mov	r3, r9
 8007bf2:	460a      	mov	r2, r1
 8007bf4:	eb42 0303 	adc.w	r3, r2, r3
 8007bf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007c08:	f04f 0200 	mov.w	r2, #0
 8007c0c:	f04f 0300 	mov.w	r3, #0
 8007c10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007c14:	4649      	mov	r1, r9
 8007c16:	008b      	lsls	r3, r1, #2
 8007c18:	4641      	mov	r1, r8
 8007c1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c1e:	4641      	mov	r1, r8
 8007c20:	008a      	lsls	r2, r1, #2
 8007c22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007c26:	f7f9 f80f 	bl	8000c48 <__aeabi_uldivmod>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	4611      	mov	r1, r2
 8007c30:	4b38      	ldr	r3, [pc, #224]	@ (8007d14 <UART_SetConfig+0x4e4>)
 8007c32:	fba3 2301 	umull	r2, r3, r3, r1
 8007c36:	095b      	lsrs	r3, r3, #5
 8007c38:	2264      	movs	r2, #100	@ 0x64
 8007c3a:	fb02 f303 	mul.w	r3, r2, r3
 8007c3e:	1acb      	subs	r3, r1, r3
 8007c40:	011b      	lsls	r3, r3, #4
 8007c42:	3332      	adds	r3, #50	@ 0x32
 8007c44:	4a33      	ldr	r2, [pc, #204]	@ (8007d14 <UART_SetConfig+0x4e4>)
 8007c46:	fba2 2303 	umull	r2, r3, r2, r3
 8007c4a:	095b      	lsrs	r3, r3, #5
 8007c4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c50:	441c      	add	r4, r3
 8007c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c56:	2200      	movs	r2, #0
 8007c58:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c5a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007c5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007c60:	4642      	mov	r2, r8
 8007c62:	464b      	mov	r3, r9
 8007c64:	1891      	adds	r1, r2, r2
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	415b      	adcs	r3, r3
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c70:	4641      	mov	r1, r8
 8007c72:	1851      	adds	r1, r2, r1
 8007c74:	6039      	str	r1, [r7, #0]
 8007c76:	4649      	mov	r1, r9
 8007c78:	414b      	adcs	r3, r1
 8007c7a:	607b      	str	r3, [r7, #4]
 8007c7c:	f04f 0200 	mov.w	r2, #0
 8007c80:	f04f 0300 	mov.w	r3, #0
 8007c84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c88:	4659      	mov	r1, fp
 8007c8a:	00cb      	lsls	r3, r1, #3
 8007c8c:	4651      	mov	r1, sl
 8007c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c92:	4651      	mov	r1, sl
 8007c94:	00ca      	lsls	r2, r1, #3
 8007c96:	4610      	mov	r0, r2
 8007c98:	4619      	mov	r1, r3
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	4642      	mov	r2, r8
 8007c9e:	189b      	adds	r3, r3, r2
 8007ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ca2:	464b      	mov	r3, r9
 8007ca4:	460a      	mov	r2, r1
 8007ca6:	eb42 0303 	adc.w	r3, r2, r3
 8007caa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007cb6:	667a      	str	r2, [r7, #100]	@ 0x64
 8007cb8:	f04f 0200 	mov.w	r2, #0
 8007cbc:	f04f 0300 	mov.w	r3, #0
 8007cc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007cc4:	4649      	mov	r1, r9
 8007cc6:	008b      	lsls	r3, r1, #2
 8007cc8:	4641      	mov	r1, r8
 8007cca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cce:	4641      	mov	r1, r8
 8007cd0:	008a      	lsls	r2, r1, #2
 8007cd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007cd6:	f7f8 ffb7 	bl	8000c48 <__aeabi_uldivmod>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4b0d      	ldr	r3, [pc, #52]	@ (8007d14 <UART_SetConfig+0x4e4>)
 8007ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ce4:	095b      	lsrs	r3, r3, #5
 8007ce6:	2164      	movs	r1, #100	@ 0x64
 8007ce8:	fb01 f303 	mul.w	r3, r1, r3
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	011b      	lsls	r3, r3, #4
 8007cf0:	3332      	adds	r3, #50	@ 0x32
 8007cf2:	4a08      	ldr	r2, [pc, #32]	@ (8007d14 <UART_SetConfig+0x4e4>)
 8007cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf8:	095b      	lsrs	r3, r3, #5
 8007cfa:	f003 020f 	and.w	r2, r3, #15
 8007cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4422      	add	r2, r4
 8007d06:	609a      	str	r2, [r3, #8]
}
 8007d08:	bf00      	nop
 8007d0a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d14:	51eb851f 	.word	0x51eb851f

08007d18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d18:	b084      	sub	sp, #16
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	f107 001c 	add.w	r0, r7, #28
 8007d26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d2a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d123      	bne.n	8007d7a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d36:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007d46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d105      	bne.n	8007d6e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f9dc 	bl	800812c <USB_CoreReset>
 8007d74:	4603      	mov	r3, r0
 8007d76:	73fb      	strb	r3, [r7, #15]
 8007d78:	e01b      	b.n	8007db2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f9d0 	bl	800812c <USB_CoreReset>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007d90:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d106      	bne.n	8007da6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d9c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	639a      	str	r2, [r3, #56]	@ 0x38
 8007da4:	e005      	b.n	8007db2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007daa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007db2:	7fbb      	ldrb	r3, [r7, #30]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d10b      	bne.n	8007dd0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f043 0206 	orr.w	r2, r3, #6
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f043 0220 	orr.w	r2, r3, #32
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ddc:	b004      	add	sp, #16
 8007dde:	4770      	bx	lr

08007de0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f043 0201 	orr.w	r2, r3, #1
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b083      	sub	sp, #12
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f023 0201 	bic.w	r2, r3, #1
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e30:	2300      	movs	r3, #0
 8007e32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e40:	78fb      	ldrb	r3, [r7, #3]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d115      	bne.n	8007e72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e52:	200a      	movs	r0, #10
 8007e54:	f7fb fa04 	bl	8003260 <HAL_Delay>
      ms += 10U;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	330a      	adds	r3, #10
 8007e5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f956 	bl	8008110 <USB_GetMode>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d01e      	beq.n	8007ea8 <USB_SetCurrentMode+0x84>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2bc7      	cmp	r3, #199	@ 0xc7
 8007e6e:	d9f0      	bls.n	8007e52 <USB_SetCurrentMode+0x2e>
 8007e70:	e01a      	b.n	8007ea8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e72:	78fb      	ldrb	r3, [r7, #3]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d115      	bne.n	8007ea4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e84:	200a      	movs	r0, #10
 8007e86:	f7fb f9eb 	bl	8003260 <HAL_Delay>
      ms += 10U;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	330a      	adds	r3, #10
 8007e8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f93d 	bl	8008110 <USB_GetMode>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d005      	beq.n	8007ea8 <USB_SetCurrentMode+0x84>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007ea0:	d9f0      	bls.n	8007e84 <USB_SetCurrentMode+0x60>
 8007ea2:	e001      	b.n	8007ea8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e005      	b.n	8007eb4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2bc8      	cmp	r3, #200	@ 0xc8
 8007eac:	d101      	bne.n	8007eb2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e000      	b.n	8007eb4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ed6:	d901      	bls.n	8007edc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e01b      	b.n	8007f14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	daf2      	bge.n	8007eca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	019b      	lsls	r3, r3, #6
 8007eec:	f043 0220 	orr.w	r2, r3, #32
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f00:	d901      	bls.n	8007f06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e006      	b.n	8007f14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	f003 0320 	and.w	r3, r3, #32
 8007f0e:	2b20      	cmp	r3, #32
 8007f10:	d0f0      	beq.n	8007ef4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f38:	d901      	bls.n	8007f3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e018      	b.n	8007f70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	daf2      	bge.n	8007f2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f46:	2300      	movs	r3, #0
 8007f48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2210      	movs	r2, #16
 8007f4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	3301      	adds	r3, #1
 8007f54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f5c:	d901      	bls.n	8007f62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e006      	b.n	8007f70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f003 0310 	and.w	r3, r3, #16
 8007f6a:	2b10      	cmp	r3, #16
 8007f6c:	d0f0      	beq.n	8007f50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b089      	sub	sp, #36	@ 0x24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	4611      	mov	r1, r2
 8007f88:	461a      	mov	r2, r3
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	71fb      	strb	r3, [r7, #7]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007f9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d123      	bne.n	8007fea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007fa2:	88bb      	ldrh	r3, [r7, #4]
 8007fa4:	3303      	adds	r3, #3
 8007fa6:	089b      	lsrs	r3, r3, #2
 8007fa8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007faa:	2300      	movs	r3, #0
 8007fac:	61bb      	str	r3, [r7, #24]
 8007fae:	e018      	b.n	8007fe2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007fb0:	79fb      	ldrb	r3, [r7, #7]
 8007fb2:	031a      	lsls	r2, r3, #12
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	61bb      	str	r3, [r7, #24]
 8007fe2:	69ba      	ldr	r2, [r7, #24]
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d3e2      	bcc.n	8007fb0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3724      	adds	r7, #36	@ 0x24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b08b      	sub	sp, #44	@ 0x2c
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	4613      	mov	r3, r2
 8008004:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800800e:	88fb      	ldrh	r3, [r7, #6]
 8008010:	089b      	lsrs	r3, r3, #2
 8008012:	b29b      	uxth	r3, r3
 8008014:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008016:	88fb      	ldrh	r3, [r7, #6]
 8008018:	f003 0303 	and.w	r3, r3, #3
 800801c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800801e:	2300      	movs	r3, #0
 8008020:	623b      	str	r3, [r7, #32]
 8008022:	e014      	b.n	800804e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008032:	3301      	adds	r3, #1
 8008034:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	3301      	adds	r3, #1
 800803a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800803c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803e:	3301      	adds	r3, #1
 8008040:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008044:	3301      	adds	r3, #1
 8008046:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	3301      	adds	r3, #1
 800804c:	623b      	str	r3, [r7, #32]
 800804e:	6a3a      	ldr	r2, [r7, #32]
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	429a      	cmp	r2, r3
 8008054:	d3e6      	bcc.n	8008024 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008056:	8bfb      	ldrh	r3, [r7, #30]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d01e      	beq.n	800809a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800805c:	2300      	movs	r3, #0
 800805e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008066:	461a      	mov	r2, r3
 8008068:	f107 0310 	add.w	r3, r7, #16
 800806c:	6812      	ldr	r2, [r2, #0]
 800806e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	b2db      	uxtb	r3, r3
 8008076:	00db      	lsls	r3, r3, #3
 8008078:	fa22 f303 	lsr.w	r3, r2, r3
 800807c:	b2da      	uxtb	r2, r3
 800807e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008080:	701a      	strb	r2, [r3, #0]
      i++;
 8008082:	6a3b      	ldr	r3, [r7, #32]
 8008084:	3301      	adds	r3, #1
 8008086:	623b      	str	r3, [r7, #32]
      pDest++;
 8008088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808a:	3301      	adds	r3, #1
 800808c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800808e:	8bfb      	ldrh	r3, [r7, #30]
 8008090:	3b01      	subs	r3, #1
 8008092:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008094:	8bfb      	ldrh	r3, [r7, #30]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1ea      	bne.n	8008070 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800809a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800809c:	4618      	mov	r0, r3
 800809e:	372c      	adds	r7, #44	@ 0x2c
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	4013      	ands	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80080c0:	68fb      	ldr	r3, [r7, #12]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b085      	sub	sp, #20
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	460b      	mov	r3, r1
 80080d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80080de:	78fb      	ldrb	r3, [r7, #3]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80080ee:	78fb      	ldrb	r3, [r7, #3]
 80080f0:	015a      	lsls	r2, r3, #5
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	4013      	ands	r3, r2
 8008100:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008102:	68bb      	ldr	r3, [r7, #8]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	695b      	ldr	r3, [r3, #20]
 800811c:	f003 0301 	and.w	r3, r3, #1
}
 8008120:	4618      	mov	r0, r3
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008134:	2300      	movs	r3, #0
 8008136:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	3301      	adds	r3, #1
 800813c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008144:	d901      	bls.n	800814a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e01b      	b.n	8008182 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	2b00      	cmp	r3, #0
 8008150:	daf2      	bge.n	8008138 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008152:	2300      	movs	r3, #0
 8008154:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	f043 0201 	orr.w	r2, r3, #1
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	3301      	adds	r3, #1
 8008166:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800816e:	d901      	bls.n	8008174 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e006      	b.n	8008182 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b01      	cmp	r3, #1
 800817e:	d0f0      	beq.n	8008162 <USB_CoreReset+0x36>

  return HAL_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3714      	adds	r7, #20
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
	...

08008190 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008190:	b084      	sub	sp, #16
 8008192:	b580      	push	{r7, lr}
 8008194:	b086      	sub	sp, #24
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800819e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80081b0:	461a      	mov	r2, r3
 80081b2:	2300      	movs	r3, #0
 80081b4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d119      	bne.n	800821a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80081e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d10a      	bne.n	8008204 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80081fc:	f043 0304 	orr.w	r3, r3, #4
 8008200:	6013      	str	r3, [r2, #0]
 8008202:	e014      	b.n	800822e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008212:	f023 0304 	bic.w	r3, r3, #4
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	e009      	b.n	800822e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008228:	f023 0304 	bic.w	r3, r3, #4
 800822c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800822e:	2110      	movs	r1, #16
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f7ff fe43 	bl	8007ebc <USB_FlushTxFifo>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7ff fe6d 	bl	8007f20 <USB_FlushRxFifo>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008250:	2300      	movs	r3, #0
 8008252:	613b      	str	r3, [r7, #16]
 8008254:	e015      	b.n	8008282 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	4413      	add	r3, r2
 800825e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008262:	461a      	mov	r2, r3
 8008264:	f04f 33ff 	mov.w	r3, #4294967295
 8008268:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	015a      	lsls	r2, r3, #5
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	4413      	add	r3, r2
 8008272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008276:	461a      	mov	r2, r3
 8008278:	2300      	movs	r3, #0
 800827a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	3301      	adds	r3, #1
 8008280:	613b      	str	r3, [r7, #16]
 8008282:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008286:	461a      	mov	r2, r3
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	4293      	cmp	r3, r2
 800828c:	d3e3      	bcc.n	8008256 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f04f 32ff 	mov.w	r2, #4294967295
 800829a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a18      	ldr	r2, [pc, #96]	@ (8008300 <USB_HostInit+0x170>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d10b      	bne.n	80082bc <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082aa:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a15      	ldr	r2, [pc, #84]	@ (8008304 <USB_HostInit+0x174>)
 80082b0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a14      	ldr	r2, [pc, #80]	@ (8008308 <USB_HostInit+0x178>)
 80082b6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80082ba:	e009      	b.n	80082d0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2280      	movs	r2, #128	@ 0x80
 80082c0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a11      	ldr	r2, [pc, #68]	@ (800830c <USB_HostInit+0x17c>)
 80082c6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a11      	ldr	r2, [pc, #68]	@ (8008310 <USB_HostInit+0x180>)
 80082cc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80082d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d105      	bne.n	80082e4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	f043 0210 	orr.w	r2, r3, #16
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	699a      	ldr	r2, [r3, #24]
 80082e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008314 <USB_HostInit+0x184>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3718      	adds	r7, #24
 80082f6:	46bd      	mov	sp, r7
 80082f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082fc:	b004      	add	sp, #16
 80082fe:	4770      	bx	lr
 8008300:	40040000 	.word	0x40040000
 8008304:	01000200 	.word	0x01000200
 8008308:	00e00300 	.word	0x00e00300
 800830c:	00600080 	.word	0x00600080
 8008310:	004000e0 	.word	0x004000e0
 8008314:	a3200008 	.word	0xa3200008

08008318 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008336:	f023 0303 	bic.w	r3, r3, #3
 800833a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	78fb      	ldrb	r3, [r7, #3]
 8008346:	f003 0303 	and.w	r3, r3, #3
 800834a:	68f9      	ldr	r1, [r7, #12]
 800834c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008350:	4313      	orrs	r3, r2
 8008352:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008354:	78fb      	ldrb	r3, [r7, #3]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d107      	bne.n	800836a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008360:	461a      	mov	r2, r3
 8008362:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008366:	6053      	str	r3, [r2, #4]
 8008368:	e00c      	b.n	8008384 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800836a:	78fb      	ldrb	r3, [r7, #3]
 800836c:	2b02      	cmp	r3, #2
 800836e:	d107      	bne.n	8008380 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008376:	461a      	mov	r2, r3
 8008378:	f241 7370 	movw	r3, #6000	@ 0x1770
 800837c:	6053      	str	r3, [r2, #4]
 800837e:	e001      	b.n	8008384 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e000      	b.n	8008386 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3714      	adds	r7, #20
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800839e:	2300      	movs	r3, #0
 80083a0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80083b2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80083bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083c0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80083c2:	2064      	movs	r0, #100	@ 0x64
 80083c4:	f7fa ff4c 	bl	8003260 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80083d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083d4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80083d6:	200a      	movs	r0, #10
 80083d8:	f7fa ff42 	bl	8003260 <HAL_Delay>

  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b085      	sub	sp, #20
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	460b      	mov	r3, r1
 80083f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80083f6:	2300      	movs	r3, #0
 80083f8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800840a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d109      	bne.n	800842a <USB_DriveVbus+0x44>
 8008416:	78fb      	ldrb	r3, [r7, #3]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d106      	bne.n	800842a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008424:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008428:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008434:	d109      	bne.n	800844a <USB_DriveVbus+0x64>
 8008436:	78fb      	ldrb	r3, [r7, #3]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d106      	bne.n	800844a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008444:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008448:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008464:	2300      	movs	r3, #0
 8008466:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	0c5b      	lsrs	r3, r3, #17
 8008476:	f003 0303 	and.w	r3, r3, #3
}
 800847a:	4618      	mov	r0, r3
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008486:	b480      	push	{r7}
 8008488:	b085      	sub	sp, #20
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	b29b      	uxth	r3, r3
}
 800849c:	4618      	mov	r0, r3
 800849e:	3714      	adds	r7, #20
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b088      	sub	sp, #32
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	4608      	mov	r0, r1
 80084b2:	4611      	mov	r1, r2
 80084b4:	461a      	mov	r2, r3
 80084b6:	4603      	mov	r3, r0
 80084b8:	70fb      	strb	r3, [r7, #3]
 80084ba:	460b      	mov	r3, r1
 80084bc:	70bb      	strb	r3, [r7, #2]
 80084be:	4613      	mov	r3, r2
 80084c0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80084ca:	78fb      	ldrb	r3, [r7, #3]
 80084cc:	015a      	lsls	r2, r3, #5
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084d6:	461a      	mov	r2, r3
 80084d8:	f04f 33ff 	mov.w	r3, #4294967295
 80084dc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80084de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	d87c      	bhi.n	80085e0 <USB_HC_Init+0x138>
 80084e6:	a201      	add	r2, pc, #4	@ (adr r2, 80084ec <USB_HC_Init+0x44>)
 80084e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ec:	080084fd 	.word	0x080084fd
 80084f0:	080085a3 	.word	0x080085a3
 80084f4:	080084fd 	.word	0x080084fd
 80084f8:	08008565 	.word	0x08008565
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80084fc:	78fb      	ldrb	r3, [r7, #3]
 80084fe:	015a      	lsls	r2, r3, #5
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	4413      	add	r3, r2
 8008504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008508:	461a      	mov	r2, r3
 800850a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800850e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008510:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008514:	2b00      	cmp	r3, #0
 8008516:	da10      	bge.n	800853a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008518:	78fb      	ldrb	r3, [r7, #3]
 800851a:	015a      	lsls	r2, r3, #5
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	4413      	add	r3, r2
 8008520:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	78fa      	ldrb	r2, [r7, #3]
 8008528:	0151      	lsls	r1, r2, #5
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	440a      	add	r2, r1
 800852e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008532:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008536:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008538:	e055      	b.n	80085e6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a6f      	ldr	r2, [pc, #444]	@ (80086fc <USB_HC_Init+0x254>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d151      	bne.n	80085e6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008542:	78fb      	ldrb	r3, [r7, #3]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	4413      	add	r3, r2
 800854a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	78fa      	ldrb	r2, [r7, #3]
 8008552:	0151      	lsls	r1, r2, #5
 8008554:	693a      	ldr	r2, [r7, #16]
 8008556:	440a      	add	r2, r1
 8008558:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800855c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008560:	60d3      	str	r3, [r2, #12]
      break;
 8008562:	e040      	b.n	80085e6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	4413      	add	r3, r2
 800856c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008570:	461a      	mov	r2, r3
 8008572:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008576:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008578:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800857c:	2b00      	cmp	r3, #0
 800857e:	da34      	bge.n	80085ea <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008580:	78fb      	ldrb	r3, [r7, #3]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	4413      	add	r3, r2
 8008588:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	78fa      	ldrb	r2, [r7, #3]
 8008590:	0151      	lsls	r1, r2, #5
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	440a      	add	r2, r1
 8008596:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800859a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800859e:	60d3      	str	r3, [r2, #12]
      }

      break;
 80085a0:	e023      	b.n	80085ea <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80085a2:	78fb      	ldrb	r3, [r7, #3]
 80085a4:	015a      	lsls	r2, r3, #5
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	4413      	add	r3, r2
 80085aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085ae:	461a      	mov	r2, r3
 80085b0:	f240 2325 	movw	r3, #549	@ 0x225
 80085b4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80085b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	da17      	bge.n	80085ee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80085be:	78fb      	ldrb	r3, [r7, #3]
 80085c0:	015a      	lsls	r2, r3, #5
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	4413      	add	r3, r2
 80085c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	78fa      	ldrb	r2, [r7, #3]
 80085ce:	0151      	lsls	r1, r2, #5
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	440a      	add	r2, r1
 80085d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085d8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80085dc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80085de:	e006      	b.n	80085ee <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	77fb      	strb	r3, [r7, #31]
      break;
 80085e4:	e004      	b.n	80085f0 <USB_HC_Init+0x148>
      break;
 80085e6:	bf00      	nop
 80085e8:	e002      	b.n	80085f0 <USB_HC_Init+0x148>
      break;
 80085ea:	bf00      	nop
 80085ec:	e000      	b.n	80085f0 <USB_HC_Init+0x148>
      break;
 80085ee:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80085f0:	78fb      	ldrb	r3, [r7, #3]
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085fc:	461a      	mov	r2, r3
 80085fe:	2300      	movs	r3, #0
 8008600:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008602:	78fb      	ldrb	r3, [r7, #3]
 8008604:	015a      	lsls	r2, r3, #5
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	4413      	add	r3, r2
 800860a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	78fa      	ldrb	r2, [r7, #3]
 8008612:	0151      	lsls	r1, r2, #5
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	440a      	add	r2, r1
 8008618:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800861c:	f043 0302 	orr.w	r3, r3, #2
 8008620:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008628:	699a      	ldr	r2, [r3, #24]
 800862a:	78fb      	ldrb	r3, [r7, #3]
 800862c:	f003 030f 	and.w	r3, r3, #15
 8008630:	2101      	movs	r1, #1
 8008632:	fa01 f303 	lsl.w	r3, r1, r3
 8008636:	6939      	ldr	r1, [r7, #16]
 8008638:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800863c:	4313      	orrs	r3, r2
 800863e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800864c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008650:	2b00      	cmp	r3, #0
 8008652:	da03      	bge.n	800865c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008654:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008658:	61bb      	str	r3, [r7, #24]
 800865a:	e001      	b.n	8008660 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800865c:	2300      	movs	r3, #0
 800865e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7ff fef9 	bl	8008458 <USB_GetHostSpeed>
 8008666:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008668:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800866c:	2b02      	cmp	r3, #2
 800866e:	d106      	bne.n	800867e <USB_HC_Init+0x1d6>
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2b02      	cmp	r3, #2
 8008674:	d003      	beq.n	800867e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008676:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800867a:	617b      	str	r3, [r7, #20]
 800867c:	e001      	b.n	8008682 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008682:	787b      	ldrb	r3, [r7, #1]
 8008684:	059b      	lsls	r3, r3, #22
 8008686:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800868a:	78bb      	ldrb	r3, [r7, #2]
 800868c:	02db      	lsls	r3, r3, #11
 800868e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008692:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008694:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008698:	049b      	lsls	r3, r3, #18
 800869a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800869e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80086a0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80086a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80086a6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	431a      	orrs	r2, r3
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086b0:	78fa      	ldrb	r2, [r7, #3]
 80086b2:	0151      	lsls	r1, r2, #5
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	440a      	add	r2, r1
 80086b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80086bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086c0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80086c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80086c6:	2b03      	cmp	r3, #3
 80086c8:	d003      	beq.n	80086d2 <USB_HC_Init+0x22a>
 80086ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d10f      	bne.n	80086f2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80086d2:	78fb      	ldrb	r3, [r7, #3]
 80086d4:	015a      	lsls	r2, r3, #5
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	4413      	add	r3, r2
 80086da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	78fa      	ldrb	r2, [r7, #3]
 80086e2:	0151      	lsls	r1, r2, #5
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	440a      	add	r2, r1
 80086e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80086f0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80086f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3720      	adds	r7, #32
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	40040000 	.word	0x40040000

08008700 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b08c      	sub	sp, #48	@ 0x30
 8008704:	af02      	add	r7, sp, #8
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	4613      	mov	r3, r2
 800870c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	785b      	ldrb	r3, [r3, #1]
 8008716:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008718:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800871c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	4a5d      	ldr	r2, [pc, #372]	@ (8008898 <USB_HC_StartXfer+0x198>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d12f      	bne.n	8008786 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008726:	79fb      	ldrb	r3, [r7, #7]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d11c      	bne.n	8008766 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	7c9b      	ldrb	r3, [r3, #18]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d003      	beq.n	800873c <USB_HC_StartXfer+0x3c>
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	7c9b      	ldrb	r3, [r3, #18]
 8008738:	2b02      	cmp	r3, #2
 800873a:	d124      	bne.n	8008786 <USB_HC_StartXfer+0x86>
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	799b      	ldrb	r3, [r3, #6]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d120      	bne.n	8008786 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	015a      	lsls	r2, r3, #5
 8008748:	6a3b      	ldr	r3, [r7, #32]
 800874a:	4413      	add	r3, r2
 800874c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	69fa      	ldr	r2, [r7, #28]
 8008754:	0151      	lsls	r1, r2, #5
 8008756:	6a3a      	ldr	r2, [r7, #32]
 8008758:	440a      	add	r2, r1
 800875a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800875e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008762:	60d3      	str	r3, [r2, #12]
 8008764:	e00f      	b.n	8008786 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	791b      	ldrb	r3, [r3, #4]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10b      	bne.n	8008786 <USB_HC_StartXfer+0x86>
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	795b      	ldrb	r3, [r3, #5]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d107      	bne.n	8008786 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	785b      	ldrb	r3, [r3, #1]
 800877a:	4619      	mov	r1, r3
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f000 fb6b 	bl	8008e58 <USB_DoPing>
        return HAL_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	e232      	b.n	8008bec <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	799b      	ldrb	r3, [r3, #6]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d158      	bne.n	8008840 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800878e:	2301      	movs	r3, #1
 8008790:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	78db      	ldrb	r3, [r3, #3]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d007      	beq.n	80087aa <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800879a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	8a92      	ldrh	r2, [r2, #20]
 80087a0:	fb03 f202 	mul.w	r2, r3, r2
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	61da      	str	r2, [r3, #28]
 80087a8:	e07c      	b.n	80088a4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	7c9b      	ldrb	r3, [r3, #18]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d130      	bne.n	8008814 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	2bbc      	cmp	r3, #188	@ 0xbc
 80087b8:	d918      	bls.n	80087ec <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	8a9b      	ldrh	r3, [r3, #20]
 80087be:	461a      	mov	r2, r3
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	69da      	ldr	r2, [r3, #28]
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d003      	beq.n	80087dc <USB_HC_StartXfer+0xdc>
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d103      	bne.n	80087e4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2202      	movs	r2, #2
 80087e0:	60da      	str	r2, [r3, #12]
 80087e2:	e05f      	b.n	80088a4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	2201      	movs	r2, #1
 80087e8:	60da      	str	r2, [r3, #12]
 80087ea:	e05b      	b.n	80088a4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	6a1a      	ldr	r2, [r3, #32]
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d007      	beq.n	800880c <USB_HC_StartXfer+0x10c>
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	2b02      	cmp	r3, #2
 8008802:	d003      	beq.n	800880c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2204      	movs	r2, #4
 8008808:	60da      	str	r2, [r3, #12]
 800880a:	e04b      	b.n	80088a4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2203      	movs	r2, #3
 8008810:	60da      	str	r2, [r3, #12]
 8008812:	e047      	b.n	80088a4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008814:	79fb      	ldrb	r3, [r7, #7]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d10d      	bne.n	8008836 <USB_HC_StartXfer+0x136>
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	8a92      	ldrh	r2, [r2, #20]
 8008822:	4293      	cmp	r3, r2
 8008824:	d907      	bls.n	8008836 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008826:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	8a92      	ldrh	r2, [r2, #20]
 800882c:	fb03 f202 	mul.w	r2, r3, r2
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	61da      	str	r2, [r3, #28]
 8008834:	e036      	b.n	80088a4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	6a1a      	ldr	r2, [r3, #32]
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	61da      	str	r2, [r3, #28]
 800883e:	e031      	b.n	80088a4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	6a1b      	ldr	r3, [r3, #32]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d018      	beq.n	800887a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	6a1b      	ldr	r3, [r3, #32]
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	8a92      	ldrh	r2, [r2, #20]
 8008850:	4413      	add	r3, r2
 8008852:	3b01      	subs	r3, #1
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	8a92      	ldrh	r2, [r2, #20]
 8008858:	fbb3 f3f2 	udiv	r3, r3, r2
 800885c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800885e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008860:	8b7b      	ldrh	r3, [r7, #26]
 8008862:	429a      	cmp	r2, r3
 8008864:	d90b      	bls.n	800887e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008866:	8b7b      	ldrh	r3, [r7, #26]
 8008868:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800886a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	8a92      	ldrh	r2, [r2, #20]
 8008870:	fb03 f202 	mul.w	r2, r3, r2
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	61da      	str	r2, [r3, #28]
 8008878:	e001      	b.n	800887e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800887a:	2301      	movs	r3, #1
 800887c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	78db      	ldrb	r3, [r3, #3]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00a      	beq.n	800889c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008886:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	8a92      	ldrh	r2, [r2, #20]
 800888c:	fb03 f202 	mul.w	r2, r3, r2
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	61da      	str	r2, [r3, #28]
 8008894:	e006      	b.n	80088a4 <USB_HC_StartXfer+0x1a4>
 8008896:	bf00      	nop
 8008898:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	6a1a      	ldr	r2, [r3, #32]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	69db      	ldr	r3, [r3, #28]
 80088a8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80088ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80088ae:	04d9      	lsls	r1, r3, #19
 80088b0:	4ba3      	ldr	r3, [pc, #652]	@ (8008b40 <USB_HC_StartXfer+0x440>)
 80088b2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80088b4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	7d9b      	ldrb	r3, [r3, #22]
 80088ba:	075b      	lsls	r3, r3, #29
 80088bc:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80088c0:	69f9      	ldr	r1, [r7, #28]
 80088c2:	0148      	lsls	r0, r1, #5
 80088c4:	6a39      	ldr	r1, [r7, #32]
 80088c6:	4401      	add	r1, r0
 80088c8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80088cc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80088ce:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80088d0:	79fb      	ldrb	r3, [r7, #7]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d009      	beq.n	80088ea <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	6999      	ldr	r1, [r3, #24]
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	015a      	lsls	r2, r3, #5
 80088de:	6a3b      	ldr	r3, [r7, #32]
 80088e0:	4413      	add	r3, r2
 80088e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088e6:	460a      	mov	r2, r1
 80088e8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	bf0c      	ite	eq
 80088fa:	2301      	moveq	r3, #1
 80088fc:	2300      	movne	r3, #0
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	015a      	lsls	r2, r3, #5
 8008906:	6a3b      	ldr	r3, [r7, #32]
 8008908:	4413      	add	r3, r2
 800890a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	69fa      	ldr	r2, [r7, #28]
 8008912:	0151      	lsls	r1, r2, #5
 8008914:	6a3a      	ldr	r2, [r7, #32]
 8008916:	440a      	add	r2, r1
 8008918:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800891c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008920:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	015a      	lsls	r2, r3, #5
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	4413      	add	r3, r2
 800892a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	7e7b      	ldrb	r3, [r7, #25]
 8008932:	075b      	lsls	r3, r3, #29
 8008934:	69f9      	ldr	r1, [r7, #28]
 8008936:	0148      	lsls	r0, r1, #5
 8008938:	6a39      	ldr	r1, [r7, #32]
 800893a:	4401      	add	r1, r0
 800893c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008940:	4313      	orrs	r3, r2
 8008942:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	799b      	ldrb	r3, [r3, #6]
 8008948:	2b01      	cmp	r3, #1
 800894a:	f040 80c3 	bne.w	8008ad4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	7c5b      	ldrb	r3, [r3, #17]
 8008952:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008958:	4313      	orrs	r3, r2
 800895a:	69fa      	ldr	r2, [r7, #28]
 800895c:	0151      	lsls	r1, r2, #5
 800895e:	6a3a      	ldr	r2, [r7, #32]
 8008960:	440a      	add	r2, r1
 8008962:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008966:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800896a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	6a3b      	ldr	r3, [r7, #32]
 8008972:	4413      	add	r3, r2
 8008974:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	69fa      	ldr	r2, [r7, #28]
 800897c:	0151      	lsls	r1, r2, #5
 800897e:	6a3a      	ldr	r2, [r7, #32]
 8008980:	440a      	add	r2, r1
 8008982:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008986:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800898a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	79db      	ldrb	r3, [r3, #7]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d123      	bne.n	80089dc <USB_HC_StartXfer+0x2dc>
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	78db      	ldrb	r3, [r3, #3]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d11f      	bne.n	80089dc <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	6a3b      	ldr	r3, [r7, #32]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	69fa      	ldr	r2, [r7, #28]
 80089ac:	0151      	lsls	r1, r2, #5
 80089ae:	6a3a      	ldr	r2, [r7, #32]
 80089b0:	440a      	add	r2, r1
 80089b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089ba:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	6a3b      	ldr	r3, [r7, #32]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	69fa      	ldr	r2, [r7, #28]
 80089cc:	0151      	lsls	r1, r2, #5
 80089ce:	6a3a      	ldr	r2, [r7, #32]
 80089d0:	440a      	add	r2, r1
 80089d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089da:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	7c9b      	ldrb	r3, [r3, #18]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d003      	beq.n	80089ec <USB_HC_StartXfer+0x2ec>
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	7c9b      	ldrb	r3, [r3, #18]
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	d117      	bne.n	8008a1c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d113      	bne.n	8008a1c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	78db      	ldrb	r3, [r3, #3]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d10f      	bne.n	8008a1c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	015a      	lsls	r2, r3, #5
 8008a00:	6a3b      	ldr	r3, [r7, #32]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	69fa      	ldr	r2, [r7, #28]
 8008a0c:	0151      	lsls	r1, r2, #5
 8008a0e:	6a3a      	ldr	r2, [r7, #32]
 8008a10:	440a      	add	r2, r1
 8008a12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a1a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	7c9b      	ldrb	r3, [r3, #18]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d162      	bne.n	8008aea <USB_HC_StartXfer+0x3ea>
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	78db      	ldrb	r3, [r3, #3]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d15e      	bne.n	8008aea <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	3b01      	subs	r3, #1
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d858      	bhi.n	8008ae8 <USB_HC_StartXfer+0x3e8>
 8008a36:	a201      	add	r2, pc, #4	@ (adr r2, 8008a3c <USB_HC_StartXfer+0x33c>)
 8008a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3c:	08008a4d 	.word	0x08008a4d
 8008a40:	08008a6f 	.word	0x08008a6f
 8008a44:	08008a91 	.word	0x08008a91
 8008a48:	08008ab3 	.word	0x08008ab3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	69fa      	ldr	r2, [r7, #28]
 8008a5c:	0151      	lsls	r1, r2, #5
 8008a5e:	6a3a      	ldr	r2, [r7, #32]
 8008a60:	440a      	add	r2, r1
 8008a62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a6a:	6053      	str	r3, [r2, #4]
          break;
 8008a6c:	e03d      	b.n	8008aea <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	015a      	lsls	r2, r3, #5
 8008a72:	6a3b      	ldr	r3, [r7, #32]
 8008a74:	4413      	add	r3, r2
 8008a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	69fa      	ldr	r2, [r7, #28]
 8008a7e:	0151      	lsls	r1, r2, #5
 8008a80:	6a3a      	ldr	r2, [r7, #32]
 8008a82:	440a      	add	r2, r1
 8008a84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a88:	f043 030e 	orr.w	r3, r3, #14
 8008a8c:	6053      	str	r3, [r2, #4]
          break;
 8008a8e:	e02c      	b.n	8008aea <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	015a      	lsls	r2, r3, #5
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	69fa      	ldr	r2, [r7, #28]
 8008aa0:	0151      	lsls	r1, r2, #5
 8008aa2:	6a3a      	ldr	r2, [r7, #32]
 8008aa4:	440a      	add	r2, r1
 8008aa6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008aaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008aae:	6053      	str	r3, [r2, #4]
          break;
 8008ab0:	e01b      	b.n	8008aea <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	015a      	lsls	r2, r3, #5
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	4413      	add	r3, r2
 8008aba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	69fa      	ldr	r2, [r7, #28]
 8008ac2:	0151      	lsls	r1, r2, #5
 8008ac4:	6a3a      	ldr	r2, [r7, #32]
 8008ac6:	440a      	add	r2, r1
 8008ac8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008acc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ad0:	6053      	str	r3, [r2, #4]
          break;
 8008ad2:	e00a      	b.n	8008aea <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	015a      	lsls	r2, r3, #5
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	4413      	add	r3, r2
 8008adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	6053      	str	r3, [r2, #4]
 8008ae6:	e000      	b.n	8008aea <USB_HC_StartXfer+0x3ea>
          break;
 8008ae8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	015a      	lsls	r2, r3, #5
 8008aee:	6a3b      	ldr	r3, [r7, #32]
 8008af0:	4413      	add	r3, r2
 8008af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008b00:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	78db      	ldrb	r3, [r3, #3]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d004      	beq.n	8008b14 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b10:	613b      	str	r3, [r7, #16]
 8008b12:	e003      	b.n	8008b1c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008b1a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b22:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	015a      	lsls	r2, r3, #5
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b30:	461a      	mov	r2, r3
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008b36:	79fb      	ldrb	r3, [r7, #7]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d003      	beq.n	8008b44 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	e055      	b.n	8008bec <USB_HC_StartXfer+0x4ec>
 8008b40:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	78db      	ldrb	r3, [r3, #3]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d14e      	bne.n	8008bea <USB_HC_StartXfer+0x4ea>
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	6a1b      	ldr	r3, [r3, #32]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d04a      	beq.n	8008bea <USB_HC_StartXfer+0x4ea>
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	79db      	ldrb	r3, [r3, #7]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d146      	bne.n	8008bea <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	7c9b      	ldrb	r3, [r3, #18]
 8008b60:	2b03      	cmp	r3, #3
 8008b62:	d831      	bhi.n	8008bc8 <USB_HC_StartXfer+0x4c8>
 8008b64:	a201      	add	r2, pc, #4	@ (adr r2, 8008b6c <USB_HC_StartXfer+0x46c>)
 8008b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6a:	bf00      	nop
 8008b6c:	08008b7d 	.word	0x08008b7d
 8008b70:	08008ba1 	.word	0x08008ba1
 8008b74:	08008b7d 	.word	0x08008b7d
 8008b78:	08008ba1 	.word	0x08008ba1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	6a1b      	ldr	r3, [r3, #32]
 8008b80:	3303      	adds	r3, #3
 8008b82:	089b      	lsrs	r3, r3, #2
 8008b84:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008b86:	8afa      	ldrh	r2, [r7, #22]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d91c      	bls.n	8008bcc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	f043 0220 	orr.w	r2, r3, #32
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	619a      	str	r2, [r3, #24]
        }
        break;
 8008b9e:	e015      	b.n	8008bcc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	6a1b      	ldr	r3, [r3, #32]
 8008ba4:	3303      	adds	r3, #3
 8008ba6:	089b      	lsrs	r3, r3, #2
 8008ba8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008baa:	8afa      	ldrh	r2, [r7, #22]
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d90a      	bls.n	8008bd0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	619a      	str	r2, [r3, #24]
        }
        break;
 8008bc6:	e003      	b.n	8008bd0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008bc8:	bf00      	nop
 8008bca:	e002      	b.n	8008bd2 <USB_HC_StartXfer+0x4d2>
        break;
 8008bcc:	bf00      	nop
 8008bce:	e000      	b.n	8008bd2 <USB_HC_StartXfer+0x4d2>
        break;
 8008bd0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	6999      	ldr	r1, [r3, #24]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	785a      	ldrb	r2, [r3, #1]
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	2000      	movs	r0, #0
 8008be2:	9000      	str	r0, [sp, #0]
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f7ff f9c9 	bl	8007f7c <USB_WritePacket>
  }

  return HAL_OK;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3728      	adds	r7, #40	@ 0x28
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	b29b      	uxth	r3, r3
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr

08008c16 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008c16:	b480      	push	{r7}
 8008c18:	b089      	sub	sp, #36	@ 0x24
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	460b      	mov	r3, r1
 8008c20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008c26:	78fb      	ldrb	r3, [r7, #3]
 8008c28:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	0c9b      	lsrs	r3, r3, #18
 8008c3e:	f003 0303 	and.w	r3, r3, #3
 8008c42:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	015a      	lsls	r2, r3, #5
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	0fdb      	lsrs	r3, r3, #31
 8008c54:	f003 0301 	and.w	r3, r3, #1
 8008c58:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	4413      	add	r3, r2
 8008c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	0fdb      	lsrs	r3, r3, #31
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f003 0320 	and.w	r3, r3, #32
 8008c78:	2b20      	cmp	r3, #32
 8008c7a:	d10d      	bne.n	8008c98 <USB_HC_Halt+0x82>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10a      	bne.n	8008c98 <USB_HC_Halt+0x82>
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d005      	beq.n	8008c94 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d002      	beq.n	8008c94 <USB_HC_Halt+0x7e>
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	2b03      	cmp	r3, #3
 8008c92:	d101      	bne.n	8008c98 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	e0d8      	b.n	8008e4a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <USB_HC_Halt+0x8e>
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d173      	bne.n	8008d8c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	015a      	lsls	r2, r3, #5
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	4413      	add	r3, r2
 8008cac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	69ba      	ldr	r2, [r7, #24]
 8008cb4:	0151      	lsls	r1, r2, #5
 8008cb6:	69fa      	ldr	r2, [r7, #28]
 8008cb8:	440a      	add	r2, r1
 8008cba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cbe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008cc2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	f003 0320 	and.w	r3, r3, #32
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d14a      	bne.n	8008d66 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d133      	bne.n	8008d44 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	015a      	lsls	r2, r3, #5
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	0151      	lsls	r1, r2, #5
 8008cee:	69fa      	ldr	r2, [r7, #28]
 8008cf0:	440a      	add	r2, r1
 8008cf2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cf6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008cfa:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	69ba      	ldr	r2, [r7, #24]
 8008d0c:	0151      	lsls	r1, r2, #5
 8008d0e:	69fa      	ldr	r2, [r7, #28]
 8008d10:	440a      	add	r2, r1
 8008d12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d1a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d28:	d82e      	bhi.n	8008d88 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	015a      	lsls	r2, r3, #5
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	4413      	add	r3, r2
 8008d32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d40:	d0ec      	beq.n	8008d1c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d42:	e081      	b.n	8008e48 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	015a      	lsls	r2, r3, #5
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	69ba      	ldr	r2, [r7, #24]
 8008d54:	0151      	lsls	r1, r2, #5
 8008d56:	69fa      	ldr	r2, [r7, #28]
 8008d58:	440a      	add	r2, r1
 8008d5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d62:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d64:	e070      	b.n	8008e48 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	015a      	lsls	r2, r3, #5
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	69ba      	ldr	r2, [r7, #24]
 8008d76:	0151      	lsls	r1, r2, #5
 8008d78:	69fa      	ldr	r2, [r7, #28]
 8008d7a:	440a      	add	r2, r1
 8008d7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d84:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d86:	e05f      	b.n	8008e48 <USB_HC_Halt+0x232>
            break;
 8008d88:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d8a:	e05d      	b.n	8008e48 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	015a      	lsls	r2, r3, #5
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	0151      	lsls	r1, r2, #5
 8008d9e:	69fa      	ldr	r2, [r7, #28]
 8008da0:	440a      	add	r2, r1
 8008da2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008da6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008daa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008db2:	691b      	ldr	r3, [r3, #16]
 8008db4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d133      	bne.n	8008e24 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	69ba      	ldr	r2, [r7, #24]
 8008dcc:	0151      	lsls	r1, r2, #5
 8008dce:	69fa      	ldr	r2, [r7, #28]
 8008dd0:	440a      	add	r2, r1
 8008dd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008dd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008dda:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	69ba      	ldr	r2, [r7, #24]
 8008dec:	0151      	lsls	r1, r2, #5
 8008dee:	69fa      	ldr	r2, [r7, #28]
 8008df0:	440a      	add	r2, r1
 8008df2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008df6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008dfa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e08:	d81d      	bhi.n	8008e46 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	015a      	lsls	r2, r3, #5
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	4413      	add	r3, r2
 8008e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e20:	d0ec      	beq.n	8008dfc <USB_HC_Halt+0x1e6>
 8008e22:	e011      	b.n	8008e48 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	015a      	lsls	r2, r3, #5
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	69ba      	ldr	r2, [r7, #24]
 8008e34:	0151      	lsls	r1, r2, #5
 8008e36:	69fa      	ldr	r2, [r7, #28]
 8008e38:	440a      	add	r2, r1
 8008e3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e42:	6013      	str	r3, [r2, #0]
 8008e44:	e000      	b.n	8008e48 <USB_HC_Halt+0x232>
          break;
 8008e46:	bf00      	nop
    }
  }

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3724      	adds	r7, #36	@ 0x24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
	...

08008e58 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b087      	sub	sp, #28
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	460b      	mov	r3, r1
 8008e62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008e68:	78fb      	ldrb	r3, [r7, #3]
 8008e6a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	04da      	lsls	r2, r3, #19
 8008e74:	4b15      	ldr	r3, [pc, #84]	@ (8008ecc <USB_DoPing+0x74>)
 8008e76:	4013      	ands	r3, r2
 8008e78:	693a      	ldr	r2, [r7, #16]
 8008e7a:	0151      	lsls	r1, r2, #5
 8008e7c:	697a      	ldr	r2, [r7, #20]
 8008e7e:	440a      	add	r2, r1
 8008e80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e84:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e88:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	015a      	lsls	r2, r3, #5
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008ea0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ea8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	371c      	adds	r7, #28
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	1ff80000 	.word	0x1ff80000

08008ed0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b088      	sub	sp, #32
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f7fe ff8c 	bl	8007e02 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008eea:	2110      	movs	r1, #16
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f7fe ffe5 	bl	8007ebc <USB_FlushTxFifo>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d001      	beq.n	8008efc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7ff f80f 	bl	8007f20 <USB_FlushRxFifo>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d001      	beq.n	8008f0c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	61bb      	str	r3, [r7, #24]
 8008f10:	e01f      	b.n	8008f52 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f28:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f30:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008f38:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	015a      	lsls	r2, r3, #5
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	4413      	add	r3, r2
 8008f42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f46:	461a      	mov	r2, r3
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	61bb      	str	r3, [r7, #24]
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	2b0f      	cmp	r3, #15
 8008f56:	d9dc      	bls.n	8008f12 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008f58:	2300      	movs	r3, #0
 8008f5a:	61bb      	str	r3, [r7, #24]
 8008f5c:	e034      	b.n	8008fc8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	015a      	lsls	r2, r3, #5
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	4413      	add	r3, r2
 8008f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f74:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f7c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008f84:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	015a      	lsls	r2, r3, #5
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f92:	461a      	mov	r2, r3
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008fa4:	d80c      	bhi.n	8008fc0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	015a      	lsls	r2, r3, #5
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	4413      	add	r3, r2
 8008fae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fbc:	d0ec      	beq.n	8008f98 <USB_StopHost+0xc8>
 8008fbe:	e000      	b.n	8008fc2 <USB_StopHost+0xf2>
        break;
 8008fc0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	61bb      	str	r3, [r7, #24]
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	2b0f      	cmp	r3, #15
 8008fcc:	d9c7      	bls.n	8008f5e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8008fda:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f7fe fefb 	bl	8007de0 <USB_EnableGlobalInt>

  return ret;
 8008fea:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3720      	adds	r7, #32
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008ff4:	b590      	push	{r4, r7, lr}
 8008ff6:	b089      	sub	sp, #36	@ 0x24
 8008ff8:	af04      	add	r7, sp, #16
 8008ffa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	2202      	movs	r2, #2
 8009000:	2102      	movs	r1, #2
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 fc85 	bl	8009912 <USBH_FindInterface>
 8009008:	4603      	mov	r3, r0
 800900a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	2bff      	cmp	r3, #255	@ 0xff
 8009010:	d002      	beq.n	8009018 <USBH_CDC_InterfaceInit+0x24>
 8009012:	7bfb      	ldrb	r3, [r7, #15]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d901      	bls.n	800901c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009018:	2302      	movs	r3, #2
 800901a:	e13d      	b.n	8009298 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	4619      	mov	r1, r3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fc5a 	bl	80098da <USBH_SelectInterface>
 8009026:	4603      	mov	r3, r0
 8009028:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800902a:	7bbb      	ldrb	r3, [r7, #14]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d001      	beq.n	8009034 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009030:	2302      	movs	r3, #2
 8009032:	e131      	b.n	8009298 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800903a:	2050      	movs	r0, #80	@ 0x50
 800903c:	f002 fb86 	bl	800b74c <malloc>
 8009040:	4603      	mov	r3, r0
 8009042:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800904a:	69db      	ldr	r3, [r3, #28]
 800904c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009054:	2302      	movs	r3, #2
 8009056:	e11f      	b.n	8009298 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009058:	2250      	movs	r2, #80	@ 0x50
 800905a:	2100      	movs	r1, #0
 800905c:	68b8      	ldr	r0, [r7, #8]
 800905e:	f003 f9c4 	bl	800c3ea <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009062:	7bfb      	ldrb	r3, [r7, #15]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	211a      	movs	r1, #26
 8009068:	fb01 f303 	mul.w	r3, r1, r3
 800906c:	4413      	add	r3, r2
 800906e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	b25b      	sxtb	r3, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	da15      	bge.n	80090a6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	211a      	movs	r1, #26
 8009080:	fb01 f303 	mul.w	r3, r1, r3
 8009084:	4413      	add	r3, r2
 8009086:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800908a:	781a      	ldrb	r2, [r3, #0]
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009090:	7bfb      	ldrb	r3, [r7, #15]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	211a      	movs	r1, #26
 8009096:	fb01 f303 	mul.w	r3, r1, r3
 800909a:	4413      	add	r3, r2
 800909c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80090a0:	881a      	ldrh	r2, [r3, #0]
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	785b      	ldrb	r3, [r3, #1]
 80090aa:	4619      	mov	r1, r3
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f001 ffbe 	bl	800b02e <USBH_AllocPipe>
 80090b2:	4603      	mov	r3, r0
 80090b4:	461a      	mov	r2, r3
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	7819      	ldrb	r1, [r3, #0]
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	7858      	ldrb	r0, [r3, #1]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	8952      	ldrh	r2, [r2, #10]
 80090d2:	9202      	str	r2, [sp, #8]
 80090d4:	2203      	movs	r2, #3
 80090d6:	9201      	str	r2, [sp, #4]
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	4623      	mov	r3, r4
 80090dc:	4602      	mov	r2, r0
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f001 ff76 	bl	800afd0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	2200      	movs	r2, #0
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f002 fa85 	bl	800b5fc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80090f2:	2300      	movs	r3, #0
 80090f4:	2200      	movs	r2, #0
 80090f6:	210a      	movs	r1, #10
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fc0a 	bl	8009912 <USBH_FindInterface>
 80090fe:	4603      	mov	r3, r0
 8009100:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009102:	7bfb      	ldrb	r3, [r7, #15]
 8009104:	2bff      	cmp	r3, #255	@ 0xff
 8009106:	d002      	beq.n	800910e <USBH_CDC_InterfaceInit+0x11a>
 8009108:	7bfb      	ldrb	r3, [r7, #15]
 800910a:	2b01      	cmp	r3, #1
 800910c:	d901      	bls.n	8009112 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800910e:	2302      	movs	r3, #2
 8009110:	e0c2      	b.n	8009298 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009112:	7bfb      	ldrb	r3, [r7, #15]
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	211a      	movs	r1, #26
 8009118:	fb01 f303 	mul.w	r3, r1, r3
 800911c:	4413      	add	r3, r2
 800911e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	b25b      	sxtb	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	da16      	bge.n	8009158 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800912a:	7bfb      	ldrb	r3, [r7, #15]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	211a      	movs	r1, #26
 8009130:	fb01 f303 	mul.w	r3, r1, r3
 8009134:	4413      	add	r3, r2
 8009136:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800913a:	781a      	ldrb	r2, [r3, #0]
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009140:	7bfb      	ldrb	r3, [r7, #15]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	211a      	movs	r1, #26
 8009146:	fb01 f303 	mul.w	r3, r1, r3
 800914a:	4413      	add	r3, r2
 800914c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009150:	881a      	ldrh	r2, [r3, #0]
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	835a      	strh	r2, [r3, #26]
 8009156:	e015      	b.n	8009184 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009158:	7bfb      	ldrb	r3, [r7, #15]
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	211a      	movs	r1, #26
 800915e:	fb01 f303 	mul.w	r3, r1, r3
 8009162:	4413      	add	r3, r2
 8009164:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009168:	781a      	ldrb	r2, [r3, #0]
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800916e:	7bfb      	ldrb	r3, [r7, #15]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	211a      	movs	r1, #26
 8009174:	fb01 f303 	mul.w	r3, r1, r3
 8009178:	4413      	add	r3, r2
 800917a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800917e:	881a      	ldrh	r2, [r3, #0]
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	211a      	movs	r1, #26
 800918a:	fb01 f303 	mul.w	r3, r1, r3
 800918e:	4413      	add	r3, r2
 8009190:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	b25b      	sxtb	r3, r3
 8009198:	2b00      	cmp	r3, #0
 800919a:	da16      	bge.n	80091ca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800919c:	7bfb      	ldrb	r3, [r7, #15]
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	211a      	movs	r1, #26
 80091a2:	fb01 f303 	mul.w	r3, r1, r3
 80091a6:	4413      	add	r3, r2
 80091a8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80091ac:	781a      	ldrb	r2, [r3, #0]
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80091b2:	7bfb      	ldrb	r3, [r7, #15]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	211a      	movs	r1, #26
 80091b8:	fb01 f303 	mul.w	r3, r1, r3
 80091bc:	4413      	add	r3, r2
 80091be:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80091c2:	881a      	ldrh	r2, [r3, #0]
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	835a      	strh	r2, [r3, #26]
 80091c8:	e015      	b.n	80091f6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	211a      	movs	r1, #26
 80091d0:	fb01 f303 	mul.w	r3, r1, r3
 80091d4:	4413      	add	r3, r2
 80091d6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80091da:	781a      	ldrb	r2, [r3, #0]
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	211a      	movs	r1, #26
 80091e6:	fb01 f303 	mul.w	r3, r1, r3
 80091ea:	4413      	add	r3, r2
 80091ec:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80091f0:	881a      	ldrh	r2, [r3, #0]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	7b9b      	ldrb	r3, [r3, #14]
 80091fa:	4619      	mov	r1, r3
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f001 ff16 	bl	800b02e <USBH_AllocPipe>
 8009202:	4603      	mov	r3, r0
 8009204:	461a      	mov	r2, r3
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	7bdb      	ldrb	r3, [r3, #15]
 800920e:	4619      	mov	r1, r3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f001 ff0c 	bl	800b02e <USBH_AllocPipe>
 8009216:	4603      	mov	r3, r0
 8009218:	461a      	mov	r2, r3
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	7b59      	ldrb	r1, [r3, #13]
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	7b98      	ldrb	r0, [r3, #14]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	8b12      	ldrh	r2, [r2, #24]
 8009236:	9202      	str	r2, [sp, #8]
 8009238:	2202      	movs	r2, #2
 800923a:	9201      	str	r2, [sp, #4]
 800923c:	9300      	str	r3, [sp, #0]
 800923e:	4623      	mov	r3, r4
 8009240:	4602      	mov	r2, r0
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f001 fec4 	bl	800afd0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	7b19      	ldrb	r1, [r3, #12]
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	7bd8      	ldrb	r0, [r3, #15]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	8b52      	ldrh	r2, [r2, #26]
 8009260:	9202      	str	r2, [sp, #8]
 8009262:	2202      	movs	r2, #2
 8009264:	9201      	str	r2, [sp, #4]
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	4623      	mov	r3, r4
 800926a:	4602      	mov	r2, r0
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f001 feaf 	bl	800afd0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2200      	movs	r2, #0
 8009276:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	7b5b      	ldrb	r3, [r3, #13]
 800927e:	2200      	movs	r2, #0
 8009280:	4619      	mov	r1, r3
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f002 f9ba 	bl	800b5fc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	7b1b      	ldrb	r3, [r3, #12]
 800928c:	2200      	movs	r2, #0
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f002 f9b3 	bl	800b5fc <USBH_LL_SetToggle>

  return USBH_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3714      	adds	r7, #20
 800929c:	46bd      	mov	sp, r7
 800929e:	bd90      	pop	{r4, r7, pc}

080092a0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092ae:	69db      	ldr	r3, [r3, #28]
 80092b0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00e      	beq.n	80092d8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	4619      	mov	r1, r3
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f001 fea4 	bl	800b00e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f001 fecf 	bl	800b070 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	7b1b      	ldrb	r3, [r3, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00e      	beq.n	80092fe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	7b1b      	ldrb	r3, [r3, #12]
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f001 fe91 	bl	800b00e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	7b1b      	ldrb	r3, [r3, #12]
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f001 febc 	bl	800b070 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	7b5b      	ldrb	r3, [r3, #13]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00e      	beq.n	8009324 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	7b5b      	ldrb	r3, [r3, #13]
 800930a:	4619      	mov	r1, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f001 fe7e 	bl	800b00e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	7b5b      	ldrb	r3, [r3, #13]
 8009316:	4619      	mov	r1, r3
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f001 fea9 	bl	800b070 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800932a:	69db      	ldr	r3, [r3, #28]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00b      	beq.n	8009348 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009336:	69db      	ldr	r3, [r3, #28]
 8009338:	4618      	mov	r0, r3
 800933a:	f002 fa0f 	bl	800b75c <free>
    phost->pActiveClass->pData = 0U;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009344:	2200      	movs	r2, #0
 8009346:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b084      	sub	sp, #16
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009360:	69db      	ldr	r3, [r3, #28]
 8009362:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	3340      	adds	r3, #64	@ 0x40
 8009368:	4619      	mov	r1, r3
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f8b1 	bl	80094d2 <GetLineCoding>
 8009370:	4603      	mov	r3, r0
 8009372:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009374:	7afb      	ldrb	r3, [r7, #11]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d105      	bne.n	8009386 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009380:	2102      	movs	r1, #2
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009386:	7afb      	ldrb	r3, [r7, #11]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009398:	2301      	movs	r3, #1
 800939a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093a6:	69db      	ldr	r3, [r3, #28]
 80093a8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80093b0:	2b04      	cmp	r3, #4
 80093b2:	d877      	bhi.n	80094a4 <USBH_CDC_Process+0x114>
 80093b4:	a201      	add	r2, pc, #4	@ (adr r2, 80093bc <USBH_CDC_Process+0x2c>)
 80093b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ba:	bf00      	nop
 80093bc:	080093d1 	.word	0x080093d1
 80093c0:	080093d7 	.word	0x080093d7
 80093c4:	08009407 	.word	0x08009407
 80093c8:	0800947b 	.word	0x0800947b
 80093cc:	08009489 	.word	0x08009489
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80093d0:	2300      	movs	r3, #0
 80093d2:	73fb      	strb	r3, [r7, #15]
      break;
 80093d4:	e06d      	b.n	80094b2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093da:	4619      	mov	r1, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f897 	bl	8009510 <SetLineCoding>
 80093e2:	4603      	mov	r3, r0
 80093e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80093e6:	7bbb      	ldrb	r3, [r7, #14]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d104      	bne.n	80093f6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	2202      	movs	r2, #2
 80093f0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80093f4:	e058      	b.n	80094a8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d055      	beq.n	80094a8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	2204      	movs	r2, #4
 8009400:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009404:	e050      	b.n	80094a8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	3340      	adds	r3, #64	@ 0x40
 800940a:	4619      	mov	r1, r3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f860 	bl	80094d2 <GetLineCoding>
 8009412:	4603      	mov	r3, r0
 8009414:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009416:	7bbb      	ldrb	r3, [r7, #14]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d126      	bne.n	800946a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800942e:	791b      	ldrb	r3, [r3, #4]
 8009430:	429a      	cmp	r2, r3
 8009432:	d13b      	bne.n	80094ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800943e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009440:	429a      	cmp	r2, r3
 8009442:	d133      	bne.n	80094ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800944e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009450:	429a      	cmp	r2, r3
 8009452:	d12b      	bne.n	80094ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800945c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800945e:	429a      	cmp	r2, r3
 8009460:	d124      	bne.n	80094ac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f958 	bl	8009718 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009468:	e020      	b.n	80094ac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800946a:	7bbb      	ldrb	r3, [r7, #14]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d01d      	beq.n	80094ac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2204      	movs	r2, #4
 8009474:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009478:	e018      	b.n	80094ac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f867 	bl	800954e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f8da 	bl	800963a <CDC_ProcessReception>
      break;
 8009486:	e014      	b.n	80094b2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009488:	2100      	movs	r1, #0
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f001 f81a 	bl	800a4c4 <USBH_ClrFeature>
 8009490:	4603      	mov	r3, r0
 8009492:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009494:	7bbb      	ldrb	r3, [r7, #14]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10a      	bne.n	80094b0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80094a2:	e005      	b.n	80094b0 <USBH_CDC_Process+0x120>

    default:
      break;
 80094a4:	bf00      	nop
 80094a6:	e004      	b.n	80094b2 <USBH_CDC_Process+0x122>
      break;
 80094a8:	bf00      	nop
 80094aa:	e002      	b.n	80094b2 <USBH_CDC_Process+0x122>
      break;
 80094ac:	bf00      	nop
 80094ae:	e000      	b.n	80094b2 <USBH_CDC_Process+0x122>
      break;
 80094b0:	bf00      	nop

  }

  return status;
 80094b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr

080094d2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b082      	sub	sp, #8
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	22a1      	movs	r2, #161	@ 0xa1
 80094e0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2221      	movs	r2, #33	@ 0x21
 80094e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2207      	movs	r2, #7
 80094f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	2207      	movs	r2, #7
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f001 fb14 	bl	800ab2e <USBH_CtlReq>
 8009506:	4603      	mov	r3, r0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2221      	movs	r2, #33	@ 0x21
 800951e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2220      	movs	r2, #32
 8009524:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2207      	movs	r2, #7
 8009536:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	2207      	movs	r2, #7
 800953c:	4619      	mov	r1, r3
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f001 faf5 	bl	800ab2e <USBH_CtlReq>
 8009544:	4603      	mov	r3, r0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b086      	sub	sp, #24
 8009552:	af02      	add	r7, sp, #8
 8009554:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800955c:	69db      	ldr	r3, [r3, #28]
 800955e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009560:	2300      	movs	r3, #0
 8009562:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800956a:	2b01      	cmp	r3, #1
 800956c:	d002      	beq.n	8009574 <CDC_ProcessTransmission+0x26>
 800956e:	2b02      	cmp	r3, #2
 8009570:	d023      	beq.n	80095ba <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009572:	e05e      	b.n	8009632 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	8b12      	ldrh	r2, [r2, #24]
 800957c:	4293      	cmp	r3, r2
 800957e:	d90b      	bls.n	8009598 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	69d9      	ldr	r1, [r3, #28]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	8b1a      	ldrh	r2, [r3, #24]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	7b5b      	ldrb	r3, [r3, #13]
 800958c:	2001      	movs	r0, #1
 800958e:	9000      	str	r0, [sp, #0]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f001 fcda 	bl	800af4a <USBH_BulkSendData>
 8009596:	e00b      	b.n	80095b0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	7b5b      	ldrb	r3, [r3, #13]
 80095a6:	2001      	movs	r0, #1
 80095a8:	9000      	str	r0, [sp, #0]
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f001 fccd 	bl	800af4a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2202      	movs	r2, #2
 80095b4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80095b8:	e03b      	b.n	8009632 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	7b5b      	ldrb	r3, [r3, #13]
 80095be:	4619      	mov	r1, r3
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f001 fff1 	bl	800b5a8 <USBH_LL_GetURBState>
 80095c6:	4603      	mov	r3, r0
 80095c8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80095ca:	7afb      	ldrb	r3, [r7, #11]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d128      	bne.n	8009622 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	8b12      	ldrh	r2, [r2, #24]
 80095d8:	4293      	cmp	r3, r2
 80095da:	d90e      	bls.n	80095fa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	8b12      	ldrh	r2, [r2, #24]
 80095e4:	1a9a      	subs	r2, r3, r2
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	69db      	ldr	r3, [r3, #28]
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	8b12      	ldrh	r2, [r2, #24]
 80095f2:	441a      	add	r2, r3
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	61da      	str	r2, [r3, #28]
 80095f8:	e002      	b.n	8009600 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009604:	2b00      	cmp	r3, #0
 8009606:	d004      	beq.n	8009612 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009610:	e00e      	b.n	8009630 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f868 	bl	80096f0 <USBH_CDC_TransmitCallback>
      break;
 8009620:	e006      	b.n	8009630 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009622:	7afb      	ldrb	r3, [r7, #11]
 8009624:	2b02      	cmp	r3, #2
 8009626:	d103      	bne.n	8009630 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009630:	bf00      	nop
  }
}
 8009632:	bf00      	nop
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b086      	sub	sp, #24
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009648:	69db      	ldr	r3, [r3, #28]
 800964a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800964c:	2300      	movs	r3, #0
 800964e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009656:	2b03      	cmp	r3, #3
 8009658:	d002      	beq.n	8009660 <CDC_ProcessReception+0x26>
 800965a:	2b04      	cmp	r3, #4
 800965c:	d00e      	beq.n	800967c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800965e:	e043      	b.n	80096e8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	6a19      	ldr	r1, [r3, #32]
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	8b5a      	ldrh	r2, [r3, #26]
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	7b1b      	ldrb	r3, [r3, #12]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f001 fc91 	bl	800af94 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	2204      	movs	r2, #4
 8009676:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800967a:	e035      	b.n	80096e8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	7b1b      	ldrb	r3, [r3, #12]
 8009680:	4619      	mov	r1, r3
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f001 ff90 	bl	800b5a8 <USBH_LL_GetURBState>
 8009688:	4603      	mov	r3, r0
 800968a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800968c:	7cfb      	ldrb	r3, [r7, #19]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d129      	bne.n	80096e6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	7b1b      	ldrb	r3, [r3, #12]
 8009696:	4619      	mov	r1, r3
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f001 fef3 	bl	800b484 <USBH_LL_GetLastXferSize>
 800969e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d016      	beq.n	80096d8 <CDC_ProcessReception+0x9e>
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	8b5b      	ldrh	r3, [r3, #26]
 80096ae:	461a      	mov	r2, r3
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d110      	bne.n	80096d8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	1ad2      	subs	r2, r2, r3
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	6a1a      	ldr	r2, [r3, #32]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	441a      	add	r2, r3
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2203      	movs	r2, #3
 80096d2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80096d6:	e006      	b.n	80096e6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f80f 	bl	8009704 <USBH_CDC_ReceiveCallback>
      break;
 80096e6:	bf00      	nop
  }
}
 80096e8:	bf00      	nop
 80096ea:	3718      	adds	r7, #24
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80096f8:	bf00      	nop
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800970c:	bf00      	nop
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	4613      	mov	r3, r2
 8009738:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d101      	bne.n	8009744 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009740:	2302      	movs	r3, #2
 8009742:	e029      	b.n	8009798 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	79fa      	ldrb	r2, [r7, #7]
 8009748:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f000 f81f 	bl	80097a0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2200      	movs	r2, #0
 8009766:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2200      	movs	r2, #0
 800976e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d003      	beq.n	8009790 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f001 fdc3 	bl	800b31c <USBH_LL_Init>

  return USBH_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80097a8:	2300      	movs	r3, #0
 80097aa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80097ac:	2300      	movs	r3, #0
 80097ae:	60fb      	str	r3, [r7, #12]
 80097b0:	e009      	b.n	80097c6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	33e0      	adds	r3, #224	@ 0xe0
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4413      	add	r3, r2
 80097bc:	2200      	movs	r2, #0
 80097be:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	3301      	adds	r3, #1
 80097c4:	60fb      	str	r3, [r7, #12]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2b0f      	cmp	r3, #15
 80097ca:	d9f2      	bls.n	80097b2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80097cc:	2300      	movs	r3, #0
 80097ce:	60fb      	str	r3, [r7, #12]
 80097d0:	e009      	b.n	80097e6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	4413      	add	r3, r2
 80097d8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80097dc:	2200      	movs	r2, #0
 80097de:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	3301      	adds	r3, #1
 80097e4:	60fb      	str	r3, [r7, #12]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097ec:	d3f1      	bcc.n	80097d2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2201      	movs	r2, #1
 80097fe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2240      	movs	r2, #64	@ 0x40
 8009812:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	331c      	adds	r3, #28
 800983e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009842:	2100      	movs	r1, #0
 8009844:	4618      	mov	r0, r3
 8009846:	f002 fdd0 	bl	800c3ea <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009850:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009854:	2100      	movs	r1, #0
 8009856:	4618      	mov	r0, r3
 8009858:	f002 fdc7 	bl	800c3ea <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009862:	2212      	movs	r2, #18
 8009864:	2100      	movs	r1, #0
 8009866:	4618      	mov	r0, r3
 8009868:	f002 fdbf 	bl	800c3ea <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009872:	223e      	movs	r2, #62	@ 0x3e
 8009874:	2100      	movs	r1, #0
 8009876:	4618      	mov	r0, r3
 8009878:	f002 fdb7 	bl	800c3ea <memset>

  return USBH_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009886:	b480      	push	{r7}
 8009888:	b085      	sub	sp, #20
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009890:	2300      	movs	r3, #0
 8009892:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d016      	beq.n	80098c8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10e      	bne.n	80098c2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80098aa:	1c59      	adds	r1, r3, #1
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	33de      	adds	r3, #222	@ 0xde
 80098b6:	6839      	ldr	r1, [r7, #0]
 80098b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80098bc:	2300      	movs	r3, #0
 80098be:	73fb      	strb	r3, [r7, #15]
 80098c0:	e004      	b.n	80098cc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80098c2:	2302      	movs	r3, #2
 80098c4:	73fb      	strb	r3, [r7, #15]
 80098c6:	e001      	b.n	80098cc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80098c8:	2302      	movs	r3, #2
 80098ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3714      	adds	r7, #20
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80098da:	b480      	push	{r7}
 80098dc:	b085      	sub	sp, #20
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	460b      	mov	r3, r1
 80098e4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80098f0:	78fa      	ldrb	r2, [r7, #3]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d204      	bcs.n	8009900 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	78fa      	ldrb	r2, [r7, #3]
 80098fa:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80098fe:	e001      	b.n	8009904 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009900:	2302      	movs	r3, #2
 8009902:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009904:	7bfb      	ldrb	r3, [r7, #15]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3714      	adds	r7, #20
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr

08009912 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009912:	b480      	push	{r7}
 8009914:	b087      	sub	sp, #28
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	4608      	mov	r0, r1
 800991c:	4611      	mov	r1, r2
 800991e:	461a      	mov	r2, r3
 8009920:	4603      	mov	r3, r0
 8009922:	70fb      	strb	r3, [r7, #3]
 8009924:	460b      	mov	r3, r1
 8009926:	70bb      	strb	r3, [r7, #2]
 8009928:	4613      	mov	r3, r2
 800992a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800992c:	2300      	movs	r3, #0
 800992e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009930:	2300      	movs	r3, #0
 8009932:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800993a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800993c:	e025      	b.n	800998a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800993e:	7dfb      	ldrb	r3, [r7, #23]
 8009940:	221a      	movs	r2, #26
 8009942:	fb02 f303 	mul.w	r3, r2, r3
 8009946:	3308      	adds	r3, #8
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	4413      	add	r3, r2
 800994c:	3302      	adds	r3, #2
 800994e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	795b      	ldrb	r3, [r3, #5]
 8009954:	78fa      	ldrb	r2, [r7, #3]
 8009956:	429a      	cmp	r2, r3
 8009958:	d002      	beq.n	8009960 <USBH_FindInterface+0x4e>
 800995a:	78fb      	ldrb	r3, [r7, #3]
 800995c:	2bff      	cmp	r3, #255	@ 0xff
 800995e:	d111      	bne.n	8009984 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009964:	78ba      	ldrb	r2, [r7, #2]
 8009966:	429a      	cmp	r2, r3
 8009968:	d002      	beq.n	8009970 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800996a:	78bb      	ldrb	r3, [r7, #2]
 800996c:	2bff      	cmp	r3, #255	@ 0xff
 800996e:	d109      	bne.n	8009984 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009974:	787a      	ldrb	r2, [r7, #1]
 8009976:	429a      	cmp	r2, r3
 8009978:	d002      	beq.n	8009980 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800997a:	787b      	ldrb	r3, [r7, #1]
 800997c:	2bff      	cmp	r3, #255	@ 0xff
 800997e:	d101      	bne.n	8009984 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009980:	7dfb      	ldrb	r3, [r7, #23]
 8009982:	e006      	b.n	8009992 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009984:	7dfb      	ldrb	r3, [r7, #23]
 8009986:	3301      	adds	r3, #1
 8009988:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800998a:	7dfb      	ldrb	r3, [r7, #23]
 800998c:	2b01      	cmp	r3, #1
 800998e:	d9d6      	bls.n	800993e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009990:	23ff      	movs	r3, #255	@ 0xff
}
 8009992:	4618      	mov	r0, r3
 8009994:	371c      	adds	r7, #28
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b082      	sub	sp, #8
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f001 fcf4 	bl	800b394 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80099ac:	2101      	movs	r1, #1
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f001 fe0d 	bl	800b5ce <USBH_LL_DriverVBUS>

  return USBH_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
	...

080099c0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b088      	sub	sp, #32
 80099c4:	af04      	add	r7, sp, #16
 80099c6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80099c8:	2302      	movs	r3, #2
 80099ca:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80099cc:	2300      	movs	r3, #0
 80099ce:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d102      	bne.n	80099e2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2203      	movs	r2, #3
 80099e0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	2b0b      	cmp	r3, #11
 80099ea:	f200 81bb 	bhi.w	8009d64 <USBH_Process+0x3a4>
 80099ee:	a201      	add	r2, pc, #4	@ (adr r2, 80099f4 <USBH_Process+0x34>)
 80099f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f4:	08009a25 	.word	0x08009a25
 80099f8:	08009a57 	.word	0x08009a57
 80099fc:	08009abf 	.word	0x08009abf
 8009a00:	08009cff 	.word	0x08009cff
 8009a04:	08009d65 	.word	0x08009d65
 8009a08:	08009b5f 	.word	0x08009b5f
 8009a0c:	08009ca5 	.word	0x08009ca5
 8009a10:	08009b95 	.word	0x08009b95
 8009a14:	08009bb5 	.word	0x08009bb5
 8009a18:	08009bd3 	.word	0x08009bd3
 8009a1c:	08009c17 	.word	0x08009c17
 8009a20:	08009ce7 	.word	0x08009ce7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f000 819b 	beq.w	8009d68 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2201      	movs	r2, #1
 8009a36:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009a38:	20c8      	movs	r0, #200	@ 0xc8
 8009a3a:	f001 fe12 	bl	800b662 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f001 fd05 	bl	800b44e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009a54:	e188      	b.n	8009d68 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d107      	bne.n	8009a70 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a6e:	e18a      	b.n	8009d86 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009a76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a7a:	d914      	bls.n	8009aa6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009a82:	3301      	adds	r3, #1
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009a92:	2b03      	cmp	r3, #3
 8009a94:	d903      	bls.n	8009a9e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	220d      	movs	r2, #13
 8009a9a:	701a      	strb	r2, [r3, #0]
      break;
 8009a9c:	e173      	b.n	8009d86 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	701a      	strb	r2, [r3, #0]
      break;
 8009aa4:	e16f      	b.n	8009d86 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009aac:	f103 020a 	add.w	r2, r3, #10
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009ab6:	200a      	movs	r0, #10
 8009ab8:	f001 fdd3 	bl	800b662 <USBH_Delay>
      break;
 8009abc:	e163      	b.n	8009d86 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d005      	beq.n	8009ad4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ace:	2104      	movs	r1, #4
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009ad4:	2064      	movs	r0, #100	@ 0x64
 8009ad6:	f001 fdc4 	bl	800b662 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f001 fc90 	bl	800b400 <USBH_LL_GetSpeed>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2205      	movs	r2, #5
 8009aee:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009af0:	2100      	movs	r1, #0
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f001 fa9b 	bl	800b02e <USBH_AllocPipe>
 8009af8:	4603      	mov	r3, r0
 8009afa:	461a      	mov	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009b00:	2180      	movs	r1, #128	@ 0x80
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f001 fa93 	bl	800b02e <USBH_AllocPipe>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	7919      	ldrb	r1, [r3, #4]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009b24:	9202      	str	r2, [sp, #8]
 8009b26:	2200      	movs	r2, #0
 8009b28:	9201      	str	r2, [sp, #4]
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2280      	movs	r2, #128	@ 0x80
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f001 fa4d 	bl	800afd0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	7959      	ldrb	r1, [r3, #5]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009b4a:	9202      	str	r2, [sp, #8]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	9201      	str	r2, [sp, #4]
 8009b50:	9300      	str	r3, [sp, #0]
 8009b52:	4603      	mov	r3, r0
 8009b54:	2200      	movs	r2, #0
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f001 fa3a 	bl	800afd0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b5c:	e113      	b.n	8009d86 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f916 	bl	8009d90 <USBH_HandleEnum>
 8009b64:	4603      	mov	r3, r0
 8009b66:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009b68:	7bbb      	ldrb	r3, [r7, #14]
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f040 80fd 	bne.w	8009d6c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d103      	bne.n	8009b8c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2208      	movs	r2, #8
 8009b88:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009b8a:	e0ef      	b.n	8009d6c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2207      	movs	r2, #7
 8009b90:	701a      	strb	r2, [r3, #0]
      break;
 8009b92:	e0eb      	b.n	8009d6c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f000 80e8 	beq.w	8009d70 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ba6:	2101      	movs	r1, #1
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2208      	movs	r2, #8
 8009bb0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009bb2:	e0dd      	b.n	8009d70 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 fc3a 	bl	800a436 <USBH_SetCfg>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f040 80d5 	bne.w	8009d74 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2209      	movs	r2, #9
 8009bce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009bd0:	e0d0      	b.n	8009d74 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009bd8:	f003 0320 	and.w	r3, r3, #32
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d016      	beq.n	8009c0e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009be0:	2101      	movs	r1, #1
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fc4a 	bl	800a47c <USBH_SetFeature>
 8009be8:	4603      	mov	r3, r0
 8009bea:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009bec:	7bbb      	ldrb	r3, [r7, #14]
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d103      	bne.n	8009bfc <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	220a      	movs	r2, #10
 8009bf8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009bfa:	e0bd      	b.n	8009d78 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009bfc:	7bbb      	ldrb	r3, [r7, #14]
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	2b03      	cmp	r3, #3
 8009c02:	f040 80b9 	bne.w	8009d78 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	220a      	movs	r2, #10
 8009c0a:	701a      	strb	r2, [r3, #0]
      break;
 8009c0c:	e0b4      	b.n	8009d78 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	220a      	movs	r2, #10
 8009c12:	701a      	strb	r2, [r3, #0]
      break;
 8009c14:	e0b0      	b.n	8009d78 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f000 80ad 	beq.w	8009d7c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	73fb      	strb	r3, [r7, #15]
 8009c2e:	e016      	b.n	8009c5e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009c30:	7bfa      	ldrb	r2, [r7, #15]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	32de      	adds	r2, #222	@ 0xde
 8009c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c3a:	791a      	ldrb	r2, [r3, #4]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d108      	bne.n	8009c58 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009c46:	7bfa      	ldrb	r2, [r7, #15]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	32de      	adds	r2, #222	@ 0xde
 8009c4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009c56:	e005      	b.n	8009c64 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009c58:	7bfb      	ldrb	r3, [r7, #15]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	73fb      	strb	r3, [r7, #15]
 8009c5e:	7bfb      	ldrb	r3, [r7, #15]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d0e5      	beq.n	8009c30 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d016      	beq.n	8009c9c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	4798      	blx	r3
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d109      	bne.n	8009c94 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2206      	movs	r2, #6
 8009c84:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c8c:	2103      	movs	r1, #3
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009c92:	e073      	b.n	8009d7c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	220d      	movs	r2, #13
 8009c98:	701a      	strb	r2, [r3, #0]
      break;
 8009c9a:	e06f      	b.n	8009d7c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	220d      	movs	r2, #13
 8009ca0:	701a      	strb	r2, [r3, #0]
      break;
 8009ca2:	e06b      	b.n	8009d7c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d017      	beq.n	8009cde <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	4798      	blx	r3
 8009cba:	4603      	mov	r3, r0
 8009cbc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009cbe:	7bbb      	ldrb	r3, [r7, #14]
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d103      	bne.n	8009cce <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	220b      	movs	r2, #11
 8009cca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009ccc:	e058      	b.n	8009d80 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009cce:	7bbb      	ldrb	r3, [r7, #14]
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d154      	bne.n	8009d80 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	220d      	movs	r2, #13
 8009cda:	701a      	strb	r2, [r3, #0]
      break;
 8009cdc:	e050      	b.n	8009d80 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	220d      	movs	r2, #13
 8009ce2:	701a      	strb	r2, [r3, #0]
      break;
 8009ce4:	e04c      	b.n	8009d80 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d049      	beq.n	8009d84 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009cf6:	695b      	ldr	r3, [r3, #20]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	4798      	blx	r3
      }
      break;
 8009cfc:	e042      	b.n	8009d84 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f7ff fd4a 	bl	80097a0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d009      	beq.n	8009d2a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d005      	beq.n	8009d40 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d3a:	2105      	movs	r1, #5
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d107      	bne.n	8009d5c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f7ff fe22 	bl	800999e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009d5a:	e014      	b.n	8009d86 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f001 fb19 	bl	800b394 <USBH_LL_Start>
      break;
 8009d62:	e010      	b.n	8009d86 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009d64:	bf00      	nop
 8009d66:	e00e      	b.n	8009d86 <USBH_Process+0x3c6>
      break;
 8009d68:	bf00      	nop
 8009d6a:	e00c      	b.n	8009d86 <USBH_Process+0x3c6>
      break;
 8009d6c:	bf00      	nop
 8009d6e:	e00a      	b.n	8009d86 <USBH_Process+0x3c6>
    break;
 8009d70:	bf00      	nop
 8009d72:	e008      	b.n	8009d86 <USBH_Process+0x3c6>
      break;
 8009d74:	bf00      	nop
 8009d76:	e006      	b.n	8009d86 <USBH_Process+0x3c6>
      break;
 8009d78:	bf00      	nop
 8009d7a:	e004      	b.n	8009d86 <USBH_Process+0x3c6>
      break;
 8009d7c:	bf00      	nop
 8009d7e:	e002      	b.n	8009d86 <USBH_Process+0x3c6>
      break;
 8009d80:	bf00      	nop
 8009d82:	e000      	b.n	8009d86 <USBH_Process+0x3c6>
      break;
 8009d84:	bf00      	nop
  }
  return USBH_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3710      	adds	r7, #16
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b088      	sub	sp, #32
 8009d94:	af04      	add	r7, sp, #16
 8009d96:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	785b      	ldrb	r3, [r3, #1]
 8009da4:	2b07      	cmp	r3, #7
 8009da6:	f200 81bd 	bhi.w	800a124 <USBH_HandleEnum+0x394>
 8009daa:	a201      	add	r2, pc, #4	@ (adr r2, 8009db0 <USBH_HandleEnum+0x20>)
 8009dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db0:	08009dd1 	.word	0x08009dd1
 8009db4:	08009e8b 	.word	0x08009e8b
 8009db8:	08009ef5 	.word	0x08009ef5
 8009dbc:	08009f7f 	.word	0x08009f7f
 8009dc0:	08009fe9 	.word	0x08009fe9
 8009dc4:	0800a059 	.word	0x0800a059
 8009dc8:	0800a09f 	.word	0x0800a09f
 8009dcc:	0800a0e5 	.word	0x0800a0e5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009dd0:	2108      	movs	r1, #8
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 fa4c 	bl	800a270 <USBH_Get_DevDesc>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ddc:	7bbb      	ldrb	r3, [r7, #14]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d12e      	bne.n	8009e40 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	7919      	ldrb	r1, [r3, #4]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009e06:	9202      	str	r2, [sp, #8]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	9201      	str	r2, [sp, #4]
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2280      	movs	r2, #128	@ 0x80
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f001 f8dc 	bl	800afd0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	7959      	ldrb	r1, [r3, #5]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e2c:	9202      	str	r2, [sp, #8]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	9201      	str	r2, [sp, #4]
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	4603      	mov	r3, r0
 8009e36:	2200      	movs	r2, #0
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f001 f8c9 	bl	800afd0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009e3e:	e173      	b.n	800a128 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e40:	7bbb      	ldrb	r3, [r7, #14]
 8009e42:	2b03      	cmp	r3, #3
 8009e44:	f040 8170 	bne.w	800a128 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009e4e:	3301      	adds	r3, #1
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009e5e:	2b03      	cmp	r3, #3
 8009e60:	d903      	bls.n	8009e6a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	220d      	movs	r2, #13
 8009e66:	701a      	strb	r2, [r3, #0]
      break;
 8009e68:	e15e      	b.n	800a128 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	795b      	ldrb	r3, [r3, #5]
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f001 f8fd 	bl	800b070 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	791b      	ldrb	r3, [r3, #4]
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f001 f8f7 	bl	800b070 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2200      	movs	r2, #0
 8009e86:	701a      	strb	r2, [r3, #0]
      break;
 8009e88:	e14e      	b.n	800a128 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009e8a:	2112      	movs	r1, #18
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 f9ef 	bl	800a270 <USBH_Get_DevDesc>
 8009e92:	4603      	mov	r3, r0
 8009e94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e96:	7bbb      	ldrb	r3, [r7, #14]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d103      	bne.n	8009ea4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009ea2:	e143      	b.n	800a12c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ea4:	7bbb      	ldrb	r3, [r7, #14]
 8009ea6:	2b03      	cmp	r3, #3
 8009ea8:	f040 8140 	bne.w	800a12c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009ec2:	2b03      	cmp	r3, #3
 8009ec4:	d903      	bls.n	8009ece <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	220d      	movs	r2, #13
 8009eca:	701a      	strb	r2, [r3, #0]
      break;
 8009ecc:	e12e      	b.n	800a12c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	795b      	ldrb	r3, [r3, #5]
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f001 f8cb 	bl	800b070 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	791b      	ldrb	r3, [r3, #4]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f001 f8c5 	bl	800b070 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	701a      	strb	r2, [r3, #0]
      break;
 8009ef2:	e11b      	b.n	800a12c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fa79 	bl	800a3ee <USBH_SetAddress>
 8009efc:	4603      	mov	r3, r0
 8009efe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f00:	7bbb      	ldrb	r3, [r7, #14]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d130      	bne.n	8009f68 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009f06:	2002      	movs	r0, #2
 8009f08:	f001 fbab 	bl	800b662 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2203      	movs	r2, #3
 8009f18:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	7919      	ldrb	r1, [r3, #4]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009f2e:	9202      	str	r2, [sp, #8]
 8009f30:	2200      	movs	r2, #0
 8009f32:	9201      	str	r2, [sp, #4]
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	4603      	mov	r3, r0
 8009f38:	2280      	movs	r2, #128	@ 0x80
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f001 f848 	bl	800afd0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	7959      	ldrb	r1, [r3, #5]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f54:	9202      	str	r2, [sp, #8]
 8009f56:	2200      	movs	r2, #0
 8009f58:	9201      	str	r2, [sp, #4]
 8009f5a:	9300      	str	r3, [sp, #0]
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2200      	movs	r2, #0
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f001 f835 	bl	800afd0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009f66:	e0e3      	b.n	800a130 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f68:	7bbb      	ldrb	r3, [r7, #14]
 8009f6a:	2b03      	cmp	r3, #3
 8009f6c:	f040 80e0 	bne.w	800a130 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	220d      	movs	r2, #13
 8009f74:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	705a      	strb	r2, [r3, #1]
      break;
 8009f7c:	e0d8      	b.n	800a130 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009f7e:	2109      	movs	r1, #9
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 f9a1 	bl	800a2c8 <USBH_Get_CfgDesc>
 8009f86:	4603      	mov	r3, r0
 8009f88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f8a:	7bbb      	ldrb	r3, [r7, #14]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d103      	bne.n	8009f98 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2204      	movs	r2, #4
 8009f94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009f96:	e0cd      	b.n	800a134 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f98:	7bbb      	ldrb	r3, [r7, #14]
 8009f9a:	2b03      	cmp	r3, #3
 8009f9c:	f040 80ca 	bne.w	800a134 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	b2da      	uxtb	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009fb6:	2b03      	cmp	r3, #3
 8009fb8:	d903      	bls.n	8009fc2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	220d      	movs	r2, #13
 8009fbe:	701a      	strb	r2, [r3, #0]
      break;
 8009fc0:	e0b8      	b.n	800a134 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	795b      	ldrb	r3, [r3, #5]
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f001 f851 	bl	800b070 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	791b      	ldrb	r3, [r3, #4]
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f001 f84b 	bl	800b070 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	701a      	strb	r2, [r3, #0]
      break;
 8009fe6:	e0a5      	b.n	800a134 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009fee:	4619      	mov	r1, r3
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f969 	bl	800a2c8 <USBH_Get_CfgDesc>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ffa:	7bbb      	ldrb	r3, [r7, #14]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d103      	bne.n	800a008 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2205      	movs	r2, #5
 800a004:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a006:	e097      	b.n	800a138 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a008:	7bbb      	ldrb	r3, [r7, #14]
 800a00a:	2b03      	cmp	r3, #3
 800a00c:	f040 8094 	bne.w	800a138 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a016:	3301      	adds	r3, #1
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a026:	2b03      	cmp	r3, #3
 800a028:	d903      	bls.n	800a032 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	220d      	movs	r2, #13
 800a02e:	701a      	strb	r2, [r3, #0]
      break;
 800a030:	e082      	b.n	800a138 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	795b      	ldrb	r3, [r3, #5]
 800a036:	4619      	mov	r1, r3
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f001 f819 	bl	800b070 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	791b      	ldrb	r3, [r3, #4]
 800a042:	4619      	mov	r1, r3
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f001 f813 	bl	800b070 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	701a      	strb	r2, [r3, #0]
      break;
 800a056:	e06f      	b.n	800a138 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d019      	beq.n	800a096 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a06e:	23ff      	movs	r3, #255	@ 0xff
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f953 	bl	800a31c <USBH_Get_StringDesc>
 800a076:	4603      	mov	r3, r0
 800a078:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a07a:	7bbb      	ldrb	r3, [r7, #14]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d103      	bne.n	800a088 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2206      	movs	r2, #6
 800a084:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a086:	e059      	b.n	800a13c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a088:	7bbb      	ldrb	r3, [r7, #14]
 800a08a:	2b03      	cmp	r3, #3
 800a08c:	d156      	bne.n	800a13c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2206      	movs	r2, #6
 800a092:	705a      	strb	r2, [r3, #1]
      break;
 800a094:	e052      	b.n	800a13c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2206      	movs	r2, #6
 800a09a:	705a      	strb	r2, [r3, #1]
      break;
 800a09c:	e04e      	b.n	800a13c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d019      	beq.n	800a0dc <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a0b4:	23ff      	movs	r3, #255	@ 0xff
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f930 	bl	800a31c <USBH_Get_StringDesc>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a0c0:	7bbb      	ldrb	r3, [r7, #14]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d103      	bne.n	800a0ce <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2207      	movs	r2, #7
 800a0ca:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a0cc:	e038      	b.n	800a140 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0ce:	7bbb      	ldrb	r3, [r7, #14]
 800a0d0:	2b03      	cmp	r3, #3
 800a0d2:	d135      	bne.n	800a140 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2207      	movs	r2, #7
 800a0d8:	705a      	strb	r2, [r3, #1]
      break;
 800a0da:	e031      	b.n	800a140 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2207      	movs	r2, #7
 800a0e0:	705a      	strb	r2, [r3, #1]
      break;
 800a0e2:	e02d      	b.n	800a140 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d017      	beq.n	800a11e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a0fa:	23ff      	movs	r3, #255	@ 0xff
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f90d 	bl	800a31c <USBH_Get_StringDesc>
 800a102:	4603      	mov	r3, r0
 800a104:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a106:	7bbb      	ldrb	r3, [r7, #14]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d102      	bne.n	800a112 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a10c:	2300      	movs	r3, #0
 800a10e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a110:	e018      	b.n	800a144 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a112:	7bbb      	ldrb	r3, [r7, #14]
 800a114:	2b03      	cmp	r3, #3
 800a116:	d115      	bne.n	800a144 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a118:	2300      	movs	r3, #0
 800a11a:	73fb      	strb	r3, [r7, #15]
      break;
 800a11c:	e012      	b.n	800a144 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a11e:	2300      	movs	r3, #0
 800a120:	73fb      	strb	r3, [r7, #15]
      break;
 800a122:	e00f      	b.n	800a144 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a124:	bf00      	nop
 800a126:	e00e      	b.n	800a146 <USBH_HandleEnum+0x3b6>
      break;
 800a128:	bf00      	nop
 800a12a:	e00c      	b.n	800a146 <USBH_HandleEnum+0x3b6>
      break;
 800a12c:	bf00      	nop
 800a12e:	e00a      	b.n	800a146 <USBH_HandleEnum+0x3b6>
      break;
 800a130:	bf00      	nop
 800a132:	e008      	b.n	800a146 <USBH_HandleEnum+0x3b6>
      break;
 800a134:	bf00      	nop
 800a136:	e006      	b.n	800a146 <USBH_HandleEnum+0x3b6>
      break;
 800a138:	bf00      	nop
 800a13a:	e004      	b.n	800a146 <USBH_HandleEnum+0x3b6>
      break;
 800a13c:	bf00      	nop
 800a13e:	e002      	b.n	800a146 <USBH_HandleEnum+0x3b6>
      break;
 800a140:	bf00      	nop
 800a142:	e000      	b.n	800a146 <USBH_HandleEnum+0x3b6>
      break;
 800a144:	bf00      	nop
  }
  return Status;
 800a146:	7bfb      	ldrb	r3, [r7, #15]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	683a      	ldr	r2, [r7, #0]
 800a15e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a162:	bf00      	nop
 800a164:	370c      	adds	r7, #12
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr

0800a16e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b082      	sub	sp, #8
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a17c:	1c5a      	adds	r2, r3, #1
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f804 	bl	800a192 <USBH_HandleSof>
}
 800a18a:	bf00      	nop
 800a18c:	3708      	adds	r7, #8
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b082      	sub	sp, #8
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	2b0b      	cmp	r3, #11
 800a1a2:	d10a      	bne.n	800a1ba <USBH_HandleSof+0x28>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d005      	beq.n	800a1ba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a1b4:	699b      	ldr	r3, [r3, #24]
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	4798      	blx	r3
  }
}
 800a1ba:	bf00      	nop
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a1c2:	b480      	push	{r7}
 800a1c4:	b083      	sub	sp, #12
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a1d2:	bf00      	nop
}
 800a1d4:	370c      	adds	r7, #12
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr

0800a1de <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a1de:	b480      	push	{r7}
 800a1e0:	b083      	sub	sp, #12
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800a1ee:	bf00      	nop
}
 800a1f0:	370c      	adds	r7, #12
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr

0800a1fa <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a1fa:	b480      	push	{r7}
 800a1fc:	b083      	sub	sp, #12
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2201      	movs	r2, #1
 800a206:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f001 f8be 	bl	800b3ca <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	791b      	ldrb	r3, [r3, #4]
 800a252:	4619      	mov	r1, r3
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 ff0b 	bl	800b070 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	795b      	ldrb	r3, [r3, #5]
 800a25e:	4619      	mov	r1, r3
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 ff05 	bl	800b070 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b086      	sub	sp, #24
 800a274:	af02      	add	r7, sp, #8
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	460b      	mov	r3, r1
 800a27a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a27c:	887b      	ldrh	r3, [r7, #2]
 800a27e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a282:	d901      	bls.n	800a288 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a284:	2303      	movs	r3, #3
 800a286:	e01b      	b.n	800a2c0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a28e:	887b      	ldrh	r3, [r7, #2]
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	4613      	mov	r3, r2
 800a294:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a298:	2100      	movs	r1, #0
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f872 	bl	800a384 <USBH_GetDescriptor>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d109      	bne.n	800a2be <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a2b0:	887a      	ldrh	r2, [r7, #2]
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 f929 	bl	800a50c <USBH_ParseDevDesc>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a2be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af02      	add	r7, sp, #8
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	331c      	adds	r3, #28
 800a2d8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a2da:	887b      	ldrh	r3, [r7, #2]
 800a2dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2e0:	d901      	bls.n	800a2e6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	e016      	b.n	800a314 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a2e6:	887b      	ldrh	r3, [r7, #2]
 800a2e8:	9300      	str	r3, [sp, #0]
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 f846 	bl	800a384 <USBH_GetDescriptor>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a2fc:	7bfb      	ldrb	r3, [r7, #15]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d107      	bne.n	800a312 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a302:	887b      	ldrh	r3, [r7, #2]
 800a304:	461a      	mov	r2, r3
 800a306:	68b9      	ldr	r1, [r7, #8]
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f9af 	bl	800a66c <USBH_ParseCfgDesc>
 800a30e:	4603      	mov	r3, r0
 800a310:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a312:	7bfb      	ldrb	r3, [r7, #15]
}
 800a314:	4618      	mov	r0, r3
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b088      	sub	sp, #32
 800a320:	af02      	add	r7, sp, #8
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	607a      	str	r2, [r7, #4]
 800a326:	461a      	mov	r2, r3
 800a328:	460b      	mov	r3, r1
 800a32a:	72fb      	strb	r3, [r7, #11]
 800a32c:	4613      	mov	r3, r2
 800a32e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a330:	893b      	ldrh	r3, [r7, #8]
 800a332:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a336:	d802      	bhi.n	800a33e <USBH_Get_StringDesc+0x22>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d101      	bne.n	800a342 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a33e:	2303      	movs	r3, #3
 800a340:	e01c      	b.n	800a37c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a342:	7afb      	ldrb	r3, [r7, #11]
 800a344:	b29b      	uxth	r3, r3
 800a346:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a34a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a352:	893b      	ldrh	r3, [r7, #8]
 800a354:	9300      	str	r3, [sp, #0]
 800a356:	460b      	mov	r3, r1
 800a358:	2100      	movs	r1, #0
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f000 f812 	bl	800a384 <USBH_GetDescriptor>
 800a360:	4603      	mov	r3, r0
 800a362:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a364:	7dfb      	ldrb	r3, [r7, #23]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d107      	bne.n	800a37a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a370:	893a      	ldrh	r2, [r7, #8]
 800a372:	6879      	ldr	r1, [r7, #4]
 800a374:	4618      	mov	r0, r3
 800a376:	f000 fb8d 	bl	800aa94 <USBH_ParseStringDesc>
  }

  return status;
 800a37a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3718      	adds	r7, #24
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	607b      	str	r3, [r7, #4]
 800a38e:	460b      	mov	r3, r1
 800a390:	72fb      	strb	r3, [r7, #11]
 800a392:	4613      	mov	r3, r2
 800a394:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	789b      	ldrb	r3, [r3, #2]
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d11c      	bne.n	800a3d8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a39e:	7afb      	ldrb	r3, [r7, #11]
 800a3a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a3a4:	b2da      	uxtb	r2, r3
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2206      	movs	r2, #6
 800a3ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	893a      	ldrh	r2, [r7, #8]
 800a3b4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a3b6:	893b      	ldrh	r3, [r7, #8]
 800a3b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a3bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3c0:	d104      	bne.n	800a3cc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f240 4209 	movw	r2, #1033	@ 0x409
 800a3c8:	829a      	strh	r2, [r3, #20]
 800a3ca:	e002      	b.n	800a3d2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	8b3a      	ldrh	r2, [r7, #24]
 800a3d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a3d8:	8b3b      	ldrh	r3, [r7, #24]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	6879      	ldr	r1, [r7, #4]
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f000 fba5 	bl	800ab2e <USBH_CtlReq>
 800a3e4:	4603      	mov	r3, r0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b082      	sub	sp, #8
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	789b      	ldrb	r3, [r3, #2]
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d10f      	bne.n	800a422 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2205      	movs	r2, #5
 800a40c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a40e:	78fb      	ldrb	r3, [r7, #3]
 800a410:	b29a      	uxth	r2, r3
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a422:	2200      	movs	r2, #0
 800a424:	2100      	movs	r1, #0
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 fb81 	bl	800ab2e <USBH_CtlReq>
 800a42c:	4603      	mov	r3, r0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3708      	adds	r7, #8
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b082      	sub	sp, #8
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	460b      	mov	r3, r1
 800a440:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	789b      	ldrb	r3, [r3, #2]
 800a446:	2b01      	cmp	r3, #1
 800a448:	d10e      	bne.n	800a468 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2209      	movs	r2, #9
 800a454:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	887a      	ldrh	r2, [r7, #2]
 800a45a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a468:	2200      	movs	r2, #0
 800a46a:	2100      	movs	r1, #0
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fb5e 	bl	800ab2e <USBH_CtlReq>
 800a472:	4603      	mov	r3, r0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	460b      	mov	r3, r1
 800a486:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	789b      	ldrb	r3, [r3, #2]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d10f      	bne.n	800a4b0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2203      	movs	r2, #3
 800a49a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a49c:	78fb      	ldrb	r3, [r7, #3]
 800a49e:	b29a      	uxth	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fb3a 	bl	800ab2e <USBH_CtlReq>
 800a4ba:	4603      	mov	r3, r0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3708      	adds	r7, #8
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	789b      	ldrb	r3, [r3, #2]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d10f      	bne.n	800a4f8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2202      	movs	r2, #2
 800a4dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a4ea:	78fb      	ldrb	r3, [r7, #3]
 800a4ec:	b29a      	uxth	r2, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 fb16 	bl	800ab2e <USBH_CtlReq>
 800a502:	4603      	mov	r3, r0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b087      	sub	sp, #28
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	4613      	mov	r3, r2
 800a518:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a520:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a522:	2300      	movs	r3, #0
 800a524:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d101      	bne.n	800a530 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a52c:	2302      	movs	r3, #2
 800a52e:	e094      	b.n	800a65a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	781a      	ldrb	r2, [r3, #0]
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	785a      	ldrb	r2, [r3, #1]
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	3302      	adds	r3, #2
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	461a      	mov	r2, r3
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	3303      	adds	r3, #3
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	021b      	lsls	r3, r3, #8
 800a550:	b29b      	uxth	r3, r3
 800a552:	4313      	orrs	r3, r2
 800a554:	b29a      	uxth	r2, r3
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	791a      	ldrb	r2, [r3, #4]
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	795a      	ldrb	r2, [r3, #5]
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	799a      	ldrb	r2, [r3, #6]
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	79da      	ldrb	r2, [r3, #7]
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a580:	2b00      	cmp	r3, #0
 800a582:	d004      	beq.n	800a58e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d11b      	bne.n	800a5c6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	79db      	ldrb	r3, [r3, #7]
 800a592:	2b20      	cmp	r3, #32
 800a594:	dc0f      	bgt.n	800a5b6 <USBH_ParseDevDesc+0xaa>
 800a596:	2b08      	cmp	r3, #8
 800a598:	db0f      	blt.n	800a5ba <USBH_ParseDevDesc+0xae>
 800a59a:	3b08      	subs	r3, #8
 800a59c:	4a32      	ldr	r2, [pc, #200]	@ (800a668 <USBH_ParseDevDesc+0x15c>)
 800a59e:	fa22 f303 	lsr.w	r3, r2, r3
 800a5a2:	f003 0301 	and.w	r3, r3, #1
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	bf14      	ite	ne
 800a5aa:	2301      	movne	r3, #1
 800a5ac:	2300      	moveq	r3, #0
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d106      	bne.n	800a5c2 <USBH_ParseDevDesc+0xb6>
 800a5b4:	e001      	b.n	800a5ba <USBH_ParseDevDesc+0xae>
 800a5b6:	2b40      	cmp	r3, #64	@ 0x40
 800a5b8:	d003      	beq.n	800a5c2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	2208      	movs	r2, #8
 800a5be:	71da      	strb	r2, [r3, #7]
        break;
 800a5c0:	e000      	b.n	800a5c4 <USBH_ParseDevDesc+0xb8>
        break;
 800a5c2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a5c4:	e00e      	b.n	800a5e4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a5cc:	2b02      	cmp	r3, #2
 800a5ce:	d107      	bne.n	800a5e0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	79db      	ldrb	r3, [r3, #7]
 800a5d4:	2b08      	cmp	r3, #8
 800a5d6:	d005      	beq.n	800a5e4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	2208      	movs	r2, #8
 800a5dc:	71da      	strb	r2, [r3, #7]
 800a5de:	e001      	b.n	800a5e4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a5e4:	88fb      	ldrh	r3, [r7, #6]
 800a5e6:	2b08      	cmp	r3, #8
 800a5e8:	d936      	bls.n	800a658 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	3308      	adds	r3, #8
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	3309      	adds	r3, #9
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	021b      	lsls	r3, r3, #8
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	330a      	adds	r3, #10
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	461a      	mov	r2, r3
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	330b      	adds	r3, #11
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	021b      	lsls	r3, r3, #8
 800a614:	b29b      	uxth	r3, r3
 800a616:	4313      	orrs	r3, r2
 800a618:	b29a      	uxth	r2, r3
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	330c      	adds	r3, #12
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	461a      	mov	r2, r3
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	330d      	adds	r3, #13
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	021b      	lsls	r3, r3, #8
 800a62e:	b29b      	uxth	r3, r3
 800a630:	4313      	orrs	r3, r2
 800a632:	b29a      	uxth	r2, r3
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	7b9a      	ldrb	r2, [r3, #14]
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	7bda      	ldrb	r2, [r3, #15]
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	7c1a      	ldrb	r2, [r3, #16]
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	7c5a      	ldrb	r2, [r3, #17]
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a658:	7dfb      	ldrb	r3, [r7, #23]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	371c      	adds	r7, #28
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	01000101 	.word	0x01000101

0800a66c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b08c      	sub	sp, #48	@ 0x30
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	4613      	mov	r3, r2
 800a678:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a680:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a682:	2300      	movs	r3, #0
 800a684:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a688:	2300      	movs	r3, #0
 800a68a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a68e:	2300      	movs	r3, #0
 800a690:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d101      	bne.n	800a69e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a69a:	2302      	movs	r3, #2
 800a69c:	e0da      	b.n	800a854 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	2b09      	cmp	r3, #9
 800a6a8:	d002      	beq.n	800a6b0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ac:	2209      	movs	r2, #9
 800a6ae:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	781a      	ldrb	r2, [r3, #0]
 800a6b4:	6a3b      	ldr	r3, [r7, #32]
 800a6b6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	785a      	ldrb	r2, [r3, #1]
 800a6bc:	6a3b      	ldr	r3, [r7, #32]
 800a6be:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	3302      	adds	r3, #2
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	3303      	adds	r3, #3
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	021b      	lsls	r3, r3, #8
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6da:	bf28      	it	cs
 800a6dc:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	6a3b      	ldr	r3, [r7, #32]
 800a6e4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	791a      	ldrb	r2, [r3, #4]
 800a6ea:	6a3b      	ldr	r3, [r7, #32]
 800a6ec:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	795a      	ldrb	r2, [r3, #5]
 800a6f2:	6a3b      	ldr	r3, [r7, #32]
 800a6f4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	799a      	ldrb	r2, [r3, #6]
 800a6fa:	6a3b      	ldr	r3, [r7, #32]
 800a6fc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	79da      	ldrb	r2, [r3, #7]
 800a702:	6a3b      	ldr	r3, [r7, #32]
 800a704:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	7a1a      	ldrb	r2, [r3, #8]
 800a70a:	6a3b      	ldr	r3, [r7, #32]
 800a70c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a70e:	88fb      	ldrh	r3, [r7, #6]
 800a710:	2b09      	cmp	r3, #9
 800a712:	f240 809d 	bls.w	800a850 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a716:	2309      	movs	r3, #9
 800a718:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a71a:	2300      	movs	r3, #0
 800a71c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a71e:	e081      	b.n	800a824 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a720:	f107 0316 	add.w	r3, r7, #22
 800a724:	4619      	mov	r1, r3
 800a726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a728:	f000 f9e7 	bl	800aafa <USBH_GetNextDesc>
 800a72c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a730:	785b      	ldrb	r3, [r3, #1]
 800a732:	2b04      	cmp	r3, #4
 800a734:	d176      	bne.n	800a824 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	2b09      	cmp	r3, #9
 800a73c:	d002      	beq.n	800a744 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a740:	2209      	movs	r2, #9
 800a742:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a748:	221a      	movs	r2, #26
 800a74a:	fb02 f303 	mul.w	r3, r2, r3
 800a74e:	3308      	adds	r3, #8
 800a750:	6a3a      	ldr	r2, [r7, #32]
 800a752:	4413      	add	r3, r2
 800a754:	3302      	adds	r3, #2
 800a756:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a758:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a75a:	69f8      	ldr	r0, [r7, #28]
 800a75c:	f000 f87e 	bl	800a85c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a760:	2300      	movs	r3, #0
 800a762:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a766:	2300      	movs	r3, #0
 800a768:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a76a:	e043      	b.n	800a7f4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a76c:	f107 0316 	add.w	r3, r7, #22
 800a770:	4619      	mov	r1, r3
 800a772:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a774:	f000 f9c1 	bl	800aafa <USBH_GetNextDesc>
 800a778:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a77a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77c:	785b      	ldrb	r3, [r3, #1]
 800a77e:	2b05      	cmp	r3, #5
 800a780:	d138      	bne.n	800a7f4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	795b      	ldrb	r3, [r3, #5]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d113      	bne.n	800a7b2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d003      	beq.n	800a79a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a792:	69fb      	ldr	r3, [r7, #28]
 800a794:	799b      	ldrb	r3, [r3, #6]
 800a796:	2b03      	cmp	r3, #3
 800a798:	d10b      	bne.n	800a7b2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	79db      	ldrb	r3, [r3, #7]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10b      	bne.n	800a7ba <USBH_ParseCfgDesc+0x14e>
 800a7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	2b09      	cmp	r3, #9
 800a7a8:	d007      	beq.n	800a7ba <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ac:	2209      	movs	r2, #9
 800a7ae:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a7b0:	e003      	b.n	800a7ba <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b4:	2207      	movs	r2, #7
 800a7b6:	701a      	strb	r2, [r3, #0]
 800a7b8:	e000      	b.n	800a7bc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a7ba:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a7bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a7c0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a7c4:	3201      	adds	r2, #1
 800a7c6:	00d2      	lsls	r2, r2, #3
 800a7c8:	211a      	movs	r1, #26
 800a7ca:	fb01 f303 	mul.w	r3, r1, r3
 800a7ce:	4413      	add	r3, r2
 800a7d0:	3308      	adds	r3, #8
 800a7d2:	6a3a      	ldr	r2, [r7, #32]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	3304      	adds	r3, #4
 800a7d8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a7da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7dc:	69b9      	ldr	r1, [r7, #24]
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f000 f870 	bl	800a8c4 <USBH_ParseEPDesc>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a7ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a7f4:	69fb      	ldr	r3, [r7, #28]
 800a7f6:	791b      	ldrb	r3, [r3, #4]
 800a7f8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d204      	bcs.n	800a80a <USBH_ParseCfgDesc+0x19e>
 800a800:	6a3b      	ldr	r3, [r7, #32]
 800a802:	885a      	ldrh	r2, [r3, #2]
 800a804:	8afb      	ldrh	r3, [r7, #22]
 800a806:	429a      	cmp	r2, r3
 800a808:	d8b0      	bhi.n	800a76c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	791b      	ldrb	r3, [r3, #4]
 800a80e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a812:	429a      	cmp	r2, r3
 800a814:	d201      	bcs.n	800a81a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a816:	2303      	movs	r3, #3
 800a818:	e01c      	b.n	800a854 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a81a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a81e:	3301      	adds	r3, #1
 800a820:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a824:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d805      	bhi.n	800a838 <USBH_ParseCfgDesc+0x1cc>
 800a82c:	6a3b      	ldr	r3, [r7, #32]
 800a82e:	885a      	ldrh	r2, [r3, #2]
 800a830:	8afb      	ldrh	r3, [r7, #22]
 800a832:	429a      	cmp	r2, r3
 800a834:	f63f af74 	bhi.w	800a720 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a838:	6a3b      	ldr	r3, [r7, #32]
 800a83a:	791b      	ldrb	r3, [r3, #4]
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	bf28      	it	cs
 800a840:	2302      	movcs	r3, #2
 800a842:	b2db      	uxtb	r3, r3
 800a844:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a848:	429a      	cmp	r2, r3
 800a84a:	d201      	bcs.n	800a850 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a84c:	2303      	movs	r3, #3
 800a84e:	e001      	b.n	800a854 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a850:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a854:	4618      	mov	r0, r3
 800a856:	3730      	adds	r7, #48	@ 0x30
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	781a      	ldrb	r2, [r3, #0]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	785a      	ldrb	r2, [r3, #1]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	789a      	ldrb	r2, [r3, #2]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	78da      	ldrb	r2, [r3, #3]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	3304      	adds	r3, #4
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	bf28      	it	cs
 800a890:	2302      	movcs	r3, #2
 800a892:	b2da      	uxtb	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	795a      	ldrb	r2, [r3, #5]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	799a      	ldrb	r2, [r3, #6]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	79da      	ldrb	r2, [r3, #7]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	7a1a      	ldrb	r2, [r3, #8]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	721a      	strb	r2, [r3, #8]
}
 800a8b8:	bf00      	nop
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b087      	sub	sp, #28
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	781a      	ldrb	r2, [r3, #0]
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	785a      	ldrb	r2, [r3, #1]
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	789a      	ldrb	r2, [r3, #2]
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	78da      	ldrb	r2, [r3, #3]
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	3304      	adds	r3, #4
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	3305      	adds	r3, #5
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	021b      	lsls	r3, r3, #8
 800a904:	b29b      	uxth	r3, r3
 800a906:	4313      	orrs	r3, r2
 800a908:	b29a      	uxth	r2, r3
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	799a      	ldrb	r2, [r3, #6]
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	889b      	ldrh	r3, [r3, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d009      	beq.n	800a932 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a926:	d804      	bhi.n	800a932 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a92c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a930:	d901      	bls.n	800a936 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a932:	2303      	movs	r3, #3
 800a934:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d136      	bne.n	800a9ae <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	78db      	ldrb	r3, [r3, #3]
 800a944:	f003 0303 	and.w	r3, r3, #3
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d108      	bne.n	800a95e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	889b      	ldrh	r3, [r3, #4]
 800a950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a954:	f240 8097 	bls.w	800aa86 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a958:	2303      	movs	r3, #3
 800a95a:	75fb      	strb	r3, [r7, #23]
 800a95c:	e093      	b.n	800aa86 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	78db      	ldrb	r3, [r3, #3]
 800a962:	f003 0303 	and.w	r3, r3, #3
 800a966:	2b00      	cmp	r3, #0
 800a968:	d107      	bne.n	800a97a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	889b      	ldrh	r3, [r3, #4]
 800a96e:	2b40      	cmp	r3, #64	@ 0x40
 800a970:	f240 8089 	bls.w	800aa86 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a974:	2303      	movs	r3, #3
 800a976:	75fb      	strb	r3, [r7, #23]
 800a978:	e085      	b.n	800aa86 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	78db      	ldrb	r3, [r3, #3]
 800a97e:	f003 0303 	and.w	r3, r3, #3
 800a982:	2b01      	cmp	r3, #1
 800a984:	d005      	beq.n	800a992 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	78db      	ldrb	r3, [r3, #3]
 800a98a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a98e:	2b03      	cmp	r3, #3
 800a990:	d10a      	bne.n	800a9a8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	799b      	ldrb	r3, [r3, #6]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <USBH_ParseEPDesc+0xde>
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	799b      	ldrb	r3, [r3, #6]
 800a99e:	2b10      	cmp	r3, #16
 800a9a0:	d970      	bls.n	800aa84 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a9a6:	e06d      	b.n	800aa84 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	75fb      	strb	r3, [r7, #23]
 800a9ac:	e06b      	b.n	800aa86 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d13c      	bne.n	800aa32 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	78db      	ldrb	r3, [r3, #3]
 800a9bc:	f003 0303 	and.w	r3, r3, #3
 800a9c0:	2b02      	cmp	r3, #2
 800a9c2:	d005      	beq.n	800a9d0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	78db      	ldrb	r3, [r3, #3]
 800a9c8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d106      	bne.n	800a9de <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	889b      	ldrh	r3, [r3, #4]
 800a9d4:	2b40      	cmp	r3, #64	@ 0x40
 800a9d6:	d956      	bls.n	800aa86 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a9d8:	2303      	movs	r3, #3
 800a9da:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a9dc:	e053      	b.n	800aa86 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	78db      	ldrb	r3, [r3, #3]
 800a9e2:	f003 0303 	and.w	r3, r3, #3
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d10e      	bne.n	800aa08 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	799b      	ldrb	r3, [r3, #6]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d007      	beq.n	800aa02 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a9f6:	2b10      	cmp	r3, #16
 800a9f8:	d803      	bhi.n	800aa02 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a9fe:	2b40      	cmp	r3, #64	@ 0x40
 800aa00:	d941      	bls.n	800aa86 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa02:	2303      	movs	r3, #3
 800aa04:	75fb      	strb	r3, [r7, #23]
 800aa06:	e03e      	b.n	800aa86 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	78db      	ldrb	r3, [r3, #3]
 800aa0c:	f003 0303 	and.w	r3, r3, #3
 800aa10:	2b03      	cmp	r3, #3
 800aa12:	d10b      	bne.n	800aa2c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	799b      	ldrb	r3, [r3, #6]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d004      	beq.n	800aa26 <USBH_ParseEPDesc+0x162>
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	889b      	ldrh	r3, [r3, #4]
 800aa20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa24:	d32f      	bcc.n	800aa86 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa26:	2303      	movs	r3, #3
 800aa28:	75fb      	strb	r3, [r7, #23]
 800aa2a:	e02c      	b.n	800aa86 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	75fb      	strb	r3, [r7, #23]
 800aa30:	e029      	b.n	800aa86 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa38:	2b02      	cmp	r3, #2
 800aa3a:	d120      	bne.n	800aa7e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	78db      	ldrb	r3, [r3, #3]
 800aa40:	f003 0303 	and.w	r3, r3, #3
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d106      	bne.n	800aa56 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	889b      	ldrh	r3, [r3, #4]
 800aa4c:	2b08      	cmp	r3, #8
 800aa4e:	d01a      	beq.n	800aa86 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa50:	2303      	movs	r3, #3
 800aa52:	75fb      	strb	r3, [r7, #23]
 800aa54:	e017      	b.n	800aa86 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	78db      	ldrb	r3, [r3, #3]
 800aa5a:	f003 0303 	and.w	r3, r3, #3
 800aa5e:	2b03      	cmp	r3, #3
 800aa60:	d10a      	bne.n	800aa78 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	799b      	ldrb	r3, [r3, #6]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d003      	beq.n	800aa72 <USBH_ParseEPDesc+0x1ae>
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	889b      	ldrh	r3, [r3, #4]
 800aa6e:	2b08      	cmp	r3, #8
 800aa70:	d909      	bls.n	800aa86 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa72:	2303      	movs	r3, #3
 800aa74:	75fb      	strb	r3, [r7, #23]
 800aa76:	e006      	b.n	800aa86 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800aa78:	2303      	movs	r3, #3
 800aa7a:	75fb      	strb	r3, [r7, #23]
 800aa7c:	e003      	b.n	800aa86 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	75fb      	strb	r3, [r7, #23]
 800aa82:	e000      	b.n	800aa86 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aa84:	bf00      	nop
  }

  return status;
 800aa86:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	371c      	adds	r7, #28
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b087      	sub	sp, #28
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	4613      	mov	r3, r2
 800aaa0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	2b03      	cmp	r3, #3
 800aaaa:	d120      	bne.n	800aaee <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	1e9a      	subs	r2, r3, #2
 800aab2:	88fb      	ldrh	r3, [r7, #6]
 800aab4:	4293      	cmp	r3, r2
 800aab6:	bf28      	it	cs
 800aab8:	4613      	movcs	r3, r2
 800aaba:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	3302      	adds	r3, #2
 800aac0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800aac2:	2300      	movs	r3, #0
 800aac4:	82fb      	strh	r3, [r7, #22]
 800aac6:	e00b      	b.n	800aae0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800aac8:	8afb      	ldrh	r3, [r7, #22]
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	4413      	add	r3, r2
 800aace:	781a      	ldrb	r2, [r3, #0]
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	3301      	adds	r3, #1
 800aad8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800aada:	8afb      	ldrh	r3, [r7, #22]
 800aadc:	3302      	adds	r3, #2
 800aade:	82fb      	strh	r3, [r7, #22]
 800aae0:	8afa      	ldrh	r2, [r7, #22]
 800aae2:	8abb      	ldrh	r3, [r7, #20]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d3ef      	bcc.n	800aac8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	2200      	movs	r2, #0
 800aaec:	701a      	strb	r2, [r3, #0]
  }
}
 800aaee:	bf00      	nop
 800aaf0:	371c      	adds	r7, #28
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr

0800aafa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aafa:	b480      	push	{r7}
 800aafc:	b085      	sub	sp, #20
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
 800ab02:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	881b      	ldrh	r3, [r3, #0]
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	7812      	ldrb	r2, [r2, #0]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	b29a      	uxth	r2, r3
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ab20:	68fb      	ldr	r3, [r7, #12]
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3714      	adds	r7, #20
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr

0800ab2e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b086      	sub	sp, #24
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	60f8      	str	r0, [r7, #12]
 800ab36:	60b9      	str	r1, [r7, #8]
 800ab38:	4613      	mov	r3, r2
 800ab3a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	789b      	ldrb	r3, [r3, #2]
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d002      	beq.n	800ab4e <USBH_CtlReq+0x20>
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d00f      	beq.n	800ab6c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ab4c:	e027      	b.n	800ab9e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	68ba      	ldr	r2, [r7, #8]
 800ab52:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	88fa      	ldrh	r2, [r7, #6]
 800ab58:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2202      	movs	r2, #2
 800ab64:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ab66:	2301      	movs	r3, #1
 800ab68:	75fb      	strb	r3, [r7, #23]
      break;
 800ab6a:	e018      	b.n	800ab9e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ab6c:	68f8      	ldr	r0, [r7, #12]
 800ab6e:	f000 f81b 	bl	800aba8 <USBH_HandleControl>
 800ab72:	4603      	mov	r3, r0
 800ab74:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ab76:	7dfb      	ldrb	r3, [r7, #23]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d002      	beq.n	800ab82 <USBH_CtlReq+0x54>
 800ab7c:	7dfb      	ldrb	r3, [r7, #23]
 800ab7e:	2b03      	cmp	r3, #3
 800ab80:	d106      	bne.n	800ab90 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2201      	movs	r2, #1
 800ab86:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	761a      	strb	r2, [r3, #24]
      break;
 800ab8e:	e005      	b.n	800ab9c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ab90:	7dfb      	ldrb	r3, [r7, #23]
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	d102      	bne.n	800ab9c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	709a      	strb	r2, [r3, #2]
      break;
 800ab9c:	bf00      	nop
  }
  return status;
 800ab9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3718      	adds	r7, #24
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af02      	add	r7, sp, #8
 800abae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800abb0:	2301      	movs	r3, #1
 800abb2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800abb4:	2300      	movs	r3, #0
 800abb6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	7e1b      	ldrb	r3, [r3, #24]
 800abbc:	3b01      	subs	r3, #1
 800abbe:	2b0a      	cmp	r3, #10
 800abc0:	f200 8156 	bhi.w	800ae70 <USBH_HandleControl+0x2c8>
 800abc4:	a201      	add	r2, pc, #4	@ (adr r2, 800abcc <USBH_HandleControl+0x24>)
 800abc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abca:	bf00      	nop
 800abcc:	0800abf9 	.word	0x0800abf9
 800abd0:	0800ac13 	.word	0x0800ac13
 800abd4:	0800ac7d 	.word	0x0800ac7d
 800abd8:	0800aca3 	.word	0x0800aca3
 800abdc:	0800acdb 	.word	0x0800acdb
 800abe0:	0800ad05 	.word	0x0800ad05
 800abe4:	0800ad57 	.word	0x0800ad57
 800abe8:	0800ad79 	.word	0x0800ad79
 800abec:	0800adb5 	.word	0x0800adb5
 800abf0:	0800addb 	.word	0x0800addb
 800abf4:	0800ae19 	.word	0x0800ae19
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f103 0110 	add.w	r1, r3, #16
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	795b      	ldrb	r3, [r3, #5]
 800ac02:	461a      	mov	r2, r3
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 f943 	bl	800ae90 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2202      	movs	r2, #2
 800ac0e:	761a      	strb	r2, [r3, #24]
      break;
 800ac10:	e139      	b.n	800ae86 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	795b      	ldrb	r3, [r3, #5]
 800ac16:	4619      	mov	r1, r3
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 fcc5 	bl	800b5a8 <USBH_LL_GetURBState>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ac22:	7bbb      	ldrb	r3, [r7, #14]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d11e      	bne.n	800ac66 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	7c1b      	ldrb	r3, [r3, #16]
 800ac2c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ac30:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	8adb      	ldrh	r3, [r3, #22]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00a      	beq.n	800ac50 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ac3a:	7b7b      	ldrb	r3, [r7, #13]
 800ac3c:	2b80      	cmp	r3, #128	@ 0x80
 800ac3e:	d103      	bne.n	800ac48 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2203      	movs	r2, #3
 800ac44:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ac46:	e115      	b.n	800ae74 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2205      	movs	r2, #5
 800ac4c:	761a      	strb	r2, [r3, #24]
      break;
 800ac4e:	e111      	b.n	800ae74 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ac50:	7b7b      	ldrb	r3, [r7, #13]
 800ac52:	2b80      	cmp	r3, #128	@ 0x80
 800ac54:	d103      	bne.n	800ac5e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2209      	movs	r2, #9
 800ac5a:	761a      	strb	r2, [r3, #24]
      break;
 800ac5c:	e10a      	b.n	800ae74 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2207      	movs	r2, #7
 800ac62:	761a      	strb	r2, [r3, #24]
      break;
 800ac64:	e106      	b.n	800ae74 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ac66:	7bbb      	ldrb	r3, [r7, #14]
 800ac68:	2b04      	cmp	r3, #4
 800ac6a:	d003      	beq.n	800ac74 <USBH_HandleControl+0xcc>
 800ac6c:	7bbb      	ldrb	r3, [r7, #14]
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	f040 8100 	bne.w	800ae74 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	220b      	movs	r2, #11
 800ac78:	761a      	strb	r2, [r3, #24]
      break;
 800ac7a:	e0fb      	b.n	800ae74 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ac82:	b29a      	uxth	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6899      	ldr	r1, [r3, #8]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	899a      	ldrh	r2, [r3, #12]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	791b      	ldrb	r3, [r3, #4]
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 f93a 	bl	800af0e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2204      	movs	r2, #4
 800ac9e:	761a      	strb	r2, [r3, #24]
      break;
 800aca0:	e0f1      	b.n	800ae86 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	791b      	ldrb	r3, [r3, #4]
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fc7d 	bl	800b5a8 <USBH_LL_GetURBState>
 800acae:	4603      	mov	r3, r0
 800acb0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800acb2:	7bbb      	ldrb	r3, [r7, #14]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d102      	bne.n	800acbe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2209      	movs	r2, #9
 800acbc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800acbe:	7bbb      	ldrb	r3, [r7, #14]
 800acc0:	2b05      	cmp	r3, #5
 800acc2:	d102      	bne.n	800acca <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800acc4:	2303      	movs	r3, #3
 800acc6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800acc8:	e0d6      	b.n	800ae78 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800acca:	7bbb      	ldrb	r3, [r7, #14]
 800accc:	2b04      	cmp	r3, #4
 800acce:	f040 80d3 	bne.w	800ae78 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	220b      	movs	r2, #11
 800acd6:	761a      	strb	r2, [r3, #24]
      break;
 800acd8:	e0ce      	b.n	800ae78 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6899      	ldr	r1, [r3, #8]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	899a      	ldrh	r2, [r3, #12]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	795b      	ldrb	r3, [r3, #5]
 800ace6:	2001      	movs	r0, #1
 800ace8:	9000      	str	r0, [sp, #0]
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 f8ea 	bl	800aec4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800acf6:	b29a      	uxth	r2, r3
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2206      	movs	r2, #6
 800ad00:	761a      	strb	r2, [r3, #24]
      break;
 800ad02:	e0c0      	b.n	800ae86 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	795b      	ldrb	r3, [r3, #5]
 800ad08:	4619      	mov	r1, r3
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fc4c 	bl	800b5a8 <USBH_LL_GetURBState>
 800ad10:	4603      	mov	r3, r0
 800ad12:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ad14:	7bbb      	ldrb	r3, [r7, #14]
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d103      	bne.n	800ad22 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2207      	movs	r2, #7
 800ad1e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ad20:	e0ac      	b.n	800ae7c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ad22:	7bbb      	ldrb	r3, [r7, #14]
 800ad24:	2b05      	cmp	r3, #5
 800ad26:	d105      	bne.n	800ad34 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	220c      	movs	r2, #12
 800ad2c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ad2e:	2303      	movs	r3, #3
 800ad30:	73fb      	strb	r3, [r7, #15]
      break;
 800ad32:	e0a3      	b.n	800ae7c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ad34:	7bbb      	ldrb	r3, [r7, #14]
 800ad36:	2b02      	cmp	r3, #2
 800ad38:	d103      	bne.n	800ad42 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2205      	movs	r2, #5
 800ad3e:	761a      	strb	r2, [r3, #24]
      break;
 800ad40:	e09c      	b.n	800ae7c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ad42:	7bbb      	ldrb	r3, [r7, #14]
 800ad44:	2b04      	cmp	r3, #4
 800ad46:	f040 8099 	bne.w	800ae7c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	220b      	movs	r2, #11
 800ad4e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ad50:	2302      	movs	r3, #2
 800ad52:	73fb      	strb	r3, [r7, #15]
      break;
 800ad54:	e092      	b.n	800ae7c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	791b      	ldrb	r3, [r3, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f8d5 	bl	800af0e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ad6a:	b29a      	uxth	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2208      	movs	r2, #8
 800ad74:	761a      	strb	r2, [r3, #24]

      break;
 800ad76:	e086      	b.n	800ae86 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	791b      	ldrb	r3, [r3, #4]
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 fc12 	bl	800b5a8 <USBH_LL_GetURBState>
 800ad84:	4603      	mov	r3, r0
 800ad86:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ad88:	7bbb      	ldrb	r3, [r7, #14]
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d105      	bne.n	800ad9a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	220d      	movs	r2, #13
 800ad92:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ad94:	2300      	movs	r3, #0
 800ad96:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ad98:	e072      	b.n	800ae80 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ad9a:	7bbb      	ldrb	r3, [r7, #14]
 800ad9c:	2b04      	cmp	r3, #4
 800ad9e:	d103      	bne.n	800ada8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	220b      	movs	r2, #11
 800ada4:	761a      	strb	r2, [r3, #24]
      break;
 800ada6:	e06b      	b.n	800ae80 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ada8:	7bbb      	ldrb	r3, [r7, #14]
 800adaa:	2b05      	cmp	r3, #5
 800adac:	d168      	bne.n	800ae80 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800adae:	2303      	movs	r3, #3
 800adb0:	73fb      	strb	r3, [r7, #15]
      break;
 800adb2:	e065      	b.n	800ae80 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	795b      	ldrb	r3, [r3, #5]
 800adb8:	2201      	movs	r2, #1
 800adba:	9200      	str	r2, [sp, #0]
 800adbc:	2200      	movs	r2, #0
 800adbe:	2100      	movs	r1, #0
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 f87f 	bl	800aec4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800adcc:	b29a      	uxth	r2, r3
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	220a      	movs	r2, #10
 800add6:	761a      	strb	r2, [r3, #24]
      break;
 800add8:	e055      	b.n	800ae86 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	795b      	ldrb	r3, [r3, #5]
 800adde:	4619      	mov	r1, r3
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fbe1 	bl	800b5a8 <USBH_LL_GetURBState>
 800ade6:	4603      	mov	r3, r0
 800ade8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800adea:	7bbb      	ldrb	r3, [r7, #14]
 800adec:	2b01      	cmp	r3, #1
 800adee:	d105      	bne.n	800adfc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800adf0:	2300      	movs	r3, #0
 800adf2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	220d      	movs	r2, #13
 800adf8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800adfa:	e043      	b.n	800ae84 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800adfc:	7bbb      	ldrb	r3, [r7, #14]
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d103      	bne.n	800ae0a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2209      	movs	r2, #9
 800ae06:	761a      	strb	r2, [r3, #24]
      break;
 800ae08:	e03c      	b.n	800ae84 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ae0a:	7bbb      	ldrb	r3, [r7, #14]
 800ae0c:	2b04      	cmp	r3, #4
 800ae0e:	d139      	bne.n	800ae84 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	220b      	movs	r2, #11
 800ae14:	761a      	strb	r2, [r3, #24]
      break;
 800ae16:	e035      	b.n	800ae84 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	7e5b      	ldrb	r3, [r3, #25]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	b2da      	uxtb	r2, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	765a      	strb	r2, [r3, #25]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	7e5b      	ldrb	r3, [r3, #25]
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	d806      	bhi.n	800ae3a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2201      	movs	r2, #1
 800ae36:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ae38:	e025      	b.n	800ae86 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ae40:	2106      	movs	r1, #6
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	795b      	ldrb	r3, [r3, #5]
 800ae50:	4619      	mov	r1, r3
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 f90c 	bl	800b070 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	791b      	ldrb	r3, [r3, #4]
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 f906 	bl	800b070 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	73fb      	strb	r3, [r7, #15]
      break;
 800ae6e:	e00a      	b.n	800ae86 <USBH_HandleControl+0x2de>

    default:
      break;
 800ae70:	bf00      	nop
 800ae72:	e008      	b.n	800ae86 <USBH_HandleControl+0x2de>
      break;
 800ae74:	bf00      	nop
 800ae76:	e006      	b.n	800ae86 <USBH_HandleControl+0x2de>
      break;
 800ae78:	bf00      	nop
 800ae7a:	e004      	b.n	800ae86 <USBH_HandleControl+0x2de>
      break;
 800ae7c:	bf00      	nop
 800ae7e:	e002      	b.n	800ae86 <USBH_HandleControl+0x2de>
      break;
 800ae80:	bf00      	nop
 800ae82:	e000      	b.n	800ae86 <USBH_HandleControl+0x2de>
      break;
 800ae84:	bf00      	nop
  }

  return status;
 800ae86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3710      	adds	r7, #16
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b088      	sub	sp, #32
 800ae94:	af04      	add	r7, sp, #16
 800ae96:	60f8      	str	r0, [r7, #12]
 800ae98:	60b9      	str	r1, [r7, #8]
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae9e:	79f9      	ldrb	r1, [r7, #7]
 800aea0:	2300      	movs	r3, #0
 800aea2:	9303      	str	r3, [sp, #12]
 800aea4:	2308      	movs	r3, #8
 800aea6:	9302      	str	r3, [sp, #8]
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	9301      	str	r3, [sp, #4]
 800aeac:	2300      	movs	r3, #0
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f000 fb46 	bl	800b546 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800aeba:	2300      	movs	r3, #0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3710      	adds	r7, #16
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b088      	sub	sp, #32
 800aec8:	af04      	add	r7, sp, #16
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	4611      	mov	r1, r2
 800aed0:	461a      	mov	r2, r3
 800aed2:	460b      	mov	r3, r1
 800aed4:	80fb      	strh	r3, [r7, #6]
 800aed6:	4613      	mov	r3, r2
 800aed8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800aee4:	2300      	movs	r3, #0
 800aee6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aee8:	7979      	ldrb	r1, [r7, #5]
 800aeea:	7e3b      	ldrb	r3, [r7, #24]
 800aeec:	9303      	str	r3, [sp, #12]
 800aeee:	88fb      	ldrh	r3, [r7, #6]
 800aef0:	9302      	str	r3, [sp, #8]
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	9301      	str	r3, [sp, #4]
 800aef6:	2301      	movs	r3, #1
 800aef8:	9300      	str	r3, [sp, #0]
 800aefa:	2300      	movs	r3, #0
 800aefc:	2200      	movs	r2, #0
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f000 fb21 	bl	800b546 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b088      	sub	sp, #32
 800af12:	af04      	add	r7, sp, #16
 800af14:	60f8      	str	r0, [r7, #12]
 800af16:	60b9      	str	r1, [r7, #8]
 800af18:	4611      	mov	r1, r2
 800af1a:	461a      	mov	r2, r3
 800af1c:	460b      	mov	r3, r1
 800af1e:	80fb      	strh	r3, [r7, #6]
 800af20:	4613      	mov	r3, r2
 800af22:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800af24:	7979      	ldrb	r1, [r7, #5]
 800af26:	2300      	movs	r3, #0
 800af28:	9303      	str	r3, [sp, #12]
 800af2a:	88fb      	ldrh	r3, [r7, #6]
 800af2c:	9302      	str	r3, [sp, #8]
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	9301      	str	r3, [sp, #4]
 800af32:	2301      	movs	r3, #1
 800af34:	9300      	str	r3, [sp, #0]
 800af36:	2300      	movs	r3, #0
 800af38:	2201      	movs	r2, #1
 800af3a:	68f8      	ldr	r0, [r7, #12]
 800af3c:	f000 fb03 	bl	800b546 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800af40:	2300      	movs	r3, #0

}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b088      	sub	sp, #32
 800af4e:	af04      	add	r7, sp, #16
 800af50:	60f8      	str	r0, [r7, #12]
 800af52:	60b9      	str	r1, [r7, #8]
 800af54:	4611      	mov	r1, r2
 800af56:	461a      	mov	r2, r3
 800af58:	460b      	mov	r3, r1
 800af5a:	80fb      	strh	r3, [r7, #6]
 800af5c:	4613      	mov	r3, r2
 800af5e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800af6a:	2300      	movs	r3, #0
 800af6c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800af6e:	7979      	ldrb	r1, [r7, #5]
 800af70:	7e3b      	ldrb	r3, [r7, #24]
 800af72:	9303      	str	r3, [sp, #12]
 800af74:	88fb      	ldrh	r3, [r7, #6]
 800af76:	9302      	str	r3, [sp, #8]
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	9301      	str	r3, [sp, #4]
 800af7c:	2301      	movs	r3, #1
 800af7e:	9300      	str	r3, [sp, #0]
 800af80:	2302      	movs	r3, #2
 800af82:	2200      	movs	r2, #0
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f000 fade 	bl	800b546 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b088      	sub	sp, #32
 800af98:	af04      	add	r7, sp, #16
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	4611      	mov	r1, r2
 800afa0:	461a      	mov	r2, r3
 800afa2:	460b      	mov	r3, r1
 800afa4:	80fb      	strh	r3, [r7, #6]
 800afa6:	4613      	mov	r3, r2
 800afa8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800afaa:	7979      	ldrb	r1, [r7, #5]
 800afac:	2300      	movs	r3, #0
 800afae:	9303      	str	r3, [sp, #12]
 800afb0:	88fb      	ldrh	r3, [r7, #6]
 800afb2:	9302      	str	r3, [sp, #8]
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	9301      	str	r3, [sp, #4]
 800afb8:	2301      	movs	r3, #1
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	2302      	movs	r3, #2
 800afbe:	2201      	movs	r2, #1
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f000 fac0 	bl	800b546 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800afc6:	2300      	movs	r3, #0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af04      	add	r7, sp, #16
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	4608      	mov	r0, r1
 800afda:	4611      	mov	r1, r2
 800afdc:	461a      	mov	r2, r3
 800afde:	4603      	mov	r3, r0
 800afe0:	70fb      	strb	r3, [r7, #3]
 800afe2:	460b      	mov	r3, r1
 800afe4:	70bb      	strb	r3, [r7, #2]
 800afe6:	4613      	mov	r3, r2
 800afe8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800afea:	7878      	ldrb	r0, [r7, #1]
 800afec:	78ba      	ldrb	r2, [r7, #2]
 800afee:	78f9      	ldrb	r1, [r7, #3]
 800aff0:	8b3b      	ldrh	r3, [r7, #24]
 800aff2:	9302      	str	r3, [sp, #8]
 800aff4:	7d3b      	ldrb	r3, [r7, #20]
 800aff6:	9301      	str	r3, [sp, #4]
 800aff8:	7c3b      	ldrb	r3, [r7, #16]
 800affa:	9300      	str	r3, [sp, #0]
 800affc:	4603      	mov	r3, r0
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 fa53 	bl	800b4aa <USBH_LL_OpenPipe>

  return USBH_OK;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3708      	adds	r7, #8
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b082      	sub	sp, #8
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
 800b016:	460b      	mov	r3, r1
 800b018:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b01a:	78fb      	ldrb	r3, [r7, #3]
 800b01c:	4619      	mov	r1, r3
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fa72 	bl	800b508 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3708      	adds	r7, #8
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b084      	sub	sp, #16
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
 800b036:	460b      	mov	r3, r1
 800b038:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 f836 	bl	800b0ac <USBH_GetFreePipe>
 800b040:	4603      	mov	r3, r0
 800b042:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b044:	89fb      	ldrh	r3, [r7, #14]
 800b046:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d00a      	beq.n	800b064 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b04e:	78fa      	ldrb	r2, [r7, #3]
 800b050:	89fb      	ldrh	r3, [r7, #14]
 800b052:	f003 030f 	and.w	r3, r3, #15
 800b056:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b05a:	6879      	ldr	r1, [r7, #4]
 800b05c:	33e0      	adds	r3, #224	@ 0xe0
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	440b      	add	r3, r1
 800b062:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b064:	89fb      	ldrh	r3, [r7, #14]
 800b066:	b2db      	uxtb	r3, r3
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	460b      	mov	r3, r1
 800b07a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b07c:	78fb      	ldrb	r3, [r7, #3]
 800b07e:	2b0f      	cmp	r3, #15
 800b080:	d80d      	bhi.n	800b09e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b082:	78fb      	ldrb	r3, [r7, #3]
 800b084:	687a      	ldr	r2, [r7, #4]
 800b086:	33e0      	adds	r3, #224	@ 0xe0
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	4413      	add	r3, r2
 800b08c:	685a      	ldr	r2, [r3, #4]
 800b08e:	78fb      	ldrb	r3, [r7, #3]
 800b090:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b094:	6879      	ldr	r1, [r7, #4]
 800b096:	33e0      	adds	r3, #224	@ 0xe0
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	440b      	add	r3, r1
 800b09c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b09e:	2300      	movs	r3, #0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b085      	sub	sp, #20
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	73fb      	strb	r3, [r7, #15]
 800b0bc:	e00f      	b.n	800b0de <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b0be:	7bfb      	ldrb	r3, [r7, #15]
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	33e0      	adds	r3, #224	@ 0xe0
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	4413      	add	r3, r2
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d102      	bne.n	800b0d8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b0d2:	7bfb      	ldrb	r3, [r7, #15]
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	e007      	b.n	800b0e8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b0d8:	7bfb      	ldrb	r3, [r7, #15]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	73fb      	strb	r3, [r7, #15]
 800b0de:	7bfb      	ldrb	r3, [r7, #15]
 800b0e0:	2b0f      	cmp	r3, #15
 800b0e2:	d9ec      	bls.n	800b0be <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b0e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3714      	adds	r7, #20
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	490e      	ldr	r1, [pc, #56]	@ (800b134 <MX_USB_HOST_Init+0x40>)
 800b0fc:	480e      	ldr	r0, [pc, #56]	@ (800b138 <MX_USB_HOST_Init+0x44>)
 800b0fe:	f7fe fb15 	bl	800972c <USBH_Init>
 800b102:	4603      	mov	r3, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d001      	beq.n	800b10c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b108:	f7f7 fd1e 	bl	8002b48 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b10c:	490b      	ldr	r1, [pc, #44]	@ (800b13c <MX_USB_HOST_Init+0x48>)
 800b10e:	480a      	ldr	r0, [pc, #40]	@ (800b138 <MX_USB_HOST_Init+0x44>)
 800b110:	f7fe fbb9 	bl	8009886 <USBH_RegisterClass>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d001      	beq.n	800b11e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b11a:	f7f7 fd15 	bl	8002b48 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b11e:	4806      	ldr	r0, [pc, #24]	@ (800b138 <MX_USB_HOST_Init+0x44>)
 800b120:	f7fe fc3d 	bl	800999e <USBH_Start>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d001      	beq.n	800b12e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b12a:	f7f7 fd0d 	bl	8002b48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b12e:	bf00      	nop
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	0800b155 	.word	0x0800b155
 800b138:	200003b0 	.word	0x200003b0
 800b13c:	20000010 	.word	0x20000010

0800b140 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b144:	4802      	ldr	r0, [pc, #8]	@ (800b150 <MX_USB_HOST_Process+0x10>)
 800b146:	f7fe fc3b 	bl	80099c0 <USBH_Process>
}
 800b14a:	bf00      	nop
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	200003b0 	.word	0x200003b0

0800b154 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	460b      	mov	r3, r1
 800b15e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b160:	78fb      	ldrb	r3, [r7, #3]
 800b162:	3b01      	subs	r3, #1
 800b164:	2b04      	cmp	r3, #4
 800b166:	d819      	bhi.n	800b19c <USBH_UserProcess+0x48>
 800b168:	a201      	add	r2, pc, #4	@ (adr r2, 800b170 <USBH_UserProcess+0x1c>)
 800b16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b16e:	bf00      	nop
 800b170:	0800b19d 	.word	0x0800b19d
 800b174:	0800b18d 	.word	0x0800b18d
 800b178:	0800b19d 	.word	0x0800b19d
 800b17c:	0800b195 	.word	0x0800b195
 800b180:	0800b185 	.word	0x0800b185
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b184:	4b09      	ldr	r3, [pc, #36]	@ (800b1ac <USBH_UserProcess+0x58>)
 800b186:	2203      	movs	r2, #3
 800b188:	701a      	strb	r2, [r3, #0]
  break;
 800b18a:	e008      	b.n	800b19e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b18c:	4b07      	ldr	r3, [pc, #28]	@ (800b1ac <USBH_UserProcess+0x58>)
 800b18e:	2202      	movs	r2, #2
 800b190:	701a      	strb	r2, [r3, #0]
  break;
 800b192:	e004      	b.n	800b19e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b194:	4b05      	ldr	r3, [pc, #20]	@ (800b1ac <USBH_UserProcess+0x58>)
 800b196:	2201      	movs	r2, #1
 800b198:	701a      	strb	r2, [r3, #0]
  break;
 800b19a:	e000      	b.n	800b19e <USBH_UserProcess+0x4a>

  default:
  break;
 800b19c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b19e:	bf00      	nop
 800b1a0:	370c      	adds	r7, #12
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr
 800b1aa:	bf00      	nop
 800b1ac:	20000788 	.word	0x20000788

0800b1b0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b08a      	sub	sp, #40	@ 0x28
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1b8:	f107 0314 	add.w	r3, r7, #20
 800b1bc:	2200      	movs	r2, #0
 800b1be:	601a      	str	r2, [r3, #0]
 800b1c0:	605a      	str	r2, [r3, #4]
 800b1c2:	609a      	str	r2, [r3, #8]
 800b1c4:	60da      	str	r2, [r3, #12]
 800b1c6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b1d0:	d147      	bne.n	800b262 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	613b      	str	r3, [r7, #16]
 800b1d6:	4b25      	ldr	r3, [pc, #148]	@ (800b26c <HAL_HCD_MspInit+0xbc>)
 800b1d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1da:	4a24      	ldr	r2, [pc, #144]	@ (800b26c <HAL_HCD_MspInit+0xbc>)
 800b1dc:	f043 0301 	orr.w	r3, r3, #1
 800b1e0:	6313      	str	r3, [r2, #48]	@ 0x30
 800b1e2:	4b22      	ldr	r3, [pc, #136]	@ (800b26c <HAL_HCD_MspInit+0xbc>)
 800b1e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1e6:	f003 0301 	and.w	r3, r3, #1
 800b1ea:	613b      	str	r3, [r7, #16]
 800b1ec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b1ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b1fc:	f107 0314 	add.w	r3, r7, #20
 800b200:	4619      	mov	r1, r3
 800b202:	481b      	ldr	r0, [pc, #108]	@ (800b270 <HAL_HCD_MspInit+0xc0>)
 800b204:	f7f8 f962 	bl	80034cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b208:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b20c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b20e:	2302      	movs	r3, #2
 800b210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b212:	2300      	movs	r3, #0
 800b214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b216:	2300      	movs	r3, #0
 800b218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b21a:	230a      	movs	r3, #10
 800b21c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b21e:	f107 0314 	add.w	r3, r7, #20
 800b222:	4619      	mov	r1, r3
 800b224:	4812      	ldr	r0, [pc, #72]	@ (800b270 <HAL_HCD_MspInit+0xc0>)
 800b226:	f7f8 f951 	bl	80034cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b22a:	4b10      	ldr	r3, [pc, #64]	@ (800b26c <HAL_HCD_MspInit+0xbc>)
 800b22c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b22e:	4a0f      	ldr	r2, [pc, #60]	@ (800b26c <HAL_HCD_MspInit+0xbc>)
 800b230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b234:	6353      	str	r3, [r2, #52]	@ 0x34
 800b236:	2300      	movs	r3, #0
 800b238:	60fb      	str	r3, [r7, #12]
 800b23a:	4b0c      	ldr	r3, [pc, #48]	@ (800b26c <HAL_HCD_MspInit+0xbc>)
 800b23c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b23e:	4a0b      	ldr	r2, [pc, #44]	@ (800b26c <HAL_HCD_MspInit+0xbc>)
 800b240:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b244:	6453      	str	r3, [r2, #68]	@ 0x44
 800b246:	4b09      	ldr	r3, [pc, #36]	@ (800b26c <HAL_HCD_MspInit+0xbc>)
 800b248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b24a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b24e:	60fb      	str	r3, [r7, #12]
 800b250:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b252:	2200      	movs	r2, #0
 800b254:	2100      	movs	r1, #0
 800b256:	2043      	movs	r0, #67	@ 0x43
 800b258:	f7f8 f901 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b25c:	2043      	movs	r0, #67	@ 0x43
 800b25e:	f7f8 f91a 	bl	8003496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b262:	bf00      	nop
 800b264:	3728      	adds	r7, #40	@ 0x28
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	40023800 	.word	0x40023800
 800b270:	40020000 	.word	0x40020000

0800b274 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b282:	4618      	mov	r0, r3
 800b284:	f7fe ff73 	bl	800a16e <USBH_LL_IncTimer>
}
 800b288:	bf00      	nop
 800b28a:	3708      	adds	r7, #8
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7fe ffab 	bl	800a1fa <USBH_LL_Connect>
}
 800b2a4:	bf00      	nop
 800b2a6:	3708      	adds	r7, #8
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fe ffb4 	bl	800a228 <USBH_LL_Disconnect>
}
 800b2c0:	bf00      	nop
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	70fb      	strb	r3, [r7, #3]
 800b2d4:	4613      	mov	r3, r2
 800b2d6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b2d8:	bf00      	nop
 800b2da:	370c      	adds	r7, #12
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7fe ff65 	bl	800a1c2 <USBH_LL_PortEnabled>
}
 800b2f8:	bf00      	nop
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fe ff65 	bl	800a1de <USBH_LL_PortDisabled>
}
 800b314:	bf00      	nop
 800b316:	3708      	adds	r7, #8
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d12a      	bne.n	800b384 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b32e:	4a18      	ldr	r2, [pc, #96]	@ (800b390 <USBH_LL_Init+0x74>)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	4a15      	ldr	r2, [pc, #84]	@ (800b390 <USBH_LL_Init+0x74>)
 800b33a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b33e:	4b14      	ldr	r3, [pc, #80]	@ (800b390 <USBH_LL_Init+0x74>)
 800b340:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b344:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b346:	4b12      	ldr	r3, [pc, #72]	@ (800b390 <USBH_LL_Init+0x74>)
 800b348:	2208      	movs	r2, #8
 800b34a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b34c:	4b10      	ldr	r3, [pc, #64]	@ (800b390 <USBH_LL_Init+0x74>)
 800b34e:	2201      	movs	r2, #1
 800b350:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b352:	4b0f      	ldr	r3, [pc, #60]	@ (800b390 <USBH_LL_Init+0x74>)
 800b354:	2200      	movs	r2, #0
 800b356:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b358:	4b0d      	ldr	r3, [pc, #52]	@ (800b390 <USBH_LL_Init+0x74>)
 800b35a:	2202      	movs	r2, #2
 800b35c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b35e:	4b0c      	ldr	r3, [pc, #48]	@ (800b390 <USBH_LL_Init+0x74>)
 800b360:	2200      	movs	r2, #0
 800b362:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b364:	480a      	ldr	r0, [pc, #40]	@ (800b390 <USBH_LL_Init+0x74>)
 800b366:	f7f8 fa66 	bl	8003836 <HAL_HCD_Init>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d001      	beq.n	800b374 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b370:	f7f7 fbea 	bl	8002b48 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b374:	4806      	ldr	r0, [pc, #24]	@ (800b390 <USBH_LL_Init+0x74>)
 800b376:	f7f8 fec7 	bl	8004108 <HAL_HCD_GetCurrentFrame>
 800b37a:	4603      	mov	r3, r0
 800b37c:	4619      	mov	r1, r3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f7fe fee6 	bl	800a150 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	3708      	adds	r7, #8
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	2000078c 	.word	0x2000078c

0800b394 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b39c:	2300      	movs	r3, #0
 800b39e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7f8 fe34 	bl	8004018 <HAL_HCD_Start>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3b4:	7bfb      	ldrb	r3, [r7, #15]
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f000 f95e 	bl	800b678 <USBH_Get_USB_Status>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b084      	sub	sp, #16
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7f8 fe3c 	bl	800405e <HAL_HCD_Stop>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3ea:	7bfb      	ldrb	r3, [r7, #15]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f000 f943 	bl	800b678 <USBH_Get_USB_Status>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3710      	adds	r7, #16
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b408:	2301      	movs	r3, #1
 800b40a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b412:	4618      	mov	r0, r3
 800b414:	f7f8 fe86 	bl	8004124 <HAL_HCD_GetCurrentSpeed>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b02      	cmp	r3, #2
 800b41c:	d00c      	beq.n	800b438 <USBH_LL_GetSpeed+0x38>
 800b41e:	2b02      	cmp	r3, #2
 800b420:	d80d      	bhi.n	800b43e <USBH_LL_GetSpeed+0x3e>
 800b422:	2b00      	cmp	r3, #0
 800b424:	d002      	beq.n	800b42c <USBH_LL_GetSpeed+0x2c>
 800b426:	2b01      	cmp	r3, #1
 800b428:	d003      	beq.n	800b432 <USBH_LL_GetSpeed+0x32>
 800b42a:	e008      	b.n	800b43e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b42c:	2300      	movs	r3, #0
 800b42e:	73fb      	strb	r3, [r7, #15]
    break;
 800b430:	e008      	b.n	800b444 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b432:	2301      	movs	r3, #1
 800b434:	73fb      	strb	r3, [r7, #15]
    break;
 800b436:	e005      	b.n	800b444 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b438:	2302      	movs	r3, #2
 800b43a:	73fb      	strb	r3, [r7, #15]
    break;
 800b43c:	e002      	b.n	800b444 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b43e:	2301      	movs	r3, #1
 800b440:	73fb      	strb	r3, [r7, #15]
    break;
 800b442:	bf00      	nop
  }
  return  speed;
 800b444:	7bfb      	ldrb	r3, [r7, #15]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b084      	sub	sp, #16
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b456:	2300      	movs	r3, #0
 800b458:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b464:	4618      	mov	r0, r3
 800b466:	f7f8 fe17 	bl	8004098 <HAL_HCD_ResetPort>
 800b46a:	4603      	mov	r3, r0
 800b46c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b46e:	7bfb      	ldrb	r3, [r7, #15]
 800b470:	4618      	mov	r0, r3
 800b472:	f000 f901 	bl	800b678 <USBH_Get_USB_Status>
 800b476:	4603      	mov	r3, r0
 800b478:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b47a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	460b      	mov	r3, r1
 800b48e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b496:	78fa      	ldrb	r2, [r7, #3]
 800b498:	4611      	mov	r1, r2
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7f8 fe1f 	bl	80040de <HAL_HCD_HC_GetXferCount>
 800b4a0:	4603      	mov	r3, r0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3708      	adds	r7, #8
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}

0800b4aa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b4aa:	b590      	push	{r4, r7, lr}
 800b4ac:	b089      	sub	sp, #36	@ 0x24
 800b4ae:	af04      	add	r7, sp, #16
 800b4b0:	6078      	str	r0, [r7, #4]
 800b4b2:	4608      	mov	r0, r1
 800b4b4:	4611      	mov	r1, r2
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	70fb      	strb	r3, [r7, #3]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	70bb      	strb	r3, [r7, #2]
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b4d2:	787c      	ldrb	r4, [r7, #1]
 800b4d4:	78ba      	ldrb	r2, [r7, #2]
 800b4d6:	78f9      	ldrb	r1, [r7, #3]
 800b4d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b4da:	9302      	str	r3, [sp, #8]
 800b4dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b4e0:	9301      	str	r3, [sp, #4]
 800b4e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b4e6:	9300      	str	r3, [sp, #0]
 800b4e8:	4623      	mov	r3, r4
 800b4ea:	f7f8 fa0b 	bl	8003904 <HAL_HCD_HC_Init>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b4f2:	7bfb      	ldrb	r3, [r7, #15]
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f000 f8bf 	bl	800b678 <USBH_Get_USB_Status>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3714      	adds	r7, #20
 800b504:	46bd      	mov	sp, r7
 800b506:	bd90      	pop	{r4, r7, pc}

0800b508 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	460b      	mov	r3, r1
 800b512:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b514:	2300      	movs	r3, #0
 800b516:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b518:	2300      	movs	r3, #0
 800b51a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b522:	78fa      	ldrb	r2, [r7, #3]
 800b524:	4611      	mov	r1, r2
 800b526:	4618      	mov	r0, r3
 800b528:	f7f8 faa4 	bl	8003a74 <HAL_HCD_HC_Halt>
 800b52c:	4603      	mov	r3, r0
 800b52e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b530:	7bfb      	ldrb	r3, [r7, #15]
 800b532:	4618      	mov	r0, r3
 800b534:	f000 f8a0 	bl	800b678 <USBH_Get_USB_Status>
 800b538:	4603      	mov	r3, r0
 800b53a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b53c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3710      	adds	r7, #16
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b546:	b590      	push	{r4, r7, lr}
 800b548:	b089      	sub	sp, #36	@ 0x24
 800b54a:	af04      	add	r7, sp, #16
 800b54c:	6078      	str	r0, [r7, #4]
 800b54e:	4608      	mov	r0, r1
 800b550:	4611      	mov	r1, r2
 800b552:	461a      	mov	r2, r3
 800b554:	4603      	mov	r3, r0
 800b556:	70fb      	strb	r3, [r7, #3]
 800b558:	460b      	mov	r3, r1
 800b55a:	70bb      	strb	r3, [r7, #2]
 800b55c:	4613      	mov	r3, r2
 800b55e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b560:	2300      	movs	r3, #0
 800b562:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b564:	2300      	movs	r3, #0
 800b566:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b56e:	787c      	ldrb	r4, [r7, #1]
 800b570:	78ba      	ldrb	r2, [r7, #2]
 800b572:	78f9      	ldrb	r1, [r7, #3]
 800b574:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b578:	9303      	str	r3, [sp, #12]
 800b57a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b57c:	9302      	str	r3, [sp, #8]
 800b57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b580:	9301      	str	r3, [sp, #4]
 800b582:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b586:	9300      	str	r3, [sp, #0]
 800b588:	4623      	mov	r3, r4
 800b58a:	f7f8 fa97 	bl	8003abc <HAL_HCD_HC_SubmitRequest>
 800b58e:	4603      	mov	r3, r0
 800b590:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b592:	7bfb      	ldrb	r3, [r7, #15]
 800b594:	4618      	mov	r0, r3
 800b596:	f000 f86f 	bl	800b678 <USBH_Get_USB_Status>
 800b59a:	4603      	mov	r3, r0
 800b59c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b59e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3714      	adds	r7, #20
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd90      	pop	{r4, r7, pc}

0800b5a8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b5ba:	78fa      	ldrb	r2, [r7, #3]
 800b5bc:	4611      	mov	r1, r2
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7f8 fd78 	bl	80040b4 <HAL_HCD_HC_GetURBState>
 800b5c4:	4603      	mov	r3, r0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3708      	adds	r7, #8
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b082      	sub	sp, #8
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d103      	bne.n	800b5ec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b5e4:	78fb      	ldrb	r3, [r7, #3]
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f000 f872 	bl	800b6d0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b5ec:	20c8      	movs	r0, #200	@ 0xc8
 800b5ee:	f7f7 fe37 	bl	8003260 <HAL_Delay>
  return USBH_OK;
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3708      	adds	r7, #8
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	460b      	mov	r3, r1
 800b606:	70fb      	strb	r3, [r7, #3]
 800b608:	4613      	mov	r3, r2
 800b60a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b612:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b614:	78fa      	ldrb	r2, [r7, #3]
 800b616:	68f9      	ldr	r1, [r7, #12]
 800b618:	4613      	mov	r3, r2
 800b61a:	011b      	lsls	r3, r3, #4
 800b61c:	1a9b      	subs	r3, r3, r2
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	440b      	add	r3, r1
 800b622:	3317      	adds	r3, #23
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d00a      	beq.n	800b640 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b62a:	78fa      	ldrb	r2, [r7, #3]
 800b62c:	68f9      	ldr	r1, [r7, #12]
 800b62e:	4613      	mov	r3, r2
 800b630:	011b      	lsls	r3, r3, #4
 800b632:	1a9b      	subs	r3, r3, r2
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	440b      	add	r3, r1
 800b638:	333c      	adds	r3, #60	@ 0x3c
 800b63a:	78ba      	ldrb	r2, [r7, #2]
 800b63c:	701a      	strb	r2, [r3, #0]
 800b63e:	e009      	b.n	800b654 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b640:	78fa      	ldrb	r2, [r7, #3]
 800b642:	68f9      	ldr	r1, [r7, #12]
 800b644:	4613      	mov	r3, r2
 800b646:	011b      	lsls	r3, r3, #4
 800b648:	1a9b      	subs	r3, r3, r2
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	440b      	add	r3, r1
 800b64e:	333d      	adds	r3, #61	@ 0x3d
 800b650:	78ba      	ldrb	r2, [r7, #2]
 800b652:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	3714      	adds	r7, #20
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr

0800b662 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b082      	sub	sp, #8
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7f7 fdf8 	bl	8003260 <HAL_Delay>
}
 800b670:	bf00      	nop
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	4603      	mov	r3, r0
 800b680:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b686:	79fb      	ldrb	r3, [r7, #7]
 800b688:	2b03      	cmp	r3, #3
 800b68a:	d817      	bhi.n	800b6bc <USBH_Get_USB_Status+0x44>
 800b68c:	a201      	add	r2, pc, #4	@ (adr r2, 800b694 <USBH_Get_USB_Status+0x1c>)
 800b68e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b692:	bf00      	nop
 800b694:	0800b6a5 	.word	0x0800b6a5
 800b698:	0800b6ab 	.word	0x0800b6ab
 800b69c:	0800b6b1 	.word	0x0800b6b1
 800b6a0:	0800b6b7 	.word	0x0800b6b7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b6a8:	e00b      	b.n	800b6c2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b6aa:	2302      	movs	r3, #2
 800b6ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b6ae:	e008      	b.n	800b6c2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b6b4:	e005      	b.n	800b6c2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b6b6:	2302      	movs	r3, #2
 800b6b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b6ba:	e002      	b.n	800b6c2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b6bc:	2302      	movs	r3, #2
 800b6be:	73fb      	strb	r3, [r7, #15]
    break;
 800b6c0:	bf00      	nop
  }
  return usb_status;
 800b6c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3714      	adds	r7, #20
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b6da:	79fb      	ldrb	r3, [r7, #7]
 800b6dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b6de:	79fb      	ldrb	r3, [r7, #7]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d102      	bne.n	800b6ea <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	73fb      	strb	r3, [r7, #15]
 800b6e8:	e001      	b.n	800b6ee <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b6ee:	7bfb      	ldrb	r3, [r7, #15]
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	2101      	movs	r1, #1
 800b6f4:	4803      	ldr	r0, [pc, #12]	@ (800b704 <MX_DriverVbusFS+0x34>)
 800b6f6:	f7f8 f885 	bl	8003804 <HAL_GPIO_WritePin>
}
 800b6fa:	bf00      	nop
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	40020800 	.word	0x40020800

0800b708 <_Znwj>:
 800b708:	2801      	cmp	r0, #1
 800b70a:	bf38      	it	cc
 800b70c:	2001      	movcc	r0, #1
 800b70e:	b510      	push	{r4, lr}
 800b710:	4604      	mov	r4, r0
 800b712:	4620      	mov	r0, r4
 800b714:	f000 f81a 	bl	800b74c <malloc>
 800b718:	b100      	cbz	r0, 800b71c <_Znwj+0x14>
 800b71a:	bd10      	pop	{r4, pc}
 800b71c:	f000 f806 	bl	800b72c <_ZSt15get_new_handlerv>
 800b720:	b908      	cbnz	r0, 800b726 <_Znwj+0x1e>
 800b722:	f000 f80b 	bl	800b73c <abort>
 800b726:	4780      	blx	r0
 800b728:	e7f3      	b.n	800b712 <_Znwj+0xa>
	...

0800b72c <_ZSt15get_new_handlerv>:
 800b72c:	4b02      	ldr	r3, [pc, #8]	@ (800b738 <_ZSt15get_new_handlerv+0xc>)
 800b72e:	6818      	ldr	r0, [r3, #0]
 800b730:	f3bf 8f5b 	dmb	ish
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	20000b6c 	.word	0x20000b6c

0800b73c <abort>:
 800b73c:	b508      	push	{r3, lr}
 800b73e:	2006      	movs	r0, #6
 800b740:	f000 fe84 	bl	800c44c <raise>
 800b744:	2001      	movs	r0, #1
 800b746:	f7f7 fc2f 	bl	8002fa8 <_exit>
	...

0800b74c <malloc>:
 800b74c:	4b02      	ldr	r3, [pc, #8]	@ (800b758 <malloc+0xc>)
 800b74e:	4601      	mov	r1, r0
 800b750:	6818      	ldr	r0, [r3, #0]
 800b752:	f000 b82d 	b.w	800b7b0 <_malloc_r>
 800b756:	bf00      	nop
 800b758:	2000003c 	.word	0x2000003c

0800b75c <free>:
 800b75c:	4b02      	ldr	r3, [pc, #8]	@ (800b768 <free+0xc>)
 800b75e:	4601      	mov	r1, r0
 800b760:	6818      	ldr	r0, [r3, #0]
 800b762:	f001 bd7d 	b.w	800d260 <_free_r>
 800b766:	bf00      	nop
 800b768:	2000003c 	.word	0x2000003c

0800b76c <sbrk_aligned>:
 800b76c:	b570      	push	{r4, r5, r6, lr}
 800b76e:	4e0f      	ldr	r6, [pc, #60]	@ (800b7ac <sbrk_aligned+0x40>)
 800b770:	460c      	mov	r4, r1
 800b772:	6831      	ldr	r1, [r6, #0]
 800b774:	4605      	mov	r5, r0
 800b776:	b911      	cbnz	r1, 800b77e <sbrk_aligned+0x12>
 800b778:	f000 febc 	bl	800c4f4 <_sbrk_r>
 800b77c:	6030      	str	r0, [r6, #0]
 800b77e:	4621      	mov	r1, r4
 800b780:	4628      	mov	r0, r5
 800b782:	f000 feb7 	bl	800c4f4 <_sbrk_r>
 800b786:	1c43      	adds	r3, r0, #1
 800b788:	d103      	bne.n	800b792 <sbrk_aligned+0x26>
 800b78a:	f04f 34ff 	mov.w	r4, #4294967295
 800b78e:	4620      	mov	r0, r4
 800b790:	bd70      	pop	{r4, r5, r6, pc}
 800b792:	1cc4      	adds	r4, r0, #3
 800b794:	f024 0403 	bic.w	r4, r4, #3
 800b798:	42a0      	cmp	r0, r4
 800b79a:	d0f8      	beq.n	800b78e <sbrk_aligned+0x22>
 800b79c:	1a21      	subs	r1, r4, r0
 800b79e:	4628      	mov	r0, r5
 800b7a0:	f000 fea8 	bl	800c4f4 <_sbrk_r>
 800b7a4:	3001      	adds	r0, #1
 800b7a6:	d1f2      	bne.n	800b78e <sbrk_aligned+0x22>
 800b7a8:	e7ef      	b.n	800b78a <sbrk_aligned+0x1e>
 800b7aa:	bf00      	nop
 800b7ac:	20000b70 	.word	0x20000b70

0800b7b0 <_malloc_r>:
 800b7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7b4:	1ccd      	adds	r5, r1, #3
 800b7b6:	f025 0503 	bic.w	r5, r5, #3
 800b7ba:	3508      	adds	r5, #8
 800b7bc:	2d0c      	cmp	r5, #12
 800b7be:	bf38      	it	cc
 800b7c0:	250c      	movcc	r5, #12
 800b7c2:	2d00      	cmp	r5, #0
 800b7c4:	4606      	mov	r6, r0
 800b7c6:	db01      	blt.n	800b7cc <_malloc_r+0x1c>
 800b7c8:	42a9      	cmp	r1, r5
 800b7ca:	d904      	bls.n	800b7d6 <_malloc_r+0x26>
 800b7cc:	230c      	movs	r3, #12
 800b7ce:	6033      	str	r3, [r6, #0]
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b8ac <_malloc_r+0xfc>
 800b7da:	f000 f869 	bl	800b8b0 <__malloc_lock>
 800b7de:	f8d8 3000 	ldr.w	r3, [r8]
 800b7e2:	461c      	mov	r4, r3
 800b7e4:	bb44      	cbnz	r4, 800b838 <_malloc_r+0x88>
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	f7ff ffbf 	bl	800b76c <sbrk_aligned>
 800b7ee:	1c43      	adds	r3, r0, #1
 800b7f0:	4604      	mov	r4, r0
 800b7f2:	d158      	bne.n	800b8a6 <_malloc_r+0xf6>
 800b7f4:	f8d8 4000 	ldr.w	r4, [r8]
 800b7f8:	4627      	mov	r7, r4
 800b7fa:	2f00      	cmp	r7, #0
 800b7fc:	d143      	bne.n	800b886 <_malloc_r+0xd6>
 800b7fe:	2c00      	cmp	r4, #0
 800b800:	d04b      	beq.n	800b89a <_malloc_r+0xea>
 800b802:	6823      	ldr	r3, [r4, #0]
 800b804:	4639      	mov	r1, r7
 800b806:	4630      	mov	r0, r6
 800b808:	eb04 0903 	add.w	r9, r4, r3
 800b80c:	f000 fe72 	bl	800c4f4 <_sbrk_r>
 800b810:	4581      	cmp	r9, r0
 800b812:	d142      	bne.n	800b89a <_malloc_r+0xea>
 800b814:	6821      	ldr	r1, [r4, #0]
 800b816:	1a6d      	subs	r5, r5, r1
 800b818:	4629      	mov	r1, r5
 800b81a:	4630      	mov	r0, r6
 800b81c:	f7ff ffa6 	bl	800b76c <sbrk_aligned>
 800b820:	3001      	adds	r0, #1
 800b822:	d03a      	beq.n	800b89a <_malloc_r+0xea>
 800b824:	6823      	ldr	r3, [r4, #0]
 800b826:	442b      	add	r3, r5
 800b828:	6023      	str	r3, [r4, #0]
 800b82a:	f8d8 3000 	ldr.w	r3, [r8]
 800b82e:	685a      	ldr	r2, [r3, #4]
 800b830:	bb62      	cbnz	r2, 800b88c <_malloc_r+0xdc>
 800b832:	f8c8 7000 	str.w	r7, [r8]
 800b836:	e00f      	b.n	800b858 <_malloc_r+0xa8>
 800b838:	6822      	ldr	r2, [r4, #0]
 800b83a:	1b52      	subs	r2, r2, r5
 800b83c:	d420      	bmi.n	800b880 <_malloc_r+0xd0>
 800b83e:	2a0b      	cmp	r2, #11
 800b840:	d917      	bls.n	800b872 <_malloc_r+0xc2>
 800b842:	1961      	adds	r1, r4, r5
 800b844:	42a3      	cmp	r3, r4
 800b846:	6025      	str	r5, [r4, #0]
 800b848:	bf18      	it	ne
 800b84a:	6059      	strne	r1, [r3, #4]
 800b84c:	6863      	ldr	r3, [r4, #4]
 800b84e:	bf08      	it	eq
 800b850:	f8c8 1000 	streq.w	r1, [r8]
 800b854:	5162      	str	r2, [r4, r5]
 800b856:	604b      	str	r3, [r1, #4]
 800b858:	4630      	mov	r0, r6
 800b85a:	f000 f82f 	bl	800b8bc <__malloc_unlock>
 800b85e:	f104 000b 	add.w	r0, r4, #11
 800b862:	1d23      	adds	r3, r4, #4
 800b864:	f020 0007 	bic.w	r0, r0, #7
 800b868:	1ac2      	subs	r2, r0, r3
 800b86a:	bf1c      	itt	ne
 800b86c:	1a1b      	subne	r3, r3, r0
 800b86e:	50a3      	strne	r3, [r4, r2]
 800b870:	e7af      	b.n	800b7d2 <_malloc_r+0x22>
 800b872:	6862      	ldr	r2, [r4, #4]
 800b874:	42a3      	cmp	r3, r4
 800b876:	bf0c      	ite	eq
 800b878:	f8c8 2000 	streq.w	r2, [r8]
 800b87c:	605a      	strne	r2, [r3, #4]
 800b87e:	e7eb      	b.n	800b858 <_malloc_r+0xa8>
 800b880:	4623      	mov	r3, r4
 800b882:	6864      	ldr	r4, [r4, #4]
 800b884:	e7ae      	b.n	800b7e4 <_malloc_r+0x34>
 800b886:	463c      	mov	r4, r7
 800b888:	687f      	ldr	r7, [r7, #4]
 800b88a:	e7b6      	b.n	800b7fa <_malloc_r+0x4a>
 800b88c:	461a      	mov	r2, r3
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	42a3      	cmp	r3, r4
 800b892:	d1fb      	bne.n	800b88c <_malloc_r+0xdc>
 800b894:	2300      	movs	r3, #0
 800b896:	6053      	str	r3, [r2, #4]
 800b898:	e7de      	b.n	800b858 <_malloc_r+0xa8>
 800b89a:	230c      	movs	r3, #12
 800b89c:	6033      	str	r3, [r6, #0]
 800b89e:	4630      	mov	r0, r6
 800b8a0:	f000 f80c 	bl	800b8bc <__malloc_unlock>
 800b8a4:	e794      	b.n	800b7d0 <_malloc_r+0x20>
 800b8a6:	6005      	str	r5, [r0, #0]
 800b8a8:	e7d6      	b.n	800b858 <_malloc_r+0xa8>
 800b8aa:	bf00      	nop
 800b8ac:	20000b74 	.word	0x20000b74

0800b8b0 <__malloc_lock>:
 800b8b0:	4801      	ldr	r0, [pc, #4]	@ (800b8b8 <__malloc_lock+0x8>)
 800b8b2:	f000 be6c 	b.w	800c58e <__retarget_lock_acquire_recursive>
 800b8b6:	bf00      	nop
 800b8b8:	20000cb8 	.word	0x20000cb8

0800b8bc <__malloc_unlock>:
 800b8bc:	4801      	ldr	r0, [pc, #4]	@ (800b8c4 <__malloc_unlock+0x8>)
 800b8be:	f000 be67 	b.w	800c590 <__retarget_lock_release_recursive>
 800b8c2:	bf00      	nop
 800b8c4:	20000cb8 	.word	0x20000cb8

0800b8c8 <__cvt>:
 800b8c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8cc:	ec57 6b10 	vmov	r6, r7, d0
 800b8d0:	2f00      	cmp	r7, #0
 800b8d2:	460c      	mov	r4, r1
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	463b      	mov	r3, r7
 800b8d8:	bfbb      	ittet	lt
 800b8da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b8de:	461f      	movlt	r7, r3
 800b8e0:	2300      	movge	r3, #0
 800b8e2:	232d      	movlt	r3, #45	@ 0x2d
 800b8e4:	700b      	strb	r3, [r1, #0]
 800b8e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b8ec:	4691      	mov	r9, r2
 800b8ee:	f023 0820 	bic.w	r8, r3, #32
 800b8f2:	bfbc      	itt	lt
 800b8f4:	4632      	movlt	r2, r6
 800b8f6:	4616      	movlt	r6, r2
 800b8f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b8fc:	d005      	beq.n	800b90a <__cvt+0x42>
 800b8fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b902:	d100      	bne.n	800b906 <__cvt+0x3e>
 800b904:	3401      	adds	r4, #1
 800b906:	2102      	movs	r1, #2
 800b908:	e000      	b.n	800b90c <__cvt+0x44>
 800b90a:	2103      	movs	r1, #3
 800b90c:	ab03      	add	r3, sp, #12
 800b90e:	9301      	str	r3, [sp, #4]
 800b910:	ab02      	add	r3, sp, #8
 800b912:	9300      	str	r3, [sp, #0]
 800b914:	ec47 6b10 	vmov	d0, r6, r7
 800b918:	4653      	mov	r3, sl
 800b91a:	4622      	mov	r2, r4
 800b91c:	f000 fed0 	bl	800c6c0 <_dtoa_r>
 800b920:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b924:	4605      	mov	r5, r0
 800b926:	d119      	bne.n	800b95c <__cvt+0x94>
 800b928:	f019 0f01 	tst.w	r9, #1
 800b92c:	d00e      	beq.n	800b94c <__cvt+0x84>
 800b92e:	eb00 0904 	add.w	r9, r0, r4
 800b932:	2200      	movs	r2, #0
 800b934:	2300      	movs	r3, #0
 800b936:	4630      	mov	r0, r6
 800b938:	4639      	mov	r1, r7
 800b93a:	f7f5 f8c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b93e:	b108      	cbz	r0, 800b944 <__cvt+0x7c>
 800b940:	f8cd 900c 	str.w	r9, [sp, #12]
 800b944:	2230      	movs	r2, #48	@ 0x30
 800b946:	9b03      	ldr	r3, [sp, #12]
 800b948:	454b      	cmp	r3, r9
 800b94a:	d31e      	bcc.n	800b98a <__cvt+0xc2>
 800b94c:	9b03      	ldr	r3, [sp, #12]
 800b94e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b950:	1b5b      	subs	r3, r3, r5
 800b952:	4628      	mov	r0, r5
 800b954:	6013      	str	r3, [r2, #0]
 800b956:	b004      	add	sp, #16
 800b958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b95c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b960:	eb00 0904 	add.w	r9, r0, r4
 800b964:	d1e5      	bne.n	800b932 <__cvt+0x6a>
 800b966:	7803      	ldrb	r3, [r0, #0]
 800b968:	2b30      	cmp	r3, #48	@ 0x30
 800b96a:	d10a      	bne.n	800b982 <__cvt+0xba>
 800b96c:	2200      	movs	r2, #0
 800b96e:	2300      	movs	r3, #0
 800b970:	4630      	mov	r0, r6
 800b972:	4639      	mov	r1, r7
 800b974:	f7f5 f8a8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b978:	b918      	cbnz	r0, 800b982 <__cvt+0xba>
 800b97a:	f1c4 0401 	rsb	r4, r4, #1
 800b97e:	f8ca 4000 	str.w	r4, [sl]
 800b982:	f8da 3000 	ldr.w	r3, [sl]
 800b986:	4499      	add	r9, r3
 800b988:	e7d3      	b.n	800b932 <__cvt+0x6a>
 800b98a:	1c59      	adds	r1, r3, #1
 800b98c:	9103      	str	r1, [sp, #12]
 800b98e:	701a      	strb	r2, [r3, #0]
 800b990:	e7d9      	b.n	800b946 <__cvt+0x7e>

0800b992 <__exponent>:
 800b992:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b994:	2900      	cmp	r1, #0
 800b996:	bfba      	itte	lt
 800b998:	4249      	neglt	r1, r1
 800b99a:	232d      	movlt	r3, #45	@ 0x2d
 800b99c:	232b      	movge	r3, #43	@ 0x2b
 800b99e:	2909      	cmp	r1, #9
 800b9a0:	7002      	strb	r2, [r0, #0]
 800b9a2:	7043      	strb	r3, [r0, #1]
 800b9a4:	dd29      	ble.n	800b9fa <__exponent+0x68>
 800b9a6:	f10d 0307 	add.w	r3, sp, #7
 800b9aa:	461d      	mov	r5, r3
 800b9ac:	270a      	movs	r7, #10
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	fbb1 f6f7 	udiv	r6, r1, r7
 800b9b4:	fb07 1416 	mls	r4, r7, r6, r1
 800b9b8:	3430      	adds	r4, #48	@ 0x30
 800b9ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b9be:	460c      	mov	r4, r1
 800b9c0:	2c63      	cmp	r4, #99	@ 0x63
 800b9c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b9c6:	4631      	mov	r1, r6
 800b9c8:	dcf1      	bgt.n	800b9ae <__exponent+0x1c>
 800b9ca:	3130      	adds	r1, #48	@ 0x30
 800b9cc:	1e94      	subs	r4, r2, #2
 800b9ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b9d2:	1c41      	adds	r1, r0, #1
 800b9d4:	4623      	mov	r3, r4
 800b9d6:	42ab      	cmp	r3, r5
 800b9d8:	d30a      	bcc.n	800b9f0 <__exponent+0x5e>
 800b9da:	f10d 0309 	add.w	r3, sp, #9
 800b9de:	1a9b      	subs	r3, r3, r2
 800b9e0:	42ac      	cmp	r4, r5
 800b9e2:	bf88      	it	hi
 800b9e4:	2300      	movhi	r3, #0
 800b9e6:	3302      	adds	r3, #2
 800b9e8:	4403      	add	r3, r0
 800b9ea:	1a18      	subs	r0, r3, r0
 800b9ec:	b003      	add	sp, #12
 800b9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b9f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b9f8:	e7ed      	b.n	800b9d6 <__exponent+0x44>
 800b9fa:	2330      	movs	r3, #48	@ 0x30
 800b9fc:	3130      	adds	r1, #48	@ 0x30
 800b9fe:	7083      	strb	r3, [r0, #2]
 800ba00:	70c1      	strb	r1, [r0, #3]
 800ba02:	1d03      	adds	r3, r0, #4
 800ba04:	e7f1      	b.n	800b9ea <__exponent+0x58>
	...

0800ba08 <_printf_float>:
 800ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba0c:	b08d      	sub	sp, #52	@ 0x34
 800ba0e:	460c      	mov	r4, r1
 800ba10:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ba14:	4616      	mov	r6, r2
 800ba16:	461f      	mov	r7, r3
 800ba18:	4605      	mov	r5, r0
 800ba1a:	f000 fd1f 	bl	800c45c <_localeconv_r>
 800ba1e:	6803      	ldr	r3, [r0, #0]
 800ba20:	9304      	str	r3, [sp, #16]
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7f4 fc24 	bl	8000270 <strlen>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba2c:	f8d8 3000 	ldr.w	r3, [r8]
 800ba30:	9005      	str	r0, [sp, #20]
 800ba32:	3307      	adds	r3, #7
 800ba34:	f023 0307 	bic.w	r3, r3, #7
 800ba38:	f103 0208 	add.w	r2, r3, #8
 800ba3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ba40:	f8d4 b000 	ldr.w	fp, [r4]
 800ba44:	f8c8 2000 	str.w	r2, [r8]
 800ba48:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba4c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ba50:	9307      	str	r3, [sp, #28]
 800ba52:	f8cd 8018 	str.w	r8, [sp, #24]
 800ba56:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ba5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba5e:	4b9c      	ldr	r3, [pc, #624]	@ (800bcd0 <_printf_float+0x2c8>)
 800ba60:	f04f 32ff 	mov.w	r2, #4294967295
 800ba64:	f7f5 f862 	bl	8000b2c <__aeabi_dcmpun>
 800ba68:	bb70      	cbnz	r0, 800bac8 <_printf_float+0xc0>
 800ba6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba6e:	4b98      	ldr	r3, [pc, #608]	@ (800bcd0 <_printf_float+0x2c8>)
 800ba70:	f04f 32ff 	mov.w	r2, #4294967295
 800ba74:	f7f5 f83c 	bl	8000af0 <__aeabi_dcmple>
 800ba78:	bb30      	cbnz	r0, 800bac8 <_printf_float+0xc0>
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	4640      	mov	r0, r8
 800ba80:	4649      	mov	r1, r9
 800ba82:	f7f5 f82b 	bl	8000adc <__aeabi_dcmplt>
 800ba86:	b110      	cbz	r0, 800ba8e <_printf_float+0x86>
 800ba88:	232d      	movs	r3, #45	@ 0x2d
 800ba8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba8e:	4a91      	ldr	r2, [pc, #580]	@ (800bcd4 <_printf_float+0x2cc>)
 800ba90:	4b91      	ldr	r3, [pc, #580]	@ (800bcd8 <_printf_float+0x2d0>)
 800ba92:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ba96:	bf8c      	ite	hi
 800ba98:	4690      	movhi	r8, r2
 800ba9a:	4698      	movls	r8, r3
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	6123      	str	r3, [r4, #16]
 800baa0:	f02b 0304 	bic.w	r3, fp, #4
 800baa4:	6023      	str	r3, [r4, #0]
 800baa6:	f04f 0900 	mov.w	r9, #0
 800baaa:	9700      	str	r7, [sp, #0]
 800baac:	4633      	mov	r3, r6
 800baae:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bab0:	4621      	mov	r1, r4
 800bab2:	4628      	mov	r0, r5
 800bab4:	f000 f9d2 	bl	800be5c <_printf_common>
 800bab8:	3001      	adds	r0, #1
 800baba:	f040 808d 	bne.w	800bbd8 <_printf_float+0x1d0>
 800babe:	f04f 30ff 	mov.w	r0, #4294967295
 800bac2:	b00d      	add	sp, #52	@ 0x34
 800bac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac8:	4642      	mov	r2, r8
 800baca:	464b      	mov	r3, r9
 800bacc:	4640      	mov	r0, r8
 800bace:	4649      	mov	r1, r9
 800bad0:	f7f5 f82c 	bl	8000b2c <__aeabi_dcmpun>
 800bad4:	b140      	cbz	r0, 800bae8 <_printf_float+0xe0>
 800bad6:	464b      	mov	r3, r9
 800bad8:	2b00      	cmp	r3, #0
 800bada:	bfbc      	itt	lt
 800badc:	232d      	movlt	r3, #45	@ 0x2d
 800bade:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bae2:	4a7e      	ldr	r2, [pc, #504]	@ (800bcdc <_printf_float+0x2d4>)
 800bae4:	4b7e      	ldr	r3, [pc, #504]	@ (800bce0 <_printf_float+0x2d8>)
 800bae6:	e7d4      	b.n	800ba92 <_printf_float+0x8a>
 800bae8:	6863      	ldr	r3, [r4, #4]
 800baea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800baee:	9206      	str	r2, [sp, #24]
 800baf0:	1c5a      	adds	r2, r3, #1
 800baf2:	d13b      	bne.n	800bb6c <_printf_float+0x164>
 800baf4:	2306      	movs	r3, #6
 800baf6:	6063      	str	r3, [r4, #4]
 800baf8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bafc:	2300      	movs	r3, #0
 800bafe:	6022      	str	r2, [r4, #0]
 800bb00:	9303      	str	r3, [sp, #12]
 800bb02:	ab0a      	add	r3, sp, #40	@ 0x28
 800bb04:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bb08:	ab09      	add	r3, sp, #36	@ 0x24
 800bb0a:	9300      	str	r3, [sp, #0]
 800bb0c:	6861      	ldr	r1, [r4, #4]
 800bb0e:	ec49 8b10 	vmov	d0, r8, r9
 800bb12:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bb16:	4628      	mov	r0, r5
 800bb18:	f7ff fed6 	bl	800b8c8 <__cvt>
 800bb1c:	9b06      	ldr	r3, [sp, #24]
 800bb1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb20:	2b47      	cmp	r3, #71	@ 0x47
 800bb22:	4680      	mov	r8, r0
 800bb24:	d129      	bne.n	800bb7a <_printf_float+0x172>
 800bb26:	1cc8      	adds	r0, r1, #3
 800bb28:	db02      	blt.n	800bb30 <_printf_float+0x128>
 800bb2a:	6863      	ldr	r3, [r4, #4]
 800bb2c:	4299      	cmp	r1, r3
 800bb2e:	dd41      	ble.n	800bbb4 <_printf_float+0x1ac>
 800bb30:	f1aa 0a02 	sub.w	sl, sl, #2
 800bb34:	fa5f fa8a 	uxtb.w	sl, sl
 800bb38:	3901      	subs	r1, #1
 800bb3a:	4652      	mov	r2, sl
 800bb3c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bb40:	9109      	str	r1, [sp, #36]	@ 0x24
 800bb42:	f7ff ff26 	bl	800b992 <__exponent>
 800bb46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb48:	1813      	adds	r3, r2, r0
 800bb4a:	2a01      	cmp	r2, #1
 800bb4c:	4681      	mov	r9, r0
 800bb4e:	6123      	str	r3, [r4, #16]
 800bb50:	dc02      	bgt.n	800bb58 <_printf_float+0x150>
 800bb52:	6822      	ldr	r2, [r4, #0]
 800bb54:	07d2      	lsls	r2, r2, #31
 800bb56:	d501      	bpl.n	800bb5c <_printf_float+0x154>
 800bb58:	3301      	adds	r3, #1
 800bb5a:	6123      	str	r3, [r4, #16]
 800bb5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d0a2      	beq.n	800baaa <_printf_float+0xa2>
 800bb64:	232d      	movs	r3, #45	@ 0x2d
 800bb66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb6a:	e79e      	b.n	800baaa <_printf_float+0xa2>
 800bb6c:	9a06      	ldr	r2, [sp, #24]
 800bb6e:	2a47      	cmp	r2, #71	@ 0x47
 800bb70:	d1c2      	bne.n	800baf8 <_printf_float+0xf0>
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1c0      	bne.n	800baf8 <_printf_float+0xf0>
 800bb76:	2301      	movs	r3, #1
 800bb78:	e7bd      	b.n	800baf6 <_printf_float+0xee>
 800bb7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bb7e:	d9db      	bls.n	800bb38 <_printf_float+0x130>
 800bb80:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bb84:	d118      	bne.n	800bbb8 <_printf_float+0x1b0>
 800bb86:	2900      	cmp	r1, #0
 800bb88:	6863      	ldr	r3, [r4, #4]
 800bb8a:	dd0b      	ble.n	800bba4 <_printf_float+0x19c>
 800bb8c:	6121      	str	r1, [r4, #16]
 800bb8e:	b913      	cbnz	r3, 800bb96 <_printf_float+0x18e>
 800bb90:	6822      	ldr	r2, [r4, #0]
 800bb92:	07d0      	lsls	r0, r2, #31
 800bb94:	d502      	bpl.n	800bb9c <_printf_float+0x194>
 800bb96:	3301      	adds	r3, #1
 800bb98:	440b      	add	r3, r1
 800bb9a:	6123      	str	r3, [r4, #16]
 800bb9c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bb9e:	f04f 0900 	mov.w	r9, #0
 800bba2:	e7db      	b.n	800bb5c <_printf_float+0x154>
 800bba4:	b913      	cbnz	r3, 800bbac <_printf_float+0x1a4>
 800bba6:	6822      	ldr	r2, [r4, #0]
 800bba8:	07d2      	lsls	r2, r2, #31
 800bbaa:	d501      	bpl.n	800bbb0 <_printf_float+0x1a8>
 800bbac:	3302      	adds	r3, #2
 800bbae:	e7f4      	b.n	800bb9a <_printf_float+0x192>
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e7f2      	b.n	800bb9a <_printf_float+0x192>
 800bbb4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bbb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbba:	4299      	cmp	r1, r3
 800bbbc:	db05      	blt.n	800bbca <_printf_float+0x1c2>
 800bbbe:	6823      	ldr	r3, [r4, #0]
 800bbc0:	6121      	str	r1, [r4, #16]
 800bbc2:	07d8      	lsls	r0, r3, #31
 800bbc4:	d5ea      	bpl.n	800bb9c <_printf_float+0x194>
 800bbc6:	1c4b      	adds	r3, r1, #1
 800bbc8:	e7e7      	b.n	800bb9a <_printf_float+0x192>
 800bbca:	2900      	cmp	r1, #0
 800bbcc:	bfd4      	ite	le
 800bbce:	f1c1 0202 	rsble	r2, r1, #2
 800bbd2:	2201      	movgt	r2, #1
 800bbd4:	4413      	add	r3, r2
 800bbd6:	e7e0      	b.n	800bb9a <_printf_float+0x192>
 800bbd8:	6823      	ldr	r3, [r4, #0]
 800bbda:	055a      	lsls	r2, r3, #21
 800bbdc:	d407      	bmi.n	800bbee <_printf_float+0x1e6>
 800bbde:	6923      	ldr	r3, [r4, #16]
 800bbe0:	4642      	mov	r2, r8
 800bbe2:	4631      	mov	r1, r6
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	47b8      	blx	r7
 800bbe8:	3001      	adds	r0, #1
 800bbea:	d12b      	bne.n	800bc44 <_printf_float+0x23c>
 800bbec:	e767      	b.n	800babe <_printf_float+0xb6>
 800bbee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bbf2:	f240 80dd 	bls.w	800bdb0 <_printf_float+0x3a8>
 800bbf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	f7f4 ff63 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc02:	2800      	cmp	r0, #0
 800bc04:	d033      	beq.n	800bc6e <_printf_float+0x266>
 800bc06:	4a37      	ldr	r2, [pc, #220]	@ (800bce4 <_printf_float+0x2dc>)
 800bc08:	2301      	movs	r3, #1
 800bc0a:	4631      	mov	r1, r6
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	47b8      	blx	r7
 800bc10:	3001      	adds	r0, #1
 800bc12:	f43f af54 	beq.w	800babe <_printf_float+0xb6>
 800bc16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bc1a:	4543      	cmp	r3, r8
 800bc1c:	db02      	blt.n	800bc24 <_printf_float+0x21c>
 800bc1e:	6823      	ldr	r3, [r4, #0]
 800bc20:	07d8      	lsls	r0, r3, #31
 800bc22:	d50f      	bpl.n	800bc44 <_printf_float+0x23c>
 800bc24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc28:	4631      	mov	r1, r6
 800bc2a:	4628      	mov	r0, r5
 800bc2c:	47b8      	blx	r7
 800bc2e:	3001      	adds	r0, #1
 800bc30:	f43f af45 	beq.w	800babe <_printf_float+0xb6>
 800bc34:	f04f 0900 	mov.w	r9, #0
 800bc38:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc3c:	f104 0a1a 	add.w	sl, r4, #26
 800bc40:	45c8      	cmp	r8, r9
 800bc42:	dc09      	bgt.n	800bc58 <_printf_float+0x250>
 800bc44:	6823      	ldr	r3, [r4, #0]
 800bc46:	079b      	lsls	r3, r3, #30
 800bc48:	f100 8103 	bmi.w	800be52 <_printf_float+0x44a>
 800bc4c:	68e0      	ldr	r0, [r4, #12]
 800bc4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc50:	4298      	cmp	r0, r3
 800bc52:	bfb8      	it	lt
 800bc54:	4618      	movlt	r0, r3
 800bc56:	e734      	b.n	800bac2 <_printf_float+0xba>
 800bc58:	2301      	movs	r3, #1
 800bc5a:	4652      	mov	r2, sl
 800bc5c:	4631      	mov	r1, r6
 800bc5e:	4628      	mov	r0, r5
 800bc60:	47b8      	blx	r7
 800bc62:	3001      	adds	r0, #1
 800bc64:	f43f af2b 	beq.w	800babe <_printf_float+0xb6>
 800bc68:	f109 0901 	add.w	r9, r9, #1
 800bc6c:	e7e8      	b.n	800bc40 <_printf_float+0x238>
 800bc6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	dc39      	bgt.n	800bce8 <_printf_float+0x2e0>
 800bc74:	4a1b      	ldr	r2, [pc, #108]	@ (800bce4 <_printf_float+0x2dc>)
 800bc76:	2301      	movs	r3, #1
 800bc78:	4631      	mov	r1, r6
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	47b8      	blx	r7
 800bc7e:	3001      	adds	r0, #1
 800bc80:	f43f af1d 	beq.w	800babe <_printf_float+0xb6>
 800bc84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bc88:	ea59 0303 	orrs.w	r3, r9, r3
 800bc8c:	d102      	bne.n	800bc94 <_printf_float+0x28c>
 800bc8e:	6823      	ldr	r3, [r4, #0]
 800bc90:	07d9      	lsls	r1, r3, #31
 800bc92:	d5d7      	bpl.n	800bc44 <_printf_float+0x23c>
 800bc94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc98:	4631      	mov	r1, r6
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	47b8      	blx	r7
 800bc9e:	3001      	adds	r0, #1
 800bca0:	f43f af0d 	beq.w	800babe <_printf_float+0xb6>
 800bca4:	f04f 0a00 	mov.w	sl, #0
 800bca8:	f104 0b1a 	add.w	fp, r4, #26
 800bcac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcae:	425b      	negs	r3, r3
 800bcb0:	4553      	cmp	r3, sl
 800bcb2:	dc01      	bgt.n	800bcb8 <_printf_float+0x2b0>
 800bcb4:	464b      	mov	r3, r9
 800bcb6:	e793      	b.n	800bbe0 <_printf_float+0x1d8>
 800bcb8:	2301      	movs	r3, #1
 800bcba:	465a      	mov	r2, fp
 800bcbc:	4631      	mov	r1, r6
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	47b8      	blx	r7
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	f43f aefb 	beq.w	800babe <_printf_float+0xb6>
 800bcc8:	f10a 0a01 	add.w	sl, sl, #1
 800bccc:	e7ee      	b.n	800bcac <_printf_float+0x2a4>
 800bcce:	bf00      	nop
 800bcd0:	7fefffff 	.word	0x7fefffff
 800bcd4:	0800e678 	.word	0x0800e678
 800bcd8:	0800e674 	.word	0x0800e674
 800bcdc:	0800e680 	.word	0x0800e680
 800bce0:	0800e67c 	.word	0x0800e67c
 800bce4:	0800e684 	.word	0x0800e684
 800bce8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bcea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bcee:	4553      	cmp	r3, sl
 800bcf0:	bfa8      	it	ge
 800bcf2:	4653      	movge	r3, sl
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	4699      	mov	r9, r3
 800bcf8:	dc36      	bgt.n	800bd68 <_printf_float+0x360>
 800bcfa:	f04f 0b00 	mov.w	fp, #0
 800bcfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd02:	f104 021a 	add.w	r2, r4, #26
 800bd06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd08:	9306      	str	r3, [sp, #24]
 800bd0a:	eba3 0309 	sub.w	r3, r3, r9
 800bd0e:	455b      	cmp	r3, fp
 800bd10:	dc31      	bgt.n	800bd76 <_printf_float+0x36e>
 800bd12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd14:	459a      	cmp	sl, r3
 800bd16:	dc3a      	bgt.n	800bd8e <_printf_float+0x386>
 800bd18:	6823      	ldr	r3, [r4, #0]
 800bd1a:	07da      	lsls	r2, r3, #31
 800bd1c:	d437      	bmi.n	800bd8e <_printf_float+0x386>
 800bd1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd20:	ebaa 0903 	sub.w	r9, sl, r3
 800bd24:	9b06      	ldr	r3, [sp, #24]
 800bd26:	ebaa 0303 	sub.w	r3, sl, r3
 800bd2a:	4599      	cmp	r9, r3
 800bd2c:	bfa8      	it	ge
 800bd2e:	4699      	movge	r9, r3
 800bd30:	f1b9 0f00 	cmp.w	r9, #0
 800bd34:	dc33      	bgt.n	800bd9e <_printf_float+0x396>
 800bd36:	f04f 0800 	mov.w	r8, #0
 800bd3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd3e:	f104 0b1a 	add.w	fp, r4, #26
 800bd42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd44:	ebaa 0303 	sub.w	r3, sl, r3
 800bd48:	eba3 0309 	sub.w	r3, r3, r9
 800bd4c:	4543      	cmp	r3, r8
 800bd4e:	f77f af79 	ble.w	800bc44 <_printf_float+0x23c>
 800bd52:	2301      	movs	r3, #1
 800bd54:	465a      	mov	r2, fp
 800bd56:	4631      	mov	r1, r6
 800bd58:	4628      	mov	r0, r5
 800bd5a:	47b8      	blx	r7
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	f43f aeae 	beq.w	800babe <_printf_float+0xb6>
 800bd62:	f108 0801 	add.w	r8, r8, #1
 800bd66:	e7ec      	b.n	800bd42 <_printf_float+0x33a>
 800bd68:	4642      	mov	r2, r8
 800bd6a:	4631      	mov	r1, r6
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	47b8      	blx	r7
 800bd70:	3001      	adds	r0, #1
 800bd72:	d1c2      	bne.n	800bcfa <_printf_float+0x2f2>
 800bd74:	e6a3      	b.n	800babe <_printf_float+0xb6>
 800bd76:	2301      	movs	r3, #1
 800bd78:	4631      	mov	r1, r6
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	9206      	str	r2, [sp, #24]
 800bd7e:	47b8      	blx	r7
 800bd80:	3001      	adds	r0, #1
 800bd82:	f43f ae9c 	beq.w	800babe <_printf_float+0xb6>
 800bd86:	9a06      	ldr	r2, [sp, #24]
 800bd88:	f10b 0b01 	add.w	fp, fp, #1
 800bd8c:	e7bb      	b.n	800bd06 <_printf_float+0x2fe>
 800bd8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd92:	4631      	mov	r1, r6
 800bd94:	4628      	mov	r0, r5
 800bd96:	47b8      	blx	r7
 800bd98:	3001      	adds	r0, #1
 800bd9a:	d1c0      	bne.n	800bd1e <_printf_float+0x316>
 800bd9c:	e68f      	b.n	800babe <_printf_float+0xb6>
 800bd9e:	9a06      	ldr	r2, [sp, #24]
 800bda0:	464b      	mov	r3, r9
 800bda2:	4442      	add	r2, r8
 800bda4:	4631      	mov	r1, r6
 800bda6:	4628      	mov	r0, r5
 800bda8:	47b8      	blx	r7
 800bdaa:	3001      	adds	r0, #1
 800bdac:	d1c3      	bne.n	800bd36 <_printf_float+0x32e>
 800bdae:	e686      	b.n	800babe <_printf_float+0xb6>
 800bdb0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bdb4:	f1ba 0f01 	cmp.w	sl, #1
 800bdb8:	dc01      	bgt.n	800bdbe <_printf_float+0x3b6>
 800bdba:	07db      	lsls	r3, r3, #31
 800bdbc:	d536      	bpl.n	800be2c <_printf_float+0x424>
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	4642      	mov	r2, r8
 800bdc2:	4631      	mov	r1, r6
 800bdc4:	4628      	mov	r0, r5
 800bdc6:	47b8      	blx	r7
 800bdc8:	3001      	adds	r0, #1
 800bdca:	f43f ae78 	beq.w	800babe <_printf_float+0xb6>
 800bdce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdd2:	4631      	mov	r1, r6
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	47b8      	blx	r7
 800bdd8:	3001      	adds	r0, #1
 800bdda:	f43f ae70 	beq.w	800babe <_printf_float+0xb6>
 800bdde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bde2:	2200      	movs	r2, #0
 800bde4:	2300      	movs	r3, #0
 800bde6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdea:	f7f4 fe6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdee:	b9c0      	cbnz	r0, 800be22 <_printf_float+0x41a>
 800bdf0:	4653      	mov	r3, sl
 800bdf2:	f108 0201 	add.w	r2, r8, #1
 800bdf6:	4631      	mov	r1, r6
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	47b8      	blx	r7
 800bdfc:	3001      	adds	r0, #1
 800bdfe:	d10c      	bne.n	800be1a <_printf_float+0x412>
 800be00:	e65d      	b.n	800babe <_printf_float+0xb6>
 800be02:	2301      	movs	r3, #1
 800be04:	465a      	mov	r2, fp
 800be06:	4631      	mov	r1, r6
 800be08:	4628      	mov	r0, r5
 800be0a:	47b8      	blx	r7
 800be0c:	3001      	adds	r0, #1
 800be0e:	f43f ae56 	beq.w	800babe <_printf_float+0xb6>
 800be12:	f108 0801 	add.w	r8, r8, #1
 800be16:	45d0      	cmp	r8, sl
 800be18:	dbf3      	blt.n	800be02 <_printf_float+0x3fa>
 800be1a:	464b      	mov	r3, r9
 800be1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800be20:	e6df      	b.n	800bbe2 <_printf_float+0x1da>
 800be22:	f04f 0800 	mov.w	r8, #0
 800be26:	f104 0b1a 	add.w	fp, r4, #26
 800be2a:	e7f4      	b.n	800be16 <_printf_float+0x40e>
 800be2c:	2301      	movs	r3, #1
 800be2e:	4642      	mov	r2, r8
 800be30:	e7e1      	b.n	800bdf6 <_printf_float+0x3ee>
 800be32:	2301      	movs	r3, #1
 800be34:	464a      	mov	r2, r9
 800be36:	4631      	mov	r1, r6
 800be38:	4628      	mov	r0, r5
 800be3a:	47b8      	blx	r7
 800be3c:	3001      	adds	r0, #1
 800be3e:	f43f ae3e 	beq.w	800babe <_printf_float+0xb6>
 800be42:	f108 0801 	add.w	r8, r8, #1
 800be46:	68e3      	ldr	r3, [r4, #12]
 800be48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be4a:	1a5b      	subs	r3, r3, r1
 800be4c:	4543      	cmp	r3, r8
 800be4e:	dcf0      	bgt.n	800be32 <_printf_float+0x42a>
 800be50:	e6fc      	b.n	800bc4c <_printf_float+0x244>
 800be52:	f04f 0800 	mov.w	r8, #0
 800be56:	f104 0919 	add.w	r9, r4, #25
 800be5a:	e7f4      	b.n	800be46 <_printf_float+0x43e>

0800be5c <_printf_common>:
 800be5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be60:	4616      	mov	r6, r2
 800be62:	4698      	mov	r8, r3
 800be64:	688a      	ldr	r2, [r1, #8]
 800be66:	690b      	ldr	r3, [r1, #16]
 800be68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be6c:	4293      	cmp	r3, r2
 800be6e:	bfb8      	it	lt
 800be70:	4613      	movlt	r3, r2
 800be72:	6033      	str	r3, [r6, #0]
 800be74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be78:	4607      	mov	r7, r0
 800be7a:	460c      	mov	r4, r1
 800be7c:	b10a      	cbz	r2, 800be82 <_printf_common+0x26>
 800be7e:	3301      	adds	r3, #1
 800be80:	6033      	str	r3, [r6, #0]
 800be82:	6823      	ldr	r3, [r4, #0]
 800be84:	0699      	lsls	r1, r3, #26
 800be86:	bf42      	ittt	mi
 800be88:	6833      	ldrmi	r3, [r6, #0]
 800be8a:	3302      	addmi	r3, #2
 800be8c:	6033      	strmi	r3, [r6, #0]
 800be8e:	6825      	ldr	r5, [r4, #0]
 800be90:	f015 0506 	ands.w	r5, r5, #6
 800be94:	d106      	bne.n	800bea4 <_printf_common+0x48>
 800be96:	f104 0a19 	add.w	sl, r4, #25
 800be9a:	68e3      	ldr	r3, [r4, #12]
 800be9c:	6832      	ldr	r2, [r6, #0]
 800be9e:	1a9b      	subs	r3, r3, r2
 800bea0:	42ab      	cmp	r3, r5
 800bea2:	dc26      	bgt.n	800bef2 <_printf_common+0x96>
 800bea4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bea8:	6822      	ldr	r2, [r4, #0]
 800beaa:	3b00      	subs	r3, #0
 800beac:	bf18      	it	ne
 800beae:	2301      	movne	r3, #1
 800beb0:	0692      	lsls	r2, r2, #26
 800beb2:	d42b      	bmi.n	800bf0c <_printf_common+0xb0>
 800beb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800beb8:	4641      	mov	r1, r8
 800beba:	4638      	mov	r0, r7
 800bebc:	47c8      	blx	r9
 800bebe:	3001      	adds	r0, #1
 800bec0:	d01e      	beq.n	800bf00 <_printf_common+0xa4>
 800bec2:	6823      	ldr	r3, [r4, #0]
 800bec4:	6922      	ldr	r2, [r4, #16]
 800bec6:	f003 0306 	and.w	r3, r3, #6
 800beca:	2b04      	cmp	r3, #4
 800becc:	bf02      	ittt	eq
 800bece:	68e5      	ldreq	r5, [r4, #12]
 800bed0:	6833      	ldreq	r3, [r6, #0]
 800bed2:	1aed      	subeq	r5, r5, r3
 800bed4:	68a3      	ldr	r3, [r4, #8]
 800bed6:	bf0c      	ite	eq
 800bed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bedc:	2500      	movne	r5, #0
 800bede:	4293      	cmp	r3, r2
 800bee0:	bfc4      	itt	gt
 800bee2:	1a9b      	subgt	r3, r3, r2
 800bee4:	18ed      	addgt	r5, r5, r3
 800bee6:	2600      	movs	r6, #0
 800bee8:	341a      	adds	r4, #26
 800beea:	42b5      	cmp	r5, r6
 800beec:	d11a      	bne.n	800bf24 <_printf_common+0xc8>
 800beee:	2000      	movs	r0, #0
 800bef0:	e008      	b.n	800bf04 <_printf_common+0xa8>
 800bef2:	2301      	movs	r3, #1
 800bef4:	4652      	mov	r2, sl
 800bef6:	4641      	mov	r1, r8
 800bef8:	4638      	mov	r0, r7
 800befa:	47c8      	blx	r9
 800befc:	3001      	adds	r0, #1
 800befe:	d103      	bne.n	800bf08 <_printf_common+0xac>
 800bf00:	f04f 30ff 	mov.w	r0, #4294967295
 800bf04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf08:	3501      	adds	r5, #1
 800bf0a:	e7c6      	b.n	800be9a <_printf_common+0x3e>
 800bf0c:	18e1      	adds	r1, r4, r3
 800bf0e:	1c5a      	adds	r2, r3, #1
 800bf10:	2030      	movs	r0, #48	@ 0x30
 800bf12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bf16:	4422      	add	r2, r4
 800bf18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bf1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bf20:	3302      	adds	r3, #2
 800bf22:	e7c7      	b.n	800beb4 <_printf_common+0x58>
 800bf24:	2301      	movs	r3, #1
 800bf26:	4622      	mov	r2, r4
 800bf28:	4641      	mov	r1, r8
 800bf2a:	4638      	mov	r0, r7
 800bf2c:	47c8      	blx	r9
 800bf2e:	3001      	adds	r0, #1
 800bf30:	d0e6      	beq.n	800bf00 <_printf_common+0xa4>
 800bf32:	3601      	adds	r6, #1
 800bf34:	e7d9      	b.n	800beea <_printf_common+0x8e>
	...

0800bf38 <_printf_i>:
 800bf38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf3c:	7e0f      	ldrb	r7, [r1, #24]
 800bf3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf40:	2f78      	cmp	r7, #120	@ 0x78
 800bf42:	4691      	mov	r9, r2
 800bf44:	4680      	mov	r8, r0
 800bf46:	460c      	mov	r4, r1
 800bf48:	469a      	mov	sl, r3
 800bf4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf4e:	d807      	bhi.n	800bf60 <_printf_i+0x28>
 800bf50:	2f62      	cmp	r7, #98	@ 0x62
 800bf52:	d80a      	bhi.n	800bf6a <_printf_i+0x32>
 800bf54:	2f00      	cmp	r7, #0
 800bf56:	f000 80d1 	beq.w	800c0fc <_printf_i+0x1c4>
 800bf5a:	2f58      	cmp	r7, #88	@ 0x58
 800bf5c:	f000 80b8 	beq.w	800c0d0 <_printf_i+0x198>
 800bf60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bf68:	e03a      	b.n	800bfe0 <_printf_i+0xa8>
 800bf6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf6e:	2b15      	cmp	r3, #21
 800bf70:	d8f6      	bhi.n	800bf60 <_printf_i+0x28>
 800bf72:	a101      	add	r1, pc, #4	@ (adr r1, 800bf78 <_printf_i+0x40>)
 800bf74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf78:	0800bfd1 	.word	0x0800bfd1
 800bf7c:	0800bfe5 	.word	0x0800bfe5
 800bf80:	0800bf61 	.word	0x0800bf61
 800bf84:	0800bf61 	.word	0x0800bf61
 800bf88:	0800bf61 	.word	0x0800bf61
 800bf8c:	0800bf61 	.word	0x0800bf61
 800bf90:	0800bfe5 	.word	0x0800bfe5
 800bf94:	0800bf61 	.word	0x0800bf61
 800bf98:	0800bf61 	.word	0x0800bf61
 800bf9c:	0800bf61 	.word	0x0800bf61
 800bfa0:	0800bf61 	.word	0x0800bf61
 800bfa4:	0800c0e3 	.word	0x0800c0e3
 800bfa8:	0800c00f 	.word	0x0800c00f
 800bfac:	0800c09d 	.word	0x0800c09d
 800bfb0:	0800bf61 	.word	0x0800bf61
 800bfb4:	0800bf61 	.word	0x0800bf61
 800bfb8:	0800c105 	.word	0x0800c105
 800bfbc:	0800bf61 	.word	0x0800bf61
 800bfc0:	0800c00f 	.word	0x0800c00f
 800bfc4:	0800bf61 	.word	0x0800bf61
 800bfc8:	0800bf61 	.word	0x0800bf61
 800bfcc:	0800c0a5 	.word	0x0800c0a5
 800bfd0:	6833      	ldr	r3, [r6, #0]
 800bfd2:	1d1a      	adds	r2, r3, #4
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	6032      	str	r2, [r6, #0]
 800bfd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e09c      	b.n	800c11e <_printf_i+0x1e6>
 800bfe4:	6833      	ldr	r3, [r6, #0]
 800bfe6:	6820      	ldr	r0, [r4, #0]
 800bfe8:	1d19      	adds	r1, r3, #4
 800bfea:	6031      	str	r1, [r6, #0]
 800bfec:	0606      	lsls	r6, r0, #24
 800bfee:	d501      	bpl.n	800bff4 <_printf_i+0xbc>
 800bff0:	681d      	ldr	r5, [r3, #0]
 800bff2:	e003      	b.n	800bffc <_printf_i+0xc4>
 800bff4:	0645      	lsls	r5, r0, #25
 800bff6:	d5fb      	bpl.n	800bff0 <_printf_i+0xb8>
 800bff8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bffc:	2d00      	cmp	r5, #0
 800bffe:	da03      	bge.n	800c008 <_printf_i+0xd0>
 800c000:	232d      	movs	r3, #45	@ 0x2d
 800c002:	426d      	negs	r5, r5
 800c004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c008:	4858      	ldr	r0, [pc, #352]	@ (800c16c <_printf_i+0x234>)
 800c00a:	230a      	movs	r3, #10
 800c00c:	e011      	b.n	800c032 <_printf_i+0xfa>
 800c00e:	6821      	ldr	r1, [r4, #0]
 800c010:	6833      	ldr	r3, [r6, #0]
 800c012:	0608      	lsls	r0, r1, #24
 800c014:	f853 5b04 	ldr.w	r5, [r3], #4
 800c018:	d402      	bmi.n	800c020 <_printf_i+0xe8>
 800c01a:	0649      	lsls	r1, r1, #25
 800c01c:	bf48      	it	mi
 800c01e:	b2ad      	uxthmi	r5, r5
 800c020:	2f6f      	cmp	r7, #111	@ 0x6f
 800c022:	4852      	ldr	r0, [pc, #328]	@ (800c16c <_printf_i+0x234>)
 800c024:	6033      	str	r3, [r6, #0]
 800c026:	bf14      	ite	ne
 800c028:	230a      	movne	r3, #10
 800c02a:	2308      	moveq	r3, #8
 800c02c:	2100      	movs	r1, #0
 800c02e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c032:	6866      	ldr	r6, [r4, #4]
 800c034:	60a6      	str	r6, [r4, #8]
 800c036:	2e00      	cmp	r6, #0
 800c038:	db05      	blt.n	800c046 <_printf_i+0x10e>
 800c03a:	6821      	ldr	r1, [r4, #0]
 800c03c:	432e      	orrs	r6, r5
 800c03e:	f021 0104 	bic.w	r1, r1, #4
 800c042:	6021      	str	r1, [r4, #0]
 800c044:	d04b      	beq.n	800c0de <_printf_i+0x1a6>
 800c046:	4616      	mov	r6, r2
 800c048:	fbb5 f1f3 	udiv	r1, r5, r3
 800c04c:	fb03 5711 	mls	r7, r3, r1, r5
 800c050:	5dc7      	ldrb	r7, [r0, r7]
 800c052:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c056:	462f      	mov	r7, r5
 800c058:	42bb      	cmp	r3, r7
 800c05a:	460d      	mov	r5, r1
 800c05c:	d9f4      	bls.n	800c048 <_printf_i+0x110>
 800c05e:	2b08      	cmp	r3, #8
 800c060:	d10b      	bne.n	800c07a <_printf_i+0x142>
 800c062:	6823      	ldr	r3, [r4, #0]
 800c064:	07df      	lsls	r7, r3, #31
 800c066:	d508      	bpl.n	800c07a <_printf_i+0x142>
 800c068:	6923      	ldr	r3, [r4, #16]
 800c06a:	6861      	ldr	r1, [r4, #4]
 800c06c:	4299      	cmp	r1, r3
 800c06e:	bfde      	ittt	le
 800c070:	2330      	movle	r3, #48	@ 0x30
 800c072:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c076:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c07a:	1b92      	subs	r2, r2, r6
 800c07c:	6122      	str	r2, [r4, #16]
 800c07e:	f8cd a000 	str.w	sl, [sp]
 800c082:	464b      	mov	r3, r9
 800c084:	aa03      	add	r2, sp, #12
 800c086:	4621      	mov	r1, r4
 800c088:	4640      	mov	r0, r8
 800c08a:	f7ff fee7 	bl	800be5c <_printf_common>
 800c08e:	3001      	adds	r0, #1
 800c090:	d14a      	bne.n	800c128 <_printf_i+0x1f0>
 800c092:	f04f 30ff 	mov.w	r0, #4294967295
 800c096:	b004      	add	sp, #16
 800c098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c09c:	6823      	ldr	r3, [r4, #0]
 800c09e:	f043 0320 	orr.w	r3, r3, #32
 800c0a2:	6023      	str	r3, [r4, #0]
 800c0a4:	4832      	ldr	r0, [pc, #200]	@ (800c170 <_printf_i+0x238>)
 800c0a6:	2778      	movs	r7, #120	@ 0x78
 800c0a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c0ac:	6823      	ldr	r3, [r4, #0]
 800c0ae:	6831      	ldr	r1, [r6, #0]
 800c0b0:	061f      	lsls	r7, r3, #24
 800c0b2:	f851 5b04 	ldr.w	r5, [r1], #4
 800c0b6:	d402      	bmi.n	800c0be <_printf_i+0x186>
 800c0b8:	065f      	lsls	r7, r3, #25
 800c0ba:	bf48      	it	mi
 800c0bc:	b2ad      	uxthmi	r5, r5
 800c0be:	6031      	str	r1, [r6, #0]
 800c0c0:	07d9      	lsls	r1, r3, #31
 800c0c2:	bf44      	itt	mi
 800c0c4:	f043 0320 	orrmi.w	r3, r3, #32
 800c0c8:	6023      	strmi	r3, [r4, #0]
 800c0ca:	b11d      	cbz	r5, 800c0d4 <_printf_i+0x19c>
 800c0cc:	2310      	movs	r3, #16
 800c0ce:	e7ad      	b.n	800c02c <_printf_i+0xf4>
 800c0d0:	4826      	ldr	r0, [pc, #152]	@ (800c16c <_printf_i+0x234>)
 800c0d2:	e7e9      	b.n	800c0a8 <_printf_i+0x170>
 800c0d4:	6823      	ldr	r3, [r4, #0]
 800c0d6:	f023 0320 	bic.w	r3, r3, #32
 800c0da:	6023      	str	r3, [r4, #0]
 800c0dc:	e7f6      	b.n	800c0cc <_printf_i+0x194>
 800c0de:	4616      	mov	r6, r2
 800c0e0:	e7bd      	b.n	800c05e <_printf_i+0x126>
 800c0e2:	6833      	ldr	r3, [r6, #0]
 800c0e4:	6825      	ldr	r5, [r4, #0]
 800c0e6:	6961      	ldr	r1, [r4, #20]
 800c0e8:	1d18      	adds	r0, r3, #4
 800c0ea:	6030      	str	r0, [r6, #0]
 800c0ec:	062e      	lsls	r6, r5, #24
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	d501      	bpl.n	800c0f6 <_printf_i+0x1be>
 800c0f2:	6019      	str	r1, [r3, #0]
 800c0f4:	e002      	b.n	800c0fc <_printf_i+0x1c4>
 800c0f6:	0668      	lsls	r0, r5, #25
 800c0f8:	d5fb      	bpl.n	800c0f2 <_printf_i+0x1ba>
 800c0fa:	8019      	strh	r1, [r3, #0]
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	6123      	str	r3, [r4, #16]
 800c100:	4616      	mov	r6, r2
 800c102:	e7bc      	b.n	800c07e <_printf_i+0x146>
 800c104:	6833      	ldr	r3, [r6, #0]
 800c106:	1d1a      	adds	r2, r3, #4
 800c108:	6032      	str	r2, [r6, #0]
 800c10a:	681e      	ldr	r6, [r3, #0]
 800c10c:	6862      	ldr	r2, [r4, #4]
 800c10e:	2100      	movs	r1, #0
 800c110:	4630      	mov	r0, r6
 800c112:	f7f4 f85d 	bl	80001d0 <memchr>
 800c116:	b108      	cbz	r0, 800c11c <_printf_i+0x1e4>
 800c118:	1b80      	subs	r0, r0, r6
 800c11a:	6060      	str	r0, [r4, #4]
 800c11c:	6863      	ldr	r3, [r4, #4]
 800c11e:	6123      	str	r3, [r4, #16]
 800c120:	2300      	movs	r3, #0
 800c122:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c126:	e7aa      	b.n	800c07e <_printf_i+0x146>
 800c128:	6923      	ldr	r3, [r4, #16]
 800c12a:	4632      	mov	r2, r6
 800c12c:	4649      	mov	r1, r9
 800c12e:	4640      	mov	r0, r8
 800c130:	47d0      	blx	sl
 800c132:	3001      	adds	r0, #1
 800c134:	d0ad      	beq.n	800c092 <_printf_i+0x15a>
 800c136:	6823      	ldr	r3, [r4, #0]
 800c138:	079b      	lsls	r3, r3, #30
 800c13a:	d413      	bmi.n	800c164 <_printf_i+0x22c>
 800c13c:	68e0      	ldr	r0, [r4, #12]
 800c13e:	9b03      	ldr	r3, [sp, #12]
 800c140:	4298      	cmp	r0, r3
 800c142:	bfb8      	it	lt
 800c144:	4618      	movlt	r0, r3
 800c146:	e7a6      	b.n	800c096 <_printf_i+0x15e>
 800c148:	2301      	movs	r3, #1
 800c14a:	4632      	mov	r2, r6
 800c14c:	4649      	mov	r1, r9
 800c14e:	4640      	mov	r0, r8
 800c150:	47d0      	blx	sl
 800c152:	3001      	adds	r0, #1
 800c154:	d09d      	beq.n	800c092 <_printf_i+0x15a>
 800c156:	3501      	adds	r5, #1
 800c158:	68e3      	ldr	r3, [r4, #12]
 800c15a:	9903      	ldr	r1, [sp, #12]
 800c15c:	1a5b      	subs	r3, r3, r1
 800c15e:	42ab      	cmp	r3, r5
 800c160:	dcf2      	bgt.n	800c148 <_printf_i+0x210>
 800c162:	e7eb      	b.n	800c13c <_printf_i+0x204>
 800c164:	2500      	movs	r5, #0
 800c166:	f104 0619 	add.w	r6, r4, #25
 800c16a:	e7f5      	b.n	800c158 <_printf_i+0x220>
 800c16c:	0800e686 	.word	0x0800e686
 800c170:	0800e697 	.word	0x0800e697

0800c174 <std>:
 800c174:	2300      	movs	r3, #0
 800c176:	b510      	push	{r4, lr}
 800c178:	4604      	mov	r4, r0
 800c17a:	e9c0 3300 	strd	r3, r3, [r0]
 800c17e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c182:	6083      	str	r3, [r0, #8]
 800c184:	8181      	strh	r1, [r0, #12]
 800c186:	6643      	str	r3, [r0, #100]	@ 0x64
 800c188:	81c2      	strh	r2, [r0, #14]
 800c18a:	6183      	str	r3, [r0, #24]
 800c18c:	4619      	mov	r1, r3
 800c18e:	2208      	movs	r2, #8
 800c190:	305c      	adds	r0, #92	@ 0x5c
 800c192:	f000 f92a 	bl	800c3ea <memset>
 800c196:	4b0d      	ldr	r3, [pc, #52]	@ (800c1cc <std+0x58>)
 800c198:	6263      	str	r3, [r4, #36]	@ 0x24
 800c19a:	4b0d      	ldr	r3, [pc, #52]	@ (800c1d0 <std+0x5c>)
 800c19c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c19e:	4b0d      	ldr	r3, [pc, #52]	@ (800c1d4 <std+0x60>)
 800c1a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c1a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c1d8 <std+0x64>)
 800c1a4:	6323      	str	r3, [r4, #48]	@ 0x30
 800c1a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c1dc <std+0x68>)
 800c1a8:	6224      	str	r4, [r4, #32]
 800c1aa:	429c      	cmp	r4, r3
 800c1ac:	d006      	beq.n	800c1bc <std+0x48>
 800c1ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c1b2:	4294      	cmp	r4, r2
 800c1b4:	d002      	beq.n	800c1bc <std+0x48>
 800c1b6:	33d0      	adds	r3, #208	@ 0xd0
 800c1b8:	429c      	cmp	r4, r3
 800c1ba:	d105      	bne.n	800c1c8 <std+0x54>
 800c1bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1c4:	f000 b9e2 	b.w	800c58c <__retarget_lock_init_recursive>
 800c1c8:	bd10      	pop	{r4, pc}
 800c1ca:	bf00      	nop
 800c1cc:	0800c365 	.word	0x0800c365
 800c1d0:	0800c387 	.word	0x0800c387
 800c1d4:	0800c3bf 	.word	0x0800c3bf
 800c1d8:	0800c3e3 	.word	0x0800c3e3
 800c1dc:	20000b78 	.word	0x20000b78

0800c1e0 <stdio_exit_handler>:
 800c1e0:	4a02      	ldr	r2, [pc, #8]	@ (800c1ec <stdio_exit_handler+0xc>)
 800c1e2:	4903      	ldr	r1, [pc, #12]	@ (800c1f0 <stdio_exit_handler+0x10>)
 800c1e4:	4803      	ldr	r0, [pc, #12]	@ (800c1f4 <stdio_exit_handler+0x14>)
 800c1e6:	f000 b869 	b.w	800c2bc <_fwalk_sglue>
 800c1ea:	bf00      	nop
 800c1ec:	20000030 	.word	0x20000030
 800c1f0:	0800dda1 	.word	0x0800dda1
 800c1f4:	20000040 	.word	0x20000040

0800c1f8 <cleanup_stdio>:
 800c1f8:	6841      	ldr	r1, [r0, #4]
 800c1fa:	4b0c      	ldr	r3, [pc, #48]	@ (800c22c <cleanup_stdio+0x34>)
 800c1fc:	4299      	cmp	r1, r3
 800c1fe:	b510      	push	{r4, lr}
 800c200:	4604      	mov	r4, r0
 800c202:	d001      	beq.n	800c208 <cleanup_stdio+0x10>
 800c204:	f001 fdcc 	bl	800dda0 <_fflush_r>
 800c208:	68a1      	ldr	r1, [r4, #8]
 800c20a:	4b09      	ldr	r3, [pc, #36]	@ (800c230 <cleanup_stdio+0x38>)
 800c20c:	4299      	cmp	r1, r3
 800c20e:	d002      	beq.n	800c216 <cleanup_stdio+0x1e>
 800c210:	4620      	mov	r0, r4
 800c212:	f001 fdc5 	bl	800dda0 <_fflush_r>
 800c216:	68e1      	ldr	r1, [r4, #12]
 800c218:	4b06      	ldr	r3, [pc, #24]	@ (800c234 <cleanup_stdio+0x3c>)
 800c21a:	4299      	cmp	r1, r3
 800c21c:	d004      	beq.n	800c228 <cleanup_stdio+0x30>
 800c21e:	4620      	mov	r0, r4
 800c220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c224:	f001 bdbc 	b.w	800dda0 <_fflush_r>
 800c228:	bd10      	pop	{r4, pc}
 800c22a:	bf00      	nop
 800c22c:	20000b78 	.word	0x20000b78
 800c230:	20000be0 	.word	0x20000be0
 800c234:	20000c48 	.word	0x20000c48

0800c238 <global_stdio_init.part.0>:
 800c238:	b510      	push	{r4, lr}
 800c23a:	4b0b      	ldr	r3, [pc, #44]	@ (800c268 <global_stdio_init.part.0+0x30>)
 800c23c:	4c0b      	ldr	r4, [pc, #44]	@ (800c26c <global_stdio_init.part.0+0x34>)
 800c23e:	4a0c      	ldr	r2, [pc, #48]	@ (800c270 <global_stdio_init.part.0+0x38>)
 800c240:	601a      	str	r2, [r3, #0]
 800c242:	4620      	mov	r0, r4
 800c244:	2200      	movs	r2, #0
 800c246:	2104      	movs	r1, #4
 800c248:	f7ff ff94 	bl	800c174 <std>
 800c24c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c250:	2201      	movs	r2, #1
 800c252:	2109      	movs	r1, #9
 800c254:	f7ff ff8e 	bl	800c174 <std>
 800c258:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c25c:	2202      	movs	r2, #2
 800c25e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c262:	2112      	movs	r1, #18
 800c264:	f7ff bf86 	b.w	800c174 <std>
 800c268:	20000cb0 	.word	0x20000cb0
 800c26c:	20000b78 	.word	0x20000b78
 800c270:	0800c1e1 	.word	0x0800c1e1

0800c274 <__sfp_lock_acquire>:
 800c274:	4801      	ldr	r0, [pc, #4]	@ (800c27c <__sfp_lock_acquire+0x8>)
 800c276:	f000 b98a 	b.w	800c58e <__retarget_lock_acquire_recursive>
 800c27a:	bf00      	nop
 800c27c:	20000cb9 	.word	0x20000cb9

0800c280 <__sfp_lock_release>:
 800c280:	4801      	ldr	r0, [pc, #4]	@ (800c288 <__sfp_lock_release+0x8>)
 800c282:	f000 b985 	b.w	800c590 <__retarget_lock_release_recursive>
 800c286:	bf00      	nop
 800c288:	20000cb9 	.word	0x20000cb9

0800c28c <__sinit>:
 800c28c:	b510      	push	{r4, lr}
 800c28e:	4604      	mov	r4, r0
 800c290:	f7ff fff0 	bl	800c274 <__sfp_lock_acquire>
 800c294:	6a23      	ldr	r3, [r4, #32]
 800c296:	b11b      	cbz	r3, 800c2a0 <__sinit+0x14>
 800c298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c29c:	f7ff bff0 	b.w	800c280 <__sfp_lock_release>
 800c2a0:	4b04      	ldr	r3, [pc, #16]	@ (800c2b4 <__sinit+0x28>)
 800c2a2:	6223      	str	r3, [r4, #32]
 800c2a4:	4b04      	ldr	r3, [pc, #16]	@ (800c2b8 <__sinit+0x2c>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d1f5      	bne.n	800c298 <__sinit+0xc>
 800c2ac:	f7ff ffc4 	bl	800c238 <global_stdio_init.part.0>
 800c2b0:	e7f2      	b.n	800c298 <__sinit+0xc>
 800c2b2:	bf00      	nop
 800c2b4:	0800c1f9 	.word	0x0800c1f9
 800c2b8:	20000cb0 	.word	0x20000cb0

0800c2bc <_fwalk_sglue>:
 800c2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2c0:	4607      	mov	r7, r0
 800c2c2:	4688      	mov	r8, r1
 800c2c4:	4614      	mov	r4, r2
 800c2c6:	2600      	movs	r6, #0
 800c2c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2cc:	f1b9 0901 	subs.w	r9, r9, #1
 800c2d0:	d505      	bpl.n	800c2de <_fwalk_sglue+0x22>
 800c2d2:	6824      	ldr	r4, [r4, #0]
 800c2d4:	2c00      	cmp	r4, #0
 800c2d6:	d1f7      	bne.n	800c2c8 <_fwalk_sglue+0xc>
 800c2d8:	4630      	mov	r0, r6
 800c2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2de:	89ab      	ldrh	r3, [r5, #12]
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	d907      	bls.n	800c2f4 <_fwalk_sglue+0x38>
 800c2e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	d003      	beq.n	800c2f4 <_fwalk_sglue+0x38>
 800c2ec:	4629      	mov	r1, r5
 800c2ee:	4638      	mov	r0, r7
 800c2f0:	47c0      	blx	r8
 800c2f2:	4306      	orrs	r6, r0
 800c2f4:	3568      	adds	r5, #104	@ 0x68
 800c2f6:	e7e9      	b.n	800c2cc <_fwalk_sglue+0x10>

0800c2f8 <sniprintf>:
 800c2f8:	b40c      	push	{r2, r3}
 800c2fa:	b530      	push	{r4, r5, lr}
 800c2fc:	4b18      	ldr	r3, [pc, #96]	@ (800c360 <sniprintf+0x68>)
 800c2fe:	1e0c      	subs	r4, r1, #0
 800c300:	681d      	ldr	r5, [r3, #0]
 800c302:	b09d      	sub	sp, #116	@ 0x74
 800c304:	da08      	bge.n	800c318 <sniprintf+0x20>
 800c306:	238b      	movs	r3, #139	@ 0x8b
 800c308:	602b      	str	r3, [r5, #0]
 800c30a:	f04f 30ff 	mov.w	r0, #4294967295
 800c30e:	b01d      	add	sp, #116	@ 0x74
 800c310:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c314:	b002      	add	sp, #8
 800c316:	4770      	bx	lr
 800c318:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c31c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c320:	f04f 0300 	mov.w	r3, #0
 800c324:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c326:	bf14      	ite	ne
 800c328:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c32c:	4623      	moveq	r3, r4
 800c32e:	9304      	str	r3, [sp, #16]
 800c330:	9307      	str	r3, [sp, #28]
 800c332:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c336:	9002      	str	r0, [sp, #8]
 800c338:	9006      	str	r0, [sp, #24]
 800c33a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c33e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c340:	ab21      	add	r3, sp, #132	@ 0x84
 800c342:	a902      	add	r1, sp, #8
 800c344:	4628      	mov	r0, r5
 800c346:	9301      	str	r3, [sp, #4]
 800c348:	f001 fbaa 	bl	800daa0 <_svfiprintf_r>
 800c34c:	1c43      	adds	r3, r0, #1
 800c34e:	bfbc      	itt	lt
 800c350:	238b      	movlt	r3, #139	@ 0x8b
 800c352:	602b      	strlt	r3, [r5, #0]
 800c354:	2c00      	cmp	r4, #0
 800c356:	d0da      	beq.n	800c30e <sniprintf+0x16>
 800c358:	9b02      	ldr	r3, [sp, #8]
 800c35a:	2200      	movs	r2, #0
 800c35c:	701a      	strb	r2, [r3, #0]
 800c35e:	e7d6      	b.n	800c30e <sniprintf+0x16>
 800c360:	2000003c 	.word	0x2000003c

0800c364 <__sread>:
 800c364:	b510      	push	{r4, lr}
 800c366:	460c      	mov	r4, r1
 800c368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c36c:	f000 f89c 	bl	800c4a8 <_read_r>
 800c370:	2800      	cmp	r0, #0
 800c372:	bfab      	itete	ge
 800c374:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c376:	89a3      	ldrhlt	r3, [r4, #12]
 800c378:	181b      	addge	r3, r3, r0
 800c37a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c37e:	bfac      	ite	ge
 800c380:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c382:	81a3      	strhlt	r3, [r4, #12]
 800c384:	bd10      	pop	{r4, pc}

0800c386 <__swrite>:
 800c386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c38a:	461f      	mov	r7, r3
 800c38c:	898b      	ldrh	r3, [r1, #12]
 800c38e:	05db      	lsls	r3, r3, #23
 800c390:	4605      	mov	r5, r0
 800c392:	460c      	mov	r4, r1
 800c394:	4616      	mov	r6, r2
 800c396:	d505      	bpl.n	800c3a4 <__swrite+0x1e>
 800c398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c39c:	2302      	movs	r3, #2
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f000 f870 	bl	800c484 <_lseek_r>
 800c3a4:	89a3      	ldrh	r3, [r4, #12]
 800c3a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c3ae:	81a3      	strh	r3, [r4, #12]
 800c3b0:	4632      	mov	r2, r6
 800c3b2:	463b      	mov	r3, r7
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ba:	f000 b8ab 	b.w	800c514 <_write_r>

0800c3be <__sseek>:
 800c3be:	b510      	push	{r4, lr}
 800c3c0:	460c      	mov	r4, r1
 800c3c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3c6:	f000 f85d 	bl	800c484 <_lseek_r>
 800c3ca:	1c43      	adds	r3, r0, #1
 800c3cc:	89a3      	ldrh	r3, [r4, #12]
 800c3ce:	bf15      	itete	ne
 800c3d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c3d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c3d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c3da:	81a3      	strheq	r3, [r4, #12]
 800c3dc:	bf18      	it	ne
 800c3de:	81a3      	strhne	r3, [r4, #12]
 800c3e0:	bd10      	pop	{r4, pc}

0800c3e2 <__sclose>:
 800c3e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3e6:	f000 b83d 	b.w	800c464 <_close_r>

0800c3ea <memset>:
 800c3ea:	4402      	add	r2, r0
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d100      	bne.n	800c3f4 <memset+0xa>
 800c3f2:	4770      	bx	lr
 800c3f4:	f803 1b01 	strb.w	r1, [r3], #1
 800c3f8:	e7f9      	b.n	800c3ee <memset+0x4>

0800c3fa <_raise_r>:
 800c3fa:	291f      	cmp	r1, #31
 800c3fc:	b538      	push	{r3, r4, r5, lr}
 800c3fe:	4605      	mov	r5, r0
 800c400:	460c      	mov	r4, r1
 800c402:	d904      	bls.n	800c40e <_raise_r+0x14>
 800c404:	2316      	movs	r3, #22
 800c406:	6003      	str	r3, [r0, #0]
 800c408:	f04f 30ff 	mov.w	r0, #4294967295
 800c40c:	bd38      	pop	{r3, r4, r5, pc}
 800c40e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c410:	b112      	cbz	r2, 800c418 <_raise_r+0x1e>
 800c412:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c416:	b94b      	cbnz	r3, 800c42c <_raise_r+0x32>
 800c418:	4628      	mov	r0, r5
 800c41a:	f000 f869 	bl	800c4f0 <_getpid_r>
 800c41e:	4622      	mov	r2, r4
 800c420:	4601      	mov	r1, r0
 800c422:	4628      	mov	r0, r5
 800c424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c428:	f000 b850 	b.w	800c4cc <_kill_r>
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d00a      	beq.n	800c446 <_raise_r+0x4c>
 800c430:	1c59      	adds	r1, r3, #1
 800c432:	d103      	bne.n	800c43c <_raise_r+0x42>
 800c434:	2316      	movs	r3, #22
 800c436:	6003      	str	r3, [r0, #0]
 800c438:	2001      	movs	r0, #1
 800c43a:	e7e7      	b.n	800c40c <_raise_r+0x12>
 800c43c:	2100      	movs	r1, #0
 800c43e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c442:	4620      	mov	r0, r4
 800c444:	4798      	blx	r3
 800c446:	2000      	movs	r0, #0
 800c448:	e7e0      	b.n	800c40c <_raise_r+0x12>
	...

0800c44c <raise>:
 800c44c:	4b02      	ldr	r3, [pc, #8]	@ (800c458 <raise+0xc>)
 800c44e:	4601      	mov	r1, r0
 800c450:	6818      	ldr	r0, [r3, #0]
 800c452:	f7ff bfd2 	b.w	800c3fa <_raise_r>
 800c456:	bf00      	nop
 800c458:	2000003c 	.word	0x2000003c

0800c45c <_localeconv_r>:
 800c45c:	4800      	ldr	r0, [pc, #0]	@ (800c460 <_localeconv_r+0x4>)
 800c45e:	4770      	bx	lr
 800c460:	2000017c 	.word	0x2000017c

0800c464 <_close_r>:
 800c464:	b538      	push	{r3, r4, r5, lr}
 800c466:	4d06      	ldr	r5, [pc, #24]	@ (800c480 <_close_r+0x1c>)
 800c468:	2300      	movs	r3, #0
 800c46a:	4604      	mov	r4, r0
 800c46c:	4608      	mov	r0, r1
 800c46e:	602b      	str	r3, [r5, #0]
 800c470:	f7f6 fdde 	bl	8003030 <_close>
 800c474:	1c43      	adds	r3, r0, #1
 800c476:	d102      	bne.n	800c47e <_close_r+0x1a>
 800c478:	682b      	ldr	r3, [r5, #0]
 800c47a:	b103      	cbz	r3, 800c47e <_close_r+0x1a>
 800c47c:	6023      	str	r3, [r4, #0]
 800c47e:	bd38      	pop	{r3, r4, r5, pc}
 800c480:	20000cb4 	.word	0x20000cb4

0800c484 <_lseek_r>:
 800c484:	b538      	push	{r3, r4, r5, lr}
 800c486:	4d07      	ldr	r5, [pc, #28]	@ (800c4a4 <_lseek_r+0x20>)
 800c488:	4604      	mov	r4, r0
 800c48a:	4608      	mov	r0, r1
 800c48c:	4611      	mov	r1, r2
 800c48e:	2200      	movs	r2, #0
 800c490:	602a      	str	r2, [r5, #0]
 800c492:	461a      	mov	r2, r3
 800c494:	f7f6 fdf3 	bl	800307e <_lseek>
 800c498:	1c43      	adds	r3, r0, #1
 800c49a:	d102      	bne.n	800c4a2 <_lseek_r+0x1e>
 800c49c:	682b      	ldr	r3, [r5, #0]
 800c49e:	b103      	cbz	r3, 800c4a2 <_lseek_r+0x1e>
 800c4a0:	6023      	str	r3, [r4, #0]
 800c4a2:	bd38      	pop	{r3, r4, r5, pc}
 800c4a4:	20000cb4 	.word	0x20000cb4

0800c4a8 <_read_r>:
 800c4a8:	b538      	push	{r3, r4, r5, lr}
 800c4aa:	4d07      	ldr	r5, [pc, #28]	@ (800c4c8 <_read_r+0x20>)
 800c4ac:	4604      	mov	r4, r0
 800c4ae:	4608      	mov	r0, r1
 800c4b0:	4611      	mov	r1, r2
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	602a      	str	r2, [r5, #0]
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	f7f6 fd81 	bl	8002fbe <_read>
 800c4bc:	1c43      	adds	r3, r0, #1
 800c4be:	d102      	bne.n	800c4c6 <_read_r+0x1e>
 800c4c0:	682b      	ldr	r3, [r5, #0]
 800c4c2:	b103      	cbz	r3, 800c4c6 <_read_r+0x1e>
 800c4c4:	6023      	str	r3, [r4, #0]
 800c4c6:	bd38      	pop	{r3, r4, r5, pc}
 800c4c8:	20000cb4 	.word	0x20000cb4

0800c4cc <_kill_r>:
 800c4cc:	b538      	push	{r3, r4, r5, lr}
 800c4ce:	4d07      	ldr	r5, [pc, #28]	@ (800c4ec <_kill_r+0x20>)
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	4608      	mov	r0, r1
 800c4d6:	4611      	mov	r1, r2
 800c4d8:	602b      	str	r3, [r5, #0]
 800c4da:	f7f6 fd55 	bl	8002f88 <_kill>
 800c4de:	1c43      	adds	r3, r0, #1
 800c4e0:	d102      	bne.n	800c4e8 <_kill_r+0x1c>
 800c4e2:	682b      	ldr	r3, [r5, #0]
 800c4e4:	b103      	cbz	r3, 800c4e8 <_kill_r+0x1c>
 800c4e6:	6023      	str	r3, [r4, #0]
 800c4e8:	bd38      	pop	{r3, r4, r5, pc}
 800c4ea:	bf00      	nop
 800c4ec:	20000cb4 	.word	0x20000cb4

0800c4f0 <_getpid_r>:
 800c4f0:	f7f6 bd42 	b.w	8002f78 <_getpid>

0800c4f4 <_sbrk_r>:
 800c4f4:	b538      	push	{r3, r4, r5, lr}
 800c4f6:	4d06      	ldr	r5, [pc, #24]	@ (800c510 <_sbrk_r+0x1c>)
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	4608      	mov	r0, r1
 800c4fe:	602b      	str	r3, [r5, #0]
 800c500:	f7f6 fdca 	bl	8003098 <_sbrk>
 800c504:	1c43      	adds	r3, r0, #1
 800c506:	d102      	bne.n	800c50e <_sbrk_r+0x1a>
 800c508:	682b      	ldr	r3, [r5, #0]
 800c50a:	b103      	cbz	r3, 800c50e <_sbrk_r+0x1a>
 800c50c:	6023      	str	r3, [r4, #0]
 800c50e:	bd38      	pop	{r3, r4, r5, pc}
 800c510:	20000cb4 	.word	0x20000cb4

0800c514 <_write_r>:
 800c514:	b538      	push	{r3, r4, r5, lr}
 800c516:	4d07      	ldr	r5, [pc, #28]	@ (800c534 <_write_r+0x20>)
 800c518:	4604      	mov	r4, r0
 800c51a:	4608      	mov	r0, r1
 800c51c:	4611      	mov	r1, r2
 800c51e:	2200      	movs	r2, #0
 800c520:	602a      	str	r2, [r5, #0]
 800c522:	461a      	mov	r2, r3
 800c524:	f7f6 fd68 	bl	8002ff8 <_write>
 800c528:	1c43      	adds	r3, r0, #1
 800c52a:	d102      	bne.n	800c532 <_write_r+0x1e>
 800c52c:	682b      	ldr	r3, [r5, #0]
 800c52e:	b103      	cbz	r3, 800c532 <_write_r+0x1e>
 800c530:	6023      	str	r3, [r4, #0]
 800c532:	bd38      	pop	{r3, r4, r5, pc}
 800c534:	20000cb4 	.word	0x20000cb4

0800c538 <__errno>:
 800c538:	4b01      	ldr	r3, [pc, #4]	@ (800c540 <__errno+0x8>)
 800c53a:	6818      	ldr	r0, [r3, #0]
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop
 800c540:	2000003c 	.word	0x2000003c

0800c544 <__libc_init_array>:
 800c544:	b570      	push	{r4, r5, r6, lr}
 800c546:	4d0d      	ldr	r5, [pc, #52]	@ (800c57c <__libc_init_array+0x38>)
 800c548:	4c0d      	ldr	r4, [pc, #52]	@ (800c580 <__libc_init_array+0x3c>)
 800c54a:	1b64      	subs	r4, r4, r5
 800c54c:	10a4      	asrs	r4, r4, #2
 800c54e:	2600      	movs	r6, #0
 800c550:	42a6      	cmp	r6, r4
 800c552:	d109      	bne.n	800c568 <__libc_init_array+0x24>
 800c554:	4d0b      	ldr	r5, [pc, #44]	@ (800c584 <__libc_init_array+0x40>)
 800c556:	4c0c      	ldr	r4, [pc, #48]	@ (800c588 <__libc_init_array+0x44>)
 800c558:	f001 ff58 	bl	800e40c <_init>
 800c55c:	1b64      	subs	r4, r4, r5
 800c55e:	10a4      	asrs	r4, r4, #2
 800c560:	2600      	movs	r6, #0
 800c562:	42a6      	cmp	r6, r4
 800c564:	d105      	bne.n	800c572 <__libc_init_array+0x2e>
 800c566:	bd70      	pop	{r4, r5, r6, pc}
 800c568:	f855 3b04 	ldr.w	r3, [r5], #4
 800c56c:	4798      	blx	r3
 800c56e:	3601      	adds	r6, #1
 800c570:	e7ee      	b.n	800c550 <__libc_init_array+0xc>
 800c572:	f855 3b04 	ldr.w	r3, [r5], #4
 800c576:	4798      	blx	r3
 800c578:	3601      	adds	r6, #1
 800c57a:	e7f2      	b.n	800c562 <__libc_init_array+0x1e>
 800c57c:	0800e9f4 	.word	0x0800e9f4
 800c580:	0800e9f4 	.word	0x0800e9f4
 800c584:	0800e9f4 	.word	0x0800e9f4
 800c588:	0800e9f8 	.word	0x0800e9f8

0800c58c <__retarget_lock_init_recursive>:
 800c58c:	4770      	bx	lr

0800c58e <__retarget_lock_acquire_recursive>:
 800c58e:	4770      	bx	lr

0800c590 <__retarget_lock_release_recursive>:
 800c590:	4770      	bx	lr

0800c592 <memcpy>:
 800c592:	440a      	add	r2, r1
 800c594:	4291      	cmp	r1, r2
 800c596:	f100 33ff 	add.w	r3, r0, #4294967295
 800c59a:	d100      	bne.n	800c59e <memcpy+0xc>
 800c59c:	4770      	bx	lr
 800c59e:	b510      	push	{r4, lr}
 800c5a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5a8:	4291      	cmp	r1, r2
 800c5aa:	d1f9      	bne.n	800c5a0 <memcpy+0xe>
 800c5ac:	bd10      	pop	{r4, pc}

0800c5ae <quorem>:
 800c5ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b2:	6903      	ldr	r3, [r0, #16]
 800c5b4:	690c      	ldr	r4, [r1, #16]
 800c5b6:	42a3      	cmp	r3, r4
 800c5b8:	4607      	mov	r7, r0
 800c5ba:	db7e      	blt.n	800c6ba <quorem+0x10c>
 800c5bc:	3c01      	subs	r4, #1
 800c5be:	f101 0814 	add.w	r8, r1, #20
 800c5c2:	00a3      	lsls	r3, r4, #2
 800c5c4:	f100 0514 	add.w	r5, r0, #20
 800c5c8:	9300      	str	r3, [sp, #0]
 800c5ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5ce:	9301      	str	r3, [sp, #4]
 800c5d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5d8:	3301      	adds	r3, #1
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c5e0:	fbb2 f6f3 	udiv	r6, r2, r3
 800c5e4:	d32e      	bcc.n	800c644 <quorem+0x96>
 800c5e6:	f04f 0a00 	mov.w	sl, #0
 800c5ea:	46c4      	mov	ip, r8
 800c5ec:	46ae      	mov	lr, r5
 800c5ee:	46d3      	mov	fp, sl
 800c5f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c5f4:	b298      	uxth	r0, r3
 800c5f6:	fb06 a000 	mla	r0, r6, r0, sl
 800c5fa:	0c02      	lsrs	r2, r0, #16
 800c5fc:	0c1b      	lsrs	r3, r3, #16
 800c5fe:	fb06 2303 	mla	r3, r6, r3, r2
 800c602:	f8de 2000 	ldr.w	r2, [lr]
 800c606:	b280      	uxth	r0, r0
 800c608:	b292      	uxth	r2, r2
 800c60a:	1a12      	subs	r2, r2, r0
 800c60c:	445a      	add	r2, fp
 800c60e:	f8de 0000 	ldr.w	r0, [lr]
 800c612:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c616:	b29b      	uxth	r3, r3
 800c618:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c61c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c620:	b292      	uxth	r2, r2
 800c622:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c626:	45e1      	cmp	r9, ip
 800c628:	f84e 2b04 	str.w	r2, [lr], #4
 800c62c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c630:	d2de      	bcs.n	800c5f0 <quorem+0x42>
 800c632:	9b00      	ldr	r3, [sp, #0]
 800c634:	58eb      	ldr	r3, [r5, r3]
 800c636:	b92b      	cbnz	r3, 800c644 <quorem+0x96>
 800c638:	9b01      	ldr	r3, [sp, #4]
 800c63a:	3b04      	subs	r3, #4
 800c63c:	429d      	cmp	r5, r3
 800c63e:	461a      	mov	r2, r3
 800c640:	d32f      	bcc.n	800c6a2 <quorem+0xf4>
 800c642:	613c      	str	r4, [r7, #16]
 800c644:	4638      	mov	r0, r7
 800c646:	f001 f8c7 	bl	800d7d8 <__mcmp>
 800c64a:	2800      	cmp	r0, #0
 800c64c:	db25      	blt.n	800c69a <quorem+0xec>
 800c64e:	4629      	mov	r1, r5
 800c650:	2000      	movs	r0, #0
 800c652:	f858 2b04 	ldr.w	r2, [r8], #4
 800c656:	f8d1 c000 	ldr.w	ip, [r1]
 800c65a:	fa1f fe82 	uxth.w	lr, r2
 800c65e:	fa1f f38c 	uxth.w	r3, ip
 800c662:	eba3 030e 	sub.w	r3, r3, lr
 800c666:	4403      	add	r3, r0
 800c668:	0c12      	lsrs	r2, r2, #16
 800c66a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c66e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c672:	b29b      	uxth	r3, r3
 800c674:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c678:	45c1      	cmp	r9, r8
 800c67a:	f841 3b04 	str.w	r3, [r1], #4
 800c67e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c682:	d2e6      	bcs.n	800c652 <quorem+0xa4>
 800c684:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c688:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c68c:	b922      	cbnz	r2, 800c698 <quorem+0xea>
 800c68e:	3b04      	subs	r3, #4
 800c690:	429d      	cmp	r5, r3
 800c692:	461a      	mov	r2, r3
 800c694:	d30b      	bcc.n	800c6ae <quorem+0x100>
 800c696:	613c      	str	r4, [r7, #16]
 800c698:	3601      	adds	r6, #1
 800c69a:	4630      	mov	r0, r6
 800c69c:	b003      	add	sp, #12
 800c69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6a2:	6812      	ldr	r2, [r2, #0]
 800c6a4:	3b04      	subs	r3, #4
 800c6a6:	2a00      	cmp	r2, #0
 800c6a8:	d1cb      	bne.n	800c642 <quorem+0x94>
 800c6aa:	3c01      	subs	r4, #1
 800c6ac:	e7c6      	b.n	800c63c <quorem+0x8e>
 800c6ae:	6812      	ldr	r2, [r2, #0]
 800c6b0:	3b04      	subs	r3, #4
 800c6b2:	2a00      	cmp	r2, #0
 800c6b4:	d1ef      	bne.n	800c696 <quorem+0xe8>
 800c6b6:	3c01      	subs	r4, #1
 800c6b8:	e7ea      	b.n	800c690 <quorem+0xe2>
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	e7ee      	b.n	800c69c <quorem+0xee>
	...

0800c6c0 <_dtoa_r>:
 800c6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c4:	69c7      	ldr	r7, [r0, #28]
 800c6c6:	b097      	sub	sp, #92	@ 0x5c
 800c6c8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c6cc:	ec55 4b10 	vmov	r4, r5, d0
 800c6d0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c6d2:	9107      	str	r1, [sp, #28]
 800c6d4:	4681      	mov	r9, r0
 800c6d6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c6d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800c6da:	b97f      	cbnz	r7, 800c6fc <_dtoa_r+0x3c>
 800c6dc:	2010      	movs	r0, #16
 800c6de:	f7ff f835 	bl	800b74c <malloc>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	f8c9 001c 	str.w	r0, [r9, #28]
 800c6e8:	b920      	cbnz	r0, 800c6f4 <_dtoa_r+0x34>
 800c6ea:	4ba9      	ldr	r3, [pc, #676]	@ (800c990 <_dtoa_r+0x2d0>)
 800c6ec:	21ef      	movs	r1, #239	@ 0xef
 800c6ee:	48a9      	ldr	r0, [pc, #676]	@ (800c994 <_dtoa_r+0x2d4>)
 800c6f0:	f001 fb98 	bl	800de24 <__assert_func>
 800c6f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c6f8:	6007      	str	r7, [r0, #0]
 800c6fa:	60c7      	str	r7, [r0, #12]
 800c6fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c700:	6819      	ldr	r1, [r3, #0]
 800c702:	b159      	cbz	r1, 800c71c <_dtoa_r+0x5c>
 800c704:	685a      	ldr	r2, [r3, #4]
 800c706:	604a      	str	r2, [r1, #4]
 800c708:	2301      	movs	r3, #1
 800c70a:	4093      	lsls	r3, r2
 800c70c:	608b      	str	r3, [r1, #8]
 800c70e:	4648      	mov	r0, r9
 800c710:	f000 fe30 	bl	800d374 <_Bfree>
 800c714:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c718:	2200      	movs	r2, #0
 800c71a:	601a      	str	r2, [r3, #0]
 800c71c:	1e2b      	subs	r3, r5, #0
 800c71e:	bfb9      	ittee	lt
 800c720:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c724:	9305      	strlt	r3, [sp, #20]
 800c726:	2300      	movge	r3, #0
 800c728:	6033      	strge	r3, [r6, #0]
 800c72a:	9f05      	ldr	r7, [sp, #20]
 800c72c:	4b9a      	ldr	r3, [pc, #616]	@ (800c998 <_dtoa_r+0x2d8>)
 800c72e:	bfbc      	itt	lt
 800c730:	2201      	movlt	r2, #1
 800c732:	6032      	strlt	r2, [r6, #0]
 800c734:	43bb      	bics	r3, r7
 800c736:	d112      	bne.n	800c75e <_dtoa_r+0x9e>
 800c738:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c73a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c73e:	6013      	str	r3, [r2, #0]
 800c740:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c744:	4323      	orrs	r3, r4
 800c746:	f000 855a 	beq.w	800d1fe <_dtoa_r+0xb3e>
 800c74a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c74c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c9ac <_dtoa_r+0x2ec>
 800c750:	2b00      	cmp	r3, #0
 800c752:	f000 855c 	beq.w	800d20e <_dtoa_r+0xb4e>
 800c756:	f10a 0303 	add.w	r3, sl, #3
 800c75a:	f000 bd56 	b.w	800d20a <_dtoa_r+0xb4a>
 800c75e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c762:	2200      	movs	r2, #0
 800c764:	ec51 0b17 	vmov	r0, r1, d7
 800c768:	2300      	movs	r3, #0
 800c76a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c76e:	f7f4 f9ab 	bl	8000ac8 <__aeabi_dcmpeq>
 800c772:	4680      	mov	r8, r0
 800c774:	b158      	cbz	r0, 800c78e <_dtoa_r+0xce>
 800c776:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c778:	2301      	movs	r3, #1
 800c77a:	6013      	str	r3, [r2, #0]
 800c77c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c77e:	b113      	cbz	r3, 800c786 <_dtoa_r+0xc6>
 800c780:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c782:	4b86      	ldr	r3, [pc, #536]	@ (800c99c <_dtoa_r+0x2dc>)
 800c784:	6013      	str	r3, [r2, #0]
 800c786:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c9b0 <_dtoa_r+0x2f0>
 800c78a:	f000 bd40 	b.w	800d20e <_dtoa_r+0xb4e>
 800c78e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c792:	aa14      	add	r2, sp, #80	@ 0x50
 800c794:	a915      	add	r1, sp, #84	@ 0x54
 800c796:	4648      	mov	r0, r9
 800c798:	f001 f8ce 	bl	800d938 <__d2b>
 800c79c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c7a0:	9002      	str	r0, [sp, #8]
 800c7a2:	2e00      	cmp	r6, #0
 800c7a4:	d078      	beq.n	800c898 <_dtoa_r+0x1d8>
 800c7a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7a8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c7ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c7b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c7b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c7bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c7c0:	4619      	mov	r1, r3
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	4b76      	ldr	r3, [pc, #472]	@ (800c9a0 <_dtoa_r+0x2e0>)
 800c7c6:	f7f3 fd5f 	bl	8000288 <__aeabi_dsub>
 800c7ca:	a36b      	add	r3, pc, #428	@ (adr r3, 800c978 <_dtoa_r+0x2b8>)
 800c7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d0:	f7f3 ff12 	bl	80005f8 <__aeabi_dmul>
 800c7d4:	a36a      	add	r3, pc, #424	@ (adr r3, 800c980 <_dtoa_r+0x2c0>)
 800c7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7da:	f7f3 fd57 	bl	800028c <__adddf3>
 800c7de:	4604      	mov	r4, r0
 800c7e0:	4630      	mov	r0, r6
 800c7e2:	460d      	mov	r5, r1
 800c7e4:	f7f3 fe9e 	bl	8000524 <__aeabi_i2d>
 800c7e8:	a367      	add	r3, pc, #412	@ (adr r3, 800c988 <_dtoa_r+0x2c8>)
 800c7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ee:	f7f3 ff03 	bl	80005f8 <__aeabi_dmul>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	f7f3 fd47 	bl	800028c <__adddf3>
 800c7fe:	4604      	mov	r4, r0
 800c800:	460d      	mov	r5, r1
 800c802:	f7f4 f9a9 	bl	8000b58 <__aeabi_d2iz>
 800c806:	2200      	movs	r2, #0
 800c808:	4607      	mov	r7, r0
 800c80a:	2300      	movs	r3, #0
 800c80c:	4620      	mov	r0, r4
 800c80e:	4629      	mov	r1, r5
 800c810:	f7f4 f964 	bl	8000adc <__aeabi_dcmplt>
 800c814:	b140      	cbz	r0, 800c828 <_dtoa_r+0x168>
 800c816:	4638      	mov	r0, r7
 800c818:	f7f3 fe84 	bl	8000524 <__aeabi_i2d>
 800c81c:	4622      	mov	r2, r4
 800c81e:	462b      	mov	r3, r5
 800c820:	f7f4 f952 	bl	8000ac8 <__aeabi_dcmpeq>
 800c824:	b900      	cbnz	r0, 800c828 <_dtoa_r+0x168>
 800c826:	3f01      	subs	r7, #1
 800c828:	2f16      	cmp	r7, #22
 800c82a:	d852      	bhi.n	800c8d2 <_dtoa_r+0x212>
 800c82c:	4b5d      	ldr	r3, [pc, #372]	@ (800c9a4 <_dtoa_r+0x2e4>)
 800c82e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c836:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c83a:	f7f4 f94f 	bl	8000adc <__aeabi_dcmplt>
 800c83e:	2800      	cmp	r0, #0
 800c840:	d049      	beq.n	800c8d6 <_dtoa_r+0x216>
 800c842:	3f01      	subs	r7, #1
 800c844:	2300      	movs	r3, #0
 800c846:	9310      	str	r3, [sp, #64]	@ 0x40
 800c848:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c84a:	1b9b      	subs	r3, r3, r6
 800c84c:	1e5a      	subs	r2, r3, #1
 800c84e:	bf45      	ittet	mi
 800c850:	f1c3 0301 	rsbmi	r3, r3, #1
 800c854:	9300      	strmi	r3, [sp, #0]
 800c856:	2300      	movpl	r3, #0
 800c858:	2300      	movmi	r3, #0
 800c85a:	9206      	str	r2, [sp, #24]
 800c85c:	bf54      	ite	pl
 800c85e:	9300      	strpl	r3, [sp, #0]
 800c860:	9306      	strmi	r3, [sp, #24]
 800c862:	2f00      	cmp	r7, #0
 800c864:	db39      	blt.n	800c8da <_dtoa_r+0x21a>
 800c866:	9b06      	ldr	r3, [sp, #24]
 800c868:	970d      	str	r7, [sp, #52]	@ 0x34
 800c86a:	443b      	add	r3, r7
 800c86c:	9306      	str	r3, [sp, #24]
 800c86e:	2300      	movs	r3, #0
 800c870:	9308      	str	r3, [sp, #32]
 800c872:	9b07      	ldr	r3, [sp, #28]
 800c874:	2b09      	cmp	r3, #9
 800c876:	d863      	bhi.n	800c940 <_dtoa_r+0x280>
 800c878:	2b05      	cmp	r3, #5
 800c87a:	bfc4      	itt	gt
 800c87c:	3b04      	subgt	r3, #4
 800c87e:	9307      	strgt	r3, [sp, #28]
 800c880:	9b07      	ldr	r3, [sp, #28]
 800c882:	f1a3 0302 	sub.w	r3, r3, #2
 800c886:	bfcc      	ite	gt
 800c888:	2400      	movgt	r4, #0
 800c88a:	2401      	movle	r4, #1
 800c88c:	2b03      	cmp	r3, #3
 800c88e:	d863      	bhi.n	800c958 <_dtoa_r+0x298>
 800c890:	e8df f003 	tbb	[pc, r3]
 800c894:	2b375452 	.word	0x2b375452
 800c898:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c89c:	441e      	add	r6, r3
 800c89e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c8a2:	2b20      	cmp	r3, #32
 800c8a4:	bfc1      	itttt	gt
 800c8a6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c8aa:	409f      	lslgt	r7, r3
 800c8ac:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c8b0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c8b4:	bfd6      	itet	le
 800c8b6:	f1c3 0320 	rsble	r3, r3, #32
 800c8ba:	ea47 0003 	orrgt.w	r0, r7, r3
 800c8be:	fa04 f003 	lslle.w	r0, r4, r3
 800c8c2:	f7f3 fe1f 	bl	8000504 <__aeabi_ui2d>
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c8cc:	3e01      	subs	r6, #1
 800c8ce:	9212      	str	r2, [sp, #72]	@ 0x48
 800c8d0:	e776      	b.n	800c7c0 <_dtoa_r+0x100>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e7b7      	b.n	800c846 <_dtoa_r+0x186>
 800c8d6:	9010      	str	r0, [sp, #64]	@ 0x40
 800c8d8:	e7b6      	b.n	800c848 <_dtoa_r+0x188>
 800c8da:	9b00      	ldr	r3, [sp, #0]
 800c8dc:	1bdb      	subs	r3, r3, r7
 800c8de:	9300      	str	r3, [sp, #0]
 800c8e0:	427b      	negs	r3, r7
 800c8e2:	9308      	str	r3, [sp, #32]
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	930d      	str	r3, [sp, #52]	@ 0x34
 800c8e8:	e7c3      	b.n	800c872 <_dtoa_r+0x1b2>
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c8f0:	eb07 0b03 	add.w	fp, r7, r3
 800c8f4:	f10b 0301 	add.w	r3, fp, #1
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	9303      	str	r3, [sp, #12]
 800c8fc:	bfb8      	it	lt
 800c8fe:	2301      	movlt	r3, #1
 800c900:	e006      	b.n	800c910 <_dtoa_r+0x250>
 800c902:	2301      	movs	r3, #1
 800c904:	9309      	str	r3, [sp, #36]	@ 0x24
 800c906:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c908:	2b00      	cmp	r3, #0
 800c90a:	dd28      	ble.n	800c95e <_dtoa_r+0x29e>
 800c90c:	469b      	mov	fp, r3
 800c90e:	9303      	str	r3, [sp, #12]
 800c910:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c914:	2100      	movs	r1, #0
 800c916:	2204      	movs	r2, #4
 800c918:	f102 0514 	add.w	r5, r2, #20
 800c91c:	429d      	cmp	r5, r3
 800c91e:	d926      	bls.n	800c96e <_dtoa_r+0x2ae>
 800c920:	6041      	str	r1, [r0, #4]
 800c922:	4648      	mov	r0, r9
 800c924:	f000 fce6 	bl	800d2f4 <_Balloc>
 800c928:	4682      	mov	sl, r0
 800c92a:	2800      	cmp	r0, #0
 800c92c:	d142      	bne.n	800c9b4 <_dtoa_r+0x2f4>
 800c92e:	4b1e      	ldr	r3, [pc, #120]	@ (800c9a8 <_dtoa_r+0x2e8>)
 800c930:	4602      	mov	r2, r0
 800c932:	f240 11af 	movw	r1, #431	@ 0x1af
 800c936:	e6da      	b.n	800c6ee <_dtoa_r+0x2e>
 800c938:	2300      	movs	r3, #0
 800c93a:	e7e3      	b.n	800c904 <_dtoa_r+0x244>
 800c93c:	2300      	movs	r3, #0
 800c93e:	e7d5      	b.n	800c8ec <_dtoa_r+0x22c>
 800c940:	2401      	movs	r4, #1
 800c942:	2300      	movs	r3, #0
 800c944:	9307      	str	r3, [sp, #28]
 800c946:	9409      	str	r4, [sp, #36]	@ 0x24
 800c948:	f04f 3bff 	mov.w	fp, #4294967295
 800c94c:	2200      	movs	r2, #0
 800c94e:	f8cd b00c 	str.w	fp, [sp, #12]
 800c952:	2312      	movs	r3, #18
 800c954:	920c      	str	r2, [sp, #48]	@ 0x30
 800c956:	e7db      	b.n	800c910 <_dtoa_r+0x250>
 800c958:	2301      	movs	r3, #1
 800c95a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c95c:	e7f4      	b.n	800c948 <_dtoa_r+0x288>
 800c95e:	f04f 0b01 	mov.w	fp, #1
 800c962:	f8cd b00c 	str.w	fp, [sp, #12]
 800c966:	465b      	mov	r3, fp
 800c968:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c96c:	e7d0      	b.n	800c910 <_dtoa_r+0x250>
 800c96e:	3101      	adds	r1, #1
 800c970:	0052      	lsls	r2, r2, #1
 800c972:	e7d1      	b.n	800c918 <_dtoa_r+0x258>
 800c974:	f3af 8000 	nop.w
 800c978:	636f4361 	.word	0x636f4361
 800c97c:	3fd287a7 	.word	0x3fd287a7
 800c980:	8b60c8b3 	.word	0x8b60c8b3
 800c984:	3fc68a28 	.word	0x3fc68a28
 800c988:	509f79fb 	.word	0x509f79fb
 800c98c:	3fd34413 	.word	0x3fd34413
 800c990:	0800e6b5 	.word	0x0800e6b5
 800c994:	0800e6cc 	.word	0x0800e6cc
 800c998:	7ff00000 	.word	0x7ff00000
 800c99c:	0800e685 	.word	0x0800e685
 800c9a0:	3ff80000 	.word	0x3ff80000
 800c9a4:	0800e820 	.word	0x0800e820
 800c9a8:	0800e724 	.word	0x0800e724
 800c9ac:	0800e6b1 	.word	0x0800e6b1
 800c9b0:	0800e684 	.word	0x0800e684
 800c9b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c9b8:	6018      	str	r0, [r3, #0]
 800c9ba:	9b03      	ldr	r3, [sp, #12]
 800c9bc:	2b0e      	cmp	r3, #14
 800c9be:	f200 80a1 	bhi.w	800cb04 <_dtoa_r+0x444>
 800c9c2:	2c00      	cmp	r4, #0
 800c9c4:	f000 809e 	beq.w	800cb04 <_dtoa_r+0x444>
 800c9c8:	2f00      	cmp	r7, #0
 800c9ca:	dd33      	ble.n	800ca34 <_dtoa_r+0x374>
 800c9cc:	4b9c      	ldr	r3, [pc, #624]	@ (800cc40 <_dtoa_r+0x580>)
 800c9ce:	f007 020f 	and.w	r2, r7, #15
 800c9d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9d6:	ed93 7b00 	vldr	d7, [r3]
 800c9da:	05f8      	lsls	r0, r7, #23
 800c9dc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c9e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c9e4:	d516      	bpl.n	800ca14 <_dtoa_r+0x354>
 800c9e6:	4b97      	ldr	r3, [pc, #604]	@ (800cc44 <_dtoa_r+0x584>)
 800c9e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c9ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c9f0:	f7f3 ff2c 	bl	800084c <__aeabi_ddiv>
 800c9f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c9f8:	f004 040f 	and.w	r4, r4, #15
 800c9fc:	2603      	movs	r6, #3
 800c9fe:	4d91      	ldr	r5, [pc, #580]	@ (800cc44 <_dtoa_r+0x584>)
 800ca00:	b954      	cbnz	r4, 800ca18 <_dtoa_r+0x358>
 800ca02:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ca06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca0a:	f7f3 ff1f 	bl	800084c <__aeabi_ddiv>
 800ca0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca12:	e028      	b.n	800ca66 <_dtoa_r+0x3a6>
 800ca14:	2602      	movs	r6, #2
 800ca16:	e7f2      	b.n	800c9fe <_dtoa_r+0x33e>
 800ca18:	07e1      	lsls	r1, r4, #31
 800ca1a:	d508      	bpl.n	800ca2e <_dtoa_r+0x36e>
 800ca1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ca20:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ca24:	f7f3 fde8 	bl	80005f8 <__aeabi_dmul>
 800ca28:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ca2c:	3601      	adds	r6, #1
 800ca2e:	1064      	asrs	r4, r4, #1
 800ca30:	3508      	adds	r5, #8
 800ca32:	e7e5      	b.n	800ca00 <_dtoa_r+0x340>
 800ca34:	f000 80af 	beq.w	800cb96 <_dtoa_r+0x4d6>
 800ca38:	427c      	negs	r4, r7
 800ca3a:	4b81      	ldr	r3, [pc, #516]	@ (800cc40 <_dtoa_r+0x580>)
 800ca3c:	4d81      	ldr	r5, [pc, #516]	@ (800cc44 <_dtoa_r+0x584>)
 800ca3e:	f004 020f 	and.w	r2, r4, #15
 800ca42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ca4e:	f7f3 fdd3 	bl	80005f8 <__aeabi_dmul>
 800ca52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca56:	1124      	asrs	r4, r4, #4
 800ca58:	2300      	movs	r3, #0
 800ca5a:	2602      	movs	r6, #2
 800ca5c:	2c00      	cmp	r4, #0
 800ca5e:	f040 808f 	bne.w	800cb80 <_dtoa_r+0x4c0>
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d1d3      	bne.n	800ca0e <_dtoa_r+0x34e>
 800ca66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ca68:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f000 8094 	beq.w	800cb9a <_dtoa_r+0x4da>
 800ca72:	4b75      	ldr	r3, [pc, #468]	@ (800cc48 <_dtoa_r+0x588>)
 800ca74:	2200      	movs	r2, #0
 800ca76:	4620      	mov	r0, r4
 800ca78:	4629      	mov	r1, r5
 800ca7a:	f7f4 f82f 	bl	8000adc <__aeabi_dcmplt>
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	f000 808b 	beq.w	800cb9a <_dtoa_r+0x4da>
 800ca84:	9b03      	ldr	r3, [sp, #12]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	f000 8087 	beq.w	800cb9a <_dtoa_r+0x4da>
 800ca8c:	f1bb 0f00 	cmp.w	fp, #0
 800ca90:	dd34      	ble.n	800cafc <_dtoa_r+0x43c>
 800ca92:	4620      	mov	r0, r4
 800ca94:	4b6d      	ldr	r3, [pc, #436]	@ (800cc4c <_dtoa_r+0x58c>)
 800ca96:	2200      	movs	r2, #0
 800ca98:	4629      	mov	r1, r5
 800ca9a:	f7f3 fdad 	bl	80005f8 <__aeabi_dmul>
 800ca9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800caa2:	f107 38ff 	add.w	r8, r7, #4294967295
 800caa6:	3601      	adds	r6, #1
 800caa8:	465c      	mov	r4, fp
 800caaa:	4630      	mov	r0, r6
 800caac:	f7f3 fd3a 	bl	8000524 <__aeabi_i2d>
 800cab0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cab4:	f7f3 fda0 	bl	80005f8 <__aeabi_dmul>
 800cab8:	4b65      	ldr	r3, [pc, #404]	@ (800cc50 <_dtoa_r+0x590>)
 800caba:	2200      	movs	r2, #0
 800cabc:	f7f3 fbe6 	bl	800028c <__adddf3>
 800cac0:	4605      	mov	r5, r0
 800cac2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cac6:	2c00      	cmp	r4, #0
 800cac8:	d16a      	bne.n	800cba0 <_dtoa_r+0x4e0>
 800caca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cace:	4b61      	ldr	r3, [pc, #388]	@ (800cc54 <_dtoa_r+0x594>)
 800cad0:	2200      	movs	r2, #0
 800cad2:	f7f3 fbd9 	bl	8000288 <__aeabi_dsub>
 800cad6:	4602      	mov	r2, r0
 800cad8:	460b      	mov	r3, r1
 800cada:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cade:	462a      	mov	r2, r5
 800cae0:	4633      	mov	r3, r6
 800cae2:	f7f4 f819 	bl	8000b18 <__aeabi_dcmpgt>
 800cae6:	2800      	cmp	r0, #0
 800cae8:	f040 8298 	bne.w	800d01c <_dtoa_r+0x95c>
 800caec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800caf0:	462a      	mov	r2, r5
 800caf2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800caf6:	f7f3 fff1 	bl	8000adc <__aeabi_dcmplt>
 800cafa:	bb38      	cbnz	r0, 800cb4c <_dtoa_r+0x48c>
 800cafc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800cb00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cb04:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	f2c0 8157 	blt.w	800cdba <_dtoa_r+0x6fa>
 800cb0c:	2f0e      	cmp	r7, #14
 800cb0e:	f300 8154 	bgt.w	800cdba <_dtoa_r+0x6fa>
 800cb12:	4b4b      	ldr	r3, [pc, #300]	@ (800cc40 <_dtoa_r+0x580>)
 800cb14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cb18:	ed93 7b00 	vldr	d7, [r3]
 800cb1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	ed8d 7b00 	vstr	d7, [sp]
 800cb24:	f280 80e5 	bge.w	800ccf2 <_dtoa_r+0x632>
 800cb28:	9b03      	ldr	r3, [sp, #12]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	f300 80e1 	bgt.w	800ccf2 <_dtoa_r+0x632>
 800cb30:	d10c      	bne.n	800cb4c <_dtoa_r+0x48c>
 800cb32:	4b48      	ldr	r3, [pc, #288]	@ (800cc54 <_dtoa_r+0x594>)
 800cb34:	2200      	movs	r2, #0
 800cb36:	ec51 0b17 	vmov	r0, r1, d7
 800cb3a:	f7f3 fd5d 	bl	80005f8 <__aeabi_dmul>
 800cb3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb42:	f7f3 ffdf 	bl	8000b04 <__aeabi_dcmpge>
 800cb46:	2800      	cmp	r0, #0
 800cb48:	f000 8266 	beq.w	800d018 <_dtoa_r+0x958>
 800cb4c:	2400      	movs	r4, #0
 800cb4e:	4625      	mov	r5, r4
 800cb50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cb52:	4656      	mov	r6, sl
 800cb54:	ea6f 0803 	mvn.w	r8, r3
 800cb58:	2700      	movs	r7, #0
 800cb5a:	4621      	mov	r1, r4
 800cb5c:	4648      	mov	r0, r9
 800cb5e:	f000 fc09 	bl	800d374 <_Bfree>
 800cb62:	2d00      	cmp	r5, #0
 800cb64:	f000 80bd 	beq.w	800cce2 <_dtoa_r+0x622>
 800cb68:	b12f      	cbz	r7, 800cb76 <_dtoa_r+0x4b6>
 800cb6a:	42af      	cmp	r7, r5
 800cb6c:	d003      	beq.n	800cb76 <_dtoa_r+0x4b6>
 800cb6e:	4639      	mov	r1, r7
 800cb70:	4648      	mov	r0, r9
 800cb72:	f000 fbff 	bl	800d374 <_Bfree>
 800cb76:	4629      	mov	r1, r5
 800cb78:	4648      	mov	r0, r9
 800cb7a:	f000 fbfb 	bl	800d374 <_Bfree>
 800cb7e:	e0b0      	b.n	800cce2 <_dtoa_r+0x622>
 800cb80:	07e2      	lsls	r2, r4, #31
 800cb82:	d505      	bpl.n	800cb90 <_dtoa_r+0x4d0>
 800cb84:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cb88:	f7f3 fd36 	bl	80005f8 <__aeabi_dmul>
 800cb8c:	3601      	adds	r6, #1
 800cb8e:	2301      	movs	r3, #1
 800cb90:	1064      	asrs	r4, r4, #1
 800cb92:	3508      	adds	r5, #8
 800cb94:	e762      	b.n	800ca5c <_dtoa_r+0x39c>
 800cb96:	2602      	movs	r6, #2
 800cb98:	e765      	b.n	800ca66 <_dtoa_r+0x3a6>
 800cb9a:	9c03      	ldr	r4, [sp, #12]
 800cb9c:	46b8      	mov	r8, r7
 800cb9e:	e784      	b.n	800caaa <_dtoa_r+0x3ea>
 800cba0:	4b27      	ldr	r3, [pc, #156]	@ (800cc40 <_dtoa_r+0x580>)
 800cba2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cba4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cba8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cbac:	4454      	add	r4, sl
 800cbae:	2900      	cmp	r1, #0
 800cbb0:	d054      	beq.n	800cc5c <_dtoa_r+0x59c>
 800cbb2:	4929      	ldr	r1, [pc, #164]	@ (800cc58 <_dtoa_r+0x598>)
 800cbb4:	2000      	movs	r0, #0
 800cbb6:	f7f3 fe49 	bl	800084c <__aeabi_ddiv>
 800cbba:	4633      	mov	r3, r6
 800cbbc:	462a      	mov	r2, r5
 800cbbe:	f7f3 fb63 	bl	8000288 <__aeabi_dsub>
 800cbc2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cbc6:	4656      	mov	r6, sl
 800cbc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbcc:	f7f3 ffc4 	bl	8000b58 <__aeabi_d2iz>
 800cbd0:	4605      	mov	r5, r0
 800cbd2:	f7f3 fca7 	bl	8000524 <__aeabi_i2d>
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	460b      	mov	r3, r1
 800cbda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbde:	f7f3 fb53 	bl	8000288 <__aeabi_dsub>
 800cbe2:	3530      	adds	r5, #48	@ 0x30
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cbec:	f806 5b01 	strb.w	r5, [r6], #1
 800cbf0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cbf4:	f7f3 ff72 	bl	8000adc <__aeabi_dcmplt>
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	d172      	bne.n	800cce2 <_dtoa_r+0x622>
 800cbfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc00:	4911      	ldr	r1, [pc, #68]	@ (800cc48 <_dtoa_r+0x588>)
 800cc02:	2000      	movs	r0, #0
 800cc04:	f7f3 fb40 	bl	8000288 <__aeabi_dsub>
 800cc08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cc0c:	f7f3 ff66 	bl	8000adc <__aeabi_dcmplt>
 800cc10:	2800      	cmp	r0, #0
 800cc12:	f040 80b4 	bne.w	800cd7e <_dtoa_r+0x6be>
 800cc16:	42a6      	cmp	r6, r4
 800cc18:	f43f af70 	beq.w	800cafc <_dtoa_r+0x43c>
 800cc1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cc20:	4b0a      	ldr	r3, [pc, #40]	@ (800cc4c <_dtoa_r+0x58c>)
 800cc22:	2200      	movs	r2, #0
 800cc24:	f7f3 fce8 	bl	80005f8 <__aeabi_dmul>
 800cc28:	4b08      	ldr	r3, [pc, #32]	@ (800cc4c <_dtoa_r+0x58c>)
 800cc2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cc2e:	2200      	movs	r2, #0
 800cc30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc34:	f7f3 fce0 	bl	80005f8 <__aeabi_dmul>
 800cc38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc3c:	e7c4      	b.n	800cbc8 <_dtoa_r+0x508>
 800cc3e:	bf00      	nop
 800cc40:	0800e820 	.word	0x0800e820
 800cc44:	0800e7f8 	.word	0x0800e7f8
 800cc48:	3ff00000 	.word	0x3ff00000
 800cc4c:	40240000 	.word	0x40240000
 800cc50:	401c0000 	.word	0x401c0000
 800cc54:	40140000 	.word	0x40140000
 800cc58:	3fe00000 	.word	0x3fe00000
 800cc5c:	4631      	mov	r1, r6
 800cc5e:	4628      	mov	r0, r5
 800cc60:	f7f3 fcca 	bl	80005f8 <__aeabi_dmul>
 800cc64:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cc68:	9413      	str	r4, [sp, #76]	@ 0x4c
 800cc6a:	4656      	mov	r6, sl
 800cc6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc70:	f7f3 ff72 	bl	8000b58 <__aeabi_d2iz>
 800cc74:	4605      	mov	r5, r0
 800cc76:	f7f3 fc55 	bl	8000524 <__aeabi_i2d>
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	460b      	mov	r3, r1
 800cc7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc82:	f7f3 fb01 	bl	8000288 <__aeabi_dsub>
 800cc86:	3530      	adds	r5, #48	@ 0x30
 800cc88:	f806 5b01 	strb.w	r5, [r6], #1
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	460b      	mov	r3, r1
 800cc90:	42a6      	cmp	r6, r4
 800cc92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cc96:	f04f 0200 	mov.w	r2, #0
 800cc9a:	d124      	bne.n	800cce6 <_dtoa_r+0x626>
 800cc9c:	4baf      	ldr	r3, [pc, #700]	@ (800cf5c <_dtoa_r+0x89c>)
 800cc9e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cca2:	f7f3 faf3 	bl	800028c <__adddf3>
 800cca6:	4602      	mov	r2, r0
 800cca8:	460b      	mov	r3, r1
 800ccaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ccae:	f7f3 ff33 	bl	8000b18 <__aeabi_dcmpgt>
 800ccb2:	2800      	cmp	r0, #0
 800ccb4:	d163      	bne.n	800cd7e <_dtoa_r+0x6be>
 800ccb6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ccba:	49a8      	ldr	r1, [pc, #672]	@ (800cf5c <_dtoa_r+0x89c>)
 800ccbc:	2000      	movs	r0, #0
 800ccbe:	f7f3 fae3 	bl	8000288 <__aeabi_dsub>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ccca:	f7f3 ff07 	bl	8000adc <__aeabi_dcmplt>
 800ccce:	2800      	cmp	r0, #0
 800ccd0:	f43f af14 	beq.w	800cafc <_dtoa_r+0x43c>
 800ccd4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ccd6:	1e73      	subs	r3, r6, #1
 800ccd8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ccda:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ccde:	2b30      	cmp	r3, #48	@ 0x30
 800cce0:	d0f8      	beq.n	800ccd4 <_dtoa_r+0x614>
 800cce2:	4647      	mov	r7, r8
 800cce4:	e03b      	b.n	800cd5e <_dtoa_r+0x69e>
 800cce6:	4b9e      	ldr	r3, [pc, #632]	@ (800cf60 <_dtoa_r+0x8a0>)
 800cce8:	f7f3 fc86 	bl	80005f8 <__aeabi_dmul>
 800ccec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ccf0:	e7bc      	b.n	800cc6c <_dtoa_r+0x5ac>
 800ccf2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ccf6:	4656      	mov	r6, sl
 800ccf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	4629      	mov	r1, r5
 800cd00:	f7f3 fda4 	bl	800084c <__aeabi_ddiv>
 800cd04:	f7f3 ff28 	bl	8000b58 <__aeabi_d2iz>
 800cd08:	4680      	mov	r8, r0
 800cd0a:	f7f3 fc0b 	bl	8000524 <__aeabi_i2d>
 800cd0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd12:	f7f3 fc71 	bl	80005f8 <__aeabi_dmul>
 800cd16:	4602      	mov	r2, r0
 800cd18:	460b      	mov	r3, r1
 800cd1a:	4620      	mov	r0, r4
 800cd1c:	4629      	mov	r1, r5
 800cd1e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cd22:	f7f3 fab1 	bl	8000288 <__aeabi_dsub>
 800cd26:	f806 4b01 	strb.w	r4, [r6], #1
 800cd2a:	9d03      	ldr	r5, [sp, #12]
 800cd2c:	eba6 040a 	sub.w	r4, r6, sl
 800cd30:	42a5      	cmp	r5, r4
 800cd32:	4602      	mov	r2, r0
 800cd34:	460b      	mov	r3, r1
 800cd36:	d133      	bne.n	800cda0 <_dtoa_r+0x6e0>
 800cd38:	f7f3 faa8 	bl	800028c <__adddf3>
 800cd3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd40:	4604      	mov	r4, r0
 800cd42:	460d      	mov	r5, r1
 800cd44:	f7f3 fee8 	bl	8000b18 <__aeabi_dcmpgt>
 800cd48:	b9c0      	cbnz	r0, 800cd7c <_dtoa_r+0x6bc>
 800cd4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd4e:	4620      	mov	r0, r4
 800cd50:	4629      	mov	r1, r5
 800cd52:	f7f3 feb9 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd56:	b110      	cbz	r0, 800cd5e <_dtoa_r+0x69e>
 800cd58:	f018 0f01 	tst.w	r8, #1
 800cd5c:	d10e      	bne.n	800cd7c <_dtoa_r+0x6bc>
 800cd5e:	9902      	ldr	r1, [sp, #8]
 800cd60:	4648      	mov	r0, r9
 800cd62:	f000 fb07 	bl	800d374 <_Bfree>
 800cd66:	2300      	movs	r3, #0
 800cd68:	7033      	strb	r3, [r6, #0]
 800cd6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cd6c:	3701      	adds	r7, #1
 800cd6e:	601f      	str	r7, [r3, #0]
 800cd70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	f000 824b 	beq.w	800d20e <_dtoa_r+0xb4e>
 800cd78:	601e      	str	r6, [r3, #0]
 800cd7a:	e248      	b.n	800d20e <_dtoa_r+0xb4e>
 800cd7c:	46b8      	mov	r8, r7
 800cd7e:	4633      	mov	r3, r6
 800cd80:	461e      	mov	r6, r3
 800cd82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd86:	2a39      	cmp	r2, #57	@ 0x39
 800cd88:	d106      	bne.n	800cd98 <_dtoa_r+0x6d8>
 800cd8a:	459a      	cmp	sl, r3
 800cd8c:	d1f8      	bne.n	800cd80 <_dtoa_r+0x6c0>
 800cd8e:	2230      	movs	r2, #48	@ 0x30
 800cd90:	f108 0801 	add.w	r8, r8, #1
 800cd94:	f88a 2000 	strb.w	r2, [sl]
 800cd98:	781a      	ldrb	r2, [r3, #0]
 800cd9a:	3201      	adds	r2, #1
 800cd9c:	701a      	strb	r2, [r3, #0]
 800cd9e:	e7a0      	b.n	800cce2 <_dtoa_r+0x622>
 800cda0:	4b6f      	ldr	r3, [pc, #444]	@ (800cf60 <_dtoa_r+0x8a0>)
 800cda2:	2200      	movs	r2, #0
 800cda4:	f7f3 fc28 	bl	80005f8 <__aeabi_dmul>
 800cda8:	2200      	movs	r2, #0
 800cdaa:	2300      	movs	r3, #0
 800cdac:	4604      	mov	r4, r0
 800cdae:	460d      	mov	r5, r1
 800cdb0:	f7f3 fe8a 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	d09f      	beq.n	800ccf8 <_dtoa_r+0x638>
 800cdb8:	e7d1      	b.n	800cd5e <_dtoa_r+0x69e>
 800cdba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdbc:	2a00      	cmp	r2, #0
 800cdbe:	f000 80ea 	beq.w	800cf96 <_dtoa_r+0x8d6>
 800cdc2:	9a07      	ldr	r2, [sp, #28]
 800cdc4:	2a01      	cmp	r2, #1
 800cdc6:	f300 80cd 	bgt.w	800cf64 <_dtoa_r+0x8a4>
 800cdca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cdcc:	2a00      	cmp	r2, #0
 800cdce:	f000 80c1 	beq.w	800cf54 <_dtoa_r+0x894>
 800cdd2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cdd6:	9c08      	ldr	r4, [sp, #32]
 800cdd8:	9e00      	ldr	r6, [sp, #0]
 800cdda:	9a00      	ldr	r2, [sp, #0]
 800cddc:	441a      	add	r2, r3
 800cdde:	9200      	str	r2, [sp, #0]
 800cde0:	9a06      	ldr	r2, [sp, #24]
 800cde2:	2101      	movs	r1, #1
 800cde4:	441a      	add	r2, r3
 800cde6:	4648      	mov	r0, r9
 800cde8:	9206      	str	r2, [sp, #24]
 800cdea:	f000 fb77 	bl	800d4dc <__i2b>
 800cdee:	4605      	mov	r5, r0
 800cdf0:	b166      	cbz	r6, 800ce0c <_dtoa_r+0x74c>
 800cdf2:	9b06      	ldr	r3, [sp, #24]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	dd09      	ble.n	800ce0c <_dtoa_r+0x74c>
 800cdf8:	42b3      	cmp	r3, r6
 800cdfa:	9a00      	ldr	r2, [sp, #0]
 800cdfc:	bfa8      	it	ge
 800cdfe:	4633      	movge	r3, r6
 800ce00:	1ad2      	subs	r2, r2, r3
 800ce02:	9200      	str	r2, [sp, #0]
 800ce04:	9a06      	ldr	r2, [sp, #24]
 800ce06:	1af6      	subs	r6, r6, r3
 800ce08:	1ad3      	subs	r3, r2, r3
 800ce0a:	9306      	str	r3, [sp, #24]
 800ce0c:	9b08      	ldr	r3, [sp, #32]
 800ce0e:	b30b      	cbz	r3, 800ce54 <_dtoa_r+0x794>
 800ce10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	f000 80c6 	beq.w	800cfa4 <_dtoa_r+0x8e4>
 800ce18:	2c00      	cmp	r4, #0
 800ce1a:	f000 80c0 	beq.w	800cf9e <_dtoa_r+0x8de>
 800ce1e:	4629      	mov	r1, r5
 800ce20:	4622      	mov	r2, r4
 800ce22:	4648      	mov	r0, r9
 800ce24:	f000 fc12 	bl	800d64c <__pow5mult>
 800ce28:	9a02      	ldr	r2, [sp, #8]
 800ce2a:	4601      	mov	r1, r0
 800ce2c:	4605      	mov	r5, r0
 800ce2e:	4648      	mov	r0, r9
 800ce30:	f000 fb6a 	bl	800d508 <__multiply>
 800ce34:	9902      	ldr	r1, [sp, #8]
 800ce36:	4680      	mov	r8, r0
 800ce38:	4648      	mov	r0, r9
 800ce3a:	f000 fa9b 	bl	800d374 <_Bfree>
 800ce3e:	9b08      	ldr	r3, [sp, #32]
 800ce40:	1b1b      	subs	r3, r3, r4
 800ce42:	9308      	str	r3, [sp, #32]
 800ce44:	f000 80b1 	beq.w	800cfaa <_dtoa_r+0x8ea>
 800ce48:	9a08      	ldr	r2, [sp, #32]
 800ce4a:	4641      	mov	r1, r8
 800ce4c:	4648      	mov	r0, r9
 800ce4e:	f000 fbfd 	bl	800d64c <__pow5mult>
 800ce52:	9002      	str	r0, [sp, #8]
 800ce54:	2101      	movs	r1, #1
 800ce56:	4648      	mov	r0, r9
 800ce58:	f000 fb40 	bl	800d4dc <__i2b>
 800ce5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce5e:	4604      	mov	r4, r0
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	f000 81d8 	beq.w	800d216 <_dtoa_r+0xb56>
 800ce66:	461a      	mov	r2, r3
 800ce68:	4601      	mov	r1, r0
 800ce6a:	4648      	mov	r0, r9
 800ce6c:	f000 fbee 	bl	800d64c <__pow5mult>
 800ce70:	9b07      	ldr	r3, [sp, #28]
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	4604      	mov	r4, r0
 800ce76:	f300 809f 	bgt.w	800cfb8 <_dtoa_r+0x8f8>
 800ce7a:	9b04      	ldr	r3, [sp, #16]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	f040 8097 	bne.w	800cfb0 <_dtoa_r+0x8f0>
 800ce82:	9b05      	ldr	r3, [sp, #20]
 800ce84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	f040 8093 	bne.w	800cfb4 <_dtoa_r+0x8f4>
 800ce8e:	9b05      	ldr	r3, [sp, #20]
 800ce90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ce94:	0d1b      	lsrs	r3, r3, #20
 800ce96:	051b      	lsls	r3, r3, #20
 800ce98:	b133      	cbz	r3, 800cea8 <_dtoa_r+0x7e8>
 800ce9a:	9b00      	ldr	r3, [sp, #0]
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	9300      	str	r3, [sp, #0]
 800cea0:	9b06      	ldr	r3, [sp, #24]
 800cea2:	3301      	adds	r3, #1
 800cea4:	9306      	str	r3, [sp, #24]
 800cea6:	2301      	movs	r3, #1
 800cea8:	9308      	str	r3, [sp, #32]
 800ceaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	f000 81b8 	beq.w	800d222 <_dtoa_r+0xb62>
 800ceb2:	6923      	ldr	r3, [r4, #16]
 800ceb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ceb8:	6918      	ldr	r0, [r3, #16]
 800ceba:	f000 fac3 	bl	800d444 <__hi0bits>
 800cebe:	f1c0 0020 	rsb	r0, r0, #32
 800cec2:	9b06      	ldr	r3, [sp, #24]
 800cec4:	4418      	add	r0, r3
 800cec6:	f010 001f 	ands.w	r0, r0, #31
 800ceca:	f000 8082 	beq.w	800cfd2 <_dtoa_r+0x912>
 800cece:	f1c0 0320 	rsb	r3, r0, #32
 800ced2:	2b04      	cmp	r3, #4
 800ced4:	dd73      	ble.n	800cfbe <_dtoa_r+0x8fe>
 800ced6:	9b00      	ldr	r3, [sp, #0]
 800ced8:	f1c0 001c 	rsb	r0, r0, #28
 800cedc:	4403      	add	r3, r0
 800cede:	9300      	str	r3, [sp, #0]
 800cee0:	9b06      	ldr	r3, [sp, #24]
 800cee2:	4403      	add	r3, r0
 800cee4:	4406      	add	r6, r0
 800cee6:	9306      	str	r3, [sp, #24]
 800cee8:	9b00      	ldr	r3, [sp, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	dd05      	ble.n	800cefa <_dtoa_r+0x83a>
 800ceee:	9902      	ldr	r1, [sp, #8]
 800cef0:	461a      	mov	r2, r3
 800cef2:	4648      	mov	r0, r9
 800cef4:	f000 fc04 	bl	800d700 <__lshift>
 800cef8:	9002      	str	r0, [sp, #8]
 800cefa:	9b06      	ldr	r3, [sp, #24]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	dd05      	ble.n	800cf0c <_dtoa_r+0x84c>
 800cf00:	4621      	mov	r1, r4
 800cf02:	461a      	mov	r2, r3
 800cf04:	4648      	mov	r0, r9
 800cf06:	f000 fbfb 	bl	800d700 <__lshift>
 800cf0a:	4604      	mov	r4, r0
 800cf0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d061      	beq.n	800cfd6 <_dtoa_r+0x916>
 800cf12:	9802      	ldr	r0, [sp, #8]
 800cf14:	4621      	mov	r1, r4
 800cf16:	f000 fc5f 	bl	800d7d8 <__mcmp>
 800cf1a:	2800      	cmp	r0, #0
 800cf1c:	da5b      	bge.n	800cfd6 <_dtoa_r+0x916>
 800cf1e:	2300      	movs	r3, #0
 800cf20:	9902      	ldr	r1, [sp, #8]
 800cf22:	220a      	movs	r2, #10
 800cf24:	4648      	mov	r0, r9
 800cf26:	f000 fa47 	bl	800d3b8 <__multadd>
 800cf2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf2c:	9002      	str	r0, [sp, #8]
 800cf2e:	f107 38ff 	add.w	r8, r7, #4294967295
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	f000 8177 	beq.w	800d226 <_dtoa_r+0xb66>
 800cf38:	4629      	mov	r1, r5
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	220a      	movs	r2, #10
 800cf3e:	4648      	mov	r0, r9
 800cf40:	f000 fa3a 	bl	800d3b8 <__multadd>
 800cf44:	f1bb 0f00 	cmp.w	fp, #0
 800cf48:	4605      	mov	r5, r0
 800cf4a:	dc6f      	bgt.n	800d02c <_dtoa_r+0x96c>
 800cf4c:	9b07      	ldr	r3, [sp, #28]
 800cf4e:	2b02      	cmp	r3, #2
 800cf50:	dc49      	bgt.n	800cfe6 <_dtoa_r+0x926>
 800cf52:	e06b      	b.n	800d02c <_dtoa_r+0x96c>
 800cf54:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cf56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cf5a:	e73c      	b.n	800cdd6 <_dtoa_r+0x716>
 800cf5c:	3fe00000 	.word	0x3fe00000
 800cf60:	40240000 	.word	0x40240000
 800cf64:	9b03      	ldr	r3, [sp, #12]
 800cf66:	1e5c      	subs	r4, r3, #1
 800cf68:	9b08      	ldr	r3, [sp, #32]
 800cf6a:	42a3      	cmp	r3, r4
 800cf6c:	db09      	blt.n	800cf82 <_dtoa_r+0x8c2>
 800cf6e:	1b1c      	subs	r4, r3, r4
 800cf70:	9b03      	ldr	r3, [sp, #12]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	f6bf af30 	bge.w	800cdd8 <_dtoa_r+0x718>
 800cf78:	9b00      	ldr	r3, [sp, #0]
 800cf7a:	9a03      	ldr	r2, [sp, #12]
 800cf7c:	1a9e      	subs	r6, r3, r2
 800cf7e:	2300      	movs	r3, #0
 800cf80:	e72b      	b.n	800cdda <_dtoa_r+0x71a>
 800cf82:	9b08      	ldr	r3, [sp, #32]
 800cf84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cf86:	9408      	str	r4, [sp, #32]
 800cf88:	1ae3      	subs	r3, r4, r3
 800cf8a:	441a      	add	r2, r3
 800cf8c:	9e00      	ldr	r6, [sp, #0]
 800cf8e:	9b03      	ldr	r3, [sp, #12]
 800cf90:	920d      	str	r2, [sp, #52]	@ 0x34
 800cf92:	2400      	movs	r4, #0
 800cf94:	e721      	b.n	800cdda <_dtoa_r+0x71a>
 800cf96:	9c08      	ldr	r4, [sp, #32]
 800cf98:	9e00      	ldr	r6, [sp, #0]
 800cf9a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800cf9c:	e728      	b.n	800cdf0 <_dtoa_r+0x730>
 800cf9e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800cfa2:	e751      	b.n	800ce48 <_dtoa_r+0x788>
 800cfa4:	9a08      	ldr	r2, [sp, #32]
 800cfa6:	9902      	ldr	r1, [sp, #8]
 800cfa8:	e750      	b.n	800ce4c <_dtoa_r+0x78c>
 800cfaa:	f8cd 8008 	str.w	r8, [sp, #8]
 800cfae:	e751      	b.n	800ce54 <_dtoa_r+0x794>
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	e779      	b.n	800cea8 <_dtoa_r+0x7e8>
 800cfb4:	9b04      	ldr	r3, [sp, #16]
 800cfb6:	e777      	b.n	800cea8 <_dtoa_r+0x7e8>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	9308      	str	r3, [sp, #32]
 800cfbc:	e779      	b.n	800ceb2 <_dtoa_r+0x7f2>
 800cfbe:	d093      	beq.n	800cee8 <_dtoa_r+0x828>
 800cfc0:	9a00      	ldr	r2, [sp, #0]
 800cfc2:	331c      	adds	r3, #28
 800cfc4:	441a      	add	r2, r3
 800cfc6:	9200      	str	r2, [sp, #0]
 800cfc8:	9a06      	ldr	r2, [sp, #24]
 800cfca:	441a      	add	r2, r3
 800cfcc:	441e      	add	r6, r3
 800cfce:	9206      	str	r2, [sp, #24]
 800cfd0:	e78a      	b.n	800cee8 <_dtoa_r+0x828>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	e7f4      	b.n	800cfc0 <_dtoa_r+0x900>
 800cfd6:	9b03      	ldr	r3, [sp, #12]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	46b8      	mov	r8, r7
 800cfdc:	dc20      	bgt.n	800d020 <_dtoa_r+0x960>
 800cfde:	469b      	mov	fp, r3
 800cfe0:	9b07      	ldr	r3, [sp, #28]
 800cfe2:	2b02      	cmp	r3, #2
 800cfe4:	dd1e      	ble.n	800d024 <_dtoa_r+0x964>
 800cfe6:	f1bb 0f00 	cmp.w	fp, #0
 800cfea:	f47f adb1 	bne.w	800cb50 <_dtoa_r+0x490>
 800cfee:	4621      	mov	r1, r4
 800cff0:	465b      	mov	r3, fp
 800cff2:	2205      	movs	r2, #5
 800cff4:	4648      	mov	r0, r9
 800cff6:	f000 f9df 	bl	800d3b8 <__multadd>
 800cffa:	4601      	mov	r1, r0
 800cffc:	4604      	mov	r4, r0
 800cffe:	9802      	ldr	r0, [sp, #8]
 800d000:	f000 fbea 	bl	800d7d8 <__mcmp>
 800d004:	2800      	cmp	r0, #0
 800d006:	f77f ada3 	ble.w	800cb50 <_dtoa_r+0x490>
 800d00a:	4656      	mov	r6, sl
 800d00c:	2331      	movs	r3, #49	@ 0x31
 800d00e:	f806 3b01 	strb.w	r3, [r6], #1
 800d012:	f108 0801 	add.w	r8, r8, #1
 800d016:	e59f      	b.n	800cb58 <_dtoa_r+0x498>
 800d018:	9c03      	ldr	r4, [sp, #12]
 800d01a:	46b8      	mov	r8, r7
 800d01c:	4625      	mov	r5, r4
 800d01e:	e7f4      	b.n	800d00a <_dtoa_r+0x94a>
 800d020:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d026:	2b00      	cmp	r3, #0
 800d028:	f000 8101 	beq.w	800d22e <_dtoa_r+0xb6e>
 800d02c:	2e00      	cmp	r6, #0
 800d02e:	dd05      	ble.n	800d03c <_dtoa_r+0x97c>
 800d030:	4629      	mov	r1, r5
 800d032:	4632      	mov	r2, r6
 800d034:	4648      	mov	r0, r9
 800d036:	f000 fb63 	bl	800d700 <__lshift>
 800d03a:	4605      	mov	r5, r0
 800d03c:	9b08      	ldr	r3, [sp, #32]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d05c      	beq.n	800d0fc <_dtoa_r+0xa3c>
 800d042:	6869      	ldr	r1, [r5, #4]
 800d044:	4648      	mov	r0, r9
 800d046:	f000 f955 	bl	800d2f4 <_Balloc>
 800d04a:	4606      	mov	r6, r0
 800d04c:	b928      	cbnz	r0, 800d05a <_dtoa_r+0x99a>
 800d04e:	4b82      	ldr	r3, [pc, #520]	@ (800d258 <_dtoa_r+0xb98>)
 800d050:	4602      	mov	r2, r0
 800d052:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d056:	f7ff bb4a 	b.w	800c6ee <_dtoa_r+0x2e>
 800d05a:	692a      	ldr	r2, [r5, #16]
 800d05c:	3202      	adds	r2, #2
 800d05e:	0092      	lsls	r2, r2, #2
 800d060:	f105 010c 	add.w	r1, r5, #12
 800d064:	300c      	adds	r0, #12
 800d066:	f7ff fa94 	bl	800c592 <memcpy>
 800d06a:	2201      	movs	r2, #1
 800d06c:	4631      	mov	r1, r6
 800d06e:	4648      	mov	r0, r9
 800d070:	f000 fb46 	bl	800d700 <__lshift>
 800d074:	f10a 0301 	add.w	r3, sl, #1
 800d078:	9300      	str	r3, [sp, #0]
 800d07a:	eb0a 030b 	add.w	r3, sl, fp
 800d07e:	9308      	str	r3, [sp, #32]
 800d080:	9b04      	ldr	r3, [sp, #16]
 800d082:	f003 0301 	and.w	r3, r3, #1
 800d086:	462f      	mov	r7, r5
 800d088:	9306      	str	r3, [sp, #24]
 800d08a:	4605      	mov	r5, r0
 800d08c:	9b00      	ldr	r3, [sp, #0]
 800d08e:	9802      	ldr	r0, [sp, #8]
 800d090:	4621      	mov	r1, r4
 800d092:	f103 3bff 	add.w	fp, r3, #4294967295
 800d096:	f7ff fa8a 	bl	800c5ae <quorem>
 800d09a:	4603      	mov	r3, r0
 800d09c:	3330      	adds	r3, #48	@ 0x30
 800d09e:	9003      	str	r0, [sp, #12]
 800d0a0:	4639      	mov	r1, r7
 800d0a2:	9802      	ldr	r0, [sp, #8]
 800d0a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0a6:	f000 fb97 	bl	800d7d8 <__mcmp>
 800d0aa:	462a      	mov	r2, r5
 800d0ac:	9004      	str	r0, [sp, #16]
 800d0ae:	4621      	mov	r1, r4
 800d0b0:	4648      	mov	r0, r9
 800d0b2:	f000 fbad 	bl	800d810 <__mdiff>
 800d0b6:	68c2      	ldr	r2, [r0, #12]
 800d0b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0ba:	4606      	mov	r6, r0
 800d0bc:	bb02      	cbnz	r2, 800d100 <_dtoa_r+0xa40>
 800d0be:	4601      	mov	r1, r0
 800d0c0:	9802      	ldr	r0, [sp, #8]
 800d0c2:	f000 fb89 	bl	800d7d8 <__mcmp>
 800d0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	4631      	mov	r1, r6
 800d0cc:	4648      	mov	r0, r9
 800d0ce:	920c      	str	r2, [sp, #48]	@ 0x30
 800d0d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0d2:	f000 f94f 	bl	800d374 <_Bfree>
 800d0d6:	9b07      	ldr	r3, [sp, #28]
 800d0d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d0da:	9e00      	ldr	r6, [sp, #0]
 800d0dc:	ea42 0103 	orr.w	r1, r2, r3
 800d0e0:	9b06      	ldr	r3, [sp, #24]
 800d0e2:	4319      	orrs	r1, r3
 800d0e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0e6:	d10d      	bne.n	800d104 <_dtoa_r+0xa44>
 800d0e8:	2b39      	cmp	r3, #57	@ 0x39
 800d0ea:	d027      	beq.n	800d13c <_dtoa_r+0xa7c>
 800d0ec:	9a04      	ldr	r2, [sp, #16]
 800d0ee:	2a00      	cmp	r2, #0
 800d0f0:	dd01      	ble.n	800d0f6 <_dtoa_r+0xa36>
 800d0f2:	9b03      	ldr	r3, [sp, #12]
 800d0f4:	3331      	adds	r3, #49	@ 0x31
 800d0f6:	f88b 3000 	strb.w	r3, [fp]
 800d0fa:	e52e      	b.n	800cb5a <_dtoa_r+0x49a>
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	e7b9      	b.n	800d074 <_dtoa_r+0x9b4>
 800d100:	2201      	movs	r2, #1
 800d102:	e7e2      	b.n	800d0ca <_dtoa_r+0xa0a>
 800d104:	9904      	ldr	r1, [sp, #16]
 800d106:	2900      	cmp	r1, #0
 800d108:	db04      	blt.n	800d114 <_dtoa_r+0xa54>
 800d10a:	9807      	ldr	r0, [sp, #28]
 800d10c:	4301      	orrs	r1, r0
 800d10e:	9806      	ldr	r0, [sp, #24]
 800d110:	4301      	orrs	r1, r0
 800d112:	d120      	bne.n	800d156 <_dtoa_r+0xa96>
 800d114:	2a00      	cmp	r2, #0
 800d116:	ddee      	ble.n	800d0f6 <_dtoa_r+0xa36>
 800d118:	9902      	ldr	r1, [sp, #8]
 800d11a:	9300      	str	r3, [sp, #0]
 800d11c:	2201      	movs	r2, #1
 800d11e:	4648      	mov	r0, r9
 800d120:	f000 faee 	bl	800d700 <__lshift>
 800d124:	4621      	mov	r1, r4
 800d126:	9002      	str	r0, [sp, #8]
 800d128:	f000 fb56 	bl	800d7d8 <__mcmp>
 800d12c:	2800      	cmp	r0, #0
 800d12e:	9b00      	ldr	r3, [sp, #0]
 800d130:	dc02      	bgt.n	800d138 <_dtoa_r+0xa78>
 800d132:	d1e0      	bne.n	800d0f6 <_dtoa_r+0xa36>
 800d134:	07da      	lsls	r2, r3, #31
 800d136:	d5de      	bpl.n	800d0f6 <_dtoa_r+0xa36>
 800d138:	2b39      	cmp	r3, #57	@ 0x39
 800d13a:	d1da      	bne.n	800d0f2 <_dtoa_r+0xa32>
 800d13c:	2339      	movs	r3, #57	@ 0x39
 800d13e:	f88b 3000 	strb.w	r3, [fp]
 800d142:	4633      	mov	r3, r6
 800d144:	461e      	mov	r6, r3
 800d146:	3b01      	subs	r3, #1
 800d148:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d14c:	2a39      	cmp	r2, #57	@ 0x39
 800d14e:	d04e      	beq.n	800d1ee <_dtoa_r+0xb2e>
 800d150:	3201      	adds	r2, #1
 800d152:	701a      	strb	r2, [r3, #0]
 800d154:	e501      	b.n	800cb5a <_dtoa_r+0x49a>
 800d156:	2a00      	cmp	r2, #0
 800d158:	dd03      	ble.n	800d162 <_dtoa_r+0xaa2>
 800d15a:	2b39      	cmp	r3, #57	@ 0x39
 800d15c:	d0ee      	beq.n	800d13c <_dtoa_r+0xa7c>
 800d15e:	3301      	adds	r3, #1
 800d160:	e7c9      	b.n	800d0f6 <_dtoa_r+0xa36>
 800d162:	9a00      	ldr	r2, [sp, #0]
 800d164:	9908      	ldr	r1, [sp, #32]
 800d166:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d16a:	428a      	cmp	r2, r1
 800d16c:	d028      	beq.n	800d1c0 <_dtoa_r+0xb00>
 800d16e:	9902      	ldr	r1, [sp, #8]
 800d170:	2300      	movs	r3, #0
 800d172:	220a      	movs	r2, #10
 800d174:	4648      	mov	r0, r9
 800d176:	f000 f91f 	bl	800d3b8 <__multadd>
 800d17a:	42af      	cmp	r7, r5
 800d17c:	9002      	str	r0, [sp, #8]
 800d17e:	f04f 0300 	mov.w	r3, #0
 800d182:	f04f 020a 	mov.w	r2, #10
 800d186:	4639      	mov	r1, r7
 800d188:	4648      	mov	r0, r9
 800d18a:	d107      	bne.n	800d19c <_dtoa_r+0xadc>
 800d18c:	f000 f914 	bl	800d3b8 <__multadd>
 800d190:	4607      	mov	r7, r0
 800d192:	4605      	mov	r5, r0
 800d194:	9b00      	ldr	r3, [sp, #0]
 800d196:	3301      	adds	r3, #1
 800d198:	9300      	str	r3, [sp, #0]
 800d19a:	e777      	b.n	800d08c <_dtoa_r+0x9cc>
 800d19c:	f000 f90c 	bl	800d3b8 <__multadd>
 800d1a0:	4629      	mov	r1, r5
 800d1a2:	4607      	mov	r7, r0
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	220a      	movs	r2, #10
 800d1a8:	4648      	mov	r0, r9
 800d1aa:	f000 f905 	bl	800d3b8 <__multadd>
 800d1ae:	4605      	mov	r5, r0
 800d1b0:	e7f0      	b.n	800d194 <_dtoa_r+0xad4>
 800d1b2:	f1bb 0f00 	cmp.w	fp, #0
 800d1b6:	bfcc      	ite	gt
 800d1b8:	465e      	movgt	r6, fp
 800d1ba:	2601      	movle	r6, #1
 800d1bc:	4456      	add	r6, sl
 800d1be:	2700      	movs	r7, #0
 800d1c0:	9902      	ldr	r1, [sp, #8]
 800d1c2:	9300      	str	r3, [sp, #0]
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	4648      	mov	r0, r9
 800d1c8:	f000 fa9a 	bl	800d700 <__lshift>
 800d1cc:	4621      	mov	r1, r4
 800d1ce:	9002      	str	r0, [sp, #8]
 800d1d0:	f000 fb02 	bl	800d7d8 <__mcmp>
 800d1d4:	2800      	cmp	r0, #0
 800d1d6:	dcb4      	bgt.n	800d142 <_dtoa_r+0xa82>
 800d1d8:	d102      	bne.n	800d1e0 <_dtoa_r+0xb20>
 800d1da:	9b00      	ldr	r3, [sp, #0]
 800d1dc:	07db      	lsls	r3, r3, #31
 800d1de:	d4b0      	bmi.n	800d142 <_dtoa_r+0xa82>
 800d1e0:	4633      	mov	r3, r6
 800d1e2:	461e      	mov	r6, r3
 800d1e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1e8:	2a30      	cmp	r2, #48	@ 0x30
 800d1ea:	d0fa      	beq.n	800d1e2 <_dtoa_r+0xb22>
 800d1ec:	e4b5      	b.n	800cb5a <_dtoa_r+0x49a>
 800d1ee:	459a      	cmp	sl, r3
 800d1f0:	d1a8      	bne.n	800d144 <_dtoa_r+0xa84>
 800d1f2:	2331      	movs	r3, #49	@ 0x31
 800d1f4:	f108 0801 	add.w	r8, r8, #1
 800d1f8:	f88a 3000 	strb.w	r3, [sl]
 800d1fc:	e4ad      	b.n	800cb5a <_dtoa_r+0x49a>
 800d1fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d200:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d25c <_dtoa_r+0xb9c>
 800d204:	b11b      	cbz	r3, 800d20e <_dtoa_r+0xb4e>
 800d206:	f10a 0308 	add.w	r3, sl, #8
 800d20a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d20c:	6013      	str	r3, [r2, #0]
 800d20e:	4650      	mov	r0, sl
 800d210:	b017      	add	sp, #92	@ 0x5c
 800d212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d216:	9b07      	ldr	r3, [sp, #28]
 800d218:	2b01      	cmp	r3, #1
 800d21a:	f77f ae2e 	ble.w	800ce7a <_dtoa_r+0x7ba>
 800d21e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d220:	9308      	str	r3, [sp, #32]
 800d222:	2001      	movs	r0, #1
 800d224:	e64d      	b.n	800cec2 <_dtoa_r+0x802>
 800d226:	f1bb 0f00 	cmp.w	fp, #0
 800d22a:	f77f aed9 	ble.w	800cfe0 <_dtoa_r+0x920>
 800d22e:	4656      	mov	r6, sl
 800d230:	9802      	ldr	r0, [sp, #8]
 800d232:	4621      	mov	r1, r4
 800d234:	f7ff f9bb 	bl	800c5ae <quorem>
 800d238:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d23c:	f806 3b01 	strb.w	r3, [r6], #1
 800d240:	eba6 020a 	sub.w	r2, r6, sl
 800d244:	4593      	cmp	fp, r2
 800d246:	ddb4      	ble.n	800d1b2 <_dtoa_r+0xaf2>
 800d248:	9902      	ldr	r1, [sp, #8]
 800d24a:	2300      	movs	r3, #0
 800d24c:	220a      	movs	r2, #10
 800d24e:	4648      	mov	r0, r9
 800d250:	f000 f8b2 	bl	800d3b8 <__multadd>
 800d254:	9002      	str	r0, [sp, #8]
 800d256:	e7eb      	b.n	800d230 <_dtoa_r+0xb70>
 800d258:	0800e724 	.word	0x0800e724
 800d25c:	0800e6a8 	.word	0x0800e6a8

0800d260 <_free_r>:
 800d260:	b538      	push	{r3, r4, r5, lr}
 800d262:	4605      	mov	r5, r0
 800d264:	2900      	cmp	r1, #0
 800d266:	d041      	beq.n	800d2ec <_free_r+0x8c>
 800d268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d26c:	1f0c      	subs	r4, r1, #4
 800d26e:	2b00      	cmp	r3, #0
 800d270:	bfb8      	it	lt
 800d272:	18e4      	addlt	r4, r4, r3
 800d274:	f7fe fb1c 	bl	800b8b0 <__malloc_lock>
 800d278:	4a1d      	ldr	r2, [pc, #116]	@ (800d2f0 <_free_r+0x90>)
 800d27a:	6813      	ldr	r3, [r2, #0]
 800d27c:	b933      	cbnz	r3, 800d28c <_free_r+0x2c>
 800d27e:	6063      	str	r3, [r4, #4]
 800d280:	6014      	str	r4, [r2, #0]
 800d282:	4628      	mov	r0, r5
 800d284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d288:	f7fe bb18 	b.w	800b8bc <__malloc_unlock>
 800d28c:	42a3      	cmp	r3, r4
 800d28e:	d908      	bls.n	800d2a2 <_free_r+0x42>
 800d290:	6820      	ldr	r0, [r4, #0]
 800d292:	1821      	adds	r1, r4, r0
 800d294:	428b      	cmp	r3, r1
 800d296:	bf01      	itttt	eq
 800d298:	6819      	ldreq	r1, [r3, #0]
 800d29a:	685b      	ldreq	r3, [r3, #4]
 800d29c:	1809      	addeq	r1, r1, r0
 800d29e:	6021      	streq	r1, [r4, #0]
 800d2a0:	e7ed      	b.n	800d27e <_free_r+0x1e>
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	b10b      	cbz	r3, 800d2ac <_free_r+0x4c>
 800d2a8:	42a3      	cmp	r3, r4
 800d2aa:	d9fa      	bls.n	800d2a2 <_free_r+0x42>
 800d2ac:	6811      	ldr	r1, [r2, #0]
 800d2ae:	1850      	adds	r0, r2, r1
 800d2b0:	42a0      	cmp	r0, r4
 800d2b2:	d10b      	bne.n	800d2cc <_free_r+0x6c>
 800d2b4:	6820      	ldr	r0, [r4, #0]
 800d2b6:	4401      	add	r1, r0
 800d2b8:	1850      	adds	r0, r2, r1
 800d2ba:	4283      	cmp	r3, r0
 800d2bc:	6011      	str	r1, [r2, #0]
 800d2be:	d1e0      	bne.n	800d282 <_free_r+0x22>
 800d2c0:	6818      	ldr	r0, [r3, #0]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	6053      	str	r3, [r2, #4]
 800d2c6:	4408      	add	r0, r1
 800d2c8:	6010      	str	r0, [r2, #0]
 800d2ca:	e7da      	b.n	800d282 <_free_r+0x22>
 800d2cc:	d902      	bls.n	800d2d4 <_free_r+0x74>
 800d2ce:	230c      	movs	r3, #12
 800d2d0:	602b      	str	r3, [r5, #0]
 800d2d2:	e7d6      	b.n	800d282 <_free_r+0x22>
 800d2d4:	6820      	ldr	r0, [r4, #0]
 800d2d6:	1821      	adds	r1, r4, r0
 800d2d8:	428b      	cmp	r3, r1
 800d2da:	bf04      	itt	eq
 800d2dc:	6819      	ldreq	r1, [r3, #0]
 800d2de:	685b      	ldreq	r3, [r3, #4]
 800d2e0:	6063      	str	r3, [r4, #4]
 800d2e2:	bf04      	itt	eq
 800d2e4:	1809      	addeq	r1, r1, r0
 800d2e6:	6021      	streq	r1, [r4, #0]
 800d2e8:	6054      	str	r4, [r2, #4]
 800d2ea:	e7ca      	b.n	800d282 <_free_r+0x22>
 800d2ec:	bd38      	pop	{r3, r4, r5, pc}
 800d2ee:	bf00      	nop
 800d2f0:	20000b74 	.word	0x20000b74

0800d2f4 <_Balloc>:
 800d2f4:	b570      	push	{r4, r5, r6, lr}
 800d2f6:	69c6      	ldr	r6, [r0, #28]
 800d2f8:	4604      	mov	r4, r0
 800d2fa:	460d      	mov	r5, r1
 800d2fc:	b976      	cbnz	r6, 800d31c <_Balloc+0x28>
 800d2fe:	2010      	movs	r0, #16
 800d300:	f7fe fa24 	bl	800b74c <malloc>
 800d304:	4602      	mov	r2, r0
 800d306:	61e0      	str	r0, [r4, #28]
 800d308:	b920      	cbnz	r0, 800d314 <_Balloc+0x20>
 800d30a:	4b18      	ldr	r3, [pc, #96]	@ (800d36c <_Balloc+0x78>)
 800d30c:	4818      	ldr	r0, [pc, #96]	@ (800d370 <_Balloc+0x7c>)
 800d30e:	216b      	movs	r1, #107	@ 0x6b
 800d310:	f000 fd88 	bl	800de24 <__assert_func>
 800d314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d318:	6006      	str	r6, [r0, #0]
 800d31a:	60c6      	str	r6, [r0, #12]
 800d31c:	69e6      	ldr	r6, [r4, #28]
 800d31e:	68f3      	ldr	r3, [r6, #12]
 800d320:	b183      	cbz	r3, 800d344 <_Balloc+0x50>
 800d322:	69e3      	ldr	r3, [r4, #28]
 800d324:	68db      	ldr	r3, [r3, #12]
 800d326:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d32a:	b9b8      	cbnz	r0, 800d35c <_Balloc+0x68>
 800d32c:	2101      	movs	r1, #1
 800d32e:	fa01 f605 	lsl.w	r6, r1, r5
 800d332:	1d72      	adds	r2, r6, #5
 800d334:	0092      	lsls	r2, r2, #2
 800d336:	4620      	mov	r0, r4
 800d338:	f000 fd92 	bl	800de60 <_calloc_r>
 800d33c:	b160      	cbz	r0, 800d358 <_Balloc+0x64>
 800d33e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d342:	e00e      	b.n	800d362 <_Balloc+0x6e>
 800d344:	2221      	movs	r2, #33	@ 0x21
 800d346:	2104      	movs	r1, #4
 800d348:	4620      	mov	r0, r4
 800d34a:	f000 fd89 	bl	800de60 <_calloc_r>
 800d34e:	69e3      	ldr	r3, [r4, #28]
 800d350:	60f0      	str	r0, [r6, #12]
 800d352:	68db      	ldr	r3, [r3, #12]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d1e4      	bne.n	800d322 <_Balloc+0x2e>
 800d358:	2000      	movs	r0, #0
 800d35a:	bd70      	pop	{r4, r5, r6, pc}
 800d35c:	6802      	ldr	r2, [r0, #0]
 800d35e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d362:	2300      	movs	r3, #0
 800d364:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d368:	e7f7      	b.n	800d35a <_Balloc+0x66>
 800d36a:	bf00      	nop
 800d36c:	0800e6b5 	.word	0x0800e6b5
 800d370:	0800e735 	.word	0x0800e735

0800d374 <_Bfree>:
 800d374:	b570      	push	{r4, r5, r6, lr}
 800d376:	69c6      	ldr	r6, [r0, #28]
 800d378:	4605      	mov	r5, r0
 800d37a:	460c      	mov	r4, r1
 800d37c:	b976      	cbnz	r6, 800d39c <_Bfree+0x28>
 800d37e:	2010      	movs	r0, #16
 800d380:	f7fe f9e4 	bl	800b74c <malloc>
 800d384:	4602      	mov	r2, r0
 800d386:	61e8      	str	r0, [r5, #28]
 800d388:	b920      	cbnz	r0, 800d394 <_Bfree+0x20>
 800d38a:	4b09      	ldr	r3, [pc, #36]	@ (800d3b0 <_Bfree+0x3c>)
 800d38c:	4809      	ldr	r0, [pc, #36]	@ (800d3b4 <_Bfree+0x40>)
 800d38e:	218f      	movs	r1, #143	@ 0x8f
 800d390:	f000 fd48 	bl	800de24 <__assert_func>
 800d394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d398:	6006      	str	r6, [r0, #0]
 800d39a:	60c6      	str	r6, [r0, #12]
 800d39c:	b13c      	cbz	r4, 800d3ae <_Bfree+0x3a>
 800d39e:	69eb      	ldr	r3, [r5, #28]
 800d3a0:	6862      	ldr	r2, [r4, #4]
 800d3a2:	68db      	ldr	r3, [r3, #12]
 800d3a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d3a8:	6021      	str	r1, [r4, #0]
 800d3aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d3ae:	bd70      	pop	{r4, r5, r6, pc}
 800d3b0:	0800e6b5 	.word	0x0800e6b5
 800d3b4:	0800e735 	.word	0x0800e735

0800d3b8 <__multadd>:
 800d3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3bc:	690d      	ldr	r5, [r1, #16]
 800d3be:	4607      	mov	r7, r0
 800d3c0:	460c      	mov	r4, r1
 800d3c2:	461e      	mov	r6, r3
 800d3c4:	f101 0c14 	add.w	ip, r1, #20
 800d3c8:	2000      	movs	r0, #0
 800d3ca:	f8dc 3000 	ldr.w	r3, [ip]
 800d3ce:	b299      	uxth	r1, r3
 800d3d0:	fb02 6101 	mla	r1, r2, r1, r6
 800d3d4:	0c1e      	lsrs	r6, r3, #16
 800d3d6:	0c0b      	lsrs	r3, r1, #16
 800d3d8:	fb02 3306 	mla	r3, r2, r6, r3
 800d3dc:	b289      	uxth	r1, r1
 800d3de:	3001      	adds	r0, #1
 800d3e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d3e4:	4285      	cmp	r5, r0
 800d3e6:	f84c 1b04 	str.w	r1, [ip], #4
 800d3ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d3ee:	dcec      	bgt.n	800d3ca <__multadd+0x12>
 800d3f0:	b30e      	cbz	r6, 800d436 <__multadd+0x7e>
 800d3f2:	68a3      	ldr	r3, [r4, #8]
 800d3f4:	42ab      	cmp	r3, r5
 800d3f6:	dc19      	bgt.n	800d42c <__multadd+0x74>
 800d3f8:	6861      	ldr	r1, [r4, #4]
 800d3fa:	4638      	mov	r0, r7
 800d3fc:	3101      	adds	r1, #1
 800d3fe:	f7ff ff79 	bl	800d2f4 <_Balloc>
 800d402:	4680      	mov	r8, r0
 800d404:	b928      	cbnz	r0, 800d412 <__multadd+0x5a>
 800d406:	4602      	mov	r2, r0
 800d408:	4b0c      	ldr	r3, [pc, #48]	@ (800d43c <__multadd+0x84>)
 800d40a:	480d      	ldr	r0, [pc, #52]	@ (800d440 <__multadd+0x88>)
 800d40c:	21ba      	movs	r1, #186	@ 0xba
 800d40e:	f000 fd09 	bl	800de24 <__assert_func>
 800d412:	6922      	ldr	r2, [r4, #16]
 800d414:	3202      	adds	r2, #2
 800d416:	f104 010c 	add.w	r1, r4, #12
 800d41a:	0092      	lsls	r2, r2, #2
 800d41c:	300c      	adds	r0, #12
 800d41e:	f7ff f8b8 	bl	800c592 <memcpy>
 800d422:	4621      	mov	r1, r4
 800d424:	4638      	mov	r0, r7
 800d426:	f7ff ffa5 	bl	800d374 <_Bfree>
 800d42a:	4644      	mov	r4, r8
 800d42c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d430:	3501      	adds	r5, #1
 800d432:	615e      	str	r6, [r3, #20]
 800d434:	6125      	str	r5, [r4, #16]
 800d436:	4620      	mov	r0, r4
 800d438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d43c:	0800e724 	.word	0x0800e724
 800d440:	0800e735 	.word	0x0800e735

0800d444 <__hi0bits>:
 800d444:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d448:	4603      	mov	r3, r0
 800d44a:	bf36      	itet	cc
 800d44c:	0403      	lslcc	r3, r0, #16
 800d44e:	2000      	movcs	r0, #0
 800d450:	2010      	movcc	r0, #16
 800d452:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d456:	bf3c      	itt	cc
 800d458:	021b      	lslcc	r3, r3, #8
 800d45a:	3008      	addcc	r0, #8
 800d45c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d460:	bf3c      	itt	cc
 800d462:	011b      	lslcc	r3, r3, #4
 800d464:	3004      	addcc	r0, #4
 800d466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d46a:	bf3c      	itt	cc
 800d46c:	009b      	lslcc	r3, r3, #2
 800d46e:	3002      	addcc	r0, #2
 800d470:	2b00      	cmp	r3, #0
 800d472:	db05      	blt.n	800d480 <__hi0bits+0x3c>
 800d474:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d478:	f100 0001 	add.w	r0, r0, #1
 800d47c:	bf08      	it	eq
 800d47e:	2020      	moveq	r0, #32
 800d480:	4770      	bx	lr

0800d482 <__lo0bits>:
 800d482:	6803      	ldr	r3, [r0, #0]
 800d484:	4602      	mov	r2, r0
 800d486:	f013 0007 	ands.w	r0, r3, #7
 800d48a:	d00b      	beq.n	800d4a4 <__lo0bits+0x22>
 800d48c:	07d9      	lsls	r1, r3, #31
 800d48e:	d421      	bmi.n	800d4d4 <__lo0bits+0x52>
 800d490:	0798      	lsls	r0, r3, #30
 800d492:	bf49      	itett	mi
 800d494:	085b      	lsrmi	r3, r3, #1
 800d496:	089b      	lsrpl	r3, r3, #2
 800d498:	2001      	movmi	r0, #1
 800d49a:	6013      	strmi	r3, [r2, #0]
 800d49c:	bf5c      	itt	pl
 800d49e:	6013      	strpl	r3, [r2, #0]
 800d4a0:	2002      	movpl	r0, #2
 800d4a2:	4770      	bx	lr
 800d4a4:	b299      	uxth	r1, r3
 800d4a6:	b909      	cbnz	r1, 800d4ac <__lo0bits+0x2a>
 800d4a8:	0c1b      	lsrs	r3, r3, #16
 800d4aa:	2010      	movs	r0, #16
 800d4ac:	b2d9      	uxtb	r1, r3
 800d4ae:	b909      	cbnz	r1, 800d4b4 <__lo0bits+0x32>
 800d4b0:	3008      	adds	r0, #8
 800d4b2:	0a1b      	lsrs	r3, r3, #8
 800d4b4:	0719      	lsls	r1, r3, #28
 800d4b6:	bf04      	itt	eq
 800d4b8:	091b      	lsreq	r3, r3, #4
 800d4ba:	3004      	addeq	r0, #4
 800d4bc:	0799      	lsls	r1, r3, #30
 800d4be:	bf04      	itt	eq
 800d4c0:	089b      	lsreq	r3, r3, #2
 800d4c2:	3002      	addeq	r0, #2
 800d4c4:	07d9      	lsls	r1, r3, #31
 800d4c6:	d403      	bmi.n	800d4d0 <__lo0bits+0x4e>
 800d4c8:	085b      	lsrs	r3, r3, #1
 800d4ca:	f100 0001 	add.w	r0, r0, #1
 800d4ce:	d003      	beq.n	800d4d8 <__lo0bits+0x56>
 800d4d0:	6013      	str	r3, [r2, #0]
 800d4d2:	4770      	bx	lr
 800d4d4:	2000      	movs	r0, #0
 800d4d6:	4770      	bx	lr
 800d4d8:	2020      	movs	r0, #32
 800d4da:	4770      	bx	lr

0800d4dc <__i2b>:
 800d4dc:	b510      	push	{r4, lr}
 800d4de:	460c      	mov	r4, r1
 800d4e0:	2101      	movs	r1, #1
 800d4e2:	f7ff ff07 	bl	800d2f4 <_Balloc>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	b928      	cbnz	r0, 800d4f6 <__i2b+0x1a>
 800d4ea:	4b05      	ldr	r3, [pc, #20]	@ (800d500 <__i2b+0x24>)
 800d4ec:	4805      	ldr	r0, [pc, #20]	@ (800d504 <__i2b+0x28>)
 800d4ee:	f240 1145 	movw	r1, #325	@ 0x145
 800d4f2:	f000 fc97 	bl	800de24 <__assert_func>
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	6144      	str	r4, [r0, #20]
 800d4fa:	6103      	str	r3, [r0, #16]
 800d4fc:	bd10      	pop	{r4, pc}
 800d4fe:	bf00      	nop
 800d500:	0800e724 	.word	0x0800e724
 800d504:	0800e735 	.word	0x0800e735

0800d508 <__multiply>:
 800d508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d50c:	4617      	mov	r7, r2
 800d50e:	690a      	ldr	r2, [r1, #16]
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	429a      	cmp	r2, r3
 800d514:	bfa8      	it	ge
 800d516:	463b      	movge	r3, r7
 800d518:	4689      	mov	r9, r1
 800d51a:	bfa4      	itt	ge
 800d51c:	460f      	movge	r7, r1
 800d51e:	4699      	movge	r9, r3
 800d520:	693d      	ldr	r5, [r7, #16]
 800d522:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	6879      	ldr	r1, [r7, #4]
 800d52a:	eb05 060a 	add.w	r6, r5, sl
 800d52e:	42b3      	cmp	r3, r6
 800d530:	b085      	sub	sp, #20
 800d532:	bfb8      	it	lt
 800d534:	3101      	addlt	r1, #1
 800d536:	f7ff fedd 	bl	800d2f4 <_Balloc>
 800d53a:	b930      	cbnz	r0, 800d54a <__multiply+0x42>
 800d53c:	4602      	mov	r2, r0
 800d53e:	4b41      	ldr	r3, [pc, #260]	@ (800d644 <__multiply+0x13c>)
 800d540:	4841      	ldr	r0, [pc, #260]	@ (800d648 <__multiply+0x140>)
 800d542:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d546:	f000 fc6d 	bl	800de24 <__assert_func>
 800d54a:	f100 0414 	add.w	r4, r0, #20
 800d54e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d552:	4623      	mov	r3, r4
 800d554:	2200      	movs	r2, #0
 800d556:	4573      	cmp	r3, lr
 800d558:	d320      	bcc.n	800d59c <__multiply+0x94>
 800d55a:	f107 0814 	add.w	r8, r7, #20
 800d55e:	f109 0114 	add.w	r1, r9, #20
 800d562:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d566:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d56a:	9302      	str	r3, [sp, #8]
 800d56c:	1beb      	subs	r3, r5, r7
 800d56e:	3b15      	subs	r3, #21
 800d570:	f023 0303 	bic.w	r3, r3, #3
 800d574:	3304      	adds	r3, #4
 800d576:	3715      	adds	r7, #21
 800d578:	42bd      	cmp	r5, r7
 800d57a:	bf38      	it	cc
 800d57c:	2304      	movcc	r3, #4
 800d57e:	9301      	str	r3, [sp, #4]
 800d580:	9b02      	ldr	r3, [sp, #8]
 800d582:	9103      	str	r1, [sp, #12]
 800d584:	428b      	cmp	r3, r1
 800d586:	d80c      	bhi.n	800d5a2 <__multiply+0x9a>
 800d588:	2e00      	cmp	r6, #0
 800d58a:	dd03      	ble.n	800d594 <__multiply+0x8c>
 800d58c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d590:	2b00      	cmp	r3, #0
 800d592:	d055      	beq.n	800d640 <__multiply+0x138>
 800d594:	6106      	str	r6, [r0, #16]
 800d596:	b005      	add	sp, #20
 800d598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d59c:	f843 2b04 	str.w	r2, [r3], #4
 800d5a0:	e7d9      	b.n	800d556 <__multiply+0x4e>
 800d5a2:	f8b1 a000 	ldrh.w	sl, [r1]
 800d5a6:	f1ba 0f00 	cmp.w	sl, #0
 800d5aa:	d01f      	beq.n	800d5ec <__multiply+0xe4>
 800d5ac:	46c4      	mov	ip, r8
 800d5ae:	46a1      	mov	r9, r4
 800d5b0:	2700      	movs	r7, #0
 800d5b2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d5b6:	f8d9 3000 	ldr.w	r3, [r9]
 800d5ba:	fa1f fb82 	uxth.w	fp, r2
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	fb0a 330b 	mla	r3, sl, fp, r3
 800d5c4:	443b      	add	r3, r7
 800d5c6:	f8d9 7000 	ldr.w	r7, [r9]
 800d5ca:	0c12      	lsrs	r2, r2, #16
 800d5cc:	0c3f      	lsrs	r7, r7, #16
 800d5ce:	fb0a 7202 	mla	r2, sl, r2, r7
 800d5d2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d5d6:	b29b      	uxth	r3, r3
 800d5d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5dc:	4565      	cmp	r5, ip
 800d5de:	f849 3b04 	str.w	r3, [r9], #4
 800d5e2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d5e6:	d8e4      	bhi.n	800d5b2 <__multiply+0xaa>
 800d5e8:	9b01      	ldr	r3, [sp, #4]
 800d5ea:	50e7      	str	r7, [r4, r3]
 800d5ec:	9b03      	ldr	r3, [sp, #12]
 800d5ee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d5f2:	3104      	adds	r1, #4
 800d5f4:	f1b9 0f00 	cmp.w	r9, #0
 800d5f8:	d020      	beq.n	800d63c <__multiply+0x134>
 800d5fa:	6823      	ldr	r3, [r4, #0]
 800d5fc:	4647      	mov	r7, r8
 800d5fe:	46a4      	mov	ip, r4
 800d600:	f04f 0a00 	mov.w	sl, #0
 800d604:	f8b7 b000 	ldrh.w	fp, [r7]
 800d608:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d60c:	fb09 220b 	mla	r2, r9, fp, r2
 800d610:	4452      	add	r2, sl
 800d612:	b29b      	uxth	r3, r3
 800d614:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d618:	f84c 3b04 	str.w	r3, [ip], #4
 800d61c:	f857 3b04 	ldr.w	r3, [r7], #4
 800d620:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d624:	f8bc 3000 	ldrh.w	r3, [ip]
 800d628:	fb09 330a 	mla	r3, r9, sl, r3
 800d62c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d630:	42bd      	cmp	r5, r7
 800d632:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d636:	d8e5      	bhi.n	800d604 <__multiply+0xfc>
 800d638:	9a01      	ldr	r2, [sp, #4]
 800d63a:	50a3      	str	r3, [r4, r2]
 800d63c:	3404      	adds	r4, #4
 800d63e:	e79f      	b.n	800d580 <__multiply+0x78>
 800d640:	3e01      	subs	r6, #1
 800d642:	e7a1      	b.n	800d588 <__multiply+0x80>
 800d644:	0800e724 	.word	0x0800e724
 800d648:	0800e735 	.word	0x0800e735

0800d64c <__pow5mult>:
 800d64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d650:	4615      	mov	r5, r2
 800d652:	f012 0203 	ands.w	r2, r2, #3
 800d656:	4607      	mov	r7, r0
 800d658:	460e      	mov	r6, r1
 800d65a:	d007      	beq.n	800d66c <__pow5mult+0x20>
 800d65c:	4c25      	ldr	r4, [pc, #148]	@ (800d6f4 <__pow5mult+0xa8>)
 800d65e:	3a01      	subs	r2, #1
 800d660:	2300      	movs	r3, #0
 800d662:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d666:	f7ff fea7 	bl	800d3b8 <__multadd>
 800d66a:	4606      	mov	r6, r0
 800d66c:	10ad      	asrs	r5, r5, #2
 800d66e:	d03d      	beq.n	800d6ec <__pow5mult+0xa0>
 800d670:	69fc      	ldr	r4, [r7, #28]
 800d672:	b97c      	cbnz	r4, 800d694 <__pow5mult+0x48>
 800d674:	2010      	movs	r0, #16
 800d676:	f7fe f869 	bl	800b74c <malloc>
 800d67a:	4602      	mov	r2, r0
 800d67c:	61f8      	str	r0, [r7, #28]
 800d67e:	b928      	cbnz	r0, 800d68c <__pow5mult+0x40>
 800d680:	4b1d      	ldr	r3, [pc, #116]	@ (800d6f8 <__pow5mult+0xac>)
 800d682:	481e      	ldr	r0, [pc, #120]	@ (800d6fc <__pow5mult+0xb0>)
 800d684:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d688:	f000 fbcc 	bl	800de24 <__assert_func>
 800d68c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d690:	6004      	str	r4, [r0, #0]
 800d692:	60c4      	str	r4, [r0, #12]
 800d694:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d698:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d69c:	b94c      	cbnz	r4, 800d6b2 <__pow5mult+0x66>
 800d69e:	f240 2171 	movw	r1, #625	@ 0x271
 800d6a2:	4638      	mov	r0, r7
 800d6a4:	f7ff ff1a 	bl	800d4dc <__i2b>
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800d6ae:	4604      	mov	r4, r0
 800d6b0:	6003      	str	r3, [r0, #0]
 800d6b2:	f04f 0900 	mov.w	r9, #0
 800d6b6:	07eb      	lsls	r3, r5, #31
 800d6b8:	d50a      	bpl.n	800d6d0 <__pow5mult+0x84>
 800d6ba:	4631      	mov	r1, r6
 800d6bc:	4622      	mov	r2, r4
 800d6be:	4638      	mov	r0, r7
 800d6c0:	f7ff ff22 	bl	800d508 <__multiply>
 800d6c4:	4631      	mov	r1, r6
 800d6c6:	4680      	mov	r8, r0
 800d6c8:	4638      	mov	r0, r7
 800d6ca:	f7ff fe53 	bl	800d374 <_Bfree>
 800d6ce:	4646      	mov	r6, r8
 800d6d0:	106d      	asrs	r5, r5, #1
 800d6d2:	d00b      	beq.n	800d6ec <__pow5mult+0xa0>
 800d6d4:	6820      	ldr	r0, [r4, #0]
 800d6d6:	b938      	cbnz	r0, 800d6e8 <__pow5mult+0x9c>
 800d6d8:	4622      	mov	r2, r4
 800d6da:	4621      	mov	r1, r4
 800d6dc:	4638      	mov	r0, r7
 800d6de:	f7ff ff13 	bl	800d508 <__multiply>
 800d6e2:	6020      	str	r0, [r4, #0]
 800d6e4:	f8c0 9000 	str.w	r9, [r0]
 800d6e8:	4604      	mov	r4, r0
 800d6ea:	e7e4      	b.n	800d6b6 <__pow5mult+0x6a>
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6f2:	bf00      	nop
 800d6f4:	0800e7e8 	.word	0x0800e7e8
 800d6f8:	0800e6b5 	.word	0x0800e6b5
 800d6fc:	0800e735 	.word	0x0800e735

0800d700 <__lshift>:
 800d700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d704:	460c      	mov	r4, r1
 800d706:	6849      	ldr	r1, [r1, #4]
 800d708:	6923      	ldr	r3, [r4, #16]
 800d70a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d70e:	68a3      	ldr	r3, [r4, #8]
 800d710:	4607      	mov	r7, r0
 800d712:	4691      	mov	r9, r2
 800d714:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d718:	f108 0601 	add.w	r6, r8, #1
 800d71c:	42b3      	cmp	r3, r6
 800d71e:	db0b      	blt.n	800d738 <__lshift+0x38>
 800d720:	4638      	mov	r0, r7
 800d722:	f7ff fde7 	bl	800d2f4 <_Balloc>
 800d726:	4605      	mov	r5, r0
 800d728:	b948      	cbnz	r0, 800d73e <__lshift+0x3e>
 800d72a:	4602      	mov	r2, r0
 800d72c:	4b28      	ldr	r3, [pc, #160]	@ (800d7d0 <__lshift+0xd0>)
 800d72e:	4829      	ldr	r0, [pc, #164]	@ (800d7d4 <__lshift+0xd4>)
 800d730:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d734:	f000 fb76 	bl	800de24 <__assert_func>
 800d738:	3101      	adds	r1, #1
 800d73a:	005b      	lsls	r3, r3, #1
 800d73c:	e7ee      	b.n	800d71c <__lshift+0x1c>
 800d73e:	2300      	movs	r3, #0
 800d740:	f100 0114 	add.w	r1, r0, #20
 800d744:	f100 0210 	add.w	r2, r0, #16
 800d748:	4618      	mov	r0, r3
 800d74a:	4553      	cmp	r3, sl
 800d74c:	db33      	blt.n	800d7b6 <__lshift+0xb6>
 800d74e:	6920      	ldr	r0, [r4, #16]
 800d750:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d754:	f104 0314 	add.w	r3, r4, #20
 800d758:	f019 091f 	ands.w	r9, r9, #31
 800d75c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d760:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d764:	d02b      	beq.n	800d7be <__lshift+0xbe>
 800d766:	f1c9 0e20 	rsb	lr, r9, #32
 800d76a:	468a      	mov	sl, r1
 800d76c:	2200      	movs	r2, #0
 800d76e:	6818      	ldr	r0, [r3, #0]
 800d770:	fa00 f009 	lsl.w	r0, r0, r9
 800d774:	4310      	orrs	r0, r2
 800d776:	f84a 0b04 	str.w	r0, [sl], #4
 800d77a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d77e:	459c      	cmp	ip, r3
 800d780:	fa22 f20e 	lsr.w	r2, r2, lr
 800d784:	d8f3      	bhi.n	800d76e <__lshift+0x6e>
 800d786:	ebac 0304 	sub.w	r3, ip, r4
 800d78a:	3b15      	subs	r3, #21
 800d78c:	f023 0303 	bic.w	r3, r3, #3
 800d790:	3304      	adds	r3, #4
 800d792:	f104 0015 	add.w	r0, r4, #21
 800d796:	4560      	cmp	r0, ip
 800d798:	bf88      	it	hi
 800d79a:	2304      	movhi	r3, #4
 800d79c:	50ca      	str	r2, [r1, r3]
 800d79e:	b10a      	cbz	r2, 800d7a4 <__lshift+0xa4>
 800d7a0:	f108 0602 	add.w	r6, r8, #2
 800d7a4:	3e01      	subs	r6, #1
 800d7a6:	4638      	mov	r0, r7
 800d7a8:	612e      	str	r6, [r5, #16]
 800d7aa:	4621      	mov	r1, r4
 800d7ac:	f7ff fde2 	bl	800d374 <_Bfree>
 800d7b0:	4628      	mov	r0, r5
 800d7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	e7c5      	b.n	800d74a <__lshift+0x4a>
 800d7be:	3904      	subs	r1, #4
 800d7c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d7c8:	459c      	cmp	ip, r3
 800d7ca:	d8f9      	bhi.n	800d7c0 <__lshift+0xc0>
 800d7cc:	e7ea      	b.n	800d7a4 <__lshift+0xa4>
 800d7ce:	bf00      	nop
 800d7d0:	0800e724 	.word	0x0800e724
 800d7d4:	0800e735 	.word	0x0800e735

0800d7d8 <__mcmp>:
 800d7d8:	690a      	ldr	r2, [r1, #16]
 800d7da:	4603      	mov	r3, r0
 800d7dc:	6900      	ldr	r0, [r0, #16]
 800d7de:	1a80      	subs	r0, r0, r2
 800d7e0:	b530      	push	{r4, r5, lr}
 800d7e2:	d10e      	bne.n	800d802 <__mcmp+0x2a>
 800d7e4:	3314      	adds	r3, #20
 800d7e6:	3114      	adds	r1, #20
 800d7e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d7ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d7f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d7f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d7f8:	4295      	cmp	r5, r2
 800d7fa:	d003      	beq.n	800d804 <__mcmp+0x2c>
 800d7fc:	d205      	bcs.n	800d80a <__mcmp+0x32>
 800d7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d802:	bd30      	pop	{r4, r5, pc}
 800d804:	42a3      	cmp	r3, r4
 800d806:	d3f3      	bcc.n	800d7f0 <__mcmp+0x18>
 800d808:	e7fb      	b.n	800d802 <__mcmp+0x2a>
 800d80a:	2001      	movs	r0, #1
 800d80c:	e7f9      	b.n	800d802 <__mcmp+0x2a>
	...

0800d810 <__mdiff>:
 800d810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d814:	4689      	mov	r9, r1
 800d816:	4606      	mov	r6, r0
 800d818:	4611      	mov	r1, r2
 800d81a:	4648      	mov	r0, r9
 800d81c:	4614      	mov	r4, r2
 800d81e:	f7ff ffdb 	bl	800d7d8 <__mcmp>
 800d822:	1e05      	subs	r5, r0, #0
 800d824:	d112      	bne.n	800d84c <__mdiff+0x3c>
 800d826:	4629      	mov	r1, r5
 800d828:	4630      	mov	r0, r6
 800d82a:	f7ff fd63 	bl	800d2f4 <_Balloc>
 800d82e:	4602      	mov	r2, r0
 800d830:	b928      	cbnz	r0, 800d83e <__mdiff+0x2e>
 800d832:	4b3f      	ldr	r3, [pc, #252]	@ (800d930 <__mdiff+0x120>)
 800d834:	f240 2137 	movw	r1, #567	@ 0x237
 800d838:	483e      	ldr	r0, [pc, #248]	@ (800d934 <__mdiff+0x124>)
 800d83a:	f000 faf3 	bl	800de24 <__assert_func>
 800d83e:	2301      	movs	r3, #1
 800d840:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d844:	4610      	mov	r0, r2
 800d846:	b003      	add	sp, #12
 800d848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d84c:	bfbc      	itt	lt
 800d84e:	464b      	movlt	r3, r9
 800d850:	46a1      	movlt	r9, r4
 800d852:	4630      	mov	r0, r6
 800d854:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d858:	bfba      	itte	lt
 800d85a:	461c      	movlt	r4, r3
 800d85c:	2501      	movlt	r5, #1
 800d85e:	2500      	movge	r5, #0
 800d860:	f7ff fd48 	bl	800d2f4 <_Balloc>
 800d864:	4602      	mov	r2, r0
 800d866:	b918      	cbnz	r0, 800d870 <__mdiff+0x60>
 800d868:	4b31      	ldr	r3, [pc, #196]	@ (800d930 <__mdiff+0x120>)
 800d86a:	f240 2145 	movw	r1, #581	@ 0x245
 800d86e:	e7e3      	b.n	800d838 <__mdiff+0x28>
 800d870:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d874:	6926      	ldr	r6, [r4, #16]
 800d876:	60c5      	str	r5, [r0, #12]
 800d878:	f109 0310 	add.w	r3, r9, #16
 800d87c:	f109 0514 	add.w	r5, r9, #20
 800d880:	f104 0e14 	add.w	lr, r4, #20
 800d884:	f100 0b14 	add.w	fp, r0, #20
 800d888:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d88c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d890:	9301      	str	r3, [sp, #4]
 800d892:	46d9      	mov	r9, fp
 800d894:	f04f 0c00 	mov.w	ip, #0
 800d898:	9b01      	ldr	r3, [sp, #4]
 800d89a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d89e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d8a2:	9301      	str	r3, [sp, #4]
 800d8a4:	fa1f f38a 	uxth.w	r3, sl
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	b283      	uxth	r3, r0
 800d8ac:	1acb      	subs	r3, r1, r3
 800d8ae:	0c00      	lsrs	r0, r0, #16
 800d8b0:	4463      	add	r3, ip
 800d8b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d8b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d8c0:	4576      	cmp	r6, lr
 800d8c2:	f849 3b04 	str.w	r3, [r9], #4
 800d8c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d8ca:	d8e5      	bhi.n	800d898 <__mdiff+0x88>
 800d8cc:	1b33      	subs	r3, r6, r4
 800d8ce:	3b15      	subs	r3, #21
 800d8d0:	f023 0303 	bic.w	r3, r3, #3
 800d8d4:	3415      	adds	r4, #21
 800d8d6:	3304      	adds	r3, #4
 800d8d8:	42a6      	cmp	r6, r4
 800d8da:	bf38      	it	cc
 800d8dc:	2304      	movcc	r3, #4
 800d8de:	441d      	add	r5, r3
 800d8e0:	445b      	add	r3, fp
 800d8e2:	461e      	mov	r6, r3
 800d8e4:	462c      	mov	r4, r5
 800d8e6:	4544      	cmp	r4, r8
 800d8e8:	d30e      	bcc.n	800d908 <__mdiff+0xf8>
 800d8ea:	f108 0103 	add.w	r1, r8, #3
 800d8ee:	1b49      	subs	r1, r1, r5
 800d8f0:	f021 0103 	bic.w	r1, r1, #3
 800d8f4:	3d03      	subs	r5, #3
 800d8f6:	45a8      	cmp	r8, r5
 800d8f8:	bf38      	it	cc
 800d8fa:	2100      	movcc	r1, #0
 800d8fc:	440b      	add	r3, r1
 800d8fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d902:	b191      	cbz	r1, 800d92a <__mdiff+0x11a>
 800d904:	6117      	str	r7, [r2, #16]
 800d906:	e79d      	b.n	800d844 <__mdiff+0x34>
 800d908:	f854 1b04 	ldr.w	r1, [r4], #4
 800d90c:	46e6      	mov	lr, ip
 800d90e:	0c08      	lsrs	r0, r1, #16
 800d910:	fa1c fc81 	uxtah	ip, ip, r1
 800d914:	4471      	add	r1, lr
 800d916:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d91a:	b289      	uxth	r1, r1
 800d91c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d920:	f846 1b04 	str.w	r1, [r6], #4
 800d924:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d928:	e7dd      	b.n	800d8e6 <__mdiff+0xd6>
 800d92a:	3f01      	subs	r7, #1
 800d92c:	e7e7      	b.n	800d8fe <__mdiff+0xee>
 800d92e:	bf00      	nop
 800d930:	0800e724 	.word	0x0800e724
 800d934:	0800e735 	.word	0x0800e735

0800d938 <__d2b>:
 800d938:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d93c:	460f      	mov	r7, r1
 800d93e:	2101      	movs	r1, #1
 800d940:	ec59 8b10 	vmov	r8, r9, d0
 800d944:	4616      	mov	r6, r2
 800d946:	f7ff fcd5 	bl	800d2f4 <_Balloc>
 800d94a:	4604      	mov	r4, r0
 800d94c:	b930      	cbnz	r0, 800d95c <__d2b+0x24>
 800d94e:	4602      	mov	r2, r0
 800d950:	4b23      	ldr	r3, [pc, #140]	@ (800d9e0 <__d2b+0xa8>)
 800d952:	4824      	ldr	r0, [pc, #144]	@ (800d9e4 <__d2b+0xac>)
 800d954:	f240 310f 	movw	r1, #783	@ 0x30f
 800d958:	f000 fa64 	bl	800de24 <__assert_func>
 800d95c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d960:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d964:	b10d      	cbz	r5, 800d96a <__d2b+0x32>
 800d966:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d96a:	9301      	str	r3, [sp, #4]
 800d96c:	f1b8 0300 	subs.w	r3, r8, #0
 800d970:	d023      	beq.n	800d9ba <__d2b+0x82>
 800d972:	4668      	mov	r0, sp
 800d974:	9300      	str	r3, [sp, #0]
 800d976:	f7ff fd84 	bl	800d482 <__lo0bits>
 800d97a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d97e:	b1d0      	cbz	r0, 800d9b6 <__d2b+0x7e>
 800d980:	f1c0 0320 	rsb	r3, r0, #32
 800d984:	fa02 f303 	lsl.w	r3, r2, r3
 800d988:	430b      	orrs	r3, r1
 800d98a:	40c2      	lsrs	r2, r0
 800d98c:	6163      	str	r3, [r4, #20]
 800d98e:	9201      	str	r2, [sp, #4]
 800d990:	9b01      	ldr	r3, [sp, #4]
 800d992:	61a3      	str	r3, [r4, #24]
 800d994:	2b00      	cmp	r3, #0
 800d996:	bf0c      	ite	eq
 800d998:	2201      	moveq	r2, #1
 800d99a:	2202      	movne	r2, #2
 800d99c:	6122      	str	r2, [r4, #16]
 800d99e:	b1a5      	cbz	r5, 800d9ca <__d2b+0x92>
 800d9a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d9a4:	4405      	add	r5, r0
 800d9a6:	603d      	str	r5, [r7, #0]
 800d9a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d9ac:	6030      	str	r0, [r6, #0]
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	b003      	add	sp, #12
 800d9b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9b6:	6161      	str	r1, [r4, #20]
 800d9b8:	e7ea      	b.n	800d990 <__d2b+0x58>
 800d9ba:	a801      	add	r0, sp, #4
 800d9bc:	f7ff fd61 	bl	800d482 <__lo0bits>
 800d9c0:	9b01      	ldr	r3, [sp, #4]
 800d9c2:	6163      	str	r3, [r4, #20]
 800d9c4:	3020      	adds	r0, #32
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	e7e8      	b.n	800d99c <__d2b+0x64>
 800d9ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d9ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d9d2:	6038      	str	r0, [r7, #0]
 800d9d4:	6918      	ldr	r0, [r3, #16]
 800d9d6:	f7ff fd35 	bl	800d444 <__hi0bits>
 800d9da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d9de:	e7e5      	b.n	800d9ac <__d2b+0x74>
 800d9e0:	0800e724 	.word	0x0800e724
 800d9e4:	0800e735 	.word	0x0800e735

0800d9e8 <__ssputs_r>:
 800d9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9ec:	688e      	ldr	r6, [r1, #8]
 800d9ee:	461f      	mov	r7, r3
 800d9f0:	42be      	cmp	r6, r7
 800d9f2:	680b      	ldr	r3, [r1, #0]
 800d9f4:	4682      	mov	sl, r0
 800d9f6:	460c      	mov	r4, r1
 800d9f8:	4690      	mov	r8, r2
 800d9fa:	d82d      	bhi.n	800da58 <__ssputs_r+0x70>
 800d9fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800da04:	d026      	beq.n	800da54 <__ssputs_r+0x6c>
 800da06:	6965      	ldr	r5, [r4, #20]
 800da08:	6909      	ldr	r1, [r1, #16]
 800da0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da0e:	eba3 0901 	sub.w	r9, r3, r1
 800da12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da16:	1c7b      	adds	r3, r7, #1
 800da18:	444b      	add	r3, r9
 800da1a:	106d      	asrs	r5, r5, #1
 800da1c:	429d      	cmp	r5, r3
 800da1e:	bf38      	it	cc
 800da20:	461d      	movcc	r5, r3
 800da22:	0553      	lsls	r3, r2, #21
 800da24:	d527      	bpl.n	800da76 <__ssputs_r+0x8e>
 800da26:	4629      	mov	r1, r5
 800da28:	f7fd fec2 	bl	800b7b0 <_malloc_r>
 800da2c:	4606      	mov	r6, r0
 800da2e:	b360      	cbz	r0, 800da8a <__ssputs_r+0xa2>
 800da30:	6921      	ldr	r1, [r4, #16]
 800da32:	464a      	mov	r2, r9
 800da34:	f7fe fdad 	bl	800c592 <memcpy>
 800da38:	89a3      	ldrh	r3, [r4, #12]
 800da3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800da3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da42:	81a3      	strh	r3, [r4, #12]
 800da44:	6126      	str	r6, [r4, #16]
 800da46:	6165      	str	r5, [r4, #20]
 800da48:	444e      	add	r6, r9
 800da4a:	eba5 0509 	sub.w	r5, r5, r9
 800da4e:	6026      	str	r6, [r4, #0]
 800da50:	60a5      	str	r5, [r4, #8]
 800da52:	463e      	mov	r6, r7
 800da54:	42be      	cmp	r6, r7
 800da56:	d900      	bls.n	800da5a <__ssputs_r+0x72>
 800da58:	463e      	mov	r6, r7
 800da5a:	6820      	ldr	r0, [r4, #0]
 800da5c:	4632      	mov	r2, r6
 800da5e:	4641      	mov	r1, r8
 800da60:	f000 f9c6 	bl	800ddf0 <memmove>
 800da64:	68a3      	ldr	r3, [r4, #8]
 800da66:	1b9b      	subs	r3, r3, r6
 800da68:	60a3      	str	r3, [r4, #8]
 800da6a:	6823      	ldr	r3, [r4, #0]
 800da6c:	4433      	add	r3, r6
 800da6e:	6023      	str	r3, [r4, #0]
 800da70:	2000      	movs	r0, #0
 800da72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da76:	462a      	mov	r2, r5
 800da78:	f000 fa18 	bl	800deac <_realloc_r>
 800da7c:	4606      	mov	r6, r0
 800da7e:	2800      	cmp	r0, #0
 800da80:	d1e0      	bne.n	800da44 <__ssputs_r+0x5c>
 800da82:	6921      	ldr	r1, [r4, #16]
 800da84:	4650      	mov	r0, sl
 800da86:	f7ff fbeb 	bl	800d260 <_free_r>
 800da8a:	230c      	movs	r3, #12
 800da8c:	f8ca 3000 	str.w	r3, [sl]
 800da90:	89a3      	ldrh	r3, [r4, #12]
 800da92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da96:	81a3      	strh	r3, [r4, #12]
 800da98:	f04f 30ff 	mov.w	r0, #4294967295
 800da9c:	e7e9      	b.n	800da72 <__ssputs_r+0x8a>
	...

0800daa0 <_svfiprintf_r>:
 800daa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa4:	4698      	mov	r8, r3
 800daa6:	898b      	ldrh	r3, [r1, #12]
 800daa8:	061b      	lsls	r3, r3, #24
 800daaa:	b09d      	sub	sp, #116	@ 0x74
 800daac:	4607      	mov	r7, r0
 800daae:	460d      	mov	r5, r1
 800dab0:	4614      	mov	r4, r2
 800dab2:	d510      	bpl.n	800dad6 <_svfiprintf_r+0x36>
 800dab4:	690b      	ldr	r3, [r1, #16]
 800dab6:	b973      	cbnz	r3, 800dad6 <_svfiprintf_r+0x36>
 800dab8:	2140      	movs	r1, #64	@ 0x40
 800daba:	f7fd fe79 	bl	800b7b0 <_malloc_r>
 800dabe:	6028      	str	r0, [r5, #0]
 800dac0:	6128      	str	r0, [r5, #16]
 800dac2:	b930      	cbnz	r0, 800dad2 <_svfiprintf_r+0x32>
 800dac4:	230c      	movs	r3, #12
 800dac6:	603b      	str	r3, [r7, #0]
 800dac8:	f04f 30ff 	mov.w	r0, #4294967295
 800dacc:	b01d      	add	sp, #116	@ 0x74
 800dace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dad2:	2340      	movs	r3, #64	@ 0x40
 800dad4:	616b      	str	r3, [r5, #20]
 800dad6:	2300      	movs	r3, #0
 800dad8:	9309      	str	r3, [sp, #36]	@ 0x24
 800dada:	2320      	movs	r3, #32
 800dadc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dae0:	f8cd 800c 	str.w	r8, [sp, #12]
 800dae4:	2330      	movs	r3, #48	@ 0x30
 800dae6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dc84 <_svfiprintf_r+0x1e4>
 800daea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800daee:	f04f 0901 	mov.w	r9, #1
 800daf2:	4623      	mov	r3, r4
 800daf4:	469a      	mov	sl, r3
 800daf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dafa:	b10a      	cbz	r2, 800db00 <_svfiprintf_r+0x60>
 800dafc:	2a25      	cmp	r2, #37	@ 0x25
 800dafe:	d1f9      	bne.n	800daf4 <_svfiprintf_r+0x54>
 800db00:	ebba 0b04 	subs.w	fp, sl, r4
 800db04:	d00b      	beq.n	800db1e <_svfiprintf_r+0x7e>
 800db06:	465b      	mov	r3, fp
 800db08:	4622      	mov	r2, r4
 800db0a:	4629      	mov	r1, r5
 800db0c:	4638      	mov	r0, r7
 800db0e:	f7ff ff6b 	bl	800d9e8 <__ssputs_r>
 800db12:	3001      	adds	r0, #1
 800db14:	f000 80a7 	beq.w	800dc66 <_svfiprintf_r+0x1c6>
 800db18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db1a:	445a      	add	r2, fp
 800db1c:	9209      	str	r2, [sp, #36]	@ 0x24
 800db1e:	f89a 3000 	ldrb.w	r3, [sl]
 800db22:	2b00      	cmp	r3, #0
 800db24:	f000 809f 	beq.w	800dc66 <_svfiprintf_r+0x1c6>
 800db28:	2300      	movs	r3, #0
 800db2a:	f04f 32ff 	mov.w	r2, #4294967295
 800db2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db32:	f10a 0a01 	add.w	sl, sl, #1
 800db36:	9304      	str	r3, [sp, #16]
 800db38:	9307      	str	r3, [sp, #28]
 800db3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db3e:	931a      	str	r3, [sp, #104]	@ 0x68
 800db40:	4654      	mov	r4, sl
 800db42:	2205      	movs	r2, #5
 800db44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db48:	484e      	ldr	r0, [pc, #312]	@ (800dc84 <_svfiprintf_r+0x1e4>)
 800db4a:	f7f2 fb41 	bl	80001d0 <memchr>
 800db4e:	9a04      	ldr	r2, [sp, #16]
 800db50:	b9d8      	cbnz	r0, 800db8a <_svfiprintf_r+0xea>
 800db52:	06d0      	lsls	r0, r2, #27
 800db54:	bf44      	itt	mi
 800db56:	2320      	movmi	r3, #32
 800db58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db5c:	0711      	lsls	r1, r2, #28
 800db5e:	bf44      	itt	mi
 800db60:	232b      	movmi	r3, #43	@ 0x2b
 800db62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db66:	f89a 3000 	ldrb.w	r3, [sl]
 800db6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800db6c:	d015      	beq.n	800db9a <_svfiprintf_r+0xfa>
 800db6e:	9a07      	ldr	r2, [sp, #28]
 800db70:	4654      	mov	r4, sl
 800db72:	2000      	movs	r0, #0
 800db74:	f04f 0c0a 	mov.w	ip, #10
 800db78:	4621      	mov	r1, r4
 800db7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db7e:	3b30      	subs	r3, #48	@ 0x30
 800db80:	2b09      	cmp	r3, #9
 800db82:	d94b      	bls.n	800dc1c <_svfiprintf_r+0x17c>
 800db84:	b1b0      	cbz	r0, 800dbb4 <_svfiprintf_r+0x114>
 800db86:	9207      	str	r2, [sp, #28]
 800db88:	e014      	b.n	800dbb4 <_svfiprintf_r+0x114>
 800db8a:	eba0 0308 	sub.w	r3, r0, r8
 800db8e:	fa09 f303 	lsl.w	r3, r9, r3
 800db92:	4313      	orrs	r3, r2
 800db94:	9304      	str	r3, [sp, #16]
 800db96:	46a2      	mov	sl, r4
 800db98:	e7d2      	b.n	800db40 <_svfiprintf_r+0xa0>
 800db9a:	9b03      	ldr	r3, [sp, #12]
 800db9c:	1d19      	adds	r1, r3, #4
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	9103      	str	r1, [sp, #12]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	bfbb      	ittet	lt
 800dba6:	425b      	neglt	r3, r3
 800dba8:	f042 0202 	orrlt.w	r2, r2, #2
 800dbac:	9307      	strge	r3, [sp, #28]
 800dbae:	9307      	strlt	r3, [sp, #28]
 800dbb0:	bfb8      	it	lt
 800dbb2:	9204      	strlt	r2, [sp, #16]
 800dbb4:	7823      	ldrb	r3, [r4, #0]
 800dbb6:	2b2e      	cmp	r3, #46	@ 0x2e
 800dbb8:	d10a      	bne.n	800dbd0 <_svfiprintf_r+0x130>
 800dbba:	7863      	ldrb	r3, [r4, #1]
 800dbbc:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbbe:	d132      	bne.n	800dc26 <_svfiprintf_r+0x186>
 800dbc0:	9b03      	ldr	r3, [sp, #12]
 800dbc2:	1d1a      	adds	r2, r3, #4
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	9203      	str	r2, [sp, #12]
 800dbc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dbcc:	3402      	adds	r4, #2
 800dbce:	9305      	str	r3, [sp, #20]
 800dbd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dc94 <_svfiprintf_r+0x1f4>
 800dbd4:	7821      	ldrb	r1, [r4, #0]
 800dbd6:	2203      	movs	r2, #3
 800dbd8:	4650      	mov	r0, sl
 800dbda:	f7f2 faf9 	bl	80001d0 <memchr>
 800dbde:	b138      	cbz	r0, 800dbf0 <_svfiprintf_r+0x150>
 800dbe0:	9b04      	ldr	r3, [sp, #16]
 800dbe2:	eba0 000a 	sub.w	r0, r0, sl
 800dbe6:	2240      	movs	r2, #64	@ 0x40
 800dbe8:	4082      	lsls	r2, r0
 800dbea:	4313      	orrs	r3, r2
 800dbec:	3401      	adds	r4, #1
 800dbee:	9304      	str	r3, [sp, #16]
 800dbf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbf4:	4824      	ldr	r0, [pc, #144]	@ (800dc88 <_svfiprintf_r+0x1e8>)
 800dbf6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dbfa:	2206      	movs	r2, #6
 800dbfc:	f7f2 fae8 	bl	80001d0 <memchr>
 800dc00:	2800      	cmp	r0, #0
 800dc02:	d036      	beq.n	800dc72 <_svfiprintf_r+0x1d2>
 800dc04:	4b21      	ldr	r3, [pc, #132]	@ (800dc8c <_svfiprintf_r+0x1ec>)
 800dc06:	bb1b      	cbnz	r3, 800dc50 <_svfiprintf_r+0x1b0>
 800dc08:	9b03      	ldr	r3, [sp, #12]
 800dc0a:	3307      	adds	r3, #7
 800dc0c:	f023 0307 	bic.w	r3, r3, #7
 800dc10:	3308      	adds	r3, #8
 800dc12:	9303      	str	r3, [sp, #12]
 800dc14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc16:	4433      	add	r3, r6
 800dc18:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc1a:	e76a      	b.n	800daf2 <_svfiprintf_r+0x52>
 800dc1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc20:	460c      	mov	r4, r1
 800dc22:	2001      	movs	r0, #1
 800dc24:	e7a8      	b.n	800db78 <_svfiprintf_r+0xd8>
 800dc26:	2300      	movs	r3, #0
 800dc28:	3401      	adds	r4, #1
 800dc2a:	9305      	str	r3, [sp, #20]
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	f04f 0c0a 	mov.w	ip, #10
 800dc32:	4620      	mov	r0, r4
 800dc34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc38:	3a30      	subs	r2, #48	@ 0x30
 800dc3a:	2a09      	cmp	r2, #9
 800dc3c:	d903      	bls.n	800dc46 <_svfiprintf_r+0x1a6>
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d0c6      	beq.n	800dbd0 <_svfiprintf_r+0x130>
 800dc42:	9105      	str	r1, [sp, #20]
 800dc44:	e7c4      	b.n	800dbd0 <_svfiprintf_r+0x130>
 800dc46:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc4a:	4604      	mov	r4, r0
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	e7f0      	b.n	800dc32 <_svfiprintf_r+0x192>
 800dc50:	ab03      	add	r3, sp, #12
 800dc52:	9300      	str	r3, [sp, #0]
 800dc54:	462a      	mov	r2, r5
 800dc56:	4b0e      	ldr	r3, [pc, #56]	@ (800dc90 <_svfiprintf_r+0x1f0>)
 800dc58:	a904      	add	r1, sp, #16
 800dc5a:	4638      	mov	r0, r7
 800dc5c:	f7fd fed4 	bl	800ba08 <_printf_float>
 800dc60:	1c42      	adds	r2, r0, #1
 800dc62:	4606      	mov	r6, r0
 800dc64:	d1d6      	bne.n	800dc14 <_svfiprintf_r+0x174>
 800dc66:	89ab      	ldrh	r3, [r5, #12]
 800dc68:	065b      	lsls	r3, r3, #25
 800dc6a:	f53f af2d 	bmi.w	800dac8 <_svfiprintf_r+0x28>
 800dc6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc70:	e72c      	b.n	800dacc <_svfiprintf_r+0x2c>
 800dc72:	ab03      	add	r3, sp, #12
 800dc74:	9300      	str	r3, [sp, #0]
 800dc76:	462a      	mov	r2, r5
 800dc78:	4b05      	ldr	r3, [pc, #20]	@ (800dc90 <_svfiprintf_r+0x1f0>)
 800dc7a:	a904      	add	r1, sp, #16
 800dc7c:	4638      	mov	r0, r7
 800dc7e:	f7fe f95b 	bl	800bf38 <_printf_i>
 800dc82:	e7ed      	b.n	800dc60 <_svfiprintf_r+0x1c0>
 800dc84:	0800e78e 	.word	0x0800e78e
 800dc88:	0800e798 	.word	0x0800e798
 800dc8c:	0800ba09 	.word	0x0800ba09
 800dc90:	0800d9e9 	.word	0x0800d9e9
 800dc94:	0800e794 	.word	0x0800e794

0800dc98 <__sflush_r>:
 800dc98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dca0:	0716      	lsls	r6, r2, #28
 800dca2:	4605      	mov	r5, r0
 800dca4:	460c      	mov	r4, r1
 800dca6:	d454      	bmi.n	800dd52 <__sflush_r+0xba>
 800dca8:	684b      	ldr	r3, [r1, #4]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	dc02      	bgt.n	800dcb4 <__sflush_r+0x1c>
 800dcae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	dd48      	ble.n	800dd46 <__sflush_r+0xae>
 800dcb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dcb6:	2e00      	cmp	r6, #0
 800dcb8:	d045      	beq.n	800dd46 <__sflush_r+0xae>
 800dcba:	2300      	movs	r3, #0
 800dcbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dcc0:	682f      	ldr	r7, [r5, #0]
 800dcc2:	6a21      	ldr	r1, [r4, #32]
 800dcc4:	602b      	str	r3, [r5, #0]
 800dcc6:	d030      	beq.n	800dd2a <__sflush_r+0x92>
 800dcc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dcca:	89a3      	ldrh	r3, [r4, #12]
 800dccc:	0759      	lsls	r1, r3, #29
 800dcce:	d505      	bpl.n	800dcdc <__sflush_r+0x44>
 800dcd0:	6863      	ldr	r3, [r4, #4]
 800dcd2:	1ad2      	subs	r2, r2, r3
 800dcd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dcd6:	b10b      	cbz	r3, 800dcdc <__sflush_r+0x44>
 800dcd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dcda:	1ad2      	subs	r2, r2, r3
 800dcdc:	2300      	movs	r3, #0
 800dcde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dce0:	6a21      	ldr	r1, [r4, #32]
 800dce2:	4628      	mov	r0, r5
 800dce4:	47b0      	blx	r6
 800dce6:	1c43      	adds	r3, r0, #1
 800dce8:	89a3      	ldrh	r3, [r4, #12]
 800dcea:	d106      	bne.n	800dcfa <__sflush_r+0x62>
 800dcec:	6829      	ldr	r1, [r5, #0]
 800dcee:	291d      	cmp	r1, #29
 800dcf0:	d82b      	bhi.n	800dd4a <__sflush_r+0xb2>
 800dcf2:	4a2a      	ldr	r2, [pc, #168]	@ (800dd9c <__sflush_r+0x104>)
 800dcf4:	40ca      	lsrs	r2, r1
 800dcf6:	07d6      	lsls	r6, r2, #31
 800dcf8:	d527      	bpl.n	800dd4a <__sflush_r+0xb2>
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	6062      	str	r2, [r4, #4]
 800dcfe:	04d9      	lsls	r1, r3, #19
 800dd00:	6922      	ldr	r2, [r4, #16]
 800dd02:	6022      	str	r2, [r4, #0]
 800dd04:	d504      	bpl.n	800dd10 <__sflush_r+0x78>
 800dd06:	1c42      	adds	r2, r0, #1
 800dd08:	d101      	bne.n	800dd0e <__sflush_r+0x76>
 800dd0a:	682b      	ldr	r3, [r5, #0]
 800dd0c:	b903      	cbnz	r3, 800dd10 <__sflush_r+0x78>
 800dd0e:	6560      	str	r0, [r4, #84]	@ 0x54
 800dd10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd12:	602f      	str	r7, [r5, #0]
 800dd14:	b1b9      	cbz	r1, 800dd46 <__sflush_r+0xae>
 800dd16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd1a:	4299      	cmp	r1, r3
 800dd1c:	d002      	beq.n	800dd24 <__sflush_r+0x8c>
 800dd1e:	4628      	mov	r0, r5
 800dd20:	f7ff fa9e 	bl	800d260 <_free_r>
 800dd24:	2300      	movs	r3, #0
 800dd26:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd28:	e00d      	b.n	800dd46 <__sflush_r+0xae>
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	4628      	mov	r0, r5
 800dd2e:	47b0      	blx	r6
 800dd30:	4602      	mov	r2, r0
 800dd32:	1c50      	adds	r0, r2, #1
 800dd34:	d1c9      	bne.n	800dcca <__sflush_r+0x32>
 800dd36:	682b      	ldr	r3, [r5, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d0c6      	beq.n	800dcca <__sflush_r+0x32>
 800dd3c:	2b1d      	cmp	r3, #29
 800dd3e:	d001      	beq.n	800dd44 <__sflush_r+0xac>
 800dd40:	2b16      	cmp	r3, #22
 800dd42:	d11e      	bne.n	800dd82 <__sflush_r+0xea>
 800dd44:	602f      	str	r7, [r5, #0]
 800dd46:	2000      	movs	r0, #0
 800dd48:	e022      	b.n	800dd90 <__sflush_r+0xf8>
 800dd4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd4e:	b21b      	sxth	r3, r3
 800dd50:	e01b      	b.n	800dd8a <__sflush_r+0xf2>
 800dd52:	690f      	ldr	r7, [r1, #16]
 800dd54:	2f00      	cmp	r7, #0
 800dd56:	d0f6      	beq.n	800dd46 <__sflush_r+0xae>
 800dd58:	0793      	lsls	r3, r2, #30
 800dd5a:	680e      	ldr	r6, [r1, #0]
 800dd5c:	bf08      	it	eq
 800dd5e:	694b      	ldreq	r3, [r1, #20]
 800dd60:	600f      	str	r7, [r1, #0]
 800dd62:	bf18      	it	ne
 800dd64:	2300      	movne	r3, #0
 800dd66:	eba6 0807 	sub.w	r8, r6, r7
 800dd6a:	608b      	str	r3, [r1, #8]
 800dd6c:	f1b8 0f00 	cmp.w	r8, #0
 800dd70:	dde9      	ble.n	800dd46 <__sflush_r+0xae>
 800dd72:	6a21      	ldr	r1, [r4, #32]
 800dd74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dd76:	4643      	mov	r3, r8
 800dd78:	463a      	mov	r2, r7
 800dd7a:	4628      	mov	r0, r5
 800dd7c:	47b0      	blx	r6
 800dd7e:	2800      	cmp	r0, #0
 800dd80:	dc08      	bgt.n	800dd94 <__sflush_r+0xfc>
 800dd82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd8a:	81a3      	strh	r3, [r4, #12]
 800dd8c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd94:	4407      	add	r7, r0
 800dd96:	eba8 0800 	sub.w	r8, r8, r0
 800dd9a:	e7e7      	b.n	800dd6c <__sflush_r+0xd4>
 800dd9c:	20400001 	.word	0x20400001

0800dda0 <_fflush_r>:
 800dda0:	b538      	push	{r3, r4, r5, lr}
 800dda2:	690b      	ldr	r3, [r1, #16]
 800dda4:	4605      	mov	r5, r0
 800dda6:	460c      	mov	r4, r1
 800dda8:	b913      	cbnz	r3, 800ddb0 <_fflush_r+0x10>
 800ddaa:	2500      	movs	r5, #0
 800ddac:	4628      	mov	r0, r5
 800ddae:	bd38      	pop	{r3, r4, r5, pc}
 800ddb0:	b118      	cbz	r0, 800ddba <_fflush_r+0x1a>
 800ddb2:	6a03      	ldr	r3, [r0, #32]
 800ddb4:	b90b      	cbnz	r3, 800ddba <_fflush_r+0x1a>
 800ddb6:	f7fe fa69 	bl	800c28c <__sinit>
 800ddba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d0f3      	beq.n	800ddaa <_fflush_r+0xa>
 800ddc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ddc4:	07d0      	lsls	r0, r2, #31
 800ddc6:	d404      	bmi.n	800ddd2 <_fflush_r+0x32>
 800ddc8:	0599      	lsls	r1, r3, #22
 800ddca:	d402      	bmi.n	800ddd2 <_fflush_r+0x32>
 800ddcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ddce:	f7fe fbde 	bl	800c58e <__retarget_lock_acquire_recursive>
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	4621      	mov	r1, r4
 800ddd6:	f7ff ff5f 	bl	800dc98 <__sflush_r>
 800ddda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dddc:	07da      	lsls	r2, r3, #31
 800ddde:	4605      	mov	r5, r0
 800dde0:	d4e4      	bmi.n	800ddac <_fflush_r+0xc>
 800dde2:	89a3      	ldrh	r3, [r4, #12]
 800dde4:	059b      	lsls	r3, r3, #22
 800dde6:	d4e1      	bmi.n	800ddac <_fflush_r+0xc>
 800dde8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ddea:	f7fe fbd1 	bl	800c590 <__retarget_lock_release_recursive>
 800ddee:	e7dd      	b.n	800ddac <_fflush_r+0xc>

0800ddf0 <memmove>:
 800ddf0:	4288      	cmp	r0, r1
 800ddf2:	b510      	push	{r4, lr}
 800ddf4:	eb01 0402 	add.w	r4, r1, r2
 800ddf8:	d902      	bls.n	800de00 <memmove+0x10>
 800ddfa:	4284      	cmp	r4, r0
 800ddfc:	4623      	mov	r3, r4
 800ddfe:	d807      	bhi.n	800de10 <memmove+0x20>
 800de00:	1e43      	subs	r3, r0, #1
 800de02:	42a1      	cmp	r1, r4
 800de04:	d008      	beq.n	800de18 <memmove+0x28>
 800de06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de0e:	e7f8      	b.n	800de02 <memmove+0x12>
 800de10:	4402      	add	r2, r0
 800de12:	4601      	mov	r1, r0
 800de14:	428a      	cmp	r2, r1
 800de16:	d100      	bne.n	800de1a <memmove+0x2a>
 800de18:	bd10      	pop	{r4, pc}
 800de1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de22:	e7f7      	b.n	800de14 <memmove+0x24>

0800de24 <__assert_func>:
 800de24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de26:	4614      	mov	r4, r2
 800de28:	461a      	mov	r2, r3
 800de2a:	4b09      	ldr	r3, [pc, #36]	@ (800de50 <__assert_func+0x2c>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	4605      	mov	r5, r0
 800de30:	68d8      	ldr	r0, [r3, #12]
 800de32:	b14c      	cbz	r4, 800de48 <__assert_func+0x24>
 800de34:	4b07      	ldr	r3, [pc, #28]	@ (800de54 <__assert_func+0x30>)
 800de36:	9100      	str	r1, [sp, #0]
 800de38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de3c:	4906      	ldr	r1, [pc, #24]	@ (800de58 <__assert_func+0x34>)
 800de3e:	462b      	mov	r3, r5
 800de40:	f000 f870 	bl	800df24 <fiprintf>
 800de44:	f7fd fc7a 	bl	800b73c <abort>
 800de48:	4b04      	ldr	r3, [pc, #16]	@ (800de5c <__assert_func+0x38>)
 800de4a:	461c      	mov	r4, r3
 800de4c:	e7f3      	b.n	800de36 <__assert_func+0x12>
 800de4e:	bf00      	nop
 800de50:	2000003c 	.word	0x2000003c
 800de54:	0800e7a9 	.word	0x0800e7a9
 800de58:	0800e7b6 	.word	0x0800e7b6
 800de5c:	0800e7e4 	.word	0x0800e7e4

0800de60 <_calloc_r>:
 800de60:	b570      	push	{r4, r5, r6, lr}
 800de62:	fba1 5402 	umull	r5, r4, r1, r2
 800de66:	b934      	cbnz	r4, 800de76 <_calloc_r+0x16>
 800de68:	4629      	mov	r1, r5
 800de6a:	f7fd fca1 	bl	800b7b0 <_malloc_r>
 800de6e:	4606      	mov	r6, r0
 800de70:	b928      	cbnz	r0, 800de7e <_calloc_r+0x1e>
 800de72:	4630      	mov	r0, r6
 800de74:	bd70      	pop	{r4, r5, r6, pc}
 800de76:	220c      	movs	r2, #12
 800de78:	6002      	str	r2, [r0, #0]
 800de7a:	2600      	movs	r6, #0
 800de7c:	e7f9      	b.n	800de72 <_calloc_r+0x12>
 800de7e:	462a      	mov	r2, r5
 800de80:	4621      	mov	r1, r4
 800de82:	f7fe fab2 	bl	800c3ea <memset>
 800de86:	e7f4      	b.n	800de72 <_calloc_r+0x12>

0800de88 <__ascii_mbtowc>:
 800de88:	b082      	sub	sp, #8
 800de8a:	b901      	cbnz	r1, 800de8e <__ascii_mbtowc+0x6>
 800de8c:	a901      	add	r1, sp, #4
 800de8e:	b142      	cbz	r2, 800dea2 <__ascii_mbtowc+0x1a>
 800de90:	b14b      	cbz	r3, 800dea6 <__ascii_mbtowc+0x1e>
 800de92:	7813      	ldrb	r3, [r2, #0]
 800de94:	600b      	str	r3, [r1, #0]
 800de96:	7812      	ldrb	r2, [r2, #0]
 800de98:	1e10      	subs	r0, r2, #0
 800de9a:	bf18      	it	ne
 800de9c:	2001      	movne	r0, #1
 800de9e:	b002      	add	sp, #8
 800dea0:	4770      	bx	lr
 800dea2:	4610      	mov	r0, r2
 800dea4:	e7fb      	b.n	800de9e <__ascii_mbtowc+0x16>
 800dea6:	f06f 0001 	mvn.w	r0, #1
 800deaa:	e7f8      	b.n	800de9e <__ascii_mbtowc+0x16>

0800deac <_realloc_r>:
 800deac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deb0:	4607      	mov	r7, r0
 800deb2:	4614      	mov	r4, r2
 800deb4:	460d      	mov	r5, r1
 800deb6:	b921      	cbnz	r1, 800dec2 <_realloc_r+0x16>
 800deb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800debc:	4611      	mov	r1, r2
 800debe:	f7fd bc77 	b.w	800b7b0 <_malloc_r>
 800dec2:	b92a      	cbnz	r2, 800ded0 <_realloc_r+0x24>
 800dec4:	f7ff f9cc 	bl	800d260 <_free_r>
 800dec8:	4625      	mov	r5, r4
 800deca:	4628      	mov	r0, r5
 800decc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ded0:	f000 f83a 	bl	800df48 <_malloc_usable_size_r>
 800ded4:	4284      	cmp	r4, r0
 800ded6:	4606      	mov	r6, r0
 800ded8:	d802      	bhi.n	800dee0 <_realloc_r+0x34>
 800deda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dede:	d8f4      	bhi.n	800deca <_realloc_r+0x1e>
 800dee0:	4621      	mov	r1, r4
 800dee2:	4638      	mov	r0, r7
 800dee4:	f7fd fc64 	bl	800b7b0 <_malloc_r>
 800dee8:	4680      	mov	r8, r0
 800deea:	b908      	cbnz	r0, 800def0 <_realloc_r+0x44>
 800deec:	4645      	mov	r5, r8
 800deee:	e7ec      	b.n	800deca <_realloc_r+0x1e>
 800def0:	42b4      	cmp	r4, r6
 800def2:	4622      	mov	r2, r4
 800def4:	4629      	mov	r1, r5
 800def6:	bf28      	it	cs
 800def8:	4632      	movcs	r2, r6
 800defa:	f7fe fb4a 	bl	800c592 <memcpy>
 800defe:	4629      	mov	r1, r5
 800df00:	4638      	mov	r0, r7
 800df02:	f7ff f9ad 	bl	800d260 <_free_r>
 800df06:	e7f1      	b.n	800deec <_realloc_r+0x40>

0800df08 <__ascii_wctomb>:
 800df08:	4603      	mov	r3, r0
 800df0a:	4608      	mov	r0, r1
 800df0c:	b141      	cbz	r1, 800df20 <__ascii_wctomb+0x18>
 800df0e:	2aff      	cmp	r2, #255	@ 0xff
 800df10:	d904      	bls.n	800df1c <__ascii_wctomb+0x14>
 800df12:	228a      	movs	r2, #138	@ 0x8a
 800df14:	601a      	str	r2, [r3, #0]
 800df16:	f04f 30ff 	mov.w	r0, #4294967295
 800df1a:	4770      	bx	lr
 800df1c:	700a      	strb	r2, [r1, #0]
 800df1e:	2001      	movs	r0, #1
 800df20:	4770      	bx	lr
	...

0800df24 <fiprintf>:
 800df24:	b40e      	push	{r1, r2, r3}
 800df26:	b503      	push	{r0, r1, lr}
 800df28:	4601      	mov	r1, r0
 800df2a:	ab03      	add	r3, sp, #12
 800df2c:	4805      	ldr	r0, [pc, #20]	@ (800df44 <fiprintf+0x20>)
 800df2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800df32:	6800      	ldr	r0, [r0, #0]
 800df34:	9301      	str	r3, [sp, #4]
 800df36:	f000 f839 	bl	800dfac <_vfiprintf_r>
 800df3a:	b002      	add	sp, #8
 800df3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800df40:	b003      	add	sp, #12
 800df42:	4770      	bx	lr
 800df44:	2000003c 	.word	0x2000003c

0800df48 <_malloc_usable_size_r>:
 800df48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df4c:	1f18      	subs	r0, r3, #4
 800df4e:	2b00      	cmp	r3, #0
 800df50:	bfbc      	itt	lt
 800df52:	580b      	ldrlt	r3, [r1, r0]
 800df54:	18c0      	addlt	r0, r0, r3
 800df56:	4770      	bx	lr

0800df58 <__sfputc_r>:
 800df58:	6893      	ldr	r3, [r2, #8]
 800df5a:	3b01      	subs	r3, #1
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	b410      	push	{r4}
 800df60:	6093      	str	r3, [r2, #8]
 800df62:	da08      	bge.n	800df76 <__sfputc_r+0x1e>
 800df64:	6994      	ldr	r4, [r2, #24]
 800df66:	42a3      	cmp	r3, r4
 800df68:	db01      	blt.n	800df6e <__sfputc_r+0x16>
 800df6a:	290a      	cmp	r1, #10
 800df6c:	d103      	bne.n	800df76 <__sfputc_r+0x1e>
 800df6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df72:	f000 b933 	b.w	800e1dc <__swbuf_r>
 800df76:	6813      	ldr	r3, [r2, #0]
 800df78:	1c58      	adds	r0, r3, #1
 800df7a:	6010      	str	r0, [r2, #0]
 800df7c:	7019      	strb	r1, [r3, #0]
 800df7e:	4608      	mov	r0, r1
 800df80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df84:	4770      	bx	lr

0800df86 <__sfputs_r>:
 800df86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df88:	4606      	mov	r6, r0
 800df8a:	460f      	mov	r7, r1
 800df8c:	4614      	mov	r4, r2
 800df8e:	18d5      	adds	r5, r2, r3
 800df90:	42ac      	cmp	r4, r5
 800df92:	d101      	bne.n	800df98 <__sfputs_r+0x12>
 800df94:	2000      	movs	r0, #0
 800df96:	e007      	b.n	800dfa8 <__sfputs_r+0x22>
 800df98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df9c:	463a      	mov	r2, r7
 800df9e:	4630      	mov	r0, r6
 800dfa0:	f7ff ffda 	bl	800df58 <__sfputc_r>
 800dfa4:	1c43      	adds	r3, r0, #1
 800dfa6:	d1f3      	bne.n	800df90 <__sfputs_r+0xa>
 800dfa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dfac <_vfiprintf_r>:
 800dfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb0:	460d      	mov	r5, r1
 800dfb2:	b09d      	sub	sp, #116	@ 0x74
 800dfb4:	4614      	mov	r4, r2
 800dfb6:	4698      	mov	r8, r3
 800dfb8:	4606      	mov	r6, r0
 800dfba:	b118      	cbz	r0, 800dfc4 <_vfiprintf_r+0x18>
 800dfbc:	6a03      	ldr	r3, [r0, #32]
 800dfbe:	b90b      	cbnz	r3, 800dfc4 <_vfiprintf_r+0x18>
 800dfc0:	f7fe f964 	bl	800c28c <__sinit>
 800dfc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfc6:	07d9      	lsls	r1, r3, #31
 800dfc8:	d405      	bmi.n	800dfd6 <_vfiprintf_r+0x2a>
 800dfca:	89ab      	ldrh	r3, [r5, #12]
 800dfcc:	059a      	lsls	r2, r3, #22
 800dfce:	d402      	bmi.n	800dfd6 <_vfiprintf_r+0x2a>
 800dfd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfd2:	f7fe fadc 	bl	800c58e <__retarget_lock_acquire_recursive>
 800dfd6:	89ab      	ldrh	r3, [r5, #12]
 800dfd8:	071b      	lsls	r3, r3, #28
 800dfda:	d501      	bpl.n	800dfe0 <_vfiprintf_r+0x34>
 800dfdc:	692b      	ldr	r3, [r5, #16]
 800dfde:	b99b      	cbnz	r3, 800e008 <_vfiprintf_r+0x5c>
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	4630      	mov	r0, r6
 800dfe4:	f000 f938 	bl	800e258 <__swsetup_r>
 800dfe8:	b170      	cbz	r0, 800e008 <_vfiprintf_r+0x5c>
 800dfea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfec:	07dc      	lsls	r4, r3, #31
 800dfee:	d504      	bpl.n	800dffa <_vfiprintf_r+0x4e>
 800dff0:	f04f 30ff 	mov.w	r0, #4294967295
 800dff4:	b01d      	add	sp, #116	@ 0x74
 800dff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dffa:	89ab      	ldrh	r3, [r5, #12]
 800dffc:	0598      	lsls	r0, r3, #22
 800dffe:	d4f7      	bmi.n	800dff0 <_vfiprintf_r+0x44>
 800e000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e002:	f7fe fac5 	bl	800c590 <__retarget_lock_release_recursive>
 800e006:	e7f3      	b.n	800dff0 <_vfiprintf_r+0x44>
 800e008:	2300      	movs	r3, #0
 800e00a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e00c:	2320      	movs	r3, #32
 800e00e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e012:	f8cd 800c 	str.w	r8, [sp, #12]
 800e016:	2330      	movs	r3, #48	@ 0x30
 800e018:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e1c8 <_vfiprintf_r+0x21c>
 800e01c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e020:	f04f 0901 	mov.w	r9, #1
 800e024:	4623      	mov	r3, r4
 800e026:	469a      	mov	sl, r3
 800e028:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e02c:	b10a      	cbz	r2, 800e032 <_vfiprintf_r+0x86>
 800e02e:	2a25      	cmp	r2, #37	@ 0x25
 800e030:	d1f9      	bne.n	800e026 <_vfiprintf_r+0x7a>
 800e032:	ebba 0b04 	subs.w	fp, sl, r4
 800e036:	d00b      	beq.n	800e050 <_vfiprintf_r+0xa4>
 800e038:	465b      	mov	r3, fp
 800e03a:	4622      	mov	r2, r4
 800e03c:	4629      	mov	r1, r5
 800e03e:	4630      	mov	r0, r6
 800e040:	f7ff ffa1 	bl	800df86 <__sfputs_r>
 800e044:	3001      	adds	r0, #1
 800e046:	f000 80a7 	beq.w	800e198 <_vfiprintf_r+0x1ec>
 800e04a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e04c:	445a      	add	r2, fp
 800e04e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e050:	f89a 3000 	ldrb.w	r3, [sl]
 800e054:	2b00      	cmp	r3, #0
 800e056:	f000 809f 	beq.w	800e198 <_vfiprintf_r+0x1ec>
 800e05a:	2300      	movs	r3, #0
 800e05c:	f04f 32ff 	mov.w	r2, #4294967295
 800e060:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e064:	f10a 0a01 	add.w	sl, sl, #1
 800e068:	9304      	str	r3, [sp, #16]
 800e06a:	9307      	str	r3, [sp, #28]
 800e06c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e070:	931a      	str	r3, [sp, #104]	@ 0x68
 800e072:	4654      	mov	r4, sl
 800e074:	2205      	movs	r2, #5
 800e076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e07a:	4853      	ldr	r0, [pc, #332]	@ (800e1c8 <_vfiprintf_r+0x21c>)
 800e07c:	f7f2 f8a8 	bl	80001d0 <memchr>
 800e080:	9a04      	ldr	r2, [sp, #16]
 800e082:	b9d8      	cbnz	r0, 800e0bc <_vfiprintf_r+0x110>
 800e084:	06d1      	lsls	r1, r2, #27
 800e086:	bf44      	itt	mi
 800e088:	2320      	movmi	r3, #32
 800e08a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e08e:	0713      	lsls	r3, r2, #28
 800e090:	bf44      	itt	mi
 800e092:	232b      	movmi	r3, #43	@ 0x2b
 800e094:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e098:	f89a 3000 	ldrb.w	r3, [sl]
 800e09c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e09e:	d015      	beq.n	800e0cc <_vfiprintf_r+0x120>
 800e0a0:	9a07      	ldr	r2, [sp, #28]
 800e0a2:	4654      	mov	r4, sl
 800e0a4:	2000      	movs	r0, #0
 800e0a6:	f04f 0c0a 	mov.w	ip, #10
 800e0aa:	4621      	mov	r1, r4
 800e0ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0b0:	3b30      	subs	r3, #48	@ 0x30
 800e0b2:	2b09      	cmp	r3, #9
 800e0b4:	d94b      	bls.n	800e14e <_vfiprintf_r+0x1a2>
 800e0b6:	b1b0      	cbz	r0, 800e0e6 <_vfiprintf_r+0x13a>
 800e0b8:	9207      	str	r2, [sp, #28]
 800e0ba:	e014      	b.n	800e0e6 <_vfiprintf_r+0x13a>
 800e0bc:	eba0 0308 	sub.w	r3, r0, r8
 800e0c0:	fa09 f303 	lsl.w	r3, r9, r3
 800e0c4:	4313      	orrs	r3, r2
 800e0c6:	9304      	str	r3, [sp, #16]
 800e0c8:	46a2      	mov	sl, r4
 800e0ca:	e7d2      	b.n	800e072 <_vfiprintf_r+0xc6>
 800e0cc:	9b03      	ldr	r3, [sp, #12]
 800e0ce:	1d19      	adds	r1, r3, #4
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	9103      	str	r1, [sp, #12]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	bfbb      	ittet	lt
 800e0d8:	425b      	neglt	r3, r3
 800e0da:	f042 0202 	orrlt.w	r2, r2, #2
 800e0de:	9307      	strge	r3, [sp, #28]
 800e0e0:	9307      	strlt	r3, [sp, #28]
 800e0e2:	bfb8      	it	lt
 800e0e4:	9204      	strlt	r2, [sp, #16]
 800e0e6:	7823      	ldrb	r3, [r4, #0]
 800e0e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0ea:	d10a      	bne.n	800e102 <_vfiprintf_r+0x156>
 800e0ec:	7863      	ldrb	r3, [r4, #1]
 800e0ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0f0:	d132      	bne.n	800e158 <_vfiprintf_r+0x1ac>
 800e0f2:	9b03      	ldr	r3, [sp, #12]
 800e0f4:	1d1a      	adds	r2, r3, #4
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	9203      	str	r2, [sp, #12]
 800e0fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e0fe:	3402      	adds	r4, #2
 800e100:	9305      	str	r3, [sp, #20]
 800e102:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e1d8 <_vfiprintf_r+0x22c>
 800e106:	7821      	ldrb	r1, [r4, #0]
 800e108:	2203      	movs	r2, #3
 800e10a:	4650      	mov	r0, sl
 800e10c:	f7f2 f860 	bl	80001d0 <memchr>
 800e110:	b138      	cbz	r0, 800e122 <_vfiprintf_r+0x176>
 800e112:	9b04      	ldr	r3, [sp, #16]
 800e114:	eba0 000a 	sub.w	r0, r0, sl
 800e118:	2240      	movs	r2, #64	@ 0x40
 800e11a:	4082      	lsls	r2, r0
 800e11c:	4313      	orrs	r3, r2
 800e11e:	3401      	adds	r4, #1
 800e120:	9304      	str	r3, [sp, #16]
 800e122:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e126:	4829      	ldr	r0, [pc, #164]	@ (800e1cc <_vfiprintf_r+0x220>)
 800e128:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e12c:	2206      	movs	r2, #6
 800e12e:	f7f2 f84f 	bl	80001d0 <memchr>
 800e132:	2800      	cmp	r0, #0
 800e134:	d03f      	beq.n	800e1b6 <_vfiprintf_r+0x20a>
 800e136:	4b26      	ldr	r3, [pc, #152]	@ (800e1d0 <_vfiprintf_r+0x224>)
 800e138:	bb1b      	cbnz	r3, 800e182 <_vfiprintf_r+0x1d6>
 800e13a:	9b03      	ldr	r3, [sp, #12]
 800e13c:	3307      	adds	r3, #7
 800e13e:	f023 0307 	bic.w	r3, r3, #7
 800e142:	3308      	adds	r3, #8
 800e144:	9303      	str	r3, [sp, #12]
 800e146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e148:	443b      	add	r3, r7
 800e14a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e14c:	e76a      	b.n	800e024 <_vfiprintf_r+0x78>
 800e14e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e152:	460c      	mov	r4, r1
 800e154:	2001      	movs	r0, #1
 800e156:	e7a8      	b.n	800e0aa <_vfiprintf_r+0xfe>
 800e158:	2300      	movs	r3, #0
 800e15a:	3401      	adds	r4, #1
 800e15c:	9305      	str	r3, [sp, #20]
 800e15e:	4619      	mov	r1, r3
 800e160:	f04f 0c0a 	mov.w	ip, #10
 800e164:	4620      	mov	r0, r4
 800e166:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e16a:	3a30      	subs	r2, #48	@ 0x30
 800e16c:	2a09      	cmp	r2, #9
 800e16e:	d903      	bls.n	800e178 <_vfiprintf_r+0x1cc>
 800e170:	2b00      	cmp	r3, #0
 800e172:	d0c6      	beq.n	800e102 <_vfiprintf_r+0x156>
 800e174:	9105      	str	r1, [sp, #20]
 800e176:	e7c4      	b.n	800e102 <_vfiprintf_r+0x156>
 800e178:	fb0c 2101 	mla	r1, ip, r1, r2
 800e17c:	4604      	mov	r4, r0
 800e17e:	2301      	movs	r3, #1
 800e180:	e7f0      	b.n	800e164 <_vfiprintf_r+0x1b8>
 800e182:	ab03      	add	r3, sp, #12
 800e184:	9300      	str	r3, [sp, #0]
 800e186:	462a      	mov	r2, r5
 800e188:	4b12      	ldr	r3, [pc, #72]	@ (800e1d4 <_vfiprintf_r+0x228>)
 800e18a:	a904      	add	r1, sp, #16
 800e18c:	4630      	mov	r0, r6
 800e18e:	f7fd fc3b 	bl	800ba08 <_printf_float>
 800e192:	4607      	mov	r7, r0
 800e194:	1c78      	adds	r0, r7, #1
 800e196:	d1d6      	bne.n	800e146 <_vfiprintf_r+0x19a>
 800e198:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e19a:	07d9      	lsls	r1, r3, #31
 800e19c:	d405      	bmi.n	800e1aa <_vfiprintf_r+0x1fe>
 800e19e:	89ab      	ldrh	r3, [r5, #12]
 800e1a0:	059a      	lsls	r2, r3, #22
 800e1a2:	d402      	bmi.n	800e1aa <_vfiprintf_r+0x1fe>
 800e1a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e1a6:	f7fe f9f3 	bl	800c590 <__retarget_lock_release_recursive>
 800e1aa:	89ab      	ldrh	r3, [r5, #12]
 800e1ac:	065b      	lsls	r3, r3, #25
 800e1ae:	f53f af1f 	bmi.w	800dff0 <_vfiprintf_r+0x44>
 800e1b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e1b4:	e71e      	b.n	800dff4 <_vfiprintf_r+0x48>
 800e1b6:	ab03      	add	r3, sp, #12
 800e1b8:	9300      	str	r3, [sp, #0]
 800e1ba:	462a      	mov	r2, r5
 800e1bc:	4b05      	ldr	r3, [pc, #20]	@ (800e1d4 <_vfiprintf_r+0x228>)
 800e1be:	a904      	add	r1, sp, #16
 800e1c0:	4630      	mov	r0, r6
 800e1c2:	f7fd feb9 	bl	800bf38 <_printf_i>
 800e1c6:	e7e4      	b.n	800e192 <_vfiprintf_r+0x1e6>
 800e1c8:	0800e78e 	.word	0x0800e78e
 800e1cc:	0800e798 	.word	0x0800e798
 800e1d0:	0800ba09 	.word	0x0800ba09
 800e1d4:	0800df87 	.word	0x0800df87
 800e1d8:	0800e794 	.word	0x0800e794

0800e1dc <__swbuf_r>:
 800e1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1de:	460e      	mov	r6, r1
 800e1e0:	4614      	mov	r4, r2
 800e1e2:	4605      	mov	r5, r0
 800e1e4:	b118      	cbz	r0, 800e1ee <__swbuf_r+0x12>
 800e1e6:	6a03      	ldr	r3, [r0, #32]
 800e1e8:	b90b      	cbnz	r3, 800e1ee <__swbuf_r+0x12>
 800e1ea:	f7fe f84f 	bl	800c28c <__sinit>
 800e1ee:	69a3      	ldr	r3, [r4, #24]
 800e1f0:	60a3      	str	r3, [r4, #8]
 800e1f2:	89a3      	ldrh	r3, [r4, #12]
 800e1f4:	071a      	lsls	r2, r3, #28
 800e1f6:	d501      	bpl.n	800e1fc <__swbuf_r+0x20>
 800e1f8:	6923      	ldr	r3, [r4, #16]
 800e1fa:	b943      	cbnz	r3, 800e20e <__swbuf_r+0x32>
 800e1fc:	4621      	mov	r1, r4
 800e1fe:	4628      	mov	r0, r5
 800e200:	f000 f82a 	bl	800e258 <__swsetup_r>
 800e204:	b118      	cbz	r0, 800e20e <__swbuf_r+0x32>
 800e206:	f04f 37ff 	mov.w	r7, #4294967295
 800e20a:	4638      	mov	r0, r7
 800e20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e20e:	6823      	ldr	r3, [r4, #0]
 800e210:	6922      	ldr	r2, [r4, #16]
 800e212:	1a98      	subs	r0, r3, r2
 800e214:	6963      	ldr	r3, [r4, #20]
 800e216:	b2f6      	uxtb	r6, r6
 800e218:	4283      	cmp	r3, r0
 800e21a:	4637      	mov	r7, r6
 800e21c:	dc05      	bgt.n	800e22a <__swbuf_r+0x4e>
 800e21e:	4621      	mov	r1, r4
 800e220:	4628      	mov	r0, r5
 800e222:	f7ff fdbd 	bl	800dda0 <_fflush_r>
 800e226:	2800      	cmp	r0, #0
 800e228:	d1ed      	bne.n	800e206 <__swbuf_r+0x2a>
 800e22a:	68a3      	ldr	r3, [r4, #8]
 800e22c:	3b01      	subs	r3, #1
 800e22e:	60a3      	str	r3, [r4, #8]
 800e230:	6823      	ldr	r3, [r4, #0]
 800e232:	1c5a      	adds	r2, r3, #1
 800e234:	6022      	str	r2, [r4, #0]
 800e236:	701e      	strb	r6, [r3, #0]
 800e238:	6962      	ldr	r2, [r4, #20]
 800e23a:	1c43      	adds	r3, r0, #1
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d004      	beq.n	800e24a <__swbuf_r+0x6e>
 800e240:	89a3      	ldrh	r3, [r4, #12]
 800e242:	07db      	lsls	r3, r3, #31
 800e244:	d5e1      	bpl.n	800e20a <__swbuf_r+0x2e>
 800e246:	2e0a      	cmp	r6, #10
 800e248:	d1df      	bne.n	800e20a <__swbuf_r+0x2e>
 800e24a:	4621      	mov	r1, r4
 800e24c:	4628      	mov	r0, r5
 800e24e:	f7ff fda7 	bl	800dda0 <_fflush_r>
 800e252:	2800      	cmp	r0, #0
 800e254:	d0d9      	beq.n	800e20a <__swbuf_r+0x2e>
 800e256:	e7d6      	b.n	800e206 <__swbuf_r+0x2a>

0800e258 <__swsetup_r>:
 800e258:	b538      	push	{r3, r4, r5, lr}
 800e25a:	4b29      	ldr	r3, [pc, #164]	@ (800e300 <__swsetup_r+0xa8>)
 800e25c:	4605      	mov	r5, r0
 800e25e:	6818      	ldr	r0, [r3, #0]
 800e260:	460c      	mov	r4, r1
 800e262:	b118      	cbz	r0, 800e26c <__swsetup_r+0x14>
 800e264:	6a03      	ldr	r3, [r0, #32]
 800e266:	b90b      	cbnz	r3, 800e26c <__swsetup_r+0x14>
 800e268:	f7fe f810 	bl	800c28c <__sinit>
 800e26c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e270:	0719      	lsls	r1, r3, #28
 800e272:	d422      	bmi.n	800e2ba <__swsetup_r+0x62>
 800e274:	06da      	lsls	r2, r3, #27
 800e276:	d407      	bmi.n	800e288 <__swsetup_r+0x30>
 800e278:	2209      	movs	r2, #9
 800e27a:	602a      	str	r2, [r5, #0]
 800e27c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e280:	81a3      	strh	r3, [r4, #12]
 800e282:	f04f 30ff 	mov.w	r0, #4294967295
 800e286:	e033      	b.n	800e2f0 <__swsetup_r+0x98>
 800e288:	0758      	lsls	r0, r3, #29
 800e28a:	d512      	bpl.n	800e2b2 <__swsetup_r+0x5a>
 800e28c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e28e:	b141      	cbz	r1, 800e2a2 <__swsetup_r+0x4a>
 800e290:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e294:	4299      	cmp	r1, r3
 800e296:	d002      	beq.n	800e29e <__swsetup_r+0x46>
 800e298:	4628      	mov	r0, r5
 800e29a:	f7fe ffe1 	bl	800d260 <_free_r>
 800e29e:	2300      	movs	r3, #0
 800e2a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e2a2:	89a3      	ldrh	r3, [r4, #12]
 800e2a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e2a8:	81a3      	strh	r3, [r4, #12]
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	6063      	str	r3, [r4, #4]
 800e2ae:	6923      	ldr	r3, [r4, #16]
 800e2b0:	6023      	str	r3, [r4, #0]
 800e2b2:	89a3      	ldrh	r3, [r4, #12]
 800e2b4:	f043 0308 	orr.w	r3, r3, #8
 800e2b8:	81a3      	strh	r3, [r4, #12]
 800e2ba:	6923      	ldr	r3, [r4, #16]
 800e2bc:	b94b      	cbnz	r3, 800e2d2 <__swsetup_r+0x7a>
 800e2be:	89a3      	ldrh	r3, [r4, #12]
 800e2c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e2c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2c8:	d003      	beq.n	800e2d2 <__swsetup_r+0x7a>
 800e2ca:	4621      	mov	r1, r4
 800e2cc:	4628      	mov	r0, r5
 800e2ce:	f000 f83f 	bl	800e350 <__smakebuf_r>
 800e2d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2d6:	f013 0201 	ands.w	r2, r3, #1
 800e2da:	d00a      	beq.n	800e2f2 <__swsetup_r+0x9a>
 800e2dc:	2200      	movs	r2, #0
 800e2de:	60a2      	str	r2, [r4, #8]
 800e2e0:	6962      	ldr	r2, [r4, #20]
 800e2e2:	4252      	negs	r2, r2
 800e2e4:	61a2      	str	r2, [r4, #24]
 800e2e6:	6922      	ldr	r2, [r4, #16]
 800e2e8:	b942      	cbnz	r2, 800e2fc <__swsetup_r+0xa4>
 800e2ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e2ee:	d1c5      	bne.n	800e27c <__swsetup_r+0x24>
 800e2f0:	bd38      	pop	{r3, r4, r5, pc}
 800e2f2:	0799      	lsls	r1, r3, #30
 800e2f4:	bf58      	it	pl
 800e2f6:	6962      	ldrpl	r2, [r4, #20]
 800e2f8:	60a2      	str	r2, [r4, #8]
 800e2fa:	e7f4      	b.n	800e2e6 <__swsetup_r+0x8e>
 800e2fc:	2000      	movs	r0, #0
 800e2fe:	e7f7      	b.n	800e2f0 <__swsetup_r+0x98>
 800e300:	2000003c 	.word	0x2000003c

0800e304 <__swhatbuf_r>:
 800e304:	b570      	push	{r4, r5, r6, lr}
 800e306:	460c      	mov	r4, r1
 800e308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e30c:	2900      	cmp	r1, #0
 800e30e:	b096      	sub	sp, #88	@ 0x58
 800e310:	4615      	mov	r5, r2
 800e312:	461e      	mov	r6, r3
 800e314:	da0d      	bge.n	800e332 <__swhatbuf_r+0x2e>
 800e316:	89a3      	ldrh	r3, [r4, #12]
 800e318:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e31c:	f04f 0100 	mov.w	r1, #0
 800e320:	bf14      	ite	ne
 800e322:	2340      	movne	r3, #64	@ 0x40
 800e324:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e328:	2000      	movs	r0, #0
 800e32a:	6031      	str	r1, [r6, #0]
 800e32c:	602b      	str	r3, [r5, #0]
 800e32e:	b016      	add	sp, #88	@ 0x58
 800e330:	bd70      	pop	{r4, r5, r6, pc}
 800e332:	466a      	mov	r2, sp
 800e334:	f000 f848 	bl	800e3c8 <_fstat_r>
 800e338:	2800      	cmp	r0, #0
 800e33a:	dbec      	blt.n	800e316 <__swhatbuf_r+0x12>
 800e33c:	9901      	ldr	r1, [sp, #4]
 800e33e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e342:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e346:	4259      	negs	r1, r3
 800e348:	4159      	adcs	r1, r3
 800e34a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e34e:	e7eb      	b.n	800e328 <__swhatbuf_r+0x24>

0800e350 <__smakebuf_r>:
 800e350:	898b      	ldrh	r3, [r1, #12]
 800e352:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e354:	079d      	lsls	r5, r3, #30
 800e356:	4606      	mov	r6, r0
 800e358:	460c      	mov	r4, r1
 800e35a:	d507      	bpl.n	800e36c <__smakebuf_r+0x1c>
 800e35c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e360:	6023      	str	r3, [r4, #0]
 800e362:	6123      	str	r3, [r4, #16]
 800e364:	2301      	movs	r3, #1
 800e366:	6163      	str	r3, [r4, #20]
 800e368:	b003      	add	sp, #12
 800e36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e36c:	ab01      	add	r3, sp, #4
 800e36e:	466a      	mov	r2, sp
 800e370:	f7ff ffc8 	bl	800e304 <__swhatbuf_r>
 800e374:	9f00      	ldr	r7, [sp, #0]
 800e376:	4605      	mov	r5, r0
 800e378:	4639      	mov	r1, r7
 800e37a:	4630      	mov	r0, r6
 800e37c:	f7fd fa18 	bl	800b7b0 <_malloc_r>
 800e380:	b948      	cbnz	r0, 800e396 <__smakebuf_r+0x46>
 800e382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e386:	059a      	lsls	r2, r3, #22
 800e388:	d4ee      	bmi.n	800e368 <__smakebuf_r+0x18>
 800e38a:	f023 0303 	bic.w	r3, r3, #3
 800e38e:	f043 0302 	orr.w	r3, r3, #2
 800e392:	81a3      	strh	r3, [r4, #12]
 800e394:	e7e2      	b.n	800e35c <__smakebuf_r+0xc>
 800e396:	89a3      	ldrh	r3, [r4, #12]
 800e398:	6020      	str	r0, [r4, #0]
 800e39a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e39e:	81a3      	strh	r3, [r4, #12]
 800e3a0:	9b01      	ldr	r3, [sp, #4]
 800e3a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e3a6:	b15b      	cbz	r3, 800e3c0 <__smakebuf_r+0x70>
 800e3a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3ac:	4630      	mov	r0, r6
 800e3ae:	f000 f81d 	bl	800e3ec <_isatty_r>
 800e3b2:	b128      	cbz	r0, 800e3c0 <__smakebuf_r+0x70>
 800e3b4:	89a3      	ldrh	r3, [r4, #12]
 800e3b6:	f023 0303 	bic.w	r3, r3, #3
 800e3ba:	f043 0301 	orr.w	r3, r3, #1
 800e3be:	81a3      	strh	r3, [r4, #12]
 800e3c0:	89a3      	ldrh	r3, [r4, #12]
 800e3c2:	431d      	orrs	r5, r3
 800e3c4:	81a5      	strh	r5, [r4, #12]
 800e3c6:	e7cf      	b.n	800e368 <__smakebuf_r+0x18>

0800e3c8 <_fstat_r>:
 800e3c8:	b538      	push	{r3, r4, r5, lr}
 800e3ca:	4d07      	ldr	r5, [pc, #28]	@ (800e3e8 <_fstat_r+0x20>)
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	4604      	mov	r4, r0
 800e3d0:	4608      	mov	r0, r1
 800e3d2:	4611      	mov	r1, r2
 800e3d4:	602b      	str	r3, [r5, #0]
 800e3d6:	f7f4 fe37 	bl	8003048 <_fstat>
 800e3da:	1c43      	adds	r3, r0, #1
 800e3dc:	d102      	bne.n	800e3e4 <_fstat_r+0x1c>
 800e3de:	682b      	ldr	r3, [r5, #0]
 800e3e0:	b103      	cbz	r3, 800e3e4 <_fstat_r+0x1c>
 800e3e2:	6023      	str	r3, [r4, #0]
 800e3e4:	bd38      	pop	{r3, r4, r5, pc}
 800e3e6:	bf00      	nop
 800e3e8:	20000cb4 	.word	0x20000cb4

0800e3ec <_isatty_r>:
 800e3ec:	b538      	push	{r3, r4, r5, lr}
 800e3ee:	4d06      	ldr	r5, [pc, #24]	@ (800e408 <_isatty_r+0x1c>)
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	4604      	mov	r4, r0
 800e3f4:	4608      	mov	r0, r1
 800e3f6:	602b      	str	r3, [r5, #0]
 800e3f8:	f7f4 fe36 	bl	8003068 <_isatty>
 800e3fc:	1c43      	adds	r3, r0, #1
 800e3fe:	d102      	bne.n	800e406 <_isatty_r+0x1a>
 800e400:	682b      	ldr	r3, [r5, #0]
 800e402:	b103      	cbz	r3, 800e406 <_isatty_r+0x1a>
 800e404:	6023      	str	r3, [r4, #0]
 800e406:	bd38      	pop	{r3, r4, r5, pc}
 800e408:	20000cb4 	.word	0x20000cb4

0800e40c <_init>:
 800e40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e40e:	bf00      	nop
 800e410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e412:	bc08      	pop	{r3}
 800e414:	469e      	mov	lr, r3
 800e416:	4770      	bx	lr

0800e418 <_fini>:
 800e418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e41a:	bf00      	nop
 800e41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e41e:	bc08      	pop	{r3}
 800e420:	469e      	mov	lr, r3
 800e422:	4770      	bx	lr
