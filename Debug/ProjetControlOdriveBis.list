
ProjetControlOdriveBis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cce4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  0800ce78  0800ce78  0000de78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d20c  0800d20c  0000f1f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d20c  0800d20c  0000e20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d214  0800d214  0000f1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d214  0800d214  0000e214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d218  0800d218  0000e218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800d21c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1f4  2**0
                  CONTENTS
 10 .bss          00000ab0  200001f4  200001f4  0000f1f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ca4  20000ca4  0000f1f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001968f  00000000  00000000  0000f224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004008  00000000  00000000  000288b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b0  00000000  00000000  0002c8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fe9  00000000  00000000  0002dd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007ba7  00000000  00000000  0002ed59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c3a4  00000000  00000000  00036900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0658  00000000  00000000  00052ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001232fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006658  00000000  00000000  00123340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00129998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ce5c 	.word	0x0800ce5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800ce5c 	.word	0x0800ce5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed8:	f000 fdb2 	bl	8001a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000edc:	f000 f812 	bl	8000f04 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee0:	f000 f984 	bl	80011ec <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8000ee4:	f000 f882 	bl	8000fec <_ZL12MX_I2C1_Initv>
  MX_I2S3_Init();
 8000ee8:	f000 f8b4 	bl	8001054 <_ZL12MX_I2S3_Initv>
  MX_SPI1_Init();
 8000eec:	f000 f8e6 	bl	80010bc <_ZL12MX_SPI1_Initv>
  MX_USB_HOST_Init();
 8000ef0:	f009 f81e 	bl	8009f30 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000ef4:	f000 f91e 	bl	8001134 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 8000ef8:	f000 f94a 	bl	8001190 <_ZL19MX_USART3_UART_Initv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000efc:	f009 f83e 	bl	8009f7c <MX_USB_HOST_Process>
 8000f00:	e7fc      	b.n	8000efc <main+0x28>
	...

08000f04 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b094      	sub	sp, #80	@ 0x50
 8000f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0a:	f107 0320 	add.w	r3, r7, #32
 8000f0e:	2230      	movs	r2, #48	@ 0x30
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f00a f937 	bl	800b186 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe4 <_Z18SystemClock_Configv+0xe0>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f30:	4a2c      	ldr	r2, [pc, #176]	@ (8000fe4 <_Z18SystemClock_Configv+0xe0>)
 8000f32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f38:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe4 <_Z18SystemClock_Configv+0xe0>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	4b27      	ldr	r3, [pc, #156]	@ (8000fe8 <_Z18SystemClock_Configv+0xe4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a26      	ldr	r2, [pc, #152]	@ (8000fe8 <_Z18SystemClock_Configv+0xe4>)
 8000f4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b24      	ldr	r3, [pc, #144]	@ (8000fe8 <_Z18SystemClock_Configv+0xe4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f60:	2301      	movs	r3, #1
 8000f62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f74:	2308      	movs	r3, #8
 8000f76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f78:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f7c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f82:	2307      	movs	r3, #7
 8000f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f86:	f107 0320 	add.w	r3, r7, #32
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f004 f860 	bl	8005050 <HAL_RCC_OscConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	bf14      	ite	ne
 8000f96:	2301      	movne	r3, #1
 8000f98:	2300      	moveq	r3, #0
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8000fa0:	f000 fa22 	bl	80013e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fb0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2105      	movs	r1, #5
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f004 fabc 	bl	8005540 <HAL_RCC_ClockConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	bf14      	ite	ne
 8000fce:	2301      	movne	r3, #1
 8000fd0:	2300      	moveq	r3, #0
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000fd8:	f000 fa06 	bl	80013e8 <Error_Handler>
  }
}
 8000fdc:	bf00      	nop
 8000fde:	3750      	adds	r7, #80	@ 0x50
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40007000 	.word	0x40007000

08000fec <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ff2:	4a16      	ldr	r2, [pc, #88]	@ (800104c <_ZL12MX_I2C1_Initv+0x60>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ff8:	4a15      	ldr	r2, [pc, #84]	@ (8001050 <_ZL12MX_I2C1_Initv+0x64>)
 8000ffa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001002:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001008:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 800100a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800100e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001010:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001016:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800101c:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001028:	4807      	ldr	r0, [pc, #28]	@ (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 800102a:	f003 fa2d 	bl	8004488 <HAL_I2C_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	bf14      	ite	ne
 8001034:	2301      	movne	r3, #1
 8001036:	2300      	moveq	r3, #0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800103e:	f000 f9d3 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000210 	.word	0x20000210
 800104c:	40005400 	.word	0x40005400
 8001050:	000186a0 	.word	0x000186a0

08001054 <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001058:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <_ZL12MX_I2S3_Initv+0x5c>)
 800105a:	4a16      	ldr	r2, [pc, #88]	@ (80010b4 <_ZL12MX_I2S3_Initv+0x60>)
 800105c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800105e:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <_ZL12MX_I2S3_Initv+0x5c>)
 8001060:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001064:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001066:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <_ZL12MX_I2S3_Initv+0x5c>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800106c:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <_ZL12MX_I2S3_Initv+0x5c>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001072:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <_ZL12MX_I2S3_Initv+0x5c>)
 8001074:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001078:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800107a:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <_ZL12MX_I2S3_Initv+0x5c>)
 800107c:	4a0e      	ldr	r2, [pc, #56]	@ (80010b8 <_ZL12MX_I2S3_Initv+0x64>)
 800107e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001080:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <_ZL12MX_I2S3_Initv+0x5c>)
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001086:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <_ZL12MX_I2S3_Initv+0x5c>)
 8001088:	2200      	movs	r2, #0
 800108a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800108c:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <_ZL12MX_I2S3_Initv+0x5c>)
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001092:	4807      	ldr	r0, [pc, #28]	@ (80010b0 <_ZL12MX_I2S3_Initv+0x5c>)
 8001094:	f003 fb3c 	bl	8004710 <HAL_I2S_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	bf14      	ite	ne
 800109e:	2301      	movne	r3, #1
 80010a0:	2300      	moveq	r3, #0
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <_ZL12MX_I2S3_Initv+0x58>
  {
    Error_Handler();
 80010a8:	f000 f99e 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000264 	.word	0x20000264
 80010b4:	40003c00 	.word	0x40003c00
 80010b8:	00017700 	.word	0x00017700

080010bc <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	@ (800112c <_ZL12MX_SPI1_Initv+0x70>)
 80010c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001130 <_ZL12MX_SPI1_Initv+0x74>)
 80010c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010c6:	4b19      	ldr	r3, [pc, #100]	@ (800112c <_ZL12MX_SPI1_Initv+0x70>)
 80010c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ce:	4b17      	ldr	r3, [pc, #92]	@ (800112c <_ZL12MX_SPI1_Initv+0x70>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010d4:	4b15      	ldr	r3, [pc, #84]	@ (800112c <_ZL12MX_SPI1_Initv+0x70>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010da:	4b14      	ldr	r3, [pc, #80]	@ (800112c <_ZL12MX_SPI1_Initv+0x70>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <_ZL12MX_SPI1_Initv+0x70>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <_ZL12MX_SPI1_Initv+0x70>)
 80010e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010ee:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <_ZL12MX_SPI1_Initv+0x70>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f4:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <_ZL12MX_SPI1_Initv+0x70>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010fa:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <_ZL12MX_SPI1_Initv+0x70>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001100:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <_ZL12MX_SPI1_Initv+0x70>)
 8001102:	2200      	movs	r2, #0
 8001104:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001106:	4b09      	ldr	r3, [pc, #36]	@ (800112c <_ZL12MX_SPI1_Initv+0x70>)
 8001108:	220a      	movs	r2, #10
 800110a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800110c:	4807      	ldr	r0, [pc, #28]	@ (800112c <_ZL12MX_SPI1_Initv+0x70>)
 800110e:	f004 fd79 	bl	8005c04 <HAL_SPI_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	bf14      	ite	ne
 8001118:	2301      	movne	r3, #1
 800111a:	2300      	moveq	r3, #0
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8001122:	f000 f961 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200002ac 	.word	0x200002ac
 8001130:	40013000 	.word	0x40013000

08001134 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <_ZL19MX_USART2_UART_Initv+0x54>)
 800113a:	4a14      	ldr	r2, [pc, #80]	@ (800118c <_ZL19MX_USART2_UART_Initv+0x58>)
 800113c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800113e:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001140:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001144:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800114c:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <_ZL19MX_USART2_UART_Initv+0x54>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001152:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001158:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <_ZL19MX_USART2_UART_Initv+0x54>)
 800115a:	220c      	movs	r2, #12
 800115c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800116a:	4807      	ldr	r0, [pc, #28]	@ (8001188 <_ZL19MX_USART2_UART_Initv+0x54>)
 800116c:	f004 fdd3 	bl	8005d16 <HAL_UART_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	bf14      	ite	ne
 8001176:	2301      	movne	r3, #1
 8001178:	2300      	moveq	r3, #0
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001180:	f000 f932 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000304 	.word	0x20000304
 800118c:	40004400 	.word	0x40004400

08001190 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001194:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001196:	4a14      	ldr	r2, [pc, #80]	@ (80011e8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001198:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800119a:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <_ZL19MX_USART3_UART_Initv+0x54>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011c6:	4807      	ldr	r0, [pc, #28]	@ (80011e4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80011c8:	f004 fda5 	bl	8005d16 <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	bf14      	ite	ne
 80011d2:	2301      	movne	r3, #1
 80011d4:	2300      	moveq	r3, #0
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80011dc:	f000 f904 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	2000034c 	.word	0x2000034c
 80011e8:	40004800 	.word	0x40004800

080011ec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	@ 0x30
 80011f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	4b72      	ldr	r3, [pc, #456]	@ (80013d0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a71      	ldr	r2, [pc, #452]	@ (80013d0 <_ZL12MX_GPIO_Initv+0x1e4>)
 800120c:	f043 0310 	orr.w	r3, r3, #16
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b6f      	ldr	r3, [pc, #444]	@ (80013d0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	4b6b      	ldr	r3, [pc, #428]	@ (80013d0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a6a      	ldr	r2, [pc, #424]	@ (80013d0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b68      	ldr	r3, [pc, #416]	@ (80013d0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b64      	ldr	r3, [pc, #400]	@ (80013d0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a63      	ldr	r2, [pc, #396]	@ (80013d0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b61      	ldr	r3, [pc, #388]	@ (80013d0 <_ZL12MX_GPIO_Initv+0x1e4>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b5d      	ldr	r3, [pc, #372]	@ (80013d0 <_ZL12MX_GPIO_Initv+0x1e4>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a5c      	ldr	r2, [pc, #368]	@ (80013d0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b5a      	ldr	r3, [pc, #360]	@ (80013d0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b56      	ldr	r3, [pc, #344]	@ (80013d0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a55      	ldr	r2, [pc, #340]	@ (80013d0 <_ZL12MX_GPIO_Initv+0x1e4>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b53      	ldr	r3, [pc, #332]	@ (80013d0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b4f      	ldr	r3, [pc, #316]	@ (80013d0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a4e      	ldr	r2, [pc, #312]	@ (80013d0 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b4c      	ldr	r3, [pc, #304]	@ (80013d0 <_ZL12MX_GPIO_Initv+0x1e4>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2108      	movs	r1, #8
 80012ae:	4849      	ldr	r0, [pc, #292]	@ (80013d4 <_ZL12MX_GPIO_Initv+0x1e8>)
 80012b0:	f000 ff9c 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80012b4:	2201      	movs	r2, #1
 80012b6:	2101      	movs	r1, #1
 80012b8:	4847      	ldr	r0, [pc, #284]	@ (80013d8 <_ZL12MX_GPIO_Initv+0x1ec>)
 80012ba:	f000 ff97 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012be:	2200      	movs	r2, #0
 80012c0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80012c4:	4845      	ldr	r0, [pc, #276]	@ (80013dc <_ZL12MX_GPIO_Initv+0x1f0>)
 80012c6:	f000 ff91 	bl	80021ec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80012ca:	2308      	movs	r3, #8
 80012cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	4619      	mov	r1, r3
 80012e0:	483c      	ldr	r0, [pc, #240]	@ (80013d4 <_ZL12MX_GPIO_Initv+0x1e8>)
 80012e2:	f000 fde7 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012e6:	2301      	movs	r3, #1
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4619      	mov	r1, r3
 80012fc:	4836      	ldr	r0, [pc, #216]	@ (80013d8 <_ZL12MX_GPIO_Initv+0x1ec>)
 80012fe:	f000 fdd9 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001302:	2308      	movs	r3, #8
 8001304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001312:	2305      	movs	r3, #5
 8001314:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	482e      	ldr	r0, [pc, #184]	@ (80013d8 <_ZL12MX_GPIO_Initv+0x1ec>)
 800131e:	f000 fdc9 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001322:	2301      	movs	r3, #1
 8001324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001326:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800132a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	482a      	ldr	r0, [pc, #168]	@ (80013e0 <_ZL12MX_GPIO_Initv+0x1f4>)
 8001338:	f000 fdbc 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800133c:	2304      	movs	r3, #4
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	4825      	ldr	r0, [pc, #148]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001350:	f000 fdb0 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001354:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001366:	2305      	movs	r3, #5
 8001368:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	481c      	ldr	r0, [pc, #112]	@ (80013e4 <_ZL12MX_GPIO_Initv+0x1f8>)
 8001372:	f000 fd9f 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001376:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800137a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	4619      	mov	r1, r3
 800138e:	4813      	ldr	r0, [pc, #76]	@ (80013dc <_ZL12MX_GPIO_Initv+0x1f0>)
 8001390:	f000 fd90 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001394:	2320      	movs	r3, #32
 8001396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	4619      	mov	r1, r3
 80013a6:	480d      	ldr	r0, [pc, #52]	@ (80013dc <_ZL12MX_GPIO_Initv+0x1f0>)
 80013a8:	f000 fd84 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013b0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80013b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4619      	mov	r1, r3
 80013c0:	4804      	ldr	r0, [pc, #16]	@ (80013d4 <_ZL12MX_GPIO_Initv+0x1e8>)
 80013c2:	f000 fd77 	bl	8001eb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013c6:	bf00      	nop
 80013c8:	3730      	adds	r7, #48	@ 0x30
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40020800 	.word	0x40020800
 80013dc:	40020c00 	.word	0x40020c00
 80013e0:	40020000 	.word	0x40020000
 80013e4:	40020400 	.word	0x40020400

080013e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ec:	b672      	cpsid	i
}
 80013ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <Error_Handler+0x8>

080013f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <HAL_MspInit+0x4c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001402:	4a0f      	ldr	r2, [pc, #60]	@ (8001440 <HAL_MspInit+0x4c>)
 8001404:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001408:	6453      	str	r3, [r2, #68]	@ 0x44
 800140a:	4b0d      	ldr	r3, [pc, #52]	@ (8001440 <HAL_MspInit+0x4c>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <HAL_MspInit+0x4c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	4a08      	ldr	r2, [pc, #32]	@ (8001440 <HAL_MspInit+0x4c>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001424:	6413      	str	r3, [r2, #64]	@ 0x40
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_MspInit+0x4c>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001432:	2007      	movs	r0, #7
 8001434:	f000 fc6a 	bl	8001d0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40023800 	.word	0x40023800

08001444 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	@ 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a19      	ldr	r2, [pc, #100]	@ (80014c8 <HAL_I2C_MspInit+0x84>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d12c      	bne.n	80014c0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a17      	ldr	r2, [pc, #92]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001482:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001488:	2312      	movs	r3, #18
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148c:	2301      	movs	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001494:	2304      	movs	r3, #4
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	480c      	ldr	r0, [pc, #48]	@ (80014d0 <HAL_I2C_MspInit+0x8c>)
 80014a0:	f000 fd08 	bl	8001eb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ac:	4a07      	ldr	r2, [pc, #28]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 80014ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b4:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <HAL_I2C_MspInit+0x88>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014c0:	bf00      	nop
 80014c2:	3728      	adds	r7, #40	@ 0x28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40005400 	.word	0x40005400
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020400 	.word	0x40020400

080014d4 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08e      	sub	sp, #56	@ 0x38
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a31      	ldr	r2, [pc, #196]	@ (80015c4 <HAL_I2S_MspInit+0xf0>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d15a      	bne.n	80015ba <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001504:	2301      	movs	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001508:	23c0      	movs	r3, #192	@ 0xc0
 800150a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800150c:	2302      	movs	r3, #2
 800150e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4618      	mov	r0, r3
 8001516:	f004 fa33 	bl	8005980 <HAL_RCCEx_PeriphCLKConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001520:	f7ff ff62 	bl	80013e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	4b27      	ldr	r3, [pc, #156]	@ (80015c8 <HAL_I2S_MspInit+0xf4>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152c:	4a26      	ldr	r2, [pc, #152]	@ (80015c8 <HAL_I2S_MspInit+0xf4>)
 800152e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001532:	6413      	str	r3, [r2, #64]	@ 0x40
 8001534:	4b24      	ldr	r3, [pc, #144]	@ (80015c8 <HAL_I2S_MspInit+0xf4>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	4b20      	ldr	r3, [pc, #128]	@ (80015c8 <HAL_I2S_MspInit+0xf4>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001548:	4a1f      	ldr	r2, [pc, #124]	@ (80015c8 <HAL_I2S_MspInit+0xf4>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001550:	4b1d      	ldr	r3, [pc, #116]	@ (80015c8 <HAL_I2S_MspInit+0xf4>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	4b19      	ldr	r3, [pc, #100]	@ (80015c8 <HAL_I2S_MspInit+0xf4>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001564:	4a18      	ldr	r2, [pc, #96]	@ (80015c8 <HAL_I2S_MspInit+0xf4>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	6313      	str	r3, [r2, #48]	@ 0x30
 800156c:	4b16      	ldr	r3, [pc, #88]	@ (80015c8 <HAL_I2S_MspInit+0xf4>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001578:	2310      	movs	r3, #16
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001588:	2306      	movs	r3, #6
 800158a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001590:	4619      	mov	r1, r3
 8001592:	480e      	ldr	r0, [pc, #56]	@ (80015cc <HAL_I2S_MspInit+0xf8>)
 8001594:	f000 fc8e 	bl	8001eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001598:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015aa:	2306      	movs	r3, #6
 80015ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b2:	4619      	mov	r1, r3
 80015b4:	4806      	ldr	r0, [pc, #24]	@ (80015d0 <HAL_I2S_MspInit+0xfc>)
 80015b6:	f000 fc7d 	bl	8001eb4 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80015ba:	bf00      	nop
 80015bc:	3738      	adds	r7, #56	@ 0x38
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40003c00 	.word	0x40003c00
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020000 	.word	0x40020000
 80015d0:	40020800 	.word	0x40020800

080015d4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	@ 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a19      	ldr	r2, [pc, #100]	@ (8001658 <HAL_SPI_MspInit+0x84>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d12b      	bne.n	800164e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b18      	ldr	r3, [pc, #96]	@ (800165c <HAL_SPI_MspInit+0x88>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	4a17      	ldr	r2, [pc, #92]	@ (800165c <HAL_SPI_MspInit+0x88>)
 8001600:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001604:	6453      	str	r3, [r2, #68]	@ 0x44
 8001606:	4b15      	ldr	r3, [pc, #84]	@ (800165c <HAL_SPI_MspInit+0x88>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b11      	ldr	r3, [pc, #68]	@ (800165c <HAL_SPI_MspInit+0x88>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a10      	ldr	r2, [pc, #64]	@ (800165c <HAL_SPI_MspInit+0x88>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <HAL_SPI_MspInit+0x88>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800162e:	23e0      	movs	r3, #224	@ 0xe0
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800163e:	2305      	movs	r3, #5
 8001640:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	@ (8001660 <HAL_SPI_MspInit+0x8c>)
 800164a:	f000 fc33 	bl	8001eb4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800164e:	bf00      	nop
 8001650:	3728      	adds	r7, #40	@ 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40013000 	.word	0x40013000
 800165c:	40023800 	.word	0x40023800
 8001660:	40020000 	.word	0x40020000

08001664 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08c      	sub	sp, #48	@ 0x30
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a46      	ldr	r2, [pc, #280]	@ (800179c <HAL_UART_MspInit+0x138>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d12c      	bne.n	80016e0 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	4b45      	ldr	r3, [pc, #276]	@ (80017a0 <HAL_UART_MspInit+0x13c>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168e:	4a44      	ldr	r2, [pc, #272]	@ (80017a0 <HAL_UART_MspInit+0x13c>)
 8001690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001694:	6413      	str	r3, [r2, #64]	@ 0x40
 8001696:	4b42      	ldr	r3, [pc, #264]	@ (80017a0 <HAL_UART_MspInit+0x13c>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169e:	61bb      	str	r3, [r7, #24]
 80016a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	4b3e      	ldr	r3, [pc, #248]	@ (80017a0 <HAL_UART_MspInit+0x13c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a3d      	ldr	r2, [pc, #244]	@ (80017a0 <HAL_UART_MspInit+0x13c>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b3b      	ldr	r3, [pc, #236]	@ (80017a0 <HAL_UART_MspInit+0x13c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = Ecran_TX_Pin|Ecran_RX_Pin;
 80016be:	230c      	movs	r3, #12
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ce:	2307      	movs	r3, #7
 80016d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	4832      	ldr	r0, [pc, #200]	@ (80017a4 <HAL_UART_MspInit+0x140>)
 80016da:	f000 fbeb 	bl	8001eb4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80016de:	e058      	b.n	8001792 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a30      	ldr	r2, [pc, #192]	@ (80017a8 <HAL_UART_MspInit+0x144>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d153      	bne.n	8001792 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b2c      	ldr	r3, [pc, #176]	@ (80017a0 <HAL_UART_MspInit+0x13c>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	4a2b      	ldr	r2, [pc, #172]	@ (80017a0 <HAL_UART_MspInit+0x13c>)
 80016f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fa:	4b29      	ldr	r3, [pc, #164]	@ (80017a0 <HAL_UART_MspInit+0x13c>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b25      	ldr	r3, [pc, #148]	@ (80017a0 <HAL_UART_MspInit+0x13c>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	4a24      	ldr	r2, [pc, #144]	@ (80017a0 <HAL_UART_MspInit+0x13c>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6313      	str	r3, [r2, #48]	@ 0x30
 8001716:	4b22      	ldr	r3, [pc, #136]	@ (80017a0 <HAL_UART_MspInit+0x13c>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	4b1e      	ldr	r3, [pc, #120]	@ (80017a0 <HAL_UART_MspInit+0x13c>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	4a1d      	ldr	r2, [pc, #116]	@ (80017a0 <HAL_UART_MspInit+0x13c>)
 800172c:	f043 0308 	orr.w	r3, r3, #8
 8001730:	6313      	str	r3, [r2, #48]	@ 0x30
 8001732:	4b1b      	ldr	r3, [pc, #108]	@ (80017a0 <HAL_UART_MspInit+0x13c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Cntroller_RX_Pin;
 800173e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001750:	2307      	movs	r3, #7
 8001752:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Cntroller_RX_GPIO_Port, &GPIO_InitStruct);
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	4619      	mov	r1, r3
 800175a:	4814      	ldr	r0, [pc, #80]	@ (80017ac <HAL_UART_MspInit+0x148>)
 800175c:	f000 fbaa 	bl	8001eb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Controller_TX_Pin;
 8001760:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176e:	2303      	movs	r3, #3
 8001770:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001772:	2307      	movs	r3, #7
 8001774:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Controller_TX_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 031c 	add.w	r3, r7, #28
 800177a:	4619      	mov	r1, r3
 800177c:	480c      	ldr	r0, [pc, #48]	@ (80017b0 <HAL_UART_MspInit+0x14c>)
 800177e:	f000 fb99 	bl	8001eb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	2027      	movs	r0, #39	@ 0x27
 8001788:	f000 facb 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800178c:	2027      	movs	r0, #39	@ 0x27
 800178e:	f000 fae4 	bl	8001d5a <HAL_NVIC_EnableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3730      	adds	r7, #48	@ 0x30
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40004400 	.word	0x40004400
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40004800 	.word	0x40004800
 80017ac:	40020400 	.word	0x40020400
 80017b0:	40020c00 	.word	0x40020c00

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <NMI_Handler+0x4>

080017bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <HardFault_Handler+0x4>

080017c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <MemManage_Handler+0x4>

080017cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <BusFault_Handler+0x4>

080017d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <UsageFault_Handler+0x4>

080017dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180a:	f000 f96b 	bl	8001ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001818:	4802      	ldr	r0, [pc, #8]	@ (8001824 <USART3_IRQHandler+0x10>)
 800181a:	f004 facd 	bl	8005db8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2000034c 	.word	0x2000034c

08001828 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800182c:	4802      	ldr	r0, [pc, #8]	@ (8001838 <OTG_FS_IRQHandler+0x10>)
 800182e:	f000 ffd7 	bl	80027e0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000778 	.word	0x20000778

0800183c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return 1;
 8001840:	2301      	movs	r3, #1
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <_kill>:

int _kill(int pid, int sig)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001856:	f009 fd3d 	bl	800b2d4 <__errno>
 800185a:	4603      	mov	r3, r0
 800185c:	2216      	movs	r2, #22
 800185e:	601a      	str	r2, [r3, #0]
  return -1;
 8001860:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <_exit>:

void _exit (int status)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001874:	f04f 31ff 	mov.w	r1, #4294967295
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ffe7 	bl	800184c <_kill>
  while (1) {}    /* Make sure we hang here */
 800187e:	bf00      	nop
 8001880:	e7fd      	b.n	800187e <_exit+0x12>

08001882 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	e00a      	b.n	80018aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001894:	f3af 8000 	nop.w
 8001898:	4601      	mov	r1, r0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	60ba      	str	r2, [r7, #8]
 80018a0:	b2ca      	uxtb	r2, r1
 80018a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	3301      	adds	r3, #1
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	dbf0      	blt.n	8001894 <_read+0x12>
  }

  return len;
 80018b2:	687b      	ldr	r3, [r7, #4]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	e009      	b.n	80018e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	1c5a      	adds	r2, r3, #1
 80018d2:	60ba      	str	r2, [r7, #8]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	3301      	adds	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	dbf1      	blt.n	80018ce <_write+0x12>
  }
  return len;
 80018ea:	687b      	ldr	r3, [r7, #4]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_close>:

int _close(int file)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800191c:	605a      	str	r2, [r3, #4]
  return 0;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_isatty>:

int _isatty(int file)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001934:	2301      	movs	r3, #1
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001942:	b480      	push	{r7}
 8001944:	b085      	sub	sp, #20
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001964:	4a14      	ldr	r2, [pc, #80]	@ (80019b8 <_sbrk+0x5c>)
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <_sbrk+0x60>)
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001970:	4b13      	ldr	r3, [pc, #76]	@ (80019c0 <_sbrk+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d102      	bne.n	800197e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001978:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <_sbrk+0x64>)
 800197a:	4a12      	ldr	r2, [pc, #72]	@ (80019c4 <_sbrk+0x68>)
 800197c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197e:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <_sbrk+0x64>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	429a      	cmp	r2, r3
 800198a:	d207      	bcs.n	800199c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800198c:	f009 fca2 	bl	800b2d4 <__errno>
 8001990:	4603      	mov	r3, r0
 8001992:	220c      	movs	r2, #12
 8001994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
 800199a:	e009      	b.n	80019b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800199c:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019a2:	4b07      	ldr	r3, [pc, #28]	@ (80019c0 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	4a05      	ldr	r2, [pc, #20]	@ (80019c0 <_sbrk+0x64>)
 80019ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ae:	68fb      	ldr	r3, [r7, #12]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20020000 	.word	0x20020000
 80019bc:	00000400 	.word	0x00000400
 80019c0:	20000394 	.word	0x20000394
 80019c4:	20000ca8 	.word	0x20000ca8

080019c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019cc:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <SystemInit+0x20>)
 80019ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019d2:	4a05      	ldr	r2, [pc, #20]	@ (80019e8 <SystemInit+0x20>)
 80019d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a24 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019f0:	f7ff ffea 	bl	80019c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019f4:	480c      	ldr	r0, [pc, #48]	@ (8001a28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019f6:	490d      	ldr	r1, [pc, #52]	@ (8001a2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019fc:	e002      	b.n	8001a04 <LoopCopyDataInit>

080019fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a02:	3304      	adds	r3, #4

08001a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a08:	d3f9      	bcc.n	80019fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a10:	e001      	b.n	8001a16 <LoopFillZerobss>

08001a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a14:	3204      	adds	r2, #4

08001a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a18:	d3fb      	bcc.n	8001a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a1a:	f009 fc61 	bl	800b2e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a1e:	f7ff fa59 	bl	8000ed4 <main>
  bx  lr    
 8001a22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a2c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001a30:	0800d21c 	.word	0x0800d21c
  ldr r2, =_sbss
 8001a34:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001a38:	20000ca4 	.word	0x20000ca4

08001a3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a3c:	e7fe      	b.n	8001a3c <ADC_IRQHandler>
	...

08001a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a44:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <HAL_Init+0x40>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0d      	ldr	r2, [pc, #52]	@ (8001a80 <HAL_Init+0x40>)
 8001a4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a50:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <HAL_Init+0x40>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0a      	ldr	r2, [pc, #40]	@ (8001a80 <HAL_Init+0x40>)
 8001a56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a5c:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <HAL_Init+0x40>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a07      	ldr	r2, [pc, #28]	@ (8001a80 <HAL_Init+0x40>)
 8001a62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a68:	2003      	movs	r0, #3
 8001a6a:	f000 f94f 	bl	8001d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f000 f808 	bl	8001a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a74:	f7ff fcbe 	bl	80013f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023c00 	.word	0x40023c00

08001a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a8c:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <HAL_InitTick+0x54>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <HAL_InitTick+0x58>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f967 	bl	8001d76 <HAL_SYSTICK_Config>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00e      	b.n	8001ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b0f      	cmp	r3, #15
 8001ab6:	d80a      	bhi.n	8001ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f000 f92f 	bl	8001d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac4:	4a06      	ldr	r2, [pc, #24]	@ (8001ae0 <HAL_InitTick+0x5c>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e000      	b.n	8001ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	20000004 	.word	0x20000004

08001ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <HAL_IncTick+0x20>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <HAL_IncTick+0x24>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	4a04      	ldr	r2, [pc, #16]	@ (8001b08 <HAL_IncTick+0x24>)
 8001af6:	6013      	str	r3, [r2, #0]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000008 	.word	0x20000008
 8001b08:	20000398 	.word	0x20000398

08001b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b10:	4b03      	ldr	r3, [pc, #12]	@ (8001b20 <HAL_GetTick+0x14>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000398 	.word	0x20000398

08001b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff ffee 	bl	8001b0c <HAL_GetTick>
 8001b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d005      	beq.n	8001b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b68 <HAL_Delay+0x44>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b4a:	bf00      	nop
 8001b4c:	f7ff ffde 	bl	8001b0c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d8f7      	bhi.n	8001b4c <HAL_Delay+0x28>
  {
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000008 	.word	0x20000008

08001b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9e:	4a04      	ldr	r2, [pc, #16]	@ (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	60d3      	str	r3, [r2, #12]
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb8:	4b04      	ldr	r3, [pc, #16]	@ (8001bcc <__NVIC_GetPriorityGrouping+0x18>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	0a1b      	lsrs	r3, r3, #8
 8001bbe:	f003 0307 	and.w	r3, r3, #7
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	db0b      	blt.n	8001bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	f003 021f 	and.w	r2, r3, #31
 8001be8:	4907      	ldr	r1, [pc, #28]	@ (8001c08 <__NVIC_EnableIRQ+0x38>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	095b      	lsrs	r3, r3, #5
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000e100 	.word	0xe000e100

08001c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	db0a      	blt.n	8001c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	490c      	ldr	r1, [pc, #48]	@ (8001c58 <__NVIC_SetPriority+0x4c>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	0112      	lsls	r2, r2, #4
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	440b      	add	r3, r1
 8001c30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c34:	e00a      	b.n	8001c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4908      	ldr	r1, [pc, #32]	@ (8001c5c <__NVIC_SetPriority+0x50>)
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	3b04      	subs	r3, #4
 8001c44:	0112      	lsls	r2, r2, #4
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	440b      	add	r3, r1
 8001c4a:	761a      	strb	r2, [r3, #24]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000e100 	.word	0xe000e100
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	@ 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f1c3 0307 	rsb	r3, r3, #7
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	bf28      	it	cs
 8001c7e:	2304      	movcs	r3, #4
 8001c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3304      	adds	r3, #4
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d902      	bls.n	8001c90 <NVIC_EncodePriority+0x30>
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3b03      	subs	r3, #3
 8001c8e:	e000      	b.n	8001c92 <NVIC_EncodePriority+0x32>
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	f04f 32ff 	mov.w	r2, #4294967295
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43da      	mvns	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	43d9      	mvns	r1, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	4313      	orrs	r3, r2
         );
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	@ 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cd8:	d301      	bcc.n	8001cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00f      	b.n	8001cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cde:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <SysTick_Config+0x40>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f7ff ff8e 	bl	8001c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <SysTick_Config+0x40>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf6:	4b04      	ldr	r3, [pc, #16]	@ (8001d08 <SysTick_Config+0x40>)
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	e000e010 	.word	0xe000e010

08001d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff29 	bl	8001b6c <__NVIC_SetPriorityGrouping>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d34:	f7ff ff3e 	bl	8001bb4 <__NVIC_GetPriorityGrouping>
 8001d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f7ff ff8e 	bl	8001c60 <NVIC_EncodePriority>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff5d 	bl	8001c0c <__NVIC_SetPriority>
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff31 	bl	8001bd0 <__NVIC_EnableIRQ>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffa2 	bl	8001cc8 <SysTick_Config>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d9c:	f7ff feb6 	bl	8001b0c <HAL_GetTick>
 8001da0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d008      	beq.n	8001dc0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2280      	movs	r2, #128	@ 0x80
 8001db2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e052      	b.n	8001e66 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0216 	bic.w	r2, r2, #22
 8001dce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dde:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d103      	bne.n	8001df0 <HAL_DMA_Abort+0x62>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d007      	beq.n	8001e00 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0208 	bic.w	r2, r2, #8
 8001dfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0201 	bic.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e10:	e013      	b.n	8001e3a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e12:	f7ff fe7b 	bl	8001b0c <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b05      	cmp	r3, #5
 8001e1e:	d90c      	bls.n	8001e3a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2220      	movs	r2, #32
 8001e24:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2203      	movs	r2, #3
 8001e2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e015      	b.n	8001e66 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1e4      	bne.n	8001e12 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e4c:	223f      	movs	r2, #63	@ 0x3f
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d004      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2280      	movs	r2, #128	@ 0x80
 8001e86:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e00c      	b.n	8001ea6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2205      	movs	r2, #5
 8001e90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0201 	bic.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	@ 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
 8001ece:	e16b      	b.n	80021a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	f040 815a 	bne.w	80021a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d005      	beq.n	8001f06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d130      	bne.n	8001f68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	2203      	movs	r2, #3
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 0201 	and.w	r2, r3, #1
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d017      	beq.n	8001fa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	2203      	movs	r2, #3
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d123      	bne.n	8001ff8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	08da      	lsrs	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3208      	adds	r2, #8
 8001fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	69b9      	ldr	r1, [r7, #24]
 8001ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	2203      	movs	r2, #3
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0203 	and.w	r2, r3, #3
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80b4 	beq.w	80021a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	4b60      	ldr	r3, [pc, #384]	@ (80021c0 <HAL_GPIO_Init+0x30c>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002042:	4a5f      	ldr	r2, [pc, #380]	@ (80021c0 <HAL_GPIO_Init+0x30c>)
 8002044:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002048:	6453      	str	r3, [r2, #68]	@ 0x44
 800204a:	4b5d      	ldr	r3, [pc, #372]	@ (80021c0 <HAL_GPIO_Init+0x30c>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002056:	4a5b      	ldr	r2, [pc, #364]	@ (80021c4 <HAL_GPIO_Init+0x310>)
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	089b      	lsrs	r3, r3, #2
 800205c:	3302      	adds	r3, #2
 800205e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	220f      	movs	r2, #15
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a52      	ldr	r2, [pc, #328]	@ (80021c8 <HAL_GPIO_Init+0x314>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d02b      	beq.n	80020da <HAL_GPIO_Init+0x226>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a51      	ldr	r2, [pc, #324]	@ (80021cc <HAL_GPIO_Init+0x318>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d025      	beq.n	80020d6 <HAL_GPIO_Init+0x222>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a50      	ldr	r2, [pc, #320]	@ (80021d0 <HAL_GPIO_Init+0x31c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01f      	beq.n	80020d2 <HAL_GPIO_Init+0x21e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4f      	ldr	r2, [pc, #316]	@ (80021d4 <HAL_GPIO_Init+0x320>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d019      	beq.n	80020ce <HAL_GPIO_Init+0x21a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4e      	ldr	r2, [pc, #312]	@ (80021d8 <HAL_GPIO_Init+0x324>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d013      	beq.n	80020ca <HAL_GPIO_Init+0x216>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4d      	ldr	r2, [pc, #308]	@ (80021dc <HAL_GPIO_Init+0x328>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00d      	beq.n	80020c6 <HAL_GPIO_Init+0x212>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4c      	ldr	r2, [pc, #304]	@ (80021e0 <HAL_GPIO_Init+0x32c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d007      	beq.n	80020c2 <HAL_GPIO_Init+0x20e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4b      	ldr	r2, [pc, #300]	@ (80021e4 <HAL_GPIO_Init+0x330>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <HAL_GPIO_Init+0x20a>
 80020ba:	2307      	movs	r3, #7
 80020bc:	e00e      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020be:	2308      	movs	r3, #8
 80020c0:	e00c      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020c2:	2306      	movs	r3, #6
 80020c4:	e00a      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020c6:	2305      	movs	r3, #5
 80020c8:	e008      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020ca:	2304      	movs	r3, #4
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020ce:	2303      	movs	r3, #3
 80020d0:	e004      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e002      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_GPIO_Init+0x228>
 80020da:	2300      	movs	r3, #0
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	f002 0203 	and.w	r2, r2, #3
 80020e2:	0092      	lsls	r2, r2, #2
 80020e4:	4093      	lsls	r3, r2
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ec:	4935      	ldr	r1, [pc, #212]	@ (80021c4 <HAL_GPIO_Init+0x310>)
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	3302      	adds	r3, #2
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020fa:	4b3b      	ldr	r3, [pc, #236]	@ (80021e8 <HAL_GPIO_Init+0x334>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800211e:	4a32      	ldr	r2, [pc, #200]	@ (80021e8 <HAL_GPIO_Init+0x334>)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002124:	4b30      	ldr	r3, [pc, #192]	@ (80021e8 <HAL_GPIO_Init+0x334>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002148:	4a27      	ldr	r2, [pc, #156]	@ (80021e8 <HAL_GPIO_Init+0x334>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800214e:	4b26      	ldr	r3, [pc, #152]	@ (80021e8 <HAL_GPIO_Init+0x334>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002172:	4a1d      	ldr	r2, [pc, #116]	@ (80021e8 <HAL_GPIO_Init+0x334>)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002178:	4b1b      	ldr	r3, [pc, #108]	@ (80021e8 <HAL_GPIO_Init+0x334>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800219c:	4a12      	ldr	r2, [pc, #72]	@ (80021e8 <HAL_GPIO_Init+0x334>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3301      	adds	r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	2b0f      	cmp	r3, #15
 80021ac:	f67f ae90 	bls.w	8001ed0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3724      	adds	r7, #36	@ 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40013800 	.word	0x40013800
 80021c8:	40020000 	.word	0x40020000
 80021cc:	40020400 	.word	0x40020400
 80021d0:	40020800 	.word	0x40020800
 80021d4:	40020c00 	.word	0x40020c00
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40021400 	.word	0x40021400
 80021e0:	40021800 	.word	0x40021800
 80021e4:	40021c00 	.word	0x40021c00
 80021e8:	40013c00 	.word	0x40013c00

080021ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
 80021f8:	4613      	mov	r3, r2
 80021fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021fc:	787b      	ldrb	r3, [r7, #1]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002202:	887a      	ldrh	r2, [r7, #2]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002208:	e003      	b.n	8002212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800220a:	887b      	ldrh	r3, [r7, #2]
 800220c:	041a      	lsls	r2, r3, #16
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	619a      	str	r2, [r3, #24]
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af02      	add	r7, sp, #8
 8002224:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e059      	b.n	80022e4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d106      	bne.n	8002250 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f007 fece 	bl	8009fec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2203      	movs	r2, #3
 8002254:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800225e:	d102      	bne.n	8002266 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f004 fce7 	bl	8006c3e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	7c1a      	ldrb	r2, [r3, #16]
 8002278:	f88d 2000 	strb.w	r2, [sp]
 800227c:	3304      	adds	r3, #4
 800227e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002280:	f004 fc68 	bl	8006b54 <USB_CoreInit>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2202      	movs	r2, #2
 800228e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e026      	b.n	80022e4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2101      	movs	r1, #1
 800229c:	4618      	mov	r0, r3
 800229e:	f004 fcdf 	bl	8006c60 <USB_SetCurrentMode>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e017      	b.n	80022e4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	7c1a      	ldrb	r2, [r3, #16]
 80022bc:	f88d 2000 	strb.w	r2, [sp]
 80022c0:	3304      	adds	r3, #4
 80022c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c4:	f004 fe82 	bl	8006fcc <USB_HostInit>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2202      	movs	r2, #2
 80022d2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e004      	b.n	80022e4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b08b      	sub	sp, #44	@ 0x2c
 80022f0:	af04      	add	r7, sp, #16
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	4608      	mov	r0, r1
 80022f6:	4611      	mov	r1, r2
 80022f8:	461a      	mov	r2, r3
 80022fa:	4603      	mov	r3, r0
 80022fc:	70fb      	strb	r3, [r7, #3]
 80022fe:	460b      	mov	r3, r1
 8002300:	70bb      	strb	r3, [r7, #2]
 8002302:	4613      	mov	r3, r2
 8002304:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002306:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002308:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_HCD_HC_Init+0x2c>
 8002314:	2302      	movs	r3, #2
 8002316:	e09d      	b.n	8002454 <HAL_HCD_HC_Init+0x168>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	3319      	adds	r3, #25
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	3314      	adds	r3, #20
 8002344:	787a      	ldrb	r2, [r7, #1]
 8002346:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	3315      	adds	r3, #21
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800235c:	78fa      	ldrb	r2, [r7, #3]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	3326      	adds	r3, #38	@ 0x26
 800236c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002370:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	78bb      	ldrb	r3, [r7, #2]
 8002376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800237a:	b2d8      	uxtb	r0, r3
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	1a9b      	subs	r3, r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	3316      	adds	r3, #22
 800238a:	4602      	mov	r2, r0
 800238c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	4619      	mov	r1, r3
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fbc8 	bl	8002b28 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002398:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800239c:	2b00      	cmp	r3, #0
 800239e:	da0a      	bge.n	80023b6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	3317      	adds	r3, #23
 80023b0:	2201      	movs	r2, #1
 80023b2:	701a      	strb	r2, [r3, #0]
 80023b4:	e009      	b.n	80023ca <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80023b6:	78fa      	ldrb	r2, [r7, #3]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	3317      	adds	r3, #23
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f004 ff60 	bl	8007294 <USB_GetHostSpeed>
 80023d4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80023d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d10b      	bne.n	80023f6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80023de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d107      	bne.n	80023f6 <HAL_HCD_HC_Init+0x10a>
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d104      	bne.n	80023f6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2bbc      	cmp	r3, #188	@ 0xbc
 80023f0:	d901      	bls.n	80023f6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80023f2:	23bc      	movs	r3, #188	@ 0xbc
 80023f4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	3318      	adds	r3, #24
 8002406:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800240a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	b298      	uxth	r0, r3
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	3328      	adds	r3, #40	@ 0x28
 8002420:	4602      	mov	r2, r0
 8002422:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	b29b      	uxth	r3, r3
 800242c:	787c      	ldrb	r4, [r7, #1]
 800242e:	78ba      	ldrb	r2, [r7, #2]
 8002430:	78f9      	ldrb	r1, [r7, #3]
 8002432:	9302      	str	r3, [sp, #8]
 8002434:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	4623      	mov	r3, r4
 8002442:	f004 ff4f 	bl	80072e4 <USB_HC_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002452:	7bfb      	ldrb	r3, [r7, #15]
}
 8002454:	4618      	mov	r0, r3
 8002456:	371c      	adds	r7, #28
 8002458:	46bd      	mov	sp, r7
 800245a:	bd90      	pop	{r4, r7, pc}

0800245c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_HCD_HC_Halt+0x1e>
 8002476:	2302      	movs	r3, #2
 8002478:	e00f      	b.n	800249a <HAL_HCD_HC_Halt+0x3e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	78fa      	ldrb	r2, [r7, #3]
 8002488:	4611      	mov	r1, r2
 800248a:	4618      	mov	r0, r3
 800248c:	f005 fae1 	bl	8007a52 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002498:	7bfb      	ldrb	r3, [r7, #15]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	4608      	mov	r0, r1
 80024ae:	4611      	mov	r1, r2
 80024b0:	461a      	mov	r2, r3
 80024b2:	4603      	mov	r3, r0
 80024b4:	70fb      	strb	r3, [r7, #3]
 80024b6:	460b      	mov	r3, r1
 80024b8:	70bb      	strb	r3, [r7, #2]
 80024ba:	4613      	mov	r3, r2
 80024bc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80024be:	78fa      	ldrb	r2, [r7, #3]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	3317      	adds	r3, #23
 80024ce:	78ba      	ldrb	r2, [r7, #2]
 80024d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80024d2:	78fa      	ldrb	r2, [r7, #3]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	3326      	adds	r3, #38	@ 0x26
 80024e2:	787a      	ldrb	r2, [r7, #1]
 80024e4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80024e6:	7c3b      	ldrb	r3, [r7, #16]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d114      	bne.n	8002516 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	332a      	adds	r3, #42	@ 0x2a
 80024fc:	2203      	movs	r2, #3
 80024fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002500:	78fa      	ldrb	r2, [r7, #3]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	3319      	adds	r3, #25
 8002510:	7f3a      	ldrb	r2, [r7, #28]
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	e009      	b.n	800252a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002516:	78fa      	ldrb	r2, [r7, #3]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	1a9b      	subs	r3, r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	332a      	adds	r3, #42	@ 0x2a
 8002526:	2202      	movs	r2, #2
 8002528:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800252a:	787b      	ldrb	r3, [r7, #1]
 800252c:	2b03      	cmp	r3, #3
 800252e:	f200 8102 	bhi.w	8002736 <HAL_HCD_HC_SubmitRequest+0x292>
 8002532:	a201      	add	r2, pc, #4	@ (adr r2, 8002538 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002538:	08002549 	.word	0x08002549
 800253c:	08002721 	.word	0x08002721
 8002540:	0800260d 	.word	0x0800260d
 8002544:	08002697 	.word	0x08002697
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002548:	7c3b      	ldrb	r3, [r7, #16]
 800254a:	2b01      	cmp	r3, #1
 800254c:	f040 80f5 	bne.w	800273a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002550:	78bb      	ldrb	r3, [r7, #2]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d12d      	bne.n	80025b2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002556:	8b3b      	ldrh	r3, [r7, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d109      	bne.n	8002570 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	333d      	adds	r3, #61	@ 0x3d
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	333d      	adds	r3, #61	@ 0x3d
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10a      	bne.n	800259c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002586:	78fa      	ldrb	r2, [r7, #3]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	332a      	adds	r3, #42	@ 0x2a
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800259a:	e0ce      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	332a      	adds	r3, #42	@ 0x2a
 80025ac:	2202      	movs	r2, #2
 80025ae:	701a      	strb	r2, [r3, #0]
      break;
 80025b0:	e0c3      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	331a      	adds	r3, #26
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	f040 80b8 	bne.w	800273a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	333c      	adds	r3, #60	@ 0x3c
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10a      	bne.n	80025f6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	332a      	adds	r3, #42	@ 0x2a
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
      break;
 80025f4:	e0a1      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	332a      	adds	r3, #42	@ 0x2a
 8002606:	2202      	movs	r2, #2
 8002608:	701a      	strb	r2, [r3, #0]
      break;
 800260a:	e096      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800260c:	78bb      	ldrb	r3, [r7, #2]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d120      	bne.n	8002654 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002612:	78fa      	ldrb	r2, [r7, #3]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	333d      	adds	r3, #61	@ 0x3d
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10a      	bne.n	800263e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	332a      	adds	r3, #42	@ 0x2a
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800263c:	e07e      	b.n	800273c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800263e:	78fa      	ldrb	r2, [r7, #3]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	332a      	adds	r3, #42	@ 0x2a
 800264e:	2202      	movs	r2, #2
 8002650:	701a      	strb	r2, [r3, #0]
      break;
 8002652:	e073      	b.n	800273c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	1a9b      	subs	r3, r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	333c      	adds	r3, #60	@ 0x3c
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10a      	bne.n	8002680 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800266a:	78fa      	ldrb	r2, [r7, #3]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	332a      	adds	r3, #42	@ 0x2a
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
      break;
 800267e:	e05d      	b.n	800273c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	332a      	adds	r3, #42	@ 0x2a
 8002690:	2202      	movs	r2, #2
 8002692:	701a      	strb	r2, [r3, #0]
      break;
 8002694:	e052      	b.n	800273c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002696:	78bb      	ldrb	r3, [r7, #2]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d120      	bne.n	80026de <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	333d      	adds	r3, #61	@ 0x3d
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10a      	bne.n	80026c8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	332a      	adds	r3, #42	@ 0x2a
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80026c6:	e039      	b.n	800273c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	332a      	adds	r3, #42	@ 0x2a
 80026d8:	2202      	movs	r2, #2
 80026da:	701a      	strb	r2, [r3, #0]
      break;
 80026dc:	e02e      	b.n	800273c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	333c      	adds	r3, #60	@ 0x3c
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10a      	bne.n	800270a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026f4:	78fa      	ldrb	r2, [r7, #3]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	332a      	adds	r3, #42	@ 0x2a
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
      break;
 8002708:	e018      	b.n	800273c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800270a:	78fa      	ldrb	r2, [r7, #3]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	332a      	adds	r3, #42	@ 0x2a
 800271a:	2202      	movs	r2, #2
 800271c:	701a      	strb	r2, [r3, #0]
      break;
 800271e:	e00d      	b.n	800273c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002720:	78fa      	ldrb	r2, [r7, #3]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	332a      	adds	r3, #42	@ 0x2a
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
      break;
 8002734:	e002      	b.n	800273c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002736:	bf00      	nop
 8002738:	e000      	b.n	800273c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800273a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800273c:	78fa      	ldrb	r2, [r7, #3]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	332c      	adds	r3, #44	@ 0x2c
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	8b39      	ldrh	r1, [r7, #24]
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	1a9b      	subs	r3, r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4403      	add	r3, r0
 8002760:	3334      	adds	r3, #52	@ 0x34
 8002762:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	334c      	adds	r3, #76	@ 0x4c
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	3338      	adds	r3, #56	@ 0x38
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	3315      	adds	r3, #21
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	334d      	adds	r3, #77	@ 0x4d
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6818      	ldr	r0, [r3, #0]
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	4613      	mov	r3, r2
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	1a9b      	subs	r3, r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	3310      	adds	r3, #16
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	4413      	add	r3, r2
 80027c8:	1d19      	adds	r1, r3, #4
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	799b      	ldrb	r3, [r3, #6]
 80027ce:	461a      	mov	r2, r3
 80027d0:	f004 feb4 	bl	800753c <USB_HC_StartXfer>
 80027d4:	4603      	mov	r3, r0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop

080027e0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f004 fba8 	bl	8006f4c <USB_GetMode>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b01      	cmp	r3, #1
 8002800:	f040 80fb 	bne.w	80029fa <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f004 fb6b 	bl	8006ee4 <USB_ReadInterrupts>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80f1 	beq.w	80029f8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f004 fb62 	bl	8006ee4 <USB_ReadInterrupts>
 8002820:	4603      	mov	r3, r0
 8002822:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002826:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800282a:	d104      	bne.n	8002836 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002834:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f004 fb52 	bl	8006ee4 <USB_ReadInterrupts>
 8002840:	4603      	mov	r3, r0
 8002842:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002846:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800284a:	d104      	bne.n	8002856 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002854:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f004 fb42 	bl	8006ee4 <USB_ReadInterrupts>
 8002860:	4603      	mov	r3, r0
 8002862:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002866:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800286a:	d104      	bne.n	8002876 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002874:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f004 fb32 	bl	8006ee4 <USB_ReadInterrupts>
 8002880:	4603      	mov	r3, r0
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b02      	cmp	r3, #2
 8002888:	d103      	bne.n	8002892 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2202      	movs	r2, #2
 8002890:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f004 fb24 	bl	8006ee4 <USB_ReadInterrupts>
 800289c:	4603      	mov	r3, r0
 800289e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028a6:	d120      	bne.n	80028ea <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80028b0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d113      	bne.n	80028ea <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80028c2:	2110      	movs	r1, #16
 80028c4:	6938      	ldr	r0, [r7, #16]
 80028c6:	f004 fa17 	bl	8006cf8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80028ca:	6938      	ldr	r0, [r7, #16]
 80028cc:	f004 fa46 	bl	8006d5c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	7a5b      	ldrb	r3, [r3, #9]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d105      	bne.n	80028e4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2101      	movs	r1, #1
 80028de:	4618      	mov	r0, r3
 80028e0:	f004 fc38 	bl	8007154 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f007 fbff 	bl	800a0e8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f004 faf8 	bl	8006ee4 <USB_ReadInterrupts>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028fe:	d102      	bne.n	8002906 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f001 fd4d 	bl	80043a0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f004 faea 	bl	8006ee4 <USB_ReadInterrupts>
 8002910:	4603      	mov	r3, r0
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b08      	cmp	r3, #8
 8002918:	d106      	bne.n	8002928 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f007 fbc8 	bl	800a0b0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2208      	movs	r2, #8
 8002926:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f004 fad9 	bl	8006ee4 <USB_ReadInterrupts>
 8002932:	4603      	mov	r3, r0
 8002934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002938:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800293c:	d139      	bne.n	80029b2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f005 f874 	bl	8007a30 <USB_HC_ReadInterrupt>
 8002948:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	e025      	b.n	800299c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d018      	beq.n	8002996 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4413      	add	r3, r2
 800296c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002976:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800297a:	d106      	bne.n	800298a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	4619      	mov	r1, r3
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f905 	bl	8002b92 <HCD_HC_IN_IRQHandler>
 8002988:	e005      	b.n	8002996 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	4619      	mov	r1, r3
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 ff67 	bl	8003864 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	3301      	adds	r3, #1
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	795b      	ldrb	r3, [r3, #5]
 80029a0:	461a      	mov	r2, r3
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d3d3      	bcc.n	8002950 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f004 fa94 	bl	8006ee4 <USB_ReadInterrupts>
 80029bc:	4603      	mov	r3, r0
 80029be:	f003 0310 	and.w	r3, r3, #16
 80029c2:	2b10      	cmp	r3, #16
 80029c4:	d101      	bne.n	80029ca <HAL_HCD_IRQHandler+0x1ea>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_HCD_IRQHandler+0x1ec>
 80029ca:	2300      	movs	r3, #0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d014      	beq.n	80029fa <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0210 	bic.w	r2, r2, #16
 80029de:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f001 fbfe 	bl	80041e2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699a      	ldr	r2, [r3, #24]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0210 	orr.w	r2, r2, #16
 80029f4:	619a      	str	r2, [r3, #24]
 80029f6:	e000      	b.n	80029fa <HAL_HCD_IRQHandler+0x21a>
      return;
 80029f8:	bf00      	nop
    }
  }
}
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_HCD_Start+0x16>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e013      	b.n	8002a3e <HAL_HCD_Start+0x3e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2101      	movs	r1, #1
 8002a24:	4618      	mov	r0, r3
 8002a26:	f004 fbfc 	bl	8007222 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f004 f8f4 	bl	8006c1c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_HCD_Stop+0x16>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e00d      	b.n	8002a78 <HAL_HCD_Stop+0x32>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f005 f94f 	bl	8007d0c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f004 fb9e 	bl	80071ce <USB_ResetPort>
 8002a92:	4603      	mov	r3, r0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	334c      	adds	r3, #76	@ 0x4c
 8002ab8:	781b      	ldrb	r3, [r3, #0]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	1a9b      	subs	r3, r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	3338      	adds	r3, #56	@ 0x38
 8002ae2:	681b      	ldr	r3, [r3, #0]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f004 fbe0 	bl	80072c2 <USB_GetCurrentFrame>
 8002b02:	4603      	mov	r3, r0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f004 fbbb 	bl	8007294 <USB_GetHostSpeed>
 8002b1e:	4603      	mov	r3, r0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002b34:	78fa      	ldrb	r2, [r7, #3]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	331a      	adds	r3, #26
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	331b      	adds	r3, #27
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	3325      	adds	r3, #37	@ 0x25
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002b70:	78fa      	ldrb	r2, [r7, #3]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	1a9b      	subs	r3, r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	3324      	adds	r3, #36	@ 0x24
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	78fa      	ldrb	r2, [r7, #3]
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f004 f9aa 	bl	8006f0a <USB_ReadChInterrupts>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d11a      	bne.n	8002bf6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bcc:	461a      	mov	r2, r3
 8002bce:	2304      	movs	r3, #4
 8002bd0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	1a9b      	subs	r3, r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	334d      	adds	r3, #77	@ 0x4d
 8002be2:	2207      	movs	r2, #7
 8002be4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	78fa      	ldrb	r2, [r7, #3]
 8002bec:	4611      	mov	r1, r2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f004 ff2f 	bl	8007a52 <USB_HC_Halt>
 8002bf4:	e09e      	b.n	8002d34 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f004 f983 	bl	8006f0a <USB_ReadChInterrupts>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c0e:	d11b      	bne.n	8002c48 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	334d      	adds	r3, #77	@ 0x4d
 8002c34:	2208      	movs	r2, #8
 8002c36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f004 ff06 	bl	8007a52 <USB_HC_Halt>
 8002c46:	e075      	b.n	8002d34 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f004 f95a 	bl	8006f0a <USB_ReadChInterrupts>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d11a      	bne.n	8002c96 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	2308      	movs	r3, #8
 8002c70:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	334d      	adds	r3, #77	@ 0x4d
 8002c82:	2206      	movs	r2, #6
 8002c84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f004 fedf 	bl	8007a52 <USB_HC_Halt>
 8002c94:	e04e      	b.n	8002d34 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f004 f933 	bl	8006f0a <USB_ReadChInterrupts>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002caa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cae:	d11b      	bne.n	8002ce8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	334d      	adds	r3, #77	@ 0x4d
 8002cd4:	2209      	movs	r2, #9
 8002cd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	78fa      	ldrb	r2, [r7, #3]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f004 feb6 	bl	8007a52 <USB_HC_Halt>
 8002ce6:	e025      	b.n	8002d34 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f004 f90a 	bl	8006f0a <USB_ReadChInterrupts>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cfc:	2b80      	cmp	r3, #128	@ 0x80
 8002cfe:	d119      	bne.n	8002d34 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2380      	movs	r3, #128	@ 0x80
 8002d10:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	334d      	adds	r3, #77	@ 0x4d
 8002d22:	2207      	movs	r2, #7
 8002d24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f004 fe8f 	bl	8007a52 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f004 f8e4 	bl	8006f0a <USB_ReadChInterrupts>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d4c:	d112      	bne.n	8002d74 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	78fa      	ldrb	r2, [r7, #3]
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f004 fe7b 	bl	8007a52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d68:	461a      	mov	r2, r3
 8002d6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d6e:	6093      	str	r3, [r2, #8]
 8002d70:	f000 bd75 	b.w	800385e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f004 f8c4 	bl	8006f0a <USB_ReadChInterrupts>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	f040 8128 	bne.w	8002fde <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002d8e:	78fb      	ldrb	r3, [r7, #3]
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	2320      	movs	r3, #32
 8002d9e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	331b      	adds	r3, #27
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d119      	bne.n	8002dea <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	331b      	adds	r3, #27
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002dca:	78fb      	ldrb	r3, [r7, #3]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	0151      	lsls	r1, r2, #5
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	440a      	add	r2, r1
 8002de0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002de4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002de8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	799b      	ldrb	r3, [r3, #6]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d01b      	beq.n	8002e2a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	3330      	adds	r3, #48	@ 0x30
 8002e02:	6819      	ldr	r1, [r3, #0]
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	1ac9      	subs	r1, r1, r3
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4403      	add	r3, r0
 8002e26:	3338      	adds	r3, #56	@ 0x38
 8002e28:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	1a9b      	subs	r3, r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	334d      	adds	r3, #77	@ 0x4d
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3344      	adds	r3, #68	@ 0x44
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2301      	movs	r3, #1
 8002e62:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	3326      	adds	r3, #38	@ 0x26
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	3326      	adds	r3, #38	@ 0x26
 8002e8a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d110      	bne.n	8002eb2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f004 fdda 	bl	8007a52 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eaa:	461a      	mov	r2, r3
 8002eac:	2310      	movs	r3, #16
 8002eae:	6093      	str	r3, [r2, #8]
 8002eb0:	e03d      	b.n	8002f2e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3326      	adds	r3, #38	@ 0x26
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d00a      	beq.n	8002ede <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	3326      	adds	r3, #38	@ 0x26
 8002ed8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d127      	bne.n	8002f2e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	0151      	lsls	r1, r2, #5
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	440a      	add	r2, r1
 8002ef4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ef8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002efc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	334c      	adds	r3, #76	@ 0x4c
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	334c      	adds	r3, #76	@ 0x4c
 8002f22:	781a      	ldrb	r2, [r3, #0]
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	4619      	mov	r1, r3
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f007 f8eb 	bl	800a104 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	799b      	ldrb	r3, [r3, #6]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d13b      	bne.n	8002fae <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	3338      	adds	r3, #56	@ 0x38
 8002f46:	6819      	ldr	r1, [r3, #0]
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4403      	add	r3, r0
 8002f56:	3328      	adds	r3, #40	@ 0x28
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	440b      	add	r3, r1
 8002f5c:	1e59      	subs	r1, r3, #1
 8002f5e:	78fa      	ldrb	r2, [r7, #3]
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4403      	add	r3, r0
 8002f6c:	3328      	adds	r3, #40	@ 0x28
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 8470 	beq.w	800385e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	333c      	adds	r3, #60	@ 0x3c
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	f083 0301 	eor.w	r3, r3, #1
 8002f96:	b2d8      	uxtb	r0, r3
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	1a9b      	subs	r3, r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	333c      	adds	r3, #60	@ 0x3c
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	701a      	strb	r2, [r3, #0]
 8002faa:	f000 bc58 	b.w	800385e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	333c      	adds	r3, #60	@ 0x3c
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	78fa      	ldrb	r2, [r7, #3]
 8002fc2:	f083 0301 	eor.w	r3, r3, #1
 8002fc6:	b2d8      	uxtb	r0, r3
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	333c      	adds	r3, #60	@ 0x3c
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	701a      	strb	r2, [r3, #0]
 8002fda:	f000 bc40 	b.w	800385e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f003 ff8f 	bl	8006f0a <USB_ReadChInterrupts>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d131      	bne.n	800305a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	015a      	lsls	r2, r3, #5
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003002:	461a      	mov	r2, r3
 8003004:	2320      	movs	r3, #32
 8003006:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	331a      	adds	r3, #26
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b01      	cmp	r3, #1
 800301c:	f040 841f 	bne.w	800385e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	331b      	adds	r3, #27
 8003030:	2201      	movs	r2, #1
 8003032:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	334d      	adds	r3, #77	@ 0x4d
 8003044:	2203      	movs	r2, #3
 8003046:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	4611      	mov	r1, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f004 fcfe 	bl	8007a52 <USB_HC_Halt>
 8003056:	f000 bc02 	b.w	800385e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f003 ff51 	bl	8006f0a <USB_ReadChInterrupts>
 8003068:	4603      	mov	r3, r0
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b02      	cmp	r3, #2
 8003070:	f040 8305 	bne.w	800367e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4413      	add	r3, r2
 800307c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003080:	461a      	mov	r2, r3
 8003082:	2302      	movs	r3, #2
 8003084:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	334d      	adds	r3, #77	@ 0x4d
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d114      	bne.n	80030c6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	334d      	adds	r3, #77	@ 0x4d
 80030ac:	2202      	movs	r2, #2
 80030ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	334c      	adds	r3, #76	@ 0x4c
 80030c0:	2201      	movs	r2, #1
 80030c2:	701a      	strb	r2, [r3, #0]
 80030c4:	e2cc      	b.n	8003660 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	334d      	adds	r3, #77	@ 0x4d
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b06      	cmp	r3, #6
 80030da:	d114      	bne.n	8003106 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030dc:	78fa      	ldrb	r2, [r7, #3]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	1a9b      	subs	r3, r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	334d      	adds	r3, #77	@ 0x4d
 80030ec:	2202      	movs	r2, #2
 80030ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	334c      	adds	r3, #76	@ 0x4c
 8003100:	2205      	movs	r2, #5
 8003102:	701a      	strb	r2, [r3, #0]
 8003104:	e2ac      	b.n	8003660 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	334d      	adds	r3, #77	@ 0x4d
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b07      	cmp	r3, #7
 800311a:	d00b      	beq.n	8003134 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	1a9b      	subs	r3, r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	334d      	adds	r3, #77	@ 0x4d
 800312c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800312e:	2b09      	cmp	r3, #9
 8003130:	f040 80a6 	bne.w	8003280 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	334d      	adds	r3, #77	@ 0x4d
 8003144:	2202      	movs	r2, #2
 8003146:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003148:	78fa      	ldrb	r2, [r7, #3]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	1a9b      	subs	r3, r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	3344      	adds	r3, #68	@ 0x44
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	1c59      	adds	r1, r3, #1
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4403      	add	r3, r0
 8003168:	3344      	adds	r3, #68	@ 0x44
 800316a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	3344      	adds	r3, #68	@ 0x44
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d943      	bls.n	800320a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	3344      	adds	r3, #68	@ 0x44
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	331a      	adds	r3, #26
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d123      	bne.n	80031f4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	331b      	adds	r3, #27
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	331c      	adds	r3, #28
 80031d0:	2200      	movs	r2, #0
 80031d2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	0151      	lsls	r1, r2, #5
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	440a      	add	r2, r1
 80031ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031f2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80031f4:	78fa      	ldrb	r2, [r7, #3]
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	334c      	adds	r3, #76	@ 0x4c
 8003204:	2204      	movs	r2, #4
 8003206:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003208:	e229      	b.n	800365e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	334c      	adds	r3, #76	@ 0x4c
 800321a:	2202      	movs	r2, #2
 800321c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	3326      	adds	r3, #38	@ 0x26
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00b      	beq.n	800324c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	3326      	adds	r3, #38	@ 0x26
 8003244:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003246:	2b02      	cmp	r3, #2
 8003248:	f040 8209 	bne.w	800365e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4413      	add	r3, r2
 8003254:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003262:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800326a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4413      	add	r3, r2
 8003274:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003278:	461a      	mov	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800327e:	e1ee      	b.n	800365e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	334d      	adds	r3, #77	@ 0x4d
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b05      	cmp	r3, #5
 8003294:	f040 80c8 	bne.w	8003428 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	334d      	adds	r3, #77	@ 0x4d
 80032a8:	2202      	movs	r2, #2
 80032aa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	331b      	adds	r3, #27
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	f040 81ce 	bne.w	8003660 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	3326      	adds	r3, #38	@ 0x26
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d16b      	bne.n	80033b2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	3348      	adds	r3, #72	@ 0x48
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	1c59      	adds	r1, r3, #1
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4403      	add	r3, r0
 80032fa:	3348      	adds	r3, #72	@ 0x48
 80032fc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	3348      	adds	r3, #72	@ 0x48
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d943      	bls.n	800339c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	3348      	adds	r3, #72	@ 0x48
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	331b      	adds	r3, #27
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	3344      	adds	r3, #68	@ 0x44
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d809      	bhi.n	8003366 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	331c      	adds	r3, #28
 8003362:	2201      	movs	r2, #1
 8003364:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003366:	78fb      	ldrb	r3, [r7, #3]
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4413      	add	r3, r2
 800336e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	0151      	lsls	r1, r2, #5
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	440a      	add	r2, r1
 800337c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003380:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003384:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	334c      	adds	r3, #76	@ 0x4c
 8003396:	2204      	movs	r2, #4
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e014      	b.n	80033c6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	334c      	adds	r3, #76	@ 0x4c
 80033ac:	2202      	movs	r2, #2
 80033ae:	701a      	strb	r2, [r3, #0]
 80033b0:	e009      	b.n	80033c6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	334c      	adds	r3, #76	@ 0x4c
 80033c2:	2202      	movs	r2, #2
 80033c4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	3326      	adds	r3, #38	@ 0x26
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00b      	beq.n	80033f4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033dc:	78fa      	ldrb	r2, [r7, #3]
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	3326      	adds	r3, #38	@ 0x26
 80033ec:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	f040 8136 	bne.w	8003660 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800340a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003412:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003420:	461a      	mov	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	e11b      	b.n	8003660 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	334d      	adds	r3, #77	@ 0x4d
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b03      	cmp	r3, #3
 800343c:	f040 8081 	bne.w	8003542 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003440:	78fa      	ldrb	r2, [r7, #3]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	334d      	adds	r3, #77	@ 0x4d
 8003450:	2202      	movs	r2, #2
 8003452:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003454:	78fa      	ldrb	r2, [r7, #3]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	331b      	adds	r3, #27
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b01      	cmp	r3, #1
 8003468:	f040 80fa 	bne.w	8003660 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	334c      	adds	r3, #76	@ 0x4c
 800347c:	2202      	movs	r2, #2
 800347e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4413      	add	r3, r2
 8003488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	0151      	lsls	r1, r2, #5
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	440a      	add	r2, r1
 8003496:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800349a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800349e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	0151      	lsls	r1, r2, #5
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	440a      	add	r2, r1
 80034b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034be:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	0151      	lsls	r1, r2, #5
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	440a      	add	r2, r1
 80034d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034da:	f023 0320 	bic.w	r3, r3, #32
 80034de:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034e0:	78fa      	ldrb	r2, [r7, #3]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	3326      	adds	r3, #38	@ 0x26
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00b      	beq.n	800350e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80034f6:	78fa      	ldrb	r2, [r7, #3]
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	1a9b      	subs	r3, r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	3326      	adds	r3, #38	@ 0x26
 8003506:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003508:	2b02      	cmp	r3, #2
 800350a:	f040 80a9 	bne.w	8003660 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4413      	add	r3, r2
 8003516:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003524:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800352c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800352e:	78fb      	ldrb	r3, [r7, #3]
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4413      	add	r3, r2
 8003536:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800353a:	461a      	mov	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	e08e      	b.n	8003660 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	334d      	adds	r3, #77	@ 0x4d
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b04      	cmp	r3, #4
 8003556:	d143      	bne.n	80035e0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	334d      	adds	r3, #77	@ 0x4d
 8003568:	2202      	movs	r2, #2
 800356a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800356c:	78fa      	ldrb	r2, [r7, #3]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	1a9b      	subs	r3, r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	334c      	adds	r3, #76	@ 0x4c
 800357c:	2202      	movs	r2, #2
 800357e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003580:	78fa      	ldrb	r2, [r7, #3]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	3326      	adds	r3, #38	@ 0x26
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	3326      	adds	r3, #38	@ 0x26
 80035a6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d159      	bne.n	8003660 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035c2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035ca:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035d8:	461a      	mov	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	e03f      	b.n	8003660 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	334d      	adds	r3, #77	@ 0x4d
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d126      	bne.n	8003644 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035f6:	78fa      	ldrb	r2, [r7, #3]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	334d      	adds	r3, #77	@ 0x4d
 8003606:	2202      	movs	r2, #2
 8003608:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	3344      	adds	r3, #68	@ 0x44
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	1c59      	adds	r1, r3, #1
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4403      	add	r3, r0
 800362a:	3344      	adds	r3, #68	@ 0x44
 800362c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	334c      	adds	r3, #76	@ 0x4c
 800363e:	2204      	movs	r2, #4
 8003640:	701a      	strb	r2, [r3, #0]
 8003642:	e00d      	b.n	8003660 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	334d      	adds	r3, #77	@ 0x4d
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b02      	cmp	r3, #2
 8003658:	f000 8100 	beq.w	800385c <HCD_HC_IN_IRQHandler+0xcca>
 800365c:	e000      	b.n	8003660 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800365e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003660:	78fa      	ldrb	r2, [r7, #3]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	334c      	adds	r3, #76	@ 0x4c
 8003670:	781a      	ldrb	r2, [r3, #0]
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	4619      	mov	r1, r3
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f006 fd44 	bl	800a104 <HAL_HCD_HC_NotifyURBChange_Callback>
 800367c:	e0ef      	b.n	800385e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	78fa      	ldrb	r2, [r7, #3]
 8003684:	4611      	mov	r1, r2
 8003686:	4618      	mov	r0, r3
 8003688:	f003 fc3f 	bl	8006f0a <USB_ReadChInterrupts>
 800368c:	4603      	mov	r3, r0
 800368e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003692:	2b40      	cmp	r3, #64	@ 0x40
 8003694:	d12f      	bne.n	80036f6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4413      	add	r3, r2
 800369e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036a2:	461a      	mov	r2, r3
 80036a4:	2340      	movs	r3, #64	@ 0x40
 80036a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	334d      	adds	r3, #77	@ 0x4d
 80036b8:	2205      	movs	r2, #5
 80036ba:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	331a      	adds	r3, #26
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80036d2:	78fa      	ldrb	r2, [r7, #3]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	3344      	adds	r3, #68	@ 0x44
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	4611      	mov	r1, r2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f004 f9af 	bl	8007a52 <USB_HC_Halt>
 80036f4:	e0b3      	b.n	800385e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	4611      	mov	r1, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	f003 fc03 	bl	8006f0a <USB_ReadChInterrupts>
 8003704:	4603      	mov	r3, r0
 8003706:	f003 0310 	and.w	r3, r3, #16
 800370a:	2b10      	cmp	r3, #16
 800370c:	f040 80a7 	bne.w	800385e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003710:	78fa      	ldrb	r2, [r7, #3]
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	3326      	adds	r3, #38	@ 0x26
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b03      	cmp	r3, #3
 8003724:	d11b      	bne.n	800375e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	3344      	adds	r3, #68	@ 0x44
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800373a:	78fa      	ldrb	r2, [r7, #3]
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	334d      	adds	r3, #77	@ 0x4d
 800374a:	2204      	movs	r2, #4
 800374c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	4611      	mov	r1, r2
 8003756:	4618      	mov	r0, r3
 8003758:	f004 f97b 	bl	8007a52 <USB_HC_Halt>
 800375c:	e03f      	b.n	80037de <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800375e:	78fa      	ldrb	r2, [r7, #3]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	3326      	adds	r3, #38	@ 0x26
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	3326      	adds	r3, #38	@ 0x26
 8003784:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003786:	2b02      	cmp	r3, #2
 8003788:	d129      	bne.n	80037de <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800378a:	78fa      	ldrb	r2, [r7, #3]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	3344      	adds	r3, #68	@ 0x44
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	799b      	ldrb	r3, [r3, #6]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <HCD_HC_IN_IRQHandler+0xc2a>
 80037a6:	78fa      	ldrb	r2, [r7, #3]
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	331b      	adds	r3, #27
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d110      	bne.n	80037de <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80037bc:	78fa      	ldrb	r2, [r7, #3]
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	4613      	mov	r3, r2
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	334d      	adds	r3, #77	@ 0x4d
 80037cc:	2204      	movs	r2, #4
 80037ce:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	78fa      	ldrb	r2, [r7, #3]
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f004 f93a 	bl	8007a52 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80037de:	78fa      	ldrb	r2, [r7, #3]
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	4613      	mov	r3, r2
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	1a9b      	subs	r3, r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	331b      	adds	r3, #27
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d129      	bne.n	8003848 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	331b      	adds	r3, #27
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4413      	add	r3, r2
 8003810:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	0151      	lsls	r1, r2, #5
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	440a      	add	r2, r1
 800381e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003822:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003826:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4413      	add	r3, r2
 8003830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	0151      	lsls	r1, r2, #5
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	440a      	add	r2, r1
 800383e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003842:	f043 0320 	orr.w	r3, r3, #32
 8003846:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	4413      	add	r3, r2
 8003850:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003854:	461a      	mov	r2, r3
 8003856:	2310      	movs	r3, #16
 8003858:	6093      	str	r3, [r2, #8]
 800385a:	e000      	b.n	800385e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800385c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	78fa      	ldrb	r2, [r7, #3]
 8003880:	4611      	mov	r1, r2
 8003882:	4618      	mov	r0, r3
 8003884:	f003 fb41 	bl	8006f0a <USB_ReadChInterrupts>
 8003888:	4603      	mov	r3, r0
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b04      	cmp	r3, #4
 8003890:	d11b      	bne.n	80038ca <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	015a      	lsls	r2, r3, #5
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	4413      	add	r3, r2
 800389a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800389e:	461a      	mov	r2, r3
 80038a0:	2304      	movs	r3, #4
 80038a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80038a4:	78fa      	ldrb	r2, [r7, #3]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	1a9b      	subs	r3, r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	334d      	adds	r3, #77	@ 0x4d
 80038b4:	2207      	movs	r2, #7
 80038b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	78fa      	ldrb	r2, [r7, #3]
 80038be:	4611      	mov	r1, r2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f004 f8c6 	bl	8007a52 <USB_HC_Halt>
 80038c6:	f000 bc89 	b.w	80041dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	78fa      	ldrb	r2, [r7, #3]
 80038d0:	4611      	mov	r1, r2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f003 fb19 	bl	8006f0a <USB_ReadChInterrupts>
 80038d8:	4603      	mov	r3, r0
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b20      	cmp	r3, #32
 80038e0:	f040 8082 	bne.w	80039e8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80038e4:	78fb      	ldrb	r3, [r7, #3]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038f0:	461a      	mov	r2, r3
 80038f2:	2320      	movs	r3, #32
 80038f4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80038f6:	78fa      	ldrb	r2, [r7, #3]
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	3319      	adds	r3, #25
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d124      	bne.n	8003956 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800390c:	78fa      	ldrb	r2, [r7, #3]
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	3319      	adds	r3, #25
 800391c:	2200      	movs	r2, #0
 800391e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	334c      	adds	r3, #76	@ 0x4c
 8003930:	2202      	movs	r2, #2
 8003932:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	1a9b      	subs	r3, r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	334d      	adds	r3, #77	@ 0x4d
 8003944:	2203      	movs	r2, #3
 8003946:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	78fa      	ldrb	r2, [r7, #3]
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f004 f87e 	bl	8007a52 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003956:	78fa      	ldrb	r2, [r7, #3]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	331a      	adds	r3, #26
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b01      	cmp	r3, #1
 800396a:	f040 8437 	bne.w	80041dc <HCD_HC_OUT_IRQHandler+0x978>
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	331b      	adds	r3, #27
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	f040 842b 	bne.w	80041dc <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003986:	78fa      	ldrb	r2, [r7, #3]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	1a9b      	subs	r3, r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	3326      	adds	r3, #38	@ 0x26
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d009      	beq.n	80039b0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800399c:	78fa      	ldrb	r2, [r7, #3]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	331b      	adds	r3, #27
 80039ac:	2201      	movs	r2, #1
 80039ae:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	334d      	adds	r3, #77	@ 0x4d
 80039c0:	2203      	movs	r2, #3
 80039c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f004 f840 	bl	8007a52 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80039d2:	78fa      	ldrb	r2, [r7, #3]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	1a9b      	subs	r3, r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	3344      	adds	r3, #68	@ 0x44
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	e3f9      	b.n	80041dc <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	4611      	mov	r1, r2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f003 fa8a 	bl	8006f0a <USB_ReadChInterrupts>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a00:	d111      	bne.n	8003a26 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a14:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f004 f817 	bl	8007a52 <USB_HC_Halt>
 8003a24:	e3da      	b.n	80041dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	78fa      	ldrb	r2, [r7, #3]
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f003 fa6b 	bl	8006f0a <USB_ReadChInterrupts>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d168      	bne.n	8003b10 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	1a9b      	subs	r3, r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	3344      	adds	r3, #68	@ 0x44
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	78fa      	ldrb	r2, [r7, #3]
 8003a58:	4611      	mov	r1, r2
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f003 fa55 	bl	8006f0a <USB_ReadChInterrupts>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a66:	2b40      	cmp	r3, #64	@ 0x40
 8003a68:	d112      	bne.n	8003a90 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	3319      	adds	r3, #25
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	2340      	movs	r3, #64	@ 0x40
 8003a8e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003a90:	78fa      	ldrb	r2, [r7, #3]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	331b      	adds	r3, #27
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d019      	beq.n	8003ada <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	331b      	adds	r3, #27
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003aba:	78fb      	ldrb	r3, [r7, #3]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	78fa      	ldrb	r2, [r7, #3]
 8003aca:	0151      	lsls	r1, r2, #5
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	440a      	add	r2, r1
 8003ad0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ad4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003ada:	78fb      	ldrb	r3, [r7, #3]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	2301      	movs	r3, #1
 8003aea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	334d      	adds	r3, #77	@ 0x4d
 8003afc:	2201      	movs	r2, #1
 8003afe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	4611      	mov	r1, r2
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f003 ffa2 	bl	8007a52 <USB_HC_Halt>
 8003b0e:	e365      	b.n	80041dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	78fa      	ldrb	r2, [r7, #3]
 8003b16:	4611      	mov	r1, r2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f003 f9f6 	bl	8006f0a <USB_ReadChInterrupts>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b24:	2b40      	cmp	r3, #64	@ 0x40
 8003b26:	d139      	bne.n	8003b9c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	334d      	adds	r3, #77	@ 0x4d
 8003b38:	2205      	movs	r2, #5
 8003b3a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003b3c:	78fa      	ldrb	r2, [r7, #3]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	331a      	adds	r3, #26
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d109      	bne.n	8003b66 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003b52:	78fa      	ldrb	r2, [r7, #3]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	3319      	adds	r3, #25
 8003b62:	2201      	movs	r2, #1
 8003b64:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	3344      	adds	r3, #68	@ 0x44
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	4611      	mov	r1, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f003 ff65 	bl	8007a52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b94:	461a      	mov	r2, r3
 8003b96:	2340      	movs	r3, #64	@ 0x40
 8003b98:	6093      	str	r3, [r2, #8]
 8003b9a:	e31f      	b.n	80041dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	78fa      	ldrb	r2, [r7, #3]
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f003 f9b0 	bl	8006f0a <USB_ReadChInterrupts>
 8003baa:	4603      	mov	r3, r0
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d11a      	bne.n	8003bea <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003bc6:	78fa      	ldrb	r2, [r7, #3]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	1a9b      	subs	r3, r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	334d      	adds	r3, #77	@ 0x4d
 8003bd6:	2206      	movs	r2, #6
 8003bd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	78fa      	ldrb	r2, [r7, #3]
 8003be0:	4611      	mov	r1, r2
 8003be2:	4618      	mov	r0, r3
 8003be4:	f003 ff35 	bl	8007a52 <USB_HC_Halt>
 8003be8:	e2f8      	b.n	80041dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	78fa      	ldrb	r2, [r7, #3]
 8003bf0:	4611      	mov	r1, r2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f003 f989 	bl	8006f0a <USB_ReadChInterrupts>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f003 0310 	and.w	r3, r3, #16
 8003bfe:	2b10      	cmp	r3, #16
 8003c00:	d144      	bne.n	8003c8c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	3344      	adds	r3, #68	@ 0x44
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003c16:	78fa      	ldrb	r2, [r7, #3]
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	334d      	adds	r3, #77	@ 0x4d
 8003c26:	2204      	movs	r2, #4
 8003c28:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003c2a:	78fa      	ldrb	r2, [r7, #3]
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	1a9b      	subs	r3, r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	3319      	adds	r3, #25
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d114      	bne.n	8003c6a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	3318      	adds	r3, #24
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d109      	bne.n	8003c6a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003c56:	78fa      	ldrb	r2, [r7, #3]
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	3319      	adds	r3, #25
 8003c66:	2201      	movs	r2, #1
 8003c68:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	78fa      	ldrb	r2, [r7, #3]
 8003c70:	4611      	mov	r1, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f003 feed 	bl	8007a52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c84:	461a      	mov	r2, r3
 8003c86:	2310      	movs	r3, #16
 8003c88:	6093      	str	r3, [r2, #8]
 8003c8a:	e2a7      	b.n	80041dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	4611      	mov	r1, r2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f003 f938 	bl	8006f0a <USB_ReadChInterrupts>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca0:	2b80      	cmp	r3, #128	@ 0x80
 8003ca2:	f040 8083 	bne.w	8003dac <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	799b      	ldrb	r3, [r3, #6]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d111      	bne.n	8003cd2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003cae:	78fa      	ldrb	r2, [r7, #3]
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	440b      	add	r3, r1
 8003cbc:	334d      	adds	r3, #77	@ 0x4d
 8003cbe:	2207      	movs	r2, #7
 8003cc0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	78fa      	ldrb	r2, [r7, #3]
 8003cc8:	4611      	mov	r1, r2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f003 fec1 	bl	8007a52 <USB_HC_Halt>
 8003cd0:	e062      	b.n	8003d98 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003cd2:	78fa      	ldrb	r2, [r7, #3]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	3344      	adds	r3, #68	@ 0x44
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	1c59      	adds	r1, r3, #1
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	1a9b      	subs	r3, r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4403      	add	r3, r0
 8003cf2:	3344      	adds	r3, #68	@ 0x44
 8003cf4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003cf6:	78fa      	ldrb	r2, [r7, #3]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	1a9b      	subs	r3, r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	3344      	adds	r3, #68	@ 0x44
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d922      	bls.n	8003d52 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003d0c:	78fa      	ldrb	r2, [r7, #3]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	3344      	adds	r3, #68	@ 0x44
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d20:	78fa      	ldrb	r2, [r7, #3]
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	4613      	mov	r3, r2
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	1a9b      	subs	r3, r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	334c      	adds	r3, #76	@ 0x4c
 8003d30:	2204      	movs	r2, #4
 8003d32:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d34:	78fa      	ldrb	r2, [r7, #3]
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	334c      	adds	r3, #76	@ 0x4c
 8003d44:	781a      	ldrb	r2, [r3, #0]
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f006 f9da 	bl	800a104 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d50:	e022      	b.n	8003d98 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	334c      	adds	r3, #76	@ 0x4c
 8003d62:	2202      	movs	r2, #2
 8003d64:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d66:	78fb      	ldrb	r3, [r7, #3]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d7c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d84:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d86:	78fb      	ldrb	r3, [r7, #3]
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d92:	461a      	mov	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003da4:	461a      	mov	r2, r3
 8003da6:	2380      	movs	r3, #128	@ 0x80
 8003da8:	6093      	str	r3, [r2, #8]
 8003daa:	e217      	b.n	80041dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	78fa      	ldrb	r2, [r7, #3]
 8003db2:	4611      	mov	r1, r2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f003 f8a8 	bl	8006f0a <USB_ReadChInterrupts>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dc4:	d11b      	bne.n	8003dfe <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003dc6:	78fa      	ldrb	r2, [r7, #3]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	334d      	adds	r3, #77	@ 0x4d
 8003dd6:	2209      	movs	r2, #9
 8003dd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	78fa      	ldrb	r2, [r7, #3]
 8003de0:	4611      	mov	r1, r2
 8003de2:	4618      	mov	r0, r3
 8003de4:	f003 fe35 	bl	8007a52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003df4:	461a      	mov	r2, r3
 8003df6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dfa:	6093      	str	r3, [r2, #8]
 8003dfc:	e1ee      	b.n	80041dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	4611      	mov	r1, r2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f003 f87f 	bl	8006f0a <USB_ReadChInterrupts>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	f040 81df 	bne.w	80041d6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003e18:	78fb      	ldrb	r3, [r7, #3]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e24:	461a      	mov	r2, r3
 8003e26:	2302      	movs	r3, #2
 8003e28:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003e2a:	78fa      	ldrb	r2, [r7, #3]
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	1a9b      	subs	r3, r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	440b      	add	r3, r1
 8003e38:	334d      	adds	r3, #77	@ 0x4d
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	f040 8093 	bne.w	8003f68 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e42:	78fa      	ldrb	r2, [r7, #3]
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	334d      	adds	r3, #77	@ 0x4d
 8003e52:	2202      	movs	r2, #2
 8003e54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003e56:	78fa      	ldrb	r2, [r7, #3]
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	1a9b      	subs	r3, r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	440b      	add	r3, r1
 8003e64:	334c      	adds	r3, #76	@ 0x4c
 8003e66:	2201      	movs	r2, #1
 8003e68:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003e6a:	78fa      	ldrb	r2, [r7, #3]
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	3326      	adds	r3, #38	@ 0x26
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d00b      	beq.n	8003e98 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	3326      	adds	r3, #38	@ 0x26
 8003e90:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	f040 8190 	bne.w	80041b8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	799b      	ldrb	r3, [r3, #6]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d115      	bne.n	8003ecc <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003ea0:	78fa      	ldrb	r2, [r7, #3]
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	333d      	adds	r3, #61	@ 0x3d
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	78fa      	ldrb	r2, [r7, #3]
 8003eb4:	f083 0301 	eor.w	r3, r3, #1
 8003eb8:	b2d8      	uxtb	r0, r3
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	333d      	adds	r3, #61	@ 0x3d
 8003ec8:	4602      	mov	r2, r0
 8003eca:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	799b      	ldrb	r3, [r3, #6]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	f040 8171 	bne.w	80041b8 <HCD_HC_OUT_IRQHandler+0x954>
 8003ed6:	78fa      	ldrb	r2, [r7, #3]
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	3334      	adds	r3, #52	@ 0x34
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 8165 	beq.w	80041b8 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003eee:	78fa      	ldrb	r2, [r7, #3]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	3334      	adds	r3, #52	@ 0x34
 8003efe:	6819      	ldr	r1, [r3, #0]
 8003f00:	78fa      	ldrb	r2, [r7, #3]
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	1a9b      	subs	r3, r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4403      	add	r3, r0
 8003f0e:	3328      	adds	r3, #40	@ 0x28
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	440b      	add	r3, r1
 8003f14:	1e59      	subs	r1, r3, #1
 8003f16:	78fa      	ldrb	r2, [r7, #3]
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	1a9b      	subs	r3, r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4403      	add	r3, r0
 8003f24:	3328      	adds	r3, #40	@ 0x28
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f2c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 813f 	beq.w	80041b8 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003f3a:	78fa      	ldrb	r2, [r7, #3]
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	440b      	add	r3, r1
 8003f48:	333d      	adds	r3, #61	@ 0x3d
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	78fa      	ldrb	r2, [r7, #3]
 8003f4e:	f083 0301 	eor.w	r3, r3, #1
 8003f52:	b2d8      	uxtb	r0, r3
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	333d      	adds	r3, #61	@ 0x3d
 8003f62:	4602      	mov	r2, r0
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	e127      	b.n	80041b8 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003f68:	78fa      	ldrb	r2, [r7, #3]
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	334d      	adds	r3, #77	@ 0x4d
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d120      	bne.n	8003fc0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f7e:	78fa      	ldrb	r2, [r7, #3]
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	334d      	adds	r3, #77	@ 0x4d
 8003f8e:	2202      	movs	r2, #2
 8003f90:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003f92:	78fa      	ldrb	r2, [r7, #3]
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	4613      	mov	r3, r2
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	331b      	adds	r3, #27
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	f040 8107 	bne.w	80041b8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003faa:	78fa      	ldrb	r2, [r7, #3]
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	1a9b      	subs	r3, r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	334c      	adds	r3, #76	@ 0x4c
 8003fba:	2202      	movs	r2, #2
 8003fbc:	701a      	strb	r2, [r3, #0]
 8003fbe:	e0fb      	b.n	80041b8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003fc0:	78fa      	ldrb	r2, [r7, #3]
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	1a9b      	subs	r3, r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	334d      	adds	r3, #77	@ 0x4d
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d13a      	bne.n	800404c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fd6:	78fa      	ldrb	r2, [r7, #3]
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	1a9b      	subs	r3, r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	334d      	adds	r3, #77	@ 0x4d
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fea:	78fa      	ldrb	r2, [r7, #3]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	1a9b      	subs	r3, r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	334c      	adds	r3, #76	@ 0x4c
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003ffe:	78fa      	ldrb	r2, [r7, #3]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	331b      	adds	r3, #27
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b01      	cmp	r3, #1
 8004012:	f040 80d1 	bne.w	80041b8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004016:	78fa      	ldrb	r2, [r7, #3]
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	331b      	adds	r3, #27
 8004026:	2200      	movs	r2, #0
 8004028:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4413      	add	r3, r2
 8004032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	78fa      	ldrb	r2, [r7, #3]
 800403a:	0151      	lsls	r1, r2, #5
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	440a      	add	r2, r1
 8004040:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004048:	6053      	str	r3, [r2, #4]
 800404a:	e0b5      	b.n	80041b8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800404c:	78fa      	ldrb	r2, [r7, #3]
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	1a9b      	subs	r3, r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	334d      	adds	r3, #77	@ 0x4d
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b05      	cmp	r3, #5
 8004060:	d114      	bne.n	800408c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004062:	78fa      	ldrb	r2, [r7, #3]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	334d      	adds	r3, #77	@ 0x4d
 8004072:	2202      	movs	r2, #2
 8004074:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004076:	78fa      	ldrb	r2, [r7, #3]
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	334c      	adds	r3, #76	@ 0x4c
 8004086:	2202      	movs	r2, #2
 8004088:	701a      	strb	r2, [r3, #0]
 800408a:	e095      	b.n	80041b8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800408c:	78fa      	ldrb	r2, [r7, #3]
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	334d      	adds	r3, #77	@ 0x4d
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b06      	cmp	r3, #6
 80040a0:	d114      	bne.n	80040cc <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040a2:	78fa      	ldrb	r2, [r7, #3]
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	334d      	adds	r3, #77	@ 0x4d
 80040b2:	2202      	movs	r2, #2
 80040b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	334c      	adds	r3, #76	@ 0x4c
 80040c6:	2205      	movs	r2, #5
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	e075      	b.n	80041b8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80040cc:	78fa      	ldrb	r2, [r7, #3]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	334d      	adds	r3, #77	@ 0x4d
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b07      	cmp	r3, #7
 80040e0:	d00a      	beq.n	80040f8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	334d      	adds	r3, #77	@ 0x4d
 80040f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80040f4:	2b09      	cmp	r3, #9
 80040f6:	d170      	bne.n	80041da <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040f8:	78fa      	ldrb	r2, [r7, #3]
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	1a9b      	subs	r3, r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	334d      	adds	r3, #77	@ 0x4d
 8004108:	2202      	movs	r2, #2
 800410a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800410c:	78fa      	ldrb	r2, [r7, #3]
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	3344      	adds	r3, #68	@ 0x44
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	1c59      	adds	r1, r3, #1
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4403      	add	r3, r0
 800412c:	3344      	adds	r3, #68	@ 0x44
 800412e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	3344      	adds	r3, #68	@ 0x44
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d914      	bls.n	8004170 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	3344      	adds	r3, #68	@ 0x44
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800415a:	78fa      	ldrb	r2, [r7, #3]
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	334c      	adds	r3, #76	@ 0x4c
 800416a:	2204      	movs	r2, #4
 800416c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800416e:	e022      	b.n	80041b6 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004170:	78fa      	ldrb	r2, [r7, #3]
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	334c      	adds	r3, #76	@ 0x4c
 8004180:	2202      	movs	r2, #2
 8004182:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	4413      	add	r3, r2
 800418c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800419a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80041a2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041b0:	461a      	mov	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041b6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80041b8:	78fa      	ldrb	r2, [r7, #3]
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	4613      	mov	r3, r2
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	334c      	adds	r3, #76	@ 0x4c
 80041c8:	781a      	ldrb	r2, [r3, #0]
 80041ca:	78fb      	ldrb	r3, [r7, #3]
 80041cc:	4619      	mov	r1, r3
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f005 ff98 	bl	800a104 <HAL_HCD_HC_NotifyURBChange_Callback>
 80041d4:	e002      	b.n	80041dc <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80041d6:	bf00      	nop
 80041d8:	e000      	b.n	80041dc <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80041da:	bf00      	nop
  }
}
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b08a      	sub	sp, #40	@ 0x28
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	0c5b      	lsrs	r3, r3, #17
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	091b      	lsrs	r3, r3, #4
 8004212:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004216:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d004      	beq.n	8004228 <HCD_RXQLVL_IRQHandler+0x46>
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2b05      	cmp	r3, #5
 8004222:	f000 80b6 	beq.w	8004392 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004226:	e0b7      	b.n	8004398 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 80b3 	beq.w	8004396 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4613      	mov	r3, r2
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	332c      	adds	r3, #44	@ 0x2c
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 80a7 	beq.w	8004396 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	4613      	mov	r3, r2
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	3338      	adds	r3, #56	@ 0x38
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	18d1      	adds	r1, r2, r3
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4613      	mov	r3, r2
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4403      	add	r3, r0
 800426c:	3334      	adds	r3, #52	@ 0x34
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4299      	cmp	r1, r3
 8004272:	f200 8083 	bhi.w	800437c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4613      	mov	r3, r2
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	1a9b      	subs	r3, r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	332c      	adds	r3, #44	@ 0x2c
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	b292      	uxth	r2, r2
 8004290:	4619      	mov	r1, r3
 8004292:	f002 fdcf 	bl	8006e34 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4613      	mov	r3, r2
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	1a9b      	subs	r3, r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	440b      	add	r3, r1
 80042a4:	332c      	adds	r3, #44	@ 0x2c
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	18d1      	adds	r1, r2, r3
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4613      	mov	r3, r2
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	1a9b      	subs	r3, r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4403      	add	r3, r0
 80042ba:	332c      	adds	r3, #44	@ 0x2c
 80042bc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4613      	mov	r3, r2
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	3338      	adds	r3, #56	@ 0x38
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	18d1      	adds	r1, r2, r3
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4613      	mov	r3, r2
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4403      	add	r3, r0
 80042e2:	3338      	adds	r3, #56	@ 0x38
 80042e4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	0cdb      	lsrs	r3, r3, #19
 80042f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042fa:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	4613      	mov	r3, r2
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	3328      	adds	r3, #40	@ 0x28
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4293      	cmp	r3, r2
 8004314:	d13f      	bne.n	8004396 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d03c      	beq.n	8004396 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	4413      	add	r3, r2
 8004324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004332:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800433a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	4413      	add	r3, r2
 8004344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004348:	461a      	mov	r2, r3
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4613      	mov	r3, r2
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	333c      	adds	r3, #60	@ 0x3c
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	f083 0301 	eor.w	r3, r3, #1
 8004364:	b2d8      	uxtb	r0, r3
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4613      	mov	r3, r2
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	1a9b      	subs	r3, r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	440b      	add	r3, r1
 8004374:	333c      	adds	r3, #60	@ 0x3c
 8004376:	4602      	mov	r2, r0
 8004378:	701a      	strb	r2, [r3, #0]
      break;
 800437a:	e00c      	b.n	8004396 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4613      	mov	r3, r2
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	1a9b      	subs	r3, r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	334c      	adds	r3, #76	@ 0x4c
 800438c:	2204      	movs	r2, #4
 800438e:	701a      	strb	r2, [r3, #0]
      break;
 8004390:	e001      	b.n	8004396 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004392:	bf00      	nop
 8004394:	e000      	b.n	8004398 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004396:	bf00      	nop
  }
}
 8004398:	bf00      	nop
 800439a:	3728      	adds	r7, #40	@ 0x28
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80043cc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d10b      	bne.n	80043f0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d102      	bne.n	80043e8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f005 fe72 	bl	800a0cc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f043 0302 	orr.w	r3, r3, #2
 80043ee:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d132      	bne.n	8004460 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f043 0308 	orr.w	r3, r3, #8
 8004400:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b04      	cmp	r3, #4
 800440a:	d126      	bne.n	800445a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	7a5b      	ldrb	r3, [r3, #9]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d113      	bne.n	800443c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800441a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800441e:	d106      	bne.n	800442e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2102      	movs	r1, #2
 8004426:	4618      	mov	r0, r3
 8004428:	f002 fe94 	bl	8007154 <USB_InitFSLSPClkSel>
 800442c:	e011      	b.n	8004452 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2101      	movs	r1, #1
 8004434:	4618      	mov	r0, r3
 8004436:	f002 fe8d 	bl	8007154 <USB_InitFSLSPClkSel>
 800443a:	e00a      	b.n	8004452 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	79db      	ldrb	r3, [r3, #7]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d106      	bne.n	8004452 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800444a:	461a      	mov	r2, r3
 800444c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004450:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f005 fe64 	bl	800a120 <HAL_HCD_PortEnabled_Callback>
 8004458:	e002      	b.n	8004460 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f005 fe6e 	bl	800a13c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f003 0320 	and.w	r3, r3, #32
 8004466:	2b20      	cmp	r3, #32
 8004468:	d103      	bne.n	8004472 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f043 0320 	orr.w	r3, r3, #32
 8004470:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004478:	461a      	mov	r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	6013      	str	r3, [r2, #0]
}
 800447e:	bf00      	nop
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e12b      	b.n	80046f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fc ffc8 	bl	8001444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2224      	movs	r2, #36	@ 0x24
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0201 	bic.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044ec:	f001 fa20 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 80044f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	4a81      	ldr	r2, [pc, #516]	@ (80046fc <HAL_I2C_Init+0x274>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d807      	bhi.n	800450c <HAL_I2C_Init+0x84>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4a80      	ldr	r2, [pc, #512]	@ (8004700 <HAL_I2C_Init+0x278>)
 8004500:	4293      	cmp	r3, r2
 8004502:	bf94      	ite	ls
 8004504:	2301      	movls	r3, #1
 8004506:	2300      	movhi	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	e006      	b.n	800451a <HAL_I2C_Init+0x92>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4a7d      	ldr	r2, [pc, #500]	@ (8004704 <HAL_I2C_Init+0x27c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	bf94      	ite	ls
 8004514:	2301      	movls	r3, #1
 8004516:	2300      	movhi	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e0e7      	b.n	80046f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4a78      	ldr	r2, [pc, #480]	@ (8004708 <HAL_I2C_Init+0x280>)
 8004526:	fba2 2303 	umull	r2, r3, r2, r3
 800452a:	0c9b      	lsrs	r3, r3, #18
 800452c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	4a6a      	ldr	r2, [pc, #424]	@ (80046fc <HAL_I2C_Init+0x274>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d802      	bhi.n	800455c <HAL_I2C_Init+0xd4>
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	3301      	adds	r3, #1
 800455a:	e009      	b.n	8004570 <HAL_I2C_Init+0xe8>
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004562:	fb02 f303 	mul.w	r3, r2, r3
 8004566:	4a69      	ldr	r2, [pc, #420]	@ (800470c <HAL_I2C_Init+0x284>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	099b      	lsrs	r3, r3, #6
 800456e:	3301      	adds	r3, #1
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6812      	ldr	r2, [r2, #0]
 8004574:	430b      	orrs	r3, r1
 8004576:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004582:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	495c      	ldr	r1, [pc, #368]	@ (80046fc <HAL_I2C_Init+0x274>)
 800458c:	428b      	cmp	r3, r1
 800458e:	d819      	bhi.n	80045c4 <HAL_I2C_Init+0x13c>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	1e59      	subs	r1, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	fbb1 f3f3 	udiv	r3, r1, r3
 800459e:	1c59      	adds	r1, r3, #1
 80045a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80045a4:	400b      	ands	r3, r1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <HAL_I2C_Init+0x138>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1e59      	subs	r1, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80045b8:	3301      	adds	r3, #1
 80045ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045be:	e051      	b.n	8004664 <HAL_I2C_Init+0x1dc>
 80045c0:	2304      	movs	r3, #4
 80045c2:	e04f      	b.n	8004664 <HAL_I2C_Init+0x1dc>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d111      	bne.n	80045f0 <HAL_I2C_Init+0x168>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	1e58      	subs	r0, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6859      	ldr	r1, [r3, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	440b      	add	r3, r1
 80045da:	fbb0 f3f3 	udiv	r3, r0, r3
 80045de:	3301      	adds	r3, #1
 80045e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bf0c      	ite	eq
 80045e8:	2301      	moveq	r3, #1
 80045ea:	2300      	movne	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	e012      	b.n	8004616 <HAL_I2C_Init+0x18e>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	1e58      	subs	r0, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6859      	ldr	r1, [r3, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	0099      	lsls	r1, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	fbb0 f3f3 	udiv	r3, r0, r3
 8004606:	3301      	adds	r3, #1
 8004608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460c:	2b00      	cmp	r3, #0
 800460e:	bf0c      	ite	eq
 8004610:	2301      	moveq	r3, #1
 8004612:	2300      	movne	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_I2C_Init+0x196>
 800461a:	2301      	movs	r3, #1
 800461c:	e022      	b.n	8004664 <HAL_I2C_Init+0x1dc>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10e      	bne.n	8004644 <HAL_I2C_Init+0x1bc>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1e58      	subs	r0, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6859      	ldr	r1, [r3, #4]
 800462e:	460b      	mov	r3, r1
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	440b      	add	r3, r1
 8004634:	fbb0 f3f3 	udiv	r3, r0, r3
 8004638:	3301      	adds	r3, #1
 800463a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800463e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004642:	e00f      	b.n	8004664 <HAL_I2C_Init+0x1dc>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	1e58      	subs	r0, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6859      	ldr	r1, [r3, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	0099      	lsls	r1, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	fbb0 f3f3 	udiv	r3, r0, r3
 800465a:	3301      	adds	r3, #1
 800465c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004660:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	6809      	ldr	r1, [r1, #0]
 8004668:	4313      	orrs	r3, r2
 800466a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69da      	ldr	r2, [r3, #28]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004692:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6911      	ldr	r1, [r2, #16]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	68d2      	ldr	r2, [r2, #12]
 800469e:	4311      	orrs	r1, r2
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6812      	ldr	r2, [r2, #0]
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695a      	ldr	r2, [r3, #20]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	000186a0 	.word	0x000186a0
 8004700:	001e847f 	.word	0x001e847f
 8004704:	003d08ff 	.word	0x003d08ff
 8004708:	431bde83 	.word	0x431bde83
 800470c:	10624dd3 	.word	0x10624dd3

08004710 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e128      	b.n	8004974 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d109      	bne.n	8004742 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a90      	ldr	r2, [pc, #576]	@ (800497c <HAL_I2S_Init+0x26c>)
 800473a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7fc fec9 	bl	80014d4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2202      	movs	r2, #2
 8004746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004758:	f023 030f 	bic.w	r3, r3, #15
 800475c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2202      	movs	r2, #2
 8004764:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d060      	beq.n	8004830 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d102      	bne.n	800477c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004776:	2310      	movs	r3, #16
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	e001      	b.n	8004780 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800477c:	2320      	movs	r3, #32
 800477e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2b20      	cmp	r3, #32
 8004786:	d802      	bhi.n	800478e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800478e:	2001      	movs	r0, #1
 8004790:	f001 f9d8 	bl	8005b44 <HAL_RCCEx_GetPeriphCLKFreq>
 8004794:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800479e:	d125      	bne.n	80047ec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d010      	beq.n	80047ca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80047b2:	4613      	mov	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	461a      	mov	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c4:	3305      	adds	r3, #5
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	e01f      	b.n	800480a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	461a      	mov	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e6:	3305      	adds	r3, #5
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	e00e      	b.n	800480a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	461a      	mov	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	fbb2 f3f3 	udiv	r3, r2, r3
 8004806:	3305      	adds	r3, #5
 8004808:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4a5c      	ldr	r2, [pc, #368]	@ (8004980 <HAL_I2S_Init+0x270>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	08db      	lsrs	r3, r3, #3
 8004814:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	085b      	lsrs	r3, r3, #1
 8004826:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	021b      	lsls	r3, r3, #8
 800482c:	61bb      	str	r3, [r7, #24]
 800482e:	e003      	b.n	8004838 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004830:	2302      	movs	r3, #2
 8004832:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d902      	bls.n	8004844 <HAL_I2S_Init+0x134>
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	2bff      	cmp	r3, #255	@ 0xff
 8004842:	d907      	bls.n	8004854 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004848:	f043 0210 	orr.w	r2, r3, #16
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e08f      	b.n	8004974 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	ea42 0103 	orr.w	r1, r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69fa      	ldr	r2, [r7, #28]
 8004864:	430a      	orrs	r2, r1
 8004866:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004872:	f023 030f 	bic.w	r3, r3, #15
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6851      	ldr	r1, [r2, #4]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6892      	ldr	r2, [r2, #8]
 800487e:	4311      	orrs	r1, r2
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	68d2      	ldr	r2, [r2, #12]
 8004884:	4311      	orrs	r1, r2
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6992      	ldr	r2, [r2, #24]
 800488a:	430a      	orrs	r2, r1
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004896:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d161      	bne.n	8004964 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a38      	ldr	r2, [pc, #224]	@ (8004984 <HAL_I2S_Init+0x274>)
 80048a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a37      	ldr	r2, [pc, #220]	@ (8004988 <HAL_I2S_Init+0x278>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d101      	bne.n	80048b4 <HAL_I2S_Init+0x1a4>
 80048b0:	4b36      	ldr	r3, [pc, #216]	@ (800498c <HAL_I2S_Init+0x27c>)
 80048b2:	e001      	b.n	80048b8 <HAL_I2S_Init+0x1a8>
 80048b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	4932      	ldr	r1, [pc, #200]	@ (8004988 <HAL_I2S_Init+0x278>)
 80048c0:	428a      	cmp	r2, r1
 80048c2:	d101      	bne.n	80048c8 <HAL_I2S_Init+0x1b8>
 80048c4:	4a31      	ldr	r2, [pc, #196]	@ (800498c <HAL_I2S_Init+0x27c>)
 80048c6:	e001      	b.n	80048cc <HAL_I2S_Init+0x1bc>
 80048c8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80048cc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80048d0:	f023 030f 	bic.w	r3, r3, #15
 80048d4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a2b      	ldr	r2, [pc, #172]	@ (8004988 <HAL_I2S_Init+0x278>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d101      	bne.n	80048e4 <HAL_I2S_Init+0x1d4>
 80048e0:	4b2a      	ldr	r3, [pc, #168]	@ (800498c <HAL_I2S_Init+0x27c>)
 80048e2:	e001      	b.n	80048e8 <HAL_I2S_Init+0x1d8>
 80048e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048e8:	2202      	movs	r2, #2
 80048ea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a25      	ldr	r2, [pc, #148]	@ (8004988 <HAL_I2S_Init+0x278>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d101      	bne.n	80048fa <HAL_I2S_Init+0x1ea>
 80048f6:	4b25      	ldr	r3, [pc, #148]	@ (800498c <HAL_I2S_Init+0x27c>)
 80048f8:	e001      	b.n	80048fe <HAL_I2S_Init+0x1ee>
 80048fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800490a:	d003      	beq.n	8004914 <HAL_I2S_Init+0x204>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d103      	bne.n	800491c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004914:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	e001      	b.n	8004920 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800491c:	2300      	movs	r3, #0
 800491e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800492a:	4313      	orrs	r3, r2
 800492c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004934:	4313      	orrs	r3, r2
 8004936:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800493e:	4313      	orrs	r3, r2
 8004940:	b29a      	uxth	r2, r3
 8004942:	897b      	ldrh	r3, [r7, #10]
 8004944:	4313      	orrs	r3, r2
 8004946:	b29b      	uxth	r3, r3
 8004948:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800494c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a0d      	ldr	r2, [pc, #52]	@ (8004988 <HAL_I2S_Init+0x278>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d101      	bne.n	800495c <HAL_I2S_Init+0x24c>
 8004958:	4b0c      	ldr	r3, [pc, #48]	@ (800498c <HAL_I2S_Init+0x27c>)
 800495a:	e001      	b.n	8004960 <HAL_I2S_Init+0x250>
 800495c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004960:	897a      	ldrh	r2, [r7, #10]
 8004962:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3720      	adds	r7, #32
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	08004a87 	.word	0x08004a87
 8004980:	cccccccd 	.word	0xcccccccd
 8004984:	08004b9d 	.word	0x08004b9d
 8004988:	40003800 	.word	0x40003800
 800498c:	40003400 	.word	0x40003400

08004990 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d8:	881a      	ldrh	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e4:	1c9a      	adds	r2, r3, #2
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10e      	bne.n	8004a20 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a10:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7ff ffb8 	bl	8004990 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3a:	b292      	uxth	r2, r2
 8004a3c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a42:	1c9a      	adds	r2, r3, #2
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10e      	bne.n	8004a7e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a6e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff ff93 	bl	80049a4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b086      	sub	sp, #24
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d13a      	bne.n	8004b18 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d109      	bne.n	8004ac0 <I2S_IRQHandler+0x3a>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab6:	2b40      	cmp	r3, #64	@ 0x40
 8004ab8:	d102      	bne.n	8004ac0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff ffb4 	bl	8004a28 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac6:	2b40      	cmp	r3, #64	@ 0x40
 8004ac8:	d126      	bne.n	8004b18 <I2S_IRQHandler+0x92>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d11f      	bne.n	8004b18 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004ae6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004ae8:	2300      	movs	r3, #0
 8004aea:	613b      	str	r3, [r7, #16]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	613b      	str	r3, [r7, #16]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0a:	f043 0202 	orr.w	r2, r3, #2
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7ff ff50 	bl	80049b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d136      	bne.n	8004b92 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d109      	bne.n	8004b42 <I2S_IRQHandler+0xbc>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b38:	2b80      	cmp	r3, #128	@ 0x80
 8004b3a:	d102      	bne.n	8004b42 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7ff ff45 	bl	80049cc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d122      	bne.n	8004b92 <I2S_IRQHandler+0x10c>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	d11b      	bne.n	8004b92 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b68:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b84:	f043 0204 	orr.w	r2, r3, #4
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7ff ff13 	bl	80049b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b92:	bf00      	nop
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
	...

08004b9c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a92      	ldr	r2, [pc, #584]	@ (8004dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d101      	bne.n	8004bba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004bb6:	4b92      	ldr	r3, [pc, #584]	@ (8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bb8:	e001      	b.n	8004bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004bba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a8b      	ldr	r2, [pc, #556]	@ (8004dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d101      	bne.n	8004bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004bd4:	4b8a      	ldr	r3, [pc, #552]	@ (8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bd6:	e001      	b.n	8004bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004bd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004be8:	d004      	beq.n	8004bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f040 8099 	bne.w	8004d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d107      	bne.n	8004c0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f925 	bl	8004e58 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d107      	bne.n	8004c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f9c8 	bl	8004fb8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2e:	2b40      	cmp	r3, #64	@ 0x40
 8004c30:	d13a      	bne.n	8004ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d035      	beq.n	8004ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a6e      	ldr	r2, [pc, #440]	@ (8004dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d101      	bne.n	8004c4a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004c46:	4b6e      	ldr	r3, [pc, #440]	@ (8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c48:	e001      	b.n	8004c4e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004c4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4969      	ldr	r1, [pc, #420]	@ (8004dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c56:	428b      	cmp	r3, r1
 8004c58:	d101      	bne.n	8004c5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004c5a:	4b69      	ldr	r3, [pc, #420]	@ (8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c5c:	e001      	b.n	8004c62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004c5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c62:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c66:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004c76:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c9a:	f043 0202 	orr.w	r2, r3, #2
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff fe88 	bl	80049b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	f040 80c3 	bne.w	8004e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f003 0320 	and.w	r3, r3, #32
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 80bd 	beq.w	8004e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004cce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a49      	ldr	r2, [pc, #292]	@ (8004dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d101      	bne.n	8004cde <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004cda:	4b49      	ldr	r3, [pc, #292]	@ (8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cdc:	e001      	b.n	8004ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004cde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4944      	ldr	r1, [pc, #272]	@ (8004dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cea:	428b      	cmp	r3, r1
 8004cec:	d101      	bne.n	8004cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004cee:	4b44      	ldr	r3, [pc, #272]	@ (8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cf0:	e001      	b.n	8004cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004cf2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cf6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004cfa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	60bb      	str	r3, [r7, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	60bb      	str	r3, [r7, #8]
 8004d08:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d16:	f043 0204 	orr.w	r2, r3, #4
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7ff fe4a 	bl	80049b8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d24:	e089      	b.n	8004e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d107      	bne.n	8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f8be 	bl	8004ebc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d107      	bne.n	8004d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f8fd 	bl	8004f54 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d60:	2b40      	cmp	r3, #64	@ 0x40
 8004d62:	d12f      	bne.n	8004dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d02a      	beq.n	8004dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d7c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a1e      	ldr	r2, [pc, #120]	@ (8004dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d101      	bne.n	8004d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004d88:	4b1d      	ldr	r3, [pc, #116]	@ (8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d8a:	e001      	b.n	8004d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004d8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4919      	ldr	r1, [pc, #100]	@ (8004dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d98:	428b      	cmp	r3, r1
 8004d9a:	d101      	bne.n	8004da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004d9c:	4b18      	ldr	r3, [pc, #96]	@ (8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d9e:	e001      	b.n	8004da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004da0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004da4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004da8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db6:	f043 0202 	orr.w	r2, r3, #2
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff fdfa 	bl	80049b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	f003 0308 	and.w	r3, r3, #8
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d136      	bne.n	8004e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d031      	beq.n	8004e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a07      	ldr	r2, [pc, #28]	@ (8004dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d101      	bne.n	8004de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004de2:	4b07      	ldr	r3, [pc, #28]	@ (8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004de4:	e001      	b.n	8004dea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004de6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4902      	ldr	r1, [pc, #8]	@ (8004dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004df2:	428b      	cmp	r3, r1
 8004df4:	d106      	bne.n	8004e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004df6:	4b02      	ldr	r3, [pc, #8]	@ (8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004df8:	e006      	b.n	8004e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004dfa:	bf00      	nop
 8004dfc:	40003800 	.word	0x40003800
 8004e00:	40003400 	.word	0x40003400
 8004e04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e08:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e0c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2a:	f043 0204 	orr.w	r2, r3, #4
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7ff fdc0 	bl	80049b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e38:	e000      	b.n	8004e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e3a:	bf00      	nop
}
 8004e3c:	bf00      	nop
 8004e3e:	3720      	adds	r7, #32
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	1c99      	adds	r1, r3, #2
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6251      	str	r1, [r2, #36]	@ 0x24
 8004e6a:	881a      	ldrh	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d113      	bne.n	8004eb2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e98:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d106      	bne.n	8004eb2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff ffc9 	bl	8004e44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec8:	1c99      	adds	r1, r3, #2
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6251      	str	r1, [r2, #36]	@ 0x24
 8004ece:	8819      	ldrh	r1, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f4c <I2SEx_TxISR_I2SExt+0x90>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d101      	bne.n	8004ede <I2SEx_TxISR_I2SExt+0x22>
 8004eda:	4b1d      	ldr	r3, [pc, #116]	@ (8004f50 <I2SEx_TxISR_I2SExt+0x94>)
 8004edc:	e001      	b.n	8004ee2 <I2SEx_TxISR_I2SExt+0x26>
 8004ede:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ee2:	460a      	mov	r2, r1
 8004ee4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d121      	bne.n	8004f42 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a12      	ldr	r2, [pc, #72]	@ (8004f4c <I2SEx_TxISR_I2SExt+0x90>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d101      	bne.n	8004f0c <I2SEx_TxISR_I2SExt+0x50>
 8004f08:	4b11      	ldr	r3, [pc, #68]	@ (8004f50 <I2SEx_TxISR_I2SExt+0x94>)
 8004f0a:	e001      	b.n	8004f10 <I2SEx_TxISR_I2SExt+0x54>
 8004f0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	490d      	ldr	r1, [pc, #52]	@ (8004f4c <I2SEx_TxISR_I2SExt+0x90>)
 8004f18:	428b      	cmp	r3, r1
 8004f1a:	d101      	bne.n	8004f20 <I2SEx_TxISR_I2SExt+0x64>
 8004f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f50 <I2SEx_TxISR_I2SExt+0x94>)
 8004f1e:	e001      	b.n	8004f24 <I2SEx_TxISR_I2SExt+0x68>
 8004f20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f24:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004f28:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d106      	bne.n	8004f42 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff ff81 	bl	8004e44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f42:	bf00      	nop
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40003800 	.word	0x40003800
 8004f50:	40003400 	.word	0x40003400

08004f54 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68d8      	ldr	r0, [r3, #12]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f66:	1c99      	adds	r1, r3, #2
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004f6c:	b282      	uxth	r2, r0
 8004f6e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d113      	bne.n	8004fb0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004f96:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d106      	bne.n	8004fb0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7ff ff4a 	bl	8004e44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a20      	ldr	r2, [pc, #128]	@ (8005048 <I2SEx_RxISR_I2SExt+0x90>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d101      	bne.n	8004fce <I2SEx_RxISR_I2SExt+0x16>
 8004fca:	4b20      	ldr	r3, [pc, #128]	@ (800504c <I2SEx_RxISR_I2SExt+0x94>)
 8004fcc:	e001      	b.n	8004fd2 <I2SEx_RxISR_I2SExt+0x1a>
 8004fce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fd2:	68d8      	ldr	r0, [r3, #12]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd8:	1c99      	adds	r1, r3, #2
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004fde:	b282      	uxth	r2, r0
 8004fe0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d121      	bne.n	800503e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a12      	ldr	r2, [pc, #72]	@ (8005048 <I2SEx_RxISR_I2SExt+0x90>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d101      	bne.n	8005008 <I2SEx_RxISR_I2SExt+0x50>
 8005004:	4b11      	ldr	r3, [pc, #68]	@ (800504c <I2SEx_RxISR_I2SExt+0x94>)
 8005006:	e001      	b.n	800500c <I2SEx_RxISR_I2SExt+0x54>
 8005008:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	490d      	ldr	r1, [pc, #52]	@ (8005048 <I2SEx_RxISR_I2SExt+0x90>)
 8005014:	428b      	cmp	r3, r1
 8005016:	d101      	bne.n	800501c <I2SEx_RxISR_I2SExt+0x64>
 8005018:	4b0c      	ldr	r3, [pc, #48]	@ (800504c <I2SEx_RxISR_I2SExt+0x94>)
 800501a:	e001      	b.n	8005020 <I2SEx_RxISR_I2SExt+0x68>
 800501c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005020:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005024:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800502a:	b29b      	uxth	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d106      	bne.n	800503e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff ff03 	bl	8004e44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40003800 	.word	0x40003800
 800504c:	40003400 	.word	0x40003400

08005050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e267      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d075      	beq.n	800515a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800506e:	4b88      	ldr	r3, [pc, #544]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 030c 	and.w	r3, r3, #12
 8005076:	2b04      	cmp	r3, #4
 8005078:	d00c      	beq.n	8005094 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800507a:	4b85      	ldr	r3, [pc, #532]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005082:	2b08      	cmp	r3, #8
 8005084:	d112      	bne.n	80050ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005086:	4b82      	ldr	r3, [pc, #520]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800508e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005092:	d10b      	bne.n	80050ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005094:	4b7e      	ldr	r3, [pc, #504]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d05b      	beq.n	8005158 <HAL_RCC_OscConfig+0x108>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d157      	bne.n	8005158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e242      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b4:	d106      	bne.n	80050c4 <HAL_RCC_OscConfig+0x74>
 80050b6:	4b76      	ldr	r3, [pc, #472]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a75      	ldr	r2, [pc, #468]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 80050bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	e01d      	b.n	8005100 <HAL_RCC_OscConfig+0xb0>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050cc:	d10c      	bne.n	80050e8 <HAL_RCC_OscConfig+0x98>
 80050ce:	4b70      	ldr	r3, [pc, #448]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a6f      	ldr	r2, [pc, #444]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 80050d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	4b6d      	ldr	r3, [pc, #436]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a6c      	ldr	r2, [pc, #432]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 80050e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	e00b      	b.n	8005100 <HAL_RCC_OscConfig+0xb0>
 80050e8:	4b69      	ldr	r3, [pc, #420]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a68      	ldr	r2, [pc, #416]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 80050ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	4b66      	ldr	r3, [pc, #408]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a65      	ldr	r2, [pc, #404]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 80050fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d013      	beq.n	8005130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005108:	f7fc fd00 	bl	8001b0c <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005110:	f7fc fcfc 	bl	8001b0c <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b64      	cmp	r3, #100	@ 0x64
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e207      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005122:	4b5b      	ldr	r3, [pc, #364]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0f0      	beq.n	8005110 <HAL_RCC_OscConfig+0xc0>
 800512e:	e014      	b.n	800515a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005130:	f7fc fcec 	bl	8001b0c <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005138:	f7fc fce8 	bl	8001b0c <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b64      	cmp	r3, #100	@ 0x64
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e1f3      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800514a:	4b51      	ldr	r3, [pc, #324]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f0      	bne.n	8005138 <HAL_RCC_OscConfig+0xe8>
 8005156:	e000      	b.n	800515a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d063      	beq.n	800522e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005166:	4b4a      	ldr	r3, [pc, #296]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 030c 	and.w	r3, r3, #12
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00b      	beq.n	800518a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005172:	4b47      	ldr	r3, [pc, #284]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800517a:	2b08      	cmp	r3, #8
 800517c:	d11c      	bne.n	80051b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800517e:	4b44      	ldr	r3, [pc, #272]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d116      	bne.n	80051b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800518a:	4b41      	ldr	r3, [pc, #260]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <HAL_RCC_OscConfig+0x152>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d001      	beq.n	80051a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e1c7      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a2:	4b3b      	ldr	r3, [pc, #236]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	4937      	ldr	r1, [pc, #220]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051b6:	e03a      	b.n	800522e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d020      	beq.n	8005202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051c0:	4b34      	ldr	r3, [pc, #208]	@ (8005294 <HAL_RCC_OscConfig+0x244>)
 80051c2:	2201      	movs	r2, #1
 80051c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c6:	f7fc fca1 	bl	8001b0c <HAL_GetTick>
 80051ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051cc:	e008      	b.n	80051e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051ce:	f7fc fc9d 	bl	8001b0c <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e1a8      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0f0      	beq.n	80051ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ec:	4b28      	ldr	r3, [pc, #160]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	4925      	ldr	r1, [pc, #148]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	600b      	str	r3, [r1, #0]
 8005200:	e015      	b.n	800522e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005202:	4b24      	ldr	r3, [pc, #144]	@ (8005294 <HAL_RCC_OscConfig+0x244>)
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005208:	f7fc fc80 	bl	8001b0c <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005210:	f7fc fc7c 	bl	8001b0c <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e187      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005222:	4b1b      	ldr	r3, [pc, #108]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1f0      	bne.n	8005210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b00      	cmp	r3, #0
 8005238:	d036      	beq.n	80052a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d016      	beq.n	8005270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005242:	4b15      	ldr	r3, [pc, #84]	@ (8005298 <HAL_RCC_OscConfig+0x248>)
 8005244:	2201      	movs	r2, #1
 8005246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005248:	f7fc fc60 	bl	8001b0c <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005250:	f7fc fc5c 	bl	8001b0c <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e167      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005262:	4b0b      	ldr	r3, [pc, #44]	@ (8005290 <HAL_RCC_OscConfig+0x240>)
 8005264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0f0      	beq.n	8005250 <HAL_RCC_OscConfig+0x200>
 800526e:	e01b      	b.n	80052a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005270:	4b09      	ldr	r3, [pc, #36]	@ (8005298 <HAL_RCC_OscConfig+0x248>)
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005276:	f7fc fc49 	bl	8001b0c <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800527c:	e00e      	b.n	800529c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800527e:	f7fc fc45 	bl	8001b0c <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d907      	bls.n	800529c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e150      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
 8005290:	40023800 	.word	0x40023800
 8005294:	42470000 	.word	0x42470000
 8005298:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800529c:	4b88      	ldr	r3, [pc, #544]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 800529e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1ea      	bne.n	800527e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 8097 	beq.w	80053e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052b6:	2300      	movs	r3, #0
 80052b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ba:	4b81      	ldr	r3, [pc, #516]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 80052bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10f      	bne.n	80052e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052c6:	2300      	movs	r3, #0
 80052c8:	60bb      	str	r3, [r7, #8]
 80052ca:	4b7d      	ldr	r3, [pc, #500]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 80052cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ce:	4a7c      	ldr	r2, [pc, #496]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 80052d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80052d6:	4b7a      	ldr	r3, [pc, #488]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 80052d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052de:	60bb      	str	r3, [r7, #8]
 80052e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052e2:	2301      	movs	r3, #1
 80052e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e6:	4b77      	ldr	r3, [pc, #476]	@ (80054c4 <HAL_RCC_OscConfig+0x474>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d118      	bne.n	8005324 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052f2:	4b74      	ldr	r3, [pc, #464]	@ (80054c4 <HAL_RCC_OscConfig+0x474>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a73      	ldr	r2, [pc, #460]	@ (80054c4 <HAL_RCC_OscConfig+0x474>)
 80052f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052fe:	f7fc fc05 	bl	8001b0c <HAL_GetTick>
 8005302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005304:	e008      	b.n	8005318 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005306:	f7fc fc01 	bl	8001b0c <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d901      	bls.n	8005318 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e10c      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005318:	4b6a      	ldr	r3, [pc, #424]	@ (80054c4 <HAL_RCC_OscConfig+0x474>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0f0      	beq.n	8005306 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d106      	bne.n	800533a <HAL_RCC_OscConfig+0x2ea>
 800532c:	4b64      	ldr	r3, [pc, #400]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 800532e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005330:	4a63      	ldr	r2, [pc, #396]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 8005332:	f043 0301 	orr.w	r3, r3, #1
 8005336:	6713      	str	r3, [r2, #112]	@ 0x70
 8005338:	e01c      	b.n	8005374 <HAL_RCC_OscConfig+0x324>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	2b05      	cmp	r3, #5
 8005340:	d10c      	bne.n	800535c <HAL_RCC_OscConfig+0x30c>
 8005342:	4b5f      	ldr	r3, [pc, #380]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 8005344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005346:	4a5e      	ldr	r2, [pc, #376]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 8005348:	f043 0304 	orr.w	r3, r3, #4
 800534c:	6713      	str	r3, [r2, #112]	@ 0x70
 800534e:	4b5c      	ldr	r3, [pc, #368]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 8005350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005352:	4a5b      	ldr	r2, [pc, #364]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 8005354:	f043 0301 	orr.w	r3, r3, #1
 8005358:	6713      	str	r3, [r2, #112]	@ 0x70
 800535a:	e00b      	b.n	8005374 <HAL_RCC_OscConfig+0x324>
 800535c:	4b58      	ldr	r3, [pc, #352]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 800535e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005360:	4a57      	ldr	r2, [pc, #348]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 8005362:	f023 0301 	bic.w	r3, r3, #1
 8005366:	6713      	str	r3, [r2, #112]	@ 0x70
 8005368:	4b55      	ldr	r3, [pc, #340]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 800536a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800536c:	4a54      	ldr	r2, [pc, #336]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 800536e:	f023 0304 	bic.w	r3, r3, #4
 8005372:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d015      	beq.n	80053a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537c:	f7fc fbc6 	bl	8001b0c <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005382:	e00a      	b.n	800539a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005384:	f7fc fbc2 	bl	8001b0c <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005392:	4293      	cmp	r3, r2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e0cb      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800539a:	4b49      	ldr	r3, [pc, #292]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 800539c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0ee      	beq.n	8005384 <HAL_RCC_OscConfig+0x334>
 80053a6:	e014      	b.n	80053d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053a8:	f7fc fbb0 	bl	8001b0c <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ae:	e00a      	b.n	80053c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b0:	f7fc fbac 	bl	8001b0c <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053be:	4293      	cmp	r3, r2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e0b5      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053c6:	4b3e      	ldr	r3, [pc, #248]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 80053c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1ee      	bne.n	80053b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053d2:	7dfb      	ldrb	r3, [r7, #23]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d105      	bne.n	80053e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053d8:	4b39      	ldr	r3, [pc, #228]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 80053da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053dc:	4a38      	ldr	r2, [pc, #224]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 80053de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 80a1 	beq.w	8005530 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053ee:	4b34      	ldr	r3, [pc, #208]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 030c 	and.w	r3, r3, #12
 80053f6:	2b08      	cmp	r3, #8
 80053f8:	d05c      	beq.n	80054b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d141      	bne.n	8005486 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005402:	4b31      	ldr	r3, [pc, #196]	@ (80054c8 <HAL_RCC_OscConfig+0x478>)
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005408:	f7fc fb80 	bl	8001b0c <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005410:	f7fc fb7c 	bl	8001b0c <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e087      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005422:	4b27      	ldr	r3, [pc, #156]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f0      	bne.n	8005410 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69da      	ldr	r2, [r3, #28]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543c:	019b      	lsls	r3, r3, #6
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005444:	085b      	lsrs	r3, r3, #1
 8005446:	3b01      	subs	r3, #1
 8005448:	041b      	lsls	r3, r3, #16
 800544a:	431a      	orrs	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005450:	061b      	lsls	r3, r3, #24
 8005452:	491b      	ldr	r1, [pc, #108]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 8005454:	4313      	orrs	r3, r2
 8005456:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005458:	4b1b      	ldr	r3, [pc, #108]	@ (80054c8 <HAL_RCC_OscConfig+0x478>)
 800545a:	2201      	movs	r2, #1
 800545c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800545e:	f7fc fb55 	bl	8001b0c <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005464:	e008      	b.n	8005478 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005466:	f7fc fb51 	bl	8001b0c <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e05c      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005478:	4b11      	ldr	r3, [pc, #68]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0f0      	beq.n	8005466 <HAL_RCC_OscConfig+0x416>
 8005484:	e054      	b.n	8005530 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005486:	4b10      	ldr	r3, [pc, #64]	@ (80054c8 <HAL_RCC_OscConfig+0x478>)
 8005488:	2200      	movs	r2, #0
 800548a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800548c:	f7fc fb3e 	bl	8001b0c <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005494:	f7fc fb3a 	bl	8001b0c <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e045      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054a6:	4b06      	ldr	r3, [pc, #24]	@ (80054c0 <HAL_RCC_OscConfig+0x470>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1f0      	bne.n	8005494 <HAL_RCC_OscConfig+0x444>
 80054b2:	e03d      	b.n	8005530 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d107      	bne.n	80054cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e038      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
 80054c0:	40023800 	.word	0x40023800
 80054c4:	40007000 	.word	0x40007000
 80054c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054cc:	4b1b      	ldr	r3, [pc, #108]	@ (800553c <HAL_RCC_OscConfig+0x4ec>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d028      	beq.n	800552c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d121      	bne.n	800552c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d11a      	bne.n	800552c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054fc:	4013      	ands	r3, r2
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005502:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005504:	4293      	cmp	r3, r2
 8005506:	d111      	bne.n	800552c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005512:	085b      	lsrs	r3, r3, #1
 8005514:	3b01      	subs	r3, #1
 8005516:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005518:	429a      	cmp	r2, r3
 800551a:	d107      	bne.n	800552c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005526:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005528:	429a      	cmp	r2, r3
 800552a:	d001      	beq.n	8005530 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	40023800 	.word	0x40023800

08005540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e0cc      	b.n	80056ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005554:	4b68      	ldr	r3, [pc, #416]	@ (80056f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d90c      	bls.n	800557c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005562:	4b65      	ldr	r3, [pc, #404]	@ (80056f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800556a:	4b63      	ldr	r3, [pc, #396]	@ (80056f8 <HAL_RCC_ClockConfig+0x1b8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d001      	beq.n	800557c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e0b8      	b.n	80056ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d020      	beq.n	80055ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005594:	4b59      	ldr	r3, [pc, #356]	@ (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	4a58      	ldr	r2, [pc, #352]	@ (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800559e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055ac:	4b53      	ldr	r3, [pc, #332]	@ (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	4a52      	ldr	r2, [pc, #328]	@ (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80055b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055b8:	4b50      	ldr	r3, [pc, #320]	@ (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	494d      	ldr	r1, [pc, #308]	@ (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d044      	beq.n	8005660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d107      	bne.n	80055ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055de:	4b47      	ldr	r3, [pc, #284]	@ (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d119      	bne.n	800561e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e07f      	b.n	80056ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d003      	beq.n	80055fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055fa:	2b03      	cmp	r3, #3
 80055fc:	d107      	bne.n	800560e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055fe:	4b3f      	ldr	r3, [pc, #252]	@ (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e06f      	b.n	80056ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800560e:	4b3b      	ldr	r3, [pc, #236]	@ (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e067      	b.n	80056ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800561e:	4b37      	ldr	r3, [pc, #220]	@ (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f023 0203 	bic.w	r2, r3, #3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	4934      	ldr	r1, [pc, #208]	@ (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 800562c:	4313      	orrs	r3, r2
 800562e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005630:	f7fc fa6c 	bl	8001b0c <HAL_GetTick>
 8005634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005636:	e00a      	b.n	800564e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005638:	f7fc fa68 	bl	8001b0c <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005646:	4293      	cmp	r3, r2
 8005648:	d901      	bls.n	800564e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e04f      	b.n	80056ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800564e:	4b2b      	ldr	r3, [pc, #172]	@ (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 020c 	and.w	r2, r3, #12
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	429a      	cmp	r2, r3
 800565e:	d1eb      	bne.n	8005638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005660:	4b25      	ldr	r3, [pc, #148]	@ (80056f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d20c      	bcs.n	8005688 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800566e:	4b22      	ldr	r3, [pc, #136]	@ (80056f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005676:	4b20      	ldr	r3, [pc, #128]	@ (80056f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d001      	beq.n	8005688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e032      	b.n	80056ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005694:	4b19      	ldr	r3, [pc, #100]	@ (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	4916      	ldr	r1, [pc, #88]	@ (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d009      	beq.n	80056c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056b2:	4b12      	ldr	r3, [pc, #72]	@ (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	490e      	ldr	r1, [pc, #56]	@ (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056c6:	f000 f821 	bl	800570c <HAL_RCC_GetSysClockFreq>
 80056ca:	4602      	mov	r2, r0
 80056cc:	4b0b      	ldr	r3, [pc, #44]	@ (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	091b      	lsrs	r3, r3, #4
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	490a      	ldr	r1, [pc, #40]	@ (8005700 <HAL_RCC_ClockConfig+0x1c0>)
 80056d8:	5ccb      	ldrb	r3, [r1, r3]
 80056da:	fa22 f303 	lsr.w	r3, r2, r3
 80056de:	4a09      	ldr	r2, [pc, #36]	@ (8005704 <HAL_RCC_ClockConfig+0x1c4>)
 80056e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80056e2:	4b09      	ldr	r3, [pc, #36]	@ (8005708 <HAL_RCC_ClockConfig+0x1c8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fc f9cc 	bl	8001a84 <HAL_InitTick>

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	40023c00 	.word	0x40023c00
 80056fc:	40023800 	.word	0x40023800
 8005700:	0800ce7c 	.word	0x0800ce7c
 8005704:	20000000 	.word	0x20000000
 8005708:	20000004 	.word	0x20000004

0800570c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800570c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005710:	b094      	sub	sp, #80	@ 0x50
 8005712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005724:	4b79      	ldr	r3, [pc, #484]	@ (800590c <HAL_RCC_GetSysClockFreq+0x200>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f003 030c 	and.w	r3, r3, #12
 800572c:	2b08      	cmp	r3, #8
 800572e:	d00d      	beq.n	800574c <HAL_RCC_GetSysClockFreq+0x40>
 8005730:	2b08      	cmp	r3, #8
 8005732:	f200 80e1 	bhi.w	80058f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <HAL_RCC_GetSysClockFreq+0x34>
 800573a:	2b04      	cmp	r3, #4
 800573c:	d003      	beq.n	8005746 <HAL_RCC_GetSysClockFreq+0x3a>
 800573e:	e0db      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005740:	4b73      	ldr	r3, [pc, #460]	@ (8005910 <HAL_RCC_GetSysClockFreq+0x204>)
 8005742:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005744:	e0db      	b.n	80058fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005746:	4b73      	ldr	r3, [pc, #460]	@ (8005914 <HAL_RCC_GetSysClockFreq+0x208>)
 8005748:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800574a:	e0d8      	b.n	80058fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800574c:	4b6f      	ldr	r3, [pc, #444]	@ (800590c <HAL_RCC_GetSysClockFreq+0x200>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005754:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005756:	4b6d      	ldr	r3, [pc, #436]	@ (800590c <HAL_RCC_GetSysClockFreq+0x200>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d063      	beq.n	800582a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005762:	4b6a      	ldr	r3, [pc, #424]	@ (800590c <HAL_RCC_GetSysClockFreq+0x200>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	099b      	lsrs	r3, r3, #6
 8005768:	2200      	movs	r2, #0
 800576a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800576c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800576e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005774:	633b      	str	r3, [r7, #48]	@ 0x30
 8005776:	2300      	movs	r3, #0
 8005778:	637b      	str	r3, [r7, #52]	@ 0x34
 800577a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800577e:	4622      	mov	r2, r4
 8005780:	462b      	mov	r3, r5
 8005782:	f04f 0000 	mov.w	r0, #0
 8005786:	f04f 0100 	mov.w	r1, #0
 800578a:	0159      	lsls	r1, r3, #5
 800578c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005790:	0150      	lsls	r0, r2, #5
 8005792:	4602      	mov	r2, r0
 8005794:	460b      	mov	r3, r1
 8005796:	4621      	mov	r1, r4
 8005798:	1a51      	subs	r1, r2, r1
 800579a:	6139      	str	r1, [r7, #16]
 800579c:	4629      	mov	r1, r5
 800579e:	eb63 0301 	sbc.w	r3, r3, r1
 80057a2:	617b      	str	r3, [r7, #20]
 80057a4:	f04f 0200 	mov.w	r2, #0
 80057a8:	f04f 0300 	mov.w	r3, #0
 80057ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057b0:	4659      	mov	r1, fp
 80057b2:	018b      	lsls	r3, r1, #6
 80057b4:	4651      	mov	r1, sl
 80057b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057ba:	4651      	mov	r1, sl
 80057bc:	018a      	lsls	r2, r1, #6
 80057be:	4651      	mov	r1, sl
 80057c0:	ebb2 0801 	subs.w	r8, r2, r1
 80057c4:	4659      	mov	r1, fp
 80057c6:	eb63 0901 	sbc.w	r9, r3, r1
 80057ca:	f04f 0200 	mov.w	r2, #0
 80057ce:	f04f 0300 	mov.w	r3, #0
 80057d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057de:	4690      	mov	r8, r2
 80057e0:	4699      	mov	r9, r3
 80057e2:	4623      	mov	r3, r4
 80057e4:	eb18 0303 	adds.w	r3, r8, r3
 80057e8:	60bb      	str	r3, [r7, #8]
 80057ea:	462b      	mov	r3, r5
 80057ec:	eb49 0303 	adc.w	r3, r9, r3
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	f04f 0300 	mov.w	r3, #0
 80057fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057fe:	4629      	mov	r1, r5
 8005800:	024b      	lsls	r3, r1, #9
 8005802:	4621      	mov	r1, r4
 8005804:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005808:	4621      	mov	r1, r4
 800580a:	024a      	lsls	r2, r1, #9
 800580c:	4610      	mov	r0, r2
 800580e:	4619      	mov	r1, r3
 8005810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005812:	2200      	movs	r2, #0
 8005814:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005816:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005818:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800581c:	f7fb f9c4 	bl	8000ba8 <__aeabi_uldivmod>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	4613      	mov	r3, r2
 8005826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005828:	e058      	b.n	80058dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800582a:	4b38      	ldr	r3, [pc, #224]	@ (800590c <HAL_RCC_GetSysClockFreq+0x200>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	099b      	lsrs	r3, r3, #6
 8005830:	2200      	movs	r2, #0
 8005832:	4618      	mov	r0, r3
 8005834:	4611      	mov	r1, r2
 8005836:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800583a:	623b      	str	r3, [r7, #32]
 800583c:	2300      	movs	r3, #0
 800583e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005840:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005844:	4642      	mov	r2, r8
 8005846:	464b      	mov	r3, r9
 8005848:	f04f 0000 	mov.w	r0, #0
 800584c:	f04f 0100 	mov.w	r1, #0
 8005850:	0159      	lsls	r1, r3, #5
 8005852:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005856:	0150      	lsls	r0, r2, #5
 8005858:	4602      	mov	r2, r0
 800585a:	460b      	mov	r3, r1
 800585c:	4641      	mov	r1, r8
 800585e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005862:	4649      	mov	r1, r9
 8005864:	eb63 0b01 	sbc.w	fp, r3, r1
 8005868:	f04f 0200 	mov.w	r2, #0
 800586c:	f04f 0300 	mov.w	r3, #0
 8005870:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005874:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005878:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800587c:	ebb2 040a 	subs.w	r4, r2, sl
 8005880:	eb63 050b 	sbc.w	r5, r3, fp
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	f04f 0300 	mov.w	r3, #0
 800588c:	00eb      	lsls	r3, r5, #3
 800588e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005892:	00e2      	lsls	r2, r4, #3
 8005894:	4614      	mov	r4, r2
 8005896:	461d      	mov	r5, r3
 8005898:	4643      	mov	r3, r8
 800589a:	18e3      	adds	r3, r4, r3
 800589c:	603b      	str	r3, [r7, #0]
 800589e:	464b      	mov	r3, r9
 80058a0:	eb45 0303 	adc.w	r3, r5, r3
 80058a4:	607b      	str	r3, [r7, #4]
 80058a6:	f04f 0200 	mov.w	r2, #0
 80058aa:	f04f 0300 	mov.w	r3, #0
 80058ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058b2:	4629      	mov	r1, r5
 80058b4:	028b      	lsls	r3, r1, #10
 80058b6:	4621      	mov	r1, r4
 80058b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058bc:	4621      	mov	r1, r4
 80058be:	028a      	lsls	r2, r1, #10
 80058c0:	4610      	mov	r0, r2
 80058c2:	4619      	mov	r1, r3
 80058c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058c6:	2200      	movs	r2, #0
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	61fa      	str	r2, [r7, #28]
 80058cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058d0:	f7fb f96a 	bl	8000ba8 <__aeabi_uldivmod>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4613      	mov	r3, r2
 80058da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80058dc:	4b0b      	ldr	r3, [pc, #44]	@ (800590c <HAL_RCC_GetSysClockFreq+0x200>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	0c1b      	lsrs	r3, r3, #16
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	3301      	adds	r3, #1
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80058ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058f6:	e002      	b.n	80058fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058f8:	4b05      	ldr	r3, [pc, #20]	@ (8005910 <HAL_RCC_GetSysClockFreq+0x204>)
 80058fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005900:	4618      	mov	r0, r3
 8005902:	3750      	adds	r7, #80	@ 0x50
 8005904:	46bd      	mov	sp, r7
 8005906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800590a:	bf00      	nop
 800590c:	40023800 	.word	0x40023800
 8005910:	00f42400 	.word	0x00f42400
 8005914:	007a1200 	.word	0x007a1200

08005918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800591c:	4b03      	ldr	r3, [pc, #12]	@ (800592c <HAL_RCC_GetHCLKFreq+0x14>)
 800591e:	681b      	ldr	r3, [r3, #0]
}
 8005920:	4618      	mov	r0, r3
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20000000 	.word	0x20000000

08005930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005934:	f7ff fff0 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 8005938:	4602      	mov	r2, r0
 800593a:	4b05      	ldr	r3, [pc, #20]	@ (8005950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	0a9b      	lsrs	r3, r3, #10
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	4903      	ldr	r1, [pc, #12]	@ (8005954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005946:	5ccb      	ldrb	r3, [r1, r3]
 8005948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800594c:	4618      	mov	r0, r3
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40023800 	.word	0x40023800
 8005954:	0800ce8c 	.word	0x0800ce8c

08005958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800595c:	f7ff ffdc 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 8005960:	4602      	mov	r2, r0
 8005962:	4b05      	ldr	r3, [pc, #20]	@ (8005978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	0b5b      	lsrs	r3, r3, #13
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	4903      	ldr	r1, [pc, #12]	@ (800597c <HAL_RCC_GetPCLK2Freq+0x24>)
 800596e:	5ccb      	ldrb	r3, [r1, r3]
 8005970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005974:	4618      	mov	r0, r3
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40023800 	.word	0x40023800
 800597c:	0800ce8c 	.word	0x0800ce8c

08005980 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b00      	cmp	r3, #0
 800599a:	d105      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d035      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80059a8:	4b62      	ldr	r3, [pc, #392]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059ae:	f7fc f8ad 	bl	8001b0c <HAL_GetTick>
 80059b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059b4:	e008      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059b6:	f7fc f8a9 	bl	8001b0c <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e0b0      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059c8:	4b5b      	ldr	r3, [pc, #364]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1f0      	bne.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	019a      	lsls	r2, r3, #6
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	071b      	lsls	r3, r3, #28
 80059e0:	4955      	ldr	r1, [pc, #340]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059e8:	4b52      	ldr	r3, [pc, #328]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80059ea:	2201      	movs	r2, #1
 80059ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059ee:	f7fc f88d 	bl	8001b0c <HAL_GetTick>
 80059f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059f4:	e008      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059f6:	f7fc f889 	bl	8001b0c <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e090      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a08:	4b4b      	ldr	r3, [pc, #300]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0f0      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8083 	beq.w	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	4b44      	ldr	r3, [pc, #272]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2a:	4a43      	ldr	r2, [pc, #268]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a32:	4b41      	ldr	r3, [pc, #260]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a3e      	ldr	r2, [pc, #248]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a48:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a4a:	f7fc f85f 	bl	8001b0c <HAL_GetTick>
 8005a4e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005a50:	e008      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a52:	f7fc f85b 	bl	8001b0c <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d901      	bls.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e062      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005a64:	4b35      	ldr	r3, [pc, #212]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0f0      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a70:	4b31      	ldr	r3, [pc, #196]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a78:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d02f      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d028      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a96:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a98:	4b29      	ldr	r3, [pc, #164]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a9e:	4b28      	ldr	r3, [pc, #160]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005aa4:	4a24      	ldr	r2, [pc, #144]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005aaa:	4b23      	ldr	r3, [pc, #140]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d114      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005ab6:	f7fc f829 	bl	8001b0c <HAL_GetTick>
 8005aba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005abc:	e00a      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005abe:	f7fc f825 	bl	8001b0c <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e02a      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad4:	4b18      	ldr	r3, [pc, #96]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0ee      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ae8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005aec:	d10d      	bne.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005aee:	4b12      	ldr	r3, [pc, #72]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005afe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b02:	490d      	ldr	r1, [pc, #52]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	608b      	str	r3, [r1, #8]
 8005b08:	e005      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b10:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005b14:	6093      	str	r3, [r2, #8]
 8005b16:	4b08      	ldr	r3, [pc, #32]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b18:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b22:	4905      	ldr	r1, [pc, #20]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	42470068 	.word	0x42470068
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	40007000 	.word	0x40007000
 8005b40:	42470e40 	.word	0x42470e40

08005b44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d13f      	bne.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005b62:	4b24      	ldr	r3, [pc, #144]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b6a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d006      	beq.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b78:	d12f      	bne.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005b7c:	617b      	str	r3, [r7, #20]
          break;
 8005b7e:	e02f      	b.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b80:	4b1c      	ldr	r3, [pc, #112]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b8c:	d108      	bne.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b8e:	4b19      	ldr	r3, [pc, #100]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b96:	4a19      	ldr	r2, [pc, #100]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9c:	613b      	str	r3, [r7, #16]
 8005b9e:	e007      	b.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005ba0:	4b14      	ldr	r3, [pc, #80]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ba8:	4a15      	ldr	r2, [pc, #84]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bae:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005bb0:	4b10      	ldr	r3, [pc, #64]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bb6:	099b      	lsrs	r3, r3, #6
 8005bb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	fb02 f303 	mul.w	r3, r2, r3
 8005bc2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bca:	0f1b      	lsrs	r3, r3, #28
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd6:	617b      	str	r3, [r7, #20]
          break;
 8005bd8:	e002      	b.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	617b      	str	r3, [r7, #20]
          break;
 8005bde:	bf00      	nop
        }
      }
      break;
 8005be0:	e000      	b.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005be2:	bf00      	nop
    }
  }
  return frequency;
 8005be4:	697b      	ldr	r3, [r7, #20]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	371c      	adds	r7, #28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	00bb8000 	.word	0x00bb8000
 8005bfc:	007a1200 	.word	0x007a1200
 8005c00:	00f42400 	.word	0x00f42400

08005c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e07b      	b.n	8005d0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d108      	bne.n	8005c30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c26:	d009      	beq.n	8005c3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	61da      	str	r2, [r3, #28]
 8005c2e:	e005      	b.n	8005c3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d106      	bne.n	8005c5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fb fcbc 	bl	80015d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c84:	431a      	orrs	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cc0:	ea42 0103 	orr.w	r1, r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	0c1b      	lsrs	r3, r3, #16
 8005cda:	f003 0104 	and.w	r1, r3, #4
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce2:	f003 0210 	and.w	r2, r3, #16
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69da      	ldr	r2, [r3, #28]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cfc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b082      	sub	sp, #8
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e042      	b.n	8005dae <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d106      	bne.n	8005d42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7fb fc91 	bl	8001664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2224      	movs	r2, #36	@ 0x24
 8005d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fc86 	bl	800666c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691a      	ldr	r2, [r3, #16]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695a      	ldr	r2, [r3, #20]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b0ba      	sub	sp, #232	@ 0xe8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dee:	f003 030f 	and.w	r3, r3, #15
 8005df2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005df6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10f      	bne.n	8005e1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d009      	beq.n	8005e1e <HAL_UART_IRQHandler+0x66>
 8005e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fb69 	bl	80064ee <UART_Receive_IT>
      return;
 8005e1c:	e25b      	b.n	80062d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 80de 	beq.w	8005fe4 <HAL_UART_IRQHandler+0x22c>
 8005e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d106      	bne.n	8005e42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e38:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 80d1 	beq.w	8005fe4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00b      	beq.n	8005e66 <HAL_UART_IRQHandler+0xae>
 8005e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d005      	beq.n	8005e66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5e:	f043 0201 	orr.w	r2, r3, #1
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e6a:	f003 0304 	and.w	r3, r3, #4
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00b      	beq.n	8005e8a <HAL_UART_IRQHandler+0xd2>
 8005e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d005      	beq.n	8005e8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e82:	f043 0202 	orr.w	r2, r3, #2
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00b      	beq.n	8005eae <HAL_UART_IRQHandler+0xf6>
 8005e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d005      	beq.n	8005eae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea6:	f043 0204 	orr.w	r2, r3, #4
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d011      	beq.n	8005ede <HAL_UART_IRQHandler+0x126>
 8005eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ebe:	f003 0320 	and.w	r3, r3, #32
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d105      	bne.n	8005ed2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d005      	beq.n	8005ede <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed6:	f043 0208 	orr.w	r2, r3, #8
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 81f2 	beq.w	80062cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eec:	f003 0320 	and.w	r3, r3, #32
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d008      	beq.n	8005f06 <HAL_UART_IRQHandler+0x14e>
 8005ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ef8:	f003 0320 	and.w	r3, r3, #32
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 faf4 	bl	80064ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f10:	2b40      	cmp	r3, #64	@ 0x40
 8005f12:	bf0c      	ite	eq
 8005f14:	2301      	moveq	r3, #1
 8005f16:	2300      	movne	r3, #0
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f22:	f003 0308 	and.w	r3, r3, #8
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d103      	bne.n	8005f32 <HAL_UART_IRQHandler+0x17a>
 8005f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d04f      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f9fc 	bl	8006330 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f42:	2b40      	cmp	r3, #64	@ 0x40
 8005f44:	d141      	bne.n	8005fca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3314      	adds	r3, #20
 8005f4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f54:	e853 3f00 	ldrex	r3, [r3]
 8005f58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3314      	adds	r3, #20
 8005f6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005f72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005f76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005f7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1d9      	bne.n	8005f46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d013      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f9e:	4a7e      	ldr	r2, [pc, #504]	@ (8006198 <HAL_UART_IRQHandler+0x3e0>)
 8005fa0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fb ff61 	bl	8001e6e <HAL_DMA_Abort_IT>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d016      	beq.n	8005fe0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc0:	e00e      	b.n	8005fe0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f99e 	bl	8006304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc8:	e00a      	b.n	8005fe0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f99a 	bl	8006304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd0:	e006      	b.n	8005fe0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f996 	bl	8006304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005fde:	e175      	b.n	80062cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe0:	bf00      	nop
    return;
 8005fe2:	e173      	b.n	80062cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	f040 814f 	bne.w	800628c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ff2:	f003 0310 	and.w	r3, r3, #16
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 8148 	beq.w	800628c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006000:	f003 0310 	and.w	r3, r3, #16
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 8141 	beq.w	800628c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800600a:	2300      	movs	r3, #0
 800600c:	60bb      	str	r3, [r7, #8]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	60bb      	str	r3, [r7, #8]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	60bb      	str	r3, [r7, #8]
 800601e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800602a:	2b40      	cmp	r3, #64	@ 0x40
 800602c:	f040 80b6 	bne.w	800619c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800603c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 8145 	beq.w	80062d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800604a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800604e:	429a      	cmp	r2, r3
 8006050:	f080 813e 	bcs.w	80062d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800605a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006066:	f000 8088 	beq.w	800617a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	330c      	adds	r3, #12
 8006070:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006080:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006088:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	330c      	adds	r3, #12
 8006092:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006096:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800609a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80060a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060a6:	e841 2300 	strex	r3, r2, [r1]
 80060aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80060ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1d9      	bne.n	800606a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3314      	adds	r3, #20
 80060bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060c0:	e853 3f00 	ldrex	r3, [r3]
 80060c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80060c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060c8:	f023 0301 	bic.w	r3, r3, #1
 80060cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3314      	adds	r3, #20
 80060d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80060da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80060de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80060e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80060ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1e1      	bne.n	80060b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3314      	adds	r3, #20
 80060f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060fc:	e853 3f00 	ldrex	r3, [r3]
 8006100:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006102:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006108:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3314      	adds	r3, #20
 8006112:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006116:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006118:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800611c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800611e:	e841 2300 	strex	r3, r2, [r1]
 8006122:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006124:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1e3      	bne.n	80060f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2220      	movs	r2, #32
 800612e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	330c      	adds	r3, #12
 800613e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006140:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006142:	e853 3f00 	ldrex	r3, [r3]
 8006146:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800614a:	f023 0310 	bic.w	r3, r3, #16
 800614e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	330c      	adds	r3, #12
 8006158:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800615c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800615e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006160:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006162:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006164:	e841 2300 	strex	r3, r2, [r1]
 8006168:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800616a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1e3      	bne.n	8006138 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006174:	4618      	mov	r0, r3
 8006176:	f7fb fe0a 	bl	8001d8e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2202      	movs	r2, #2
 800617e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006188:	b29b      	uxth	r3, r3
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	b29b      	uxth	r3, r3
 800618e:	4619      	mov	r1, r3
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f8c1 	bl	8006318 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006196:	e09b      	b.n	80062d0 <HAL_UART_IRQHandler+0x518>
 8006198:	080063f7 	.word	0x080063f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 808e 	beq.w	80062d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80061b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 8089 	beq.w	80062d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	330c      	adds	r3, #12
 80061c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061cc:	e853 3f00 	ldrex	r3, [r3]
 80061d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	330c      	adds	r3, #12
 80061e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80061e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80061e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1e3      	bne.n	80061c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	3314      	adds	r3, #20
 8006200:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006204:	e853 3f00 	ldrex	r3, [r3]
 8006208:	623b      	str	r3, [r7, #32]
   return(result);
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	f023 0301 	bic.w	r3, r3, #1
 8006210:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3314      	adds	r3, #20
 800621a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800621e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006220:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006222:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006226:	e841 2300 	strex	r3, r2, [r1]
 800622a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800622c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1e3      	bne.n	80061fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2220      	movs	r2, #32
 8006236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	330c      	adds	r3, #12
 8006246:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	e853 3f00 	ldrex	r3, [r3]
 800624e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f023 0310 	bic.w	r3, r3, #16
 8006256:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	330c      	adds	r3, #12
 8006260:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006264:	61fa      	str	r2, [r7, #28]
 8006266:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006268:	69b9      	ldr	r1, [r7, #24]
 800626a:	69fa      	ldr	r2, [r7, #28]
 800626c:	e841 2300 	strex	r3, r2, [r1]
 8006270:	617b      	str	r3, [r7, #20]
   return(result);
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1e3      	bne.n	8006240 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800627e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f847 	bl	8006318 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800628a:	e023      	b.n	80062d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800628c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006294:	2b00      	cmp	r3, #0
 8006296:	d009      	beq.n	80062ac <HAL_UART_IRQHandler+0x4f4>
 8006298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800629c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f8ba 	bl	800641e <UART_Transmit_IT>
    return;
 80062aa:	e014      	b.n	80062d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00e      	beq.n	80062d6 <HAL_UART_IRQHandler+0x51e>
 80062b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d008      	beq.n	80062d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f8fa 	bl	80064be <UART_EndTransmit_IT>
    return;
 80062ca:	e004      	b.n	80062d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80062cc:	bf00      	nop
 80062ce:	e002      	b.n	80062d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80062d0:	bf00      	nop
 80062d2:	e000      	b.n	80062d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80062d4:	bf00      	nop
  }
}
 80062d6:	37e8      	adds	r7, #232	@ 0xe8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	460b      	mov	r3, r1
 8006322:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006330:	b480      	push	{r7}
 8006332:	b095      	sub	sp, #84	@ 0x54
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	330c      	adds	r3, #12
 800633e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006342:	e853 3f00 	ldrex	r3, [r3]
 8006346:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800634e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	330c      	adds	r3, #12
 8006356:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006358:	643a      	str	r2, [r7, #64]	@ 0x40
 800635a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800635e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006360:	e841 2300 	strex	r3, r2, [r1]
 8006364:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e5      	bne.n	8006338 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3314      	adds	r3, #20
 8006372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	e853 3f00 	ldrex	r3, [r3]
 800637a:	61fb      	str	r3, [r7, #28]
   return(result);
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	f023 0301 	bic.w	r3, r3, #1
 8006382:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3314      	adds	r3, #20
 800638a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800638c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800638e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006392:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006394:	e841 2300 	strex	r3, r2, [r1]
 8006398:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e5      	bne.n	800636c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d119      	bne.n	80063dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	330c      	adds	r3, #12
 80063ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	e853 3f00 	ldrex	r3, [r3]
 80063b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f023 0310 	bic.w	r3, r3, #16
 80063be:	647b      	str	r3, [r7, #68]	@ 0x44
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	330c      	adds	r3, #12
 80063c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063c8:	61ba      	str	r2, [r7, #24]
 80063ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063cc:	6979      	ldr	r1, [r7, #20]
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	e841 2300 	strex	r3, r2, [r1]
 80063d4:	613b      	str	r3, [r7, #16]
   return(result);
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e5      	bne.n	80063a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2220      	movs	r2, #32
 80063e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80063ea:	bf00      	nop
 80063ec:	3754      	adds	r7, #84	@ 0x54
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006402:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f7ff ff77 	bl	8006304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006416:	bf00      	nop
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800641e:	b480      	push	{r7}
 8006420:	b085      	sub	sp, #20
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b21      	cmp	r3, #33	@ 0x21
 8006430:	d13e      	bne.n	80064b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800643a:	d114      	bne.n	8006466 <UART_Transmit_IT+0x48>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d110      	bne.n	8006466 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006458:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	1c9a      	adds	r2, r3, #2
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	621a      	str	r2, [r3, #32]
 8006464:	e008      	b.n	8006478 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	1c59      	adds	r1, r3, #1
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6211      	str	r1, [r2, #32]
 8006470:	781a      	ldrb	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800647c:	b29b      	uxth	r3, r3
 800647e:	3b01      	subs	r3, #1
 8006480:	b29b      	uxth	r3, r3
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	4619      	mov	r1, r3
 8006486:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10f      	bne.n	80064ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800649a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	e000      	b.n	80064b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064b0:	2302      	movs	r3, #2
  }
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b082      	sub	sp, #8
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2220      	movs	r2, #32
 80064da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff fefc 	bl	80062dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b08c      	sub	sp, #48	@ 0x30
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b22      	cmp	r3, #34	@ 0x22
 8006500:	f040 80ae 	bne.w	8006660 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800650c:	d117      	bne.n	800653e <UART_Receive_IT+0x50>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d113      	bne.n	800653e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006516:	2300      	movs	r3, #0
 8006518:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	b29b      	uxth	r3, r3
 8006528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800652c:	b29a      	uxth	r2, r3
 800652e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006530:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006536:	1c9a      	adds	r2, r3, #2
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	629a      	str	r2, [r3, #40]	@ 0x28
 800653c:	e026      	b.n	800658c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006542:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006544:	2300      	movs	r3, #0
 8006546:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006550:	d007      	beq.n	8006562 <UART_Receive_IT+0x74>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <UART_Receive_IT+0x82>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d106      	bne.n	8006570 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	b2da      	uxtb	r2, r3
 800656a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	e008      	b.n	8006582 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	b2db      	uxtb	r3, r3
 8006578:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800657c:	b2da      	uxtb	r2, r3
 800657e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006580:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006590:	b29b      	uxth	r3, r3
 8006592:	3b01      	subs	r3, #1
 8006594:	b29b      	uxth	r3, r3
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	4619      	mov	r1, r3
 800659a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800659c:	2b00      	cmp	r3, #0
 800659e:	d15d      	bne.n	800665c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 0220 	bic.w	r2, r2, #32
 80065ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80065be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	695a      	ldr	r2, [r3, #20]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 0201 	bic.w	r2, r2, #1
 80065ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d135      	bne.n	8006652 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	330c      	adds	r3, #12
 80065f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	e853 3f00 	ldrex	r3, [r3]
 80065fa:	613b      	str	r3, [r7, #16]
   return(result);
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f023 0310 	bic.w	r3, r3, #16
 8006602:	627b      	str	r3, [r7, #36]	@ 0x24
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	330c      	adds	r3, #12
 800660a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800660c:	623a      	str	r2, [r7, #32]
 800660e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006610:	69f9      	ldr	r1, [r7, #28]
 8006612:	6a3a      	ldr	r2, [r7, #32]
 8006614:	e841 2300 	strex	r3, r2, [r1]
 8006618:	61bb      	str	r3, [r7, #24]
   return(result);
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1e5      	bne.n	80065ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0310 	and.w	r3, r3, #16
 800662a:	2b10      	cmp	r3, #16
 800662c:	d10a      	bne.n	8006644 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800662e:	2300      	movs	r3, #0
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	60fb      	str	r3, [r7, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006648:	4619      	mov	r1, r3
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7ff fe64 	bl	8006318 <HAL_UARTEx_RxEventCallback>
 8006650:	e002      	b.n	8006658 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7ff fe4c 	bl	80062f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	e002      	b.n	8006662 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	e000      	b.n	8006662 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006660:	2302      	movs	r3, #2
  }
}
 8006662:	4618      	mov	r0, r3
 8006664:	3730      	adds	r7, #48	@ 0x30
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
	...

0800666c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800666c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006670:	b0c0      	sub	sp, #256	@ 0x100
 8006672:	af00      	add	r7, sp, #0
 8006674:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006688:	68d9      	ldr	r1, [r3, #12]
 800668a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	ea40 0301 	orr.w	r3, r0, r1
 8006694:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	431a      	orrs	r2, r3
 80066a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	431a      	orrs	r2, r3
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80066c4:	f021 010c 	bic.w	r1, r1, #12
 80066c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80066d2:	430b      	orrs	r3, r1
 80066d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80066e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e6:	6999      	ldr	r1, [r3, #24]
 80066e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	ea40 0301 	orr.w	r3, r0, r1
 80066f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	4b8f      	ldr	r3, [pc, #572]	@ (8006938 <UART_SetConfig+0x2cc>)
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d005      	beq.n	800670c <UART_SetConfig+0xa0>
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	4b8d      	ldr	r3, [pc, #564]	@ (800693c <UART_SetConfig+0x2d0>)
 8006708:	429a      	cmp	r2, r3
 800670a:	d104      	bne.n	8006716 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800670c:	f7ff f924 	bl	8005958 <HAL_RCC_GetPCLK2Freq>
 8006710:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006714:	e003      	b.n	800671e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006716:	f7ff f90b 	bl	8005930 <HAL_RCC_GetPCLK1Freq>
 800671a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800671e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006728:	f040 810c 	bne.w	8006944 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800672c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006730:	2200      	movs	r2, #0
 8006732:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006736:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800673a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800673e:	4622      	mov	r2, r4
 8006740:	462b      	mov	r3, r5
 8006742:	1891      	adds	r1, r2, r2
 8006744:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006746:	415b      	adcs	r3, r3
 8006748:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800674a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800674e:	4621      	mov	r1, r4
 8006750:	eb12 0801 	adds.w	r8, r2, r1
 8006754:	4629      	mov	r1, r5
 8006756:	eb43 0901 	adc.w	r9, r3, r1
 800675a:	f04f 0200 	mov.w	r2, #0
 800675e:	f04f 0300 	mov.w	r3, #0
 8006762:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006766:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800676a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800676e:	4690      	mov	r8, r2
 8006770:	4699      	mov	r9, r3
 8006772:	4623      	mov	r3, r4
 8006774:	eb18 0303 	adds.w	r3, r8, r3
 8006778:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800677c:	462b      	mov	r3, r5
 800677e:	eb49 0303 	adc.w	r3, r9, r3
 8006782:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006792:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006796:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800679a:	460b      	mov	r3, r1
 800679c:	18db      	adds	r3, r3, r3
 800679e:	653b      	str	r3, [r7, #80]	@ 0x50
 80067a0:	4613      	mov	r3, r2
 80067a2:	eb42 0303 	adc.w	r3, r2, r3
 80067a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80067a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80067ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80067b0:	f7fa f9fa 	bl	8000ba8 <__aeabi_uldivmod>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4b61      	ldr	r3, [pc, #388]	@ (8006940 <UART_SetConfig+0x2d4>)
 80067ba:	fba3 2302 	umull	r2, r3, r3, r2
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	011c      	lsls	r4, r3, #4
 80067c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80067d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80067d4:	4642      	mov	r2, r8
 80067d6:	464b      	mov	r3, r9
 80067d8:	1891      	adds	r1, r2, r2
 80067da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80067dc:	415b      	adcs	r3, r3
 80067de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80067e4:	4641      	mov	r1, r8
 80067e6:	eb12 0a01 	adds.w	sl, r2, r1
 80067ea:	4649      	mov	r1, r9
 80067ec:	eb43 0b01 	adc.w	fp, r3, r1
 80067f0:	f04f 0200 	mov.w	r2, #0
 80067f4:	f04f 0300 	mov.w	r3, #0
 80067f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006800:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006804:	4692      	mov	sl, r2
 8006806:	469b      	mov	fp, r3
 8006808:	4643      	mov	r3, r8
 800680a:	eb1a 0303 	adds.w	r3, sl, r3
 800680e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006812:	464b      	mov	r3, r9
 8006814:	eb4b 0303 	adc.w	r3, fp, r3
 8006818:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800681c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006828:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800682c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006830:	460b      	mov	r3, r1
 8006832:	18db      	adds	r3, r3, r3
 8006834:	643b      	str	r3, [r7, #64]	@ 0x40
 8006836:	4613      	mov	r3, r2
 8006838:	eb42 0303 	adc.w	r3, r2, r3
 800683c:	647b      	str	r3, [r7, #68]	@ 0x44
 800683e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006842:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006846:	f7fa f9af 	bl	8000ba8 <__aeabi_uldivmod>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	4611      	mov	r1, r2
 8006850:	4b3b      	ldr	r3, [pc, #236]	@ (8006940 <UART_SetConfig+0x2d4>)
 8006852:	fba3 2301 	umull	r2, r3, r3, r1
 8006856:	095b      	lsrs	r3, r3, #5
 8006858:	2264      	movs	r2, #100	@ 0x64
 800685a:	fb02 f303 	mul.w	r3, r2, r3
 800685e:	1acb      	subs	r3, r1, r3
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006866:	4b36      	ldr	r3, [pc, #216]	@ (8006940 <UART_SetConfig+0x2d4>)
 8006868:	fba3 2302 	umull	r2, r3, r3, r2
 800686c:	095b      	lsrs	r3, r3, #5
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006874:	441c      	add	r4, r3
 8006876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800687a:	2200      	movs	r2, #0
 800687c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006880:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006884:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006888:	4642      	mov	r2, r8
 800688a:	464b      	mov	r3, r9
 800688c:	1891      	adds	r1, r2, r2
 800688e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006890:	415b      	adcs	r3, r3
 8006892:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006894:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006898:	4641      	mov	r1, r8
 800689a:	1851      	adds	r1, r2, r1
 800689c:	6339      	str	r1, [r7, #48]	@ 0x30
 800689e:	4649      	mov	r1, r9
 80068a0:	414b      	adcs	r3, r1
 80068a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	f04f 0300 	mov.w	r3, #0
 80068ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80068b0:	4659      	mov	r1, fp
 80068b2:	00cb      	lsls	r3, r1, #3
 80068b4:	4651      	mov	r1, sl
 80068b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068ba:	4651      	mov	r1, sl
 80068bc:	00ca      	lsls	r2, r1, #3
 80068be:	4610      	mov	r0, r2
 80068c0:	4619      	mov	r1, r3
 80068c2:	4603      	mov	r3, r0
 80068c4:	4642      	mov	r2, r8
 80068c6:	189b      	adds	r3, r3, r2
 80068c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068cc:	464b      	mov	r3, r9
 80068ce:	460a      	mov	r2, r1
 80068d0:	eb42 0303 	adc.w	r3, r2, r3
 80068d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80068e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80068e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80068ec:	460b      	mov	r3, r1
 80068ee:	18db      	adds	r3, r3, r3
 80068f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068f2:	4613      	mov	r3, r2
 80068f4:	eb42 0303 	adc.w	r3, r2, r3
 80068f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80068fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006902:	f7fa f951 	bl	8000ba8 <__aeabi_uldivmod>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4b0d      	ldr	r3, [pc, #52]	@ (8006940 <UART_SetConfig+0x2d4>)
 800690c:	fba3 1302 	umull	r1, r3, r3, r2
 8006910:	095b      	lsrs	r3, r3, #5
 8006912:	2164      	movs	r1, #100	@ 0x64
 8006914:	fb01 f303 	mul.w	r3, r1, r3
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	00db      	lsls	r3, r3, #3
 800691c:	3332      	adds	r3, #50	@ 0x32
 800691e:	4a08      	ldr	r2, [pc, #32]	@ (8006940 <UART_SetConfig+0x2d4>)
 8006920:	fba2 2303 	umull	r2, r3, r2, r3
 8006924:	095b      	lsrs	r3, r3, #5
 8006926:	f003 0207 	and.w	r2, r3, #7
 800692a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4422      	add	r2, r4
 8006932:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006934:	e106      	b.n	8006b44 <UART_SetConfig+0x4d8>
 8006936:	bf00      	nop
 8006938:	40011000 	.word	0x40011000
 800693c:	40011400 	.word	0x40011400
 8006940:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006948:	2200      	movs	r2, #0
 800694a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800694e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006952:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006956:	4642      	mov	r2, r8
 8006958:	464b      	mov	r3, r9
 800695a:	1891      	adds	r1, r2, r2
 800695c:	6239      	str	r1, [r7, #32]
 800695e:	415b      	adcs	r3, r3
 8006960:	627b      	str	r3, [r7, #36]	@ 0x24
 8006962:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006966:	4641      	mov	r1, r8
 8006968:	1854      	adds	r4, r2, r1
 800696a:	4649      	mov	r1, r9
 800696c:	eb43 0501 	adc.w	r5, r3, r1
 8006970:	f04f 0200 	mov.w	r2, #0
 8006974:	f04f 0300 	mov.w	r3, #0
 8006978:	00eb      	lsls	r3, r5, #3
 800697a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800697e:	00e2      	lsls	r2, r4, #3
 8006980:	4614      	mov	r4, r2
 8006982:	461d      	mov	r5, r3
 8006984:	4643      	mov	r3, r8
 8006986:	18e3      	adds	r3, r4, r3
 8006988:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800698c:	464b      	mov	r3, r9
 800698e:	eb45 0303 	adc.w	r3, r5, r3
 8006992:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80069a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80069a6:	f04f 0200 	mov.w	r2, #0
 80069aa:	f04f 0300 	mov.w	r3, #0
 80069ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80069b2:	4629      	mov	r1, r5
 80069b4:	008b      	lsls	r3, r1, #2
 80069b6:	4621      	mov	r1, r4
 80069b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069bc:	4621      	mov	r1, r4
 80069be:	008a      	lsls	r2, r1, #2
 80069c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80069c4:	f7fa f8f0 	bl	8000ba8 <__aeabi_uldivmod>
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	4b60      	ldr	r3, [pc, #384]	@ (8006b50 <UART_SetConfig+0x4e4>)
 80069ce:	fba3 2302 	umull	r2, r3, r3, r2
 80069d2:	095b      	lsrs	r3, r3, #5
 80069d4:	011c      	lsls	r4, r3, #4
 80069d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069da:	2200      	movs	r2, #0
 80069dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80069e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80069e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80069e8:	4642      	mov	r2, r8
 80069ea:	464b      	mov	r3, r9
 80069ec:	1891      	adds	r1, r2, r2
 80069ee:	61b9      	str	r1, [r7, #24]
 80069f0:	415b      	adcs	r3, r3
 80069f2:	61fb      	str	r3, [r7, #28]
 80069f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069f8:	4641      	mov	r1, r8
 80069fa:	1851      	adds	r1, r2, r1
 80069fc:	6139      	str	r1, [r7, #16]
 80069fe:	4649      	mov	r1, r9
 8006a00:	414b      	adcs	r3, r1
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	f04f 0200 	mov.w	r2, #0
 8006a08:	f04f 0300 	mov.w	r3, #0
 8006a0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a10:	4659      	mov	r1, fp
 8006a12:	00cb      	lsls	r3, r1, #3
 8006a14:	4651      	mov	r1, sl
 8006a16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a1a:	4651      	mov	r1, sl
 8006a1c:	00ca      	lsls	r2, r1, #3
 8006a1e:	4610      	mov	r0, r2
 8006a20:	4619      	mov	r1, r3
 8006a22:	4603      	mov	r3, r0
 8006a24:	4642      	mov	r2, r8
 8006a26:	189b      	adds	r3, r3, r2
 8006a28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a2c:	464b      	mov	r3, r9
 8006a2e:	460a      	mov	r2, r1
 8006a30:	eb42 0303 	adc.w	r3, r2, r3
 8006a34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006a44:	f04f 0200 	mov.w	r2, #0
 8006a48:	f04f 0300 	mov.w	r3, #0
 8006a4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006a50:	4649      	mov	r1, r9
 8006a52:	008b      	lsls	r3, r1, #2
 8006a54:	4641      	mov	r1, r8
 8006a56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a5a:	4641      	mov	r1, r8
 8006a5c:	008a      	lsls	r2, r1, #2
 8006a5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006a62:	f7fa f8a1 	bl	8000ba8 <__aeabi_uldivmod>
 8006a66:	4602      	mov	r2, r0
 8006a68:	460b      	mov	r3, r1
 8006a6a:	4611      	mov	r1, r2
 8006a6c:	4b38      	ldr	r3, [pc, #224]	@ (8006b50 <UART_SetConfig+0x4e4>)
 8006a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8006a72:	095b      	lsrs	r3, r3, #5
 8006a74:	2264      	movs	r2, #100	@ 0x64
 8006a76:	fb02 f303 	mul.w	r3, r2, r3
 8006a7a:	1acb      	subs	r3, r1, r3
 8006a7c:	011b      	lsls	r3, r3, #4
 8006a7e:	3332      	adds	r3, #50	@ 0x32
 8006a80:	4a33      	ldr	r2, [pc, #204]	@ (8006b50 <UART_SetConfig+0x4e4>)
 8006a82:	fba2 2303 	umull	r2, r3, r2, r3
 8006a86:	095b      	lsrs	r3, r3, #5
 8006a88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a8c:	441c      	add	r4, r3
 8006a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a92:	2200      	movs	r2, #0
 8006a94:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a96:	677a      	str	r2, [r7, #116]	@ 0x74
 8006a98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006a9c:	4642      	mov	r2, r8
 8006a9e:	464b      	mov	r3, r9
 8006aa0:	1891      	adds	r1, r2, r2
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	415b      	adcs	r3, r3
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006aac:	4641      	mov	r1, r8
 8006aae:	1851      	adds	r1, r2, r1
 8006ab0:	6039      	str	r1, [r7, #0]
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	414b      	adcs	r3, r1
 8006ab6:	607b      	str	r3, [r7, #4]
 8006ab8:	f04f 0200 	mov.w	r2, #0
 8006abc:	f04f 0300 	mov.w	r3, #0
 8006ac0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ac4:	4659      	mov	r1, fp
 8006ac6:	00cb      	lsls	r3, r1, #3
 8006ac8:	4651      	mov	r1, sl
 8006aca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ace:	4651      	mov	r1, sl
 8006ad0:	00ca      	lsls	r2, r1, #3
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	4642      	mov	r2, r8
 8006ada:	189b      	adds	r3, r3, r2
 8006adc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ade:	464b      	mov	r3, r9
 8006ae0:	460a      	mov	r2, r1
 8006ae2:	eb42 0303 	adc.w	r3, r2, r3
 8006ae6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006af2:	667a      	str	r2, [r7, #100]	@ 0x64
 8006af4:	f04f 0200 	mov.w	r2, #0
 8006af8:	f04f 0300 	mov.w	r3, #0
 8006afc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006b00:	4649      	mov	r1, r9
 8006b02:	008b      	lsls	r3, r1, #2
 8006b04:	4641      	mov	r1, r8
 8006b06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b0a:	4641      	mov	r1, r8
 8006b0c:	008a      	lsls	r2, r1, #2
 8006b0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006b12:	f7fa f849 	bl	8000ba8 <__aeabi_uldivmod>
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b50 <UART_SetConfig+0x4e4>)
 8006b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b20:	095b      	lsrs	r3, r3, #5
 8006b22:	2164      	movs	r1, #100	@ 0x64
 8006b24:	fb01 f303 	mul.w	r3, r1, r3
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	011b      	lsls	r3, r3, #4
 8006b2c:	3332      	adds	r3, #50	@ 0x32
 8006b2e:	4a08      	ldr	r2, [pc, #32]	@ (8006b50 <UART_SetConfig+0x4e4>)
 8006b30:	fba2 2303 	umull	r2, r3, r2, r3
 8006b34:	095b      	lsrs	r3, r3, #5
 8006b36:	f003 020f 	and.w	r2, r3, #15
 8006b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4422      	add	r2, r4
 8006b42:	609a      	str	r2, [r3, #8]
}
 8006b44:	bf00      	nop
 8006b46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b50:	51eb851f 	.word	0x51eb851f

08006b54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b54:	b084      	sub	sp, #16
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b084      	sub	sp, #16
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	f107 001c 	add.w	r0, r7, #28
 8006b62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b66:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d123      	bne.n	8006bb6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b72:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006b82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d105      	bne.n	8006baa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f9dc 	bl	8006f68 <USB_CoreReset>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	73fb      	strb	r3, [r7, #15]
 8006bb4:	e01b      	b.n	8006bee <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f9d0 	bl	8006f68 <USB_CoreReset>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006bcc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d106      	bne.n	8006be2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	639a      	str	r2, [r3, #56]	@ 0x38
 8006be0:	e005      	b.n	8006bee <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006bee:	7fbb      	ldrb	r3, [r7, #30]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d10b      	bne.n	8006c0c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f043 0206 	orr.w	r2, r3, #6
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f043 0220 	orr.w	r2, r3, #32
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c18:	b004      	add	sp, #16
 8006c1a:	4770      	bx	lr

08006c1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f043 0201 	orr.w	r2, r3, #1
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f023 0201 	bic.w	r2, r3, #1
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c7c:	78fb      	ldrb	r3, [r7, #3]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d115      	bne.n	8006cae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c8e:	200a      	movs	r0, #10
 8006c90:	f7fa ff48 	bl	8001b24 <HAL_Delay>
      ms += 10U;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	330a      	adds	r3, #10
 8006c98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f956 	bl	8006f4c <USB_GetMode>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d01e      	beq.n	8006ce4 <USB_SetCurrentMode+0x84>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2bc7      	cmp	r3, #199	@ 0xc7
 8006caa:	d9f0      	bls.n	8006c8e <USB_SetCurrentMode+0x2e>
 8006cac:	e01a      	b.n	8006ce4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006cae:	78fb      	ldrb	r3, [r7, #3]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d115      	bne.n	8006ce0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006cc0:	200a      	movs	r0, #10
 8006cc2:	f7fa ff2f 	bl	8001b24 <HAL_Delay>
      ms += 10U;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	330a      	adds	r3, #10
 8006cca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f93d 	bl	8006f4c <USB_GetMode>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d005      	beq.n	8006ce4 <USB_SetCurrentMode+0x84>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2bc7      	cmp	r3, #199	@ 0xc7
 8006cdc:	d9f0      	bls.n	8006cc0 <USB_SetCurrentMode+0x60>
 8006cde:	e001      	b.n	8006ce4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e005      	b.n	8006cf0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2bc8      	cmp	r3, #200	@ 0xc8
 8006ce8:	d101      	bne.n	8006cee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e000      	b.n	8006cf0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d12:	d901      	bls.n	8006d18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e01b      	b.n	8006d50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	daf2      	bge.n	8006d06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	019b      	lsls	r3, r3, #6
 8006d28:	f043 0220 	orr.w	r2, r3, #32
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	3301      	adds	r3, #1
 8006d34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d3c:	d901      	bls.n	8006d42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e006      	b.n	8006d50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f003 0320 	and.w	r3, r3, #32
 8006d4a:	2b20      	cmp	r3, #32
 8006d4c:	d0f0      	beq.n	8006d30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d74:	d901      	bls.n	8006d7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e018      	b.n	8006dac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	daf2      	bge.n	8006d68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2210      	movs	r2, #16
 8006d8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d98:	d901      	bls.n	8006d9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e006      	b.n	8006dac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	f003 0310 	and.w	r3, r3, #16
 8006da6:	2b10      	cmp	r3, #16
 8006da8:	d0f0      	beq.n	8006d8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b089      	sub	sp, #36	@ 0x24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	71fb      	strb	r3, [r7, #7]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006dd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d123      	bne.n	8006e26 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006dde:	88bb      	ldrh	r3, [r7, #4]
 8006de0:	3303      	adds	r3, #3
 8006de2:	089b      	lsrs	r3, r3, #2
 8006de4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006de6:	2300      	movs	r3, #0
 8006de8:	61bb      	str	r3, [r7, #24]
 8006dea:	e018      	b.n	8006e1e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006dec:	79fb      	ldrb	r3, [r7, #7]
 8006dee:	031a      	lsls	r2, r3, #12
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006df8:	461a      	mov	r2, r3
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	3301      	adds	r3, #1
 8006e04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	3301      	adds	r3, #1
 8006e16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	61bb      	str	r3, [r7, #24]
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d3e2      	bcc.n	8006dec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3724      	adds	r7, #36	@ 0x24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b08b      	sub	sp, #44	@ 0x2c
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e4a:	88fb      	ldrh	r3, [r7, #6]
 8006e4c:	089b      	lsrs	r3, r3, #2
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e52:	88fb      	ldrh	r3, [r7, #6]
 8006e54:	f003 0303 	and.w	r3, r3, #3
 8006e58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	623b      	str	r3, [r7, #32]
 8006e5e:	e014      	b.n	8006e8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6e:	3301      	adds	r3, #1
 8006e70:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e74:	3301      	adds	r3, #1
 8006e76:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e80:	3301      	adds	r3, #1
 8006e82:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	3301      	adds	r3, #1
 8006e88:	623b      	str	r3, [r7, #32]
 8006e8a:	6a3a      	ldr	r2, [r7, #32]
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d3e6      	bcc.n	8006e60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e92:	8bfb      	ldrh	r3, [r7, #30]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d01e      	beq.n	8006ed6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f107 0310 	add.w	r3, r7, #16
 8006ea8:	6812      	ldr	r2, [r2, #0]
 8006eaa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	00db      	lsls	r3, r3, #3
 8006eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebc:	701a      	strb	r2, [r3, #0]
      i++;
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006eca:	8bfb      	ldrh	r3, [r7, #30]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ed0:	8bfb      	ldrh	r3, [r7, #30]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1ea      	bne.n	8006eac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	372c      	adds	r7, #44	@ 0x2c
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	4013      	ands	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006efc:	68fb      	ldr	r3, [r7, #12]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b085      	sub	sp, #20
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	460b      	mov	r3, r1
 8006f14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006f1a:	78fb      	ldrb	r3, [r7, #3]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006f2a:	78fb      	ldrb	r3, [r7, #3]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f3e:	68bb      	ldr	r3, [r7, #8]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	f003 0301 	and.w	r3, r3, #1
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3301      	adds	r3, #1
 8006f78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f80:	d901      	bls.n	8006f86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e01b      	b.n	8006fbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	daf2      	bge.n	8006f74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	f043 0201 	orr.w	r2, r3, #1
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006faa:	d901      	bls.n	8006fb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e006      	b.n	8006fbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d0f0      	beq.n	8006f9e <USB_CoreReset+0x36>

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
	...

08006fcc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fcc:	b084      	sub	sp, #16
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b086      	sub	sp, #24
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006fec:	461a      	mov	r2, r3
 8006fee:	2300      	movs	r3, #0
 8006ff0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007002:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800701e:	2b00      	cmp	r3, #0
 8007020:	d119      	bne.n	8007056 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007022:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007026:	2b01      	cmp	r3, #1
 8007028:	d10a      	bne.n	8007040 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007038:	f043 0304 	orr.w	r3, r3, #4
 800703c:	6013      	str	r3, [r2, #0]
 800703e:	e014      	b.n	800706a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800704e:	f023 0304 	bic.w	r3, r3, #4
 8007052:	6013      	str	r3, [r2, #0]
 8007054:	e009      	b.n	800706a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007064:	f023 0304 	bic.w	r3, r3, #4
 8007068:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800706a:	2110      	movs	r1, #16
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7ff fe43 	bl	8006cf8 <USB_FlushTxFifo>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f7ff fe6d 	bl	8006d5c <USB_FlushRxFifo>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800708c:	2300      	movs	r3, #0
 800708e:	613b      	str	r3, [r7, #16]
 8007090:	e015      	b.n	80070be <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	015a      	lsls	r2, r3, #5
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	4413      	add	r3, r2
 800709a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800709e:	461a      	mov	r2, r3
 80070a0:	f04f 33ff 	mov.w	r3, #4294967295
 80070a4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070b2:	461a      	mov	r2, r3
 80070b4:	2300      	movs	r3, #0
 80070b6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	3301      	adds	r3, #1
 80070bc:	613b      	str	r3, [r7, #16]
 80070be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80070c2:	461a      	mov	r2, r3
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d3e3      	bcc.n	8007092 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f04f 32ff 	mov.w	r2, #4294967295
 80070d6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a18      	ldr	r2, [pc, #96]	@ (800713c <USB_HostInit+0x170>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d10b      	bne.n	80070f8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070e6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a15      	ldr	r2, [pc, #84]	@ (8007140 <USB_HostInit+0x174>)
 80070ec:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a14      	ldr	r2, [pc, #80]	@ (8007144 <USB_HostInit+0x178>)
 80070f2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80070f6:	e009      	b.n	800710c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2280      	movs	r2, #128	@ 0x80
 80070fc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a11      	ldr	r2, [pc, #68]	@ (8007148 <USB_HostInit+0x17c>)
 8007102:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a11      	ldr	r2, [pc, #68]	@ (800714c <USB_HostInit+0x180>)
 8007108:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800710c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007110:	2b00      	cmp	r3, #0
 8007112:	d105      	bne.n	8007120 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	f043 0210 	orr.w	r2, r3, #16
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	699a      	ldr	r2, [r3, #24]
 8007124:	4b0a      	ldr	r3, [pc, #40]	@ (8007150 <USB_HostInit+0x184>)
 8007126:	4313      	orrs	r3, r2
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800712c:	7dfb      	ldrb	r3, [r7, #23]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007138:	b004      	add	sp, #16
 800713a:	4770      	bx	lr
 800713c:	40040000 	.word	0x40040000
 8007140:	01000200 	.word	0x01000200
 8007144:	00e00300 	.word	0x00e00300
 8007148:	00600080 	.word	0x00600080
 800714c:	004000e0 	.word	0x004000e0
 8007150:	a3200008 	.word	0xa3200008

08007154 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007172:	f023 0303 	bic.w	r3, r3, #3
 8007176:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	78fb      	ldrb	r3, [r7, #3]
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	68f9      	ldr	r1, [r7, #12]
 8007188:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800718c:	4313      	orrs	r3, r2
 800718e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007190:	78fb      	ldrb	r3, [r7, #3]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d107      	bne.n	80071a6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800719c:	461a      	mov	r2, r3
 800719e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80071a2:	6053      	str	r3, [r2, #4]
 80071a4:	e00c      	b.n	80071c0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80071a6:	78fb      	ldrb	r3, [r7, #3]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d107      	bne.n	80071bc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071b2:	461a      	mov	r2, r3
 80071b4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80071b8:	6053      	str	r3, [r2, #4]
 80071ba:	e001      	b.n	80071c0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e000      	b.n	80071c2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b084      	sub	sp, #16
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80071ee:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80071f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071fc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80071fe:	2064      	movs	r0, #100	@ 0x64
 8007200:	f7fa fc90 	bl	8001b24 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800720c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007210:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007212:	200a      	movs	r0, #10
 8007214:	f7fa fc86 	bl	8001b24 <HAL_Delay>

  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007222:	b480      	push	{r7}
 8007224:	b085      	sub	sp, #20
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	460b      	mov	r3, r1
 800722c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007246:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d109      	bne.n	8007266 <USB_DriveVbus+0x44>
 8007252:	78fb      	ldrb	r3, [r7, #3]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d106      	bne.n	8007266 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007260:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007264:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800726c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007270:	d109      	bne.n	8007286 <USB_DriveVbus+0x64>
 8007272:	78fb      	ldrb	r3, [r7, #3]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d106      	bne.n	8007286 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007280:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007284:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	0c5b      	lsrs	r3, r3, #17
 80072b2:	f003 0303 	and.w	r3, r3, #3
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b085      	sub	sp, #20
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	b29b      	uxth	r3, r3
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b088      	sub	sp, #32
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	4608      	mov	r0, r1
 80072ee:	4611      	mov	r1, r2
 80072f0:	461a      	mov	r2, r3
 80072f2:	4603      	mov	r3, r0
 80072f4:	70fb      	strb	r3, [r7, #3]
 80072f6:	460b      	mov	r3, r1
 80072f8:	70bb      	strb	r3, [r7, #2]
 80072fa:	4613      	mov	r3, r2
 80072fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007306:	78fb      	ldrb	r3, [r7, #3]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	4413      	add	r3, r2
 800730e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007312:	461a      	mov	r2, r3
 8007314:	f04f 33ff 	mov.w	r3, #4294967295
 8007318:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800731a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800731e:	2b03      	cmp	r3, #3
 8007320:	d87c      	bhi.n	800741c <USB_HC_Init+0x138>
 8007322:	a201      	add	r2, pc, #4	@ (adr r2, 8007328 <USB_HC_Init+0x44>)
 8007324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007328:	08007339 	.word	0x08007339
 800732c:	080073df 	.word	0x080073df
 8007330:	08007339 	.word	0x08007339
 8007334:	080073a1 	.word	0x080073a1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007338:	78fb      	ldrb	r3, [r7, #3]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	4413      	add	r3, r2
 8007340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007344:	461a      	mov	r2, r3
 8007346:	f240 439d 	movw	r3, #1181	@ 0x49d
 800734a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800734c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007350:	2b00      	cmp	r3, #0
 8007352:	da10      	bge.n	8007376 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007354:	78fb      	ldrb	r3, [r7, #3]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	4413      	add	r3, r2
 800735c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	78fa      	ldrb	r2, [r7, #3]
 8007364:	0151      	lsls	r1, r2, #5
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	440a      	add	r2, r1
 800736a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800736e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007372:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007374:	e055      	b.n	8007422 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a6f      	ldr	r2, [pc, #444]	@ (8007538 <USB_HC_Init+0x254>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d151      	bne.n	8007422 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800737e:	78fb      	ldrb	r3, [r7, #3]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	4413      	add	r3, r2
 8007386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	78fa      	ldrb	r2, [r7, #3]
 800738e:	0151      	lsls	r1, r2, #5
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	440a      	add	r2, r1
 8007394:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007398:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800739c:	60d3      	str	r3, [r2, #12]
      break;
 800739e:	e040      	b.n	8007422 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ac:	461a      	mov	r2, r3
 80073ae:	f240 639d 	movw	r3, #1693	@ 0x69d
 80073b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80073b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	da34      	bge.n	8007426 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80073bc:	78fb      	ldrb	r3, [r7, #3]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	78fa      	ldrb	r2, [r7, #3]
 80073cc:	0151      	lsls	r1, r2, #5
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	440a      	add	r2, r1
 80073d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073da:	60d3      	str	r3, [r2, #12]
      }

      break;
 80073dc:	e023      	b.n	8007426 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80073de:	78fb      	ldrb	r3, [r7, #3]
 80073e0:	015a      	lsls	r2, r3, #5
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ea:	461a      	mov	r2, r3
 80073ec:	f240 2325 	movw	r3, #549	@ 0x225
 80073f0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80073f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	da17      	bge.n	800742a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80073fa:	78fb      	ldrb	r3, [r7, #3]
 80073fc:	015a      	lsls	r2, r3, #5
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	4413      	add	r3, r2
 8007402:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	78fa      	ldrb	r2, [r7, #3]
 800740a:	0151      	lsls	r1, r2, #5
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	440a      	add	r2, r1
 8007410:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007414:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007418:	60d3      	str	r3, [r2, #12]
      }
      break;
 800741a:	e006      	b.n	800742a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	77fb      	strb	r3, [r7, #31]
      break;
 8007420:	e004      	b.n	800742c <USB_HC_Init+0x148>
      break;
 8007422:	bf00      	nop
 8007424:	e002      	b.n	800742c <USB_HC_Init+0x148>
      break;
 8007426:	bf00      	nop
 8007428:	e000      	b.n	800742c <USB_HC_Init+0x148>
      break;
 800742a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800742c:	78fb      	ldrb	r3, [r7, #3]
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	4413      	add	r3, r2
 8007434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007438:	461a      	mov	r2, r3
 800743a:	2300      	movs	r3, #0
 800743c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800743e:	78fb      	ldrb	r3, [r7, #3]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	4413      	add	r3, r2
 8007446:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	78fa      	ldrb	r2, [r7, #3]
 800744e:	0151      	lsls	r1, r2, #5
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	440a      	add	r2, r1
 8007454:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007458:	f043 0302 	orr.w	r3, r3, #2
 800745c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007464:	699a      	ldr	r2, [r3, #24]
 8007466:	78fb      	ldrb	r3, [r7, #3]
 8007468:	f003 030f 	and.w	r3, r3, #15
 800746c:	2101      	movs	r1, #1
 800746e:	fa01 f303 	lsl.w	r3, r1, r3
 8007472:	6939      	ldr	r1, [r7, #16]
 8007474:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007478:	4313      	orrs	r3, r2
 800747a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007488:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800748c:	2b00      	cmp	r3, #0
 800748e:	da03      	bge.n	8007498 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007490:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007494:	61bb      	str	r3, [r7, #24]
 8007496:	e001      	b.n	800749c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7ff fef9 	bl	8007294 <USB_GetHostSpeed>
 80074a2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80074a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d106      	bne.n	80074ba <USB_HC_Init+0x1d6>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d003      	beq.n	80074ba <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80074b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80074b6:	617b      	str	r3, [r7, #20]
 80074b8:	e001      	b.n	80074be <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074be:	787b      	ldrb	r3, [r7, #1]
 80074c0:	059b      	lsls	r3, r3, #22
 80074c2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80074c6:	78bb      	ldrb	r3, [r7, #2]
 80074c8:	02db      	lsls	r3, r3, #11
 80074ca:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074ce:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80074d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80074d4:	049b      	lsls	r3, r3, #18
 80074d6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80074da:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80074dc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80074de:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80074e2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	431a      	orrs	r2, r3
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074ec:	78fa      	ldrb	r2, [r7, #3]
 80074ee:	0151      	lsls	r1, r2, #5
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	440a      	add	r2, r1
 80074f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80074f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074fc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80074fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007502:	2b03      	cmp	r3, #3
 8007504:	d003      	beq.n	800750e <USB_HC_Init+0x22a>
 8007506:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800750a:	2b01      	cmp	r3, #1
 800750c:	d10f      	bne.n	800752e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800750e:	78fb      	ldrb	r3, [r7, #3]
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	4413      	add	r3, r2
 8007516:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	78fa      	ldrb	r2, [r7, #3]
 800751e:	0151      	lsls	r1, r2, #5
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	440a      	add	r2, r1
 8007524:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007528:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800752c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800752e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3720      	adds	r7, #32
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	40040000 	.word	0x40040000

0800753c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b08c      	sub	sp, #48	@ 0x30
 8007540:	af02      	add	r7, sp, #8
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	4613      	mov	r3, r2
 8007548:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	785b      	ldrb	r3, [r3, #1]
 8007552:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007554:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007558:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4a5d      	ldr	r2, [pc, #372]	@ (80076d4 <USB_HC_StartXfer+0x198>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d12f      	bne.n	80075c2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007562:	79fb      	ldrb	r3, [r7, #7]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d11c      	bne.n	80075a2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	7c9b      	ldrb	r3, [r3, #18]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d003      	beq.n	8007578 <USB_HC_StartXfer+0x3c>
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	7c9b      	ldrb	r3, [r3, #18]
 8007574:	2b02      	cmp	r3, #2
 8007576:	d124      	bne.n	80075c2 <USB_HC_StartXfer+0x86>
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	799b      	ldrb	r3, [r3, #6]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d120      	bne.n	80075c2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	4413      	add	r3, r2
 8007588:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	69fa      	ldr	r2, [r7, #28]
 8007590:	0151      	lsls	r1, r2, #5
 8007592:	6a3a      	ldr	r2, [r7, #32]
 8007594:	440a      	add	r2, r1
 8007596:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800759a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800759e:	60d3      	str	r3, [r2, #12]
 80075a0:	e00f      	b.n	80075c2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	791b      	ldrb	r3, [r3, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10b      	bne.n	80075c2 <USB_HC_StartXfer+0x86>
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	795b      	ldrb	r3, [r3, #5]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d107      	bne.n	80075c2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	785b      	ldrb	r3, [r3, #1]
 80075b6:	4619      	mov	r1, r3
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 fb6b 	bl	8007c94 <USB_DoPing>
        return HAL_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	e232      	b.n	8007a28 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	799b      	ldrb	r3, [r3, #6]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d158      	bne.n	800767c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80075ca:	2301      	movs	r3, #1
 80075cc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	78db      	ldrb	r3, [r3, #3]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d007      	beq.n	80075e6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80075d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	8a92      	ldrh	r2, [r2, #20]
 80075dc:	fb03 f202 	mul.w	r2, r3, r2
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	61da      	str	r2, [r3, #28]
 80075e4:	e07c      	b.n	80076e0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	7c9b      	ldrb	r3, [r3, #18]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d130      	bne.n	8007650 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	2bbc      	cmp	r3, #188	@ 0xbc
 80075f4:	d918      	bls.n	8007628 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	8a9b      	ldrh	r3, [r3, #20]
 80075fa:	461a      	mov	r2, r3
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	69da      	ldr	r2, [r3, #28]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d003      	beq.n	8007618 <USB_HC_StartXfer+0xdc>
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	2b02      	cmp	r3, #2
 8007616:	d103      	bne.n	8007620 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2202      	movs	r2, #2
 800761c:	60da      	str	r2, [r3, #12]
 800761e:	e05f      	b.n	80076e0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2201      	movs	r2, #1
 8007624:	60da      	str	r2, [r3, #12]
 8007626:	e05b      	b.n	80076e0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	6a1a      	ldr	r2, [r3, #32]
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d007      	beq.n	8007648 <USB_HC_StartXfer+0x10c>
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	2b02      	cmp	r3, #2
 800763e:	d003      	beq.n	8007648 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2204      	movs	r2, #4
 8007644:	60da      	str	r2, [r3, #12]
 8007646:	e04b      	b.n	80076e0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	2203      	movs	r2, #3
 800764c:	60da      	str	r2, [r3, #12]
 800764e:	e047      	b.n	80076e0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007650:	79fb      	ldrb	r3, [r7, #7]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d10d      	bne.n	8007672 <USB_HC_StartXfer+0x136>
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	8a92      	ldrh	r2, [r2, #20]
 800765e:	4293      	cmp	r3, r2
 8007660:	d907      	bls.n	8007672 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007662:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	8a92      	ldrh	r2, [r2, #20]
 8007668:	fb03 f202 	mul.w	r2, r3, r2
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	61da      	str	r2, [r3, #28]
 8007670:	e036      	b.n	80076e0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	6a1a      	ldr	r2, [r3, #32]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	61da      	str	r2, [r3, #28]
 800767a:	e031      	b.n	80076e0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d018      	beq.n	80076b6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	8a92      	ldrh	r2, [r2, #20]
 800768c:	4413      	add	r3, r2
 800768e:	3b01      	subs	r3, #1
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	8a92      	ldrh	r2, [r2, #20]
 8007694:	fbb3 f3f2 	udiv	r3, r3, r2
 8007698:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800769a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800769c:	8b7b      	ldrh	r3, [r7, #26]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d90b      	bls.n	80076ba <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80076a2:	8b7b      	ldrh	r3, [r7, #26]
 80076a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80076a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	8a92      	ldrh	r2, [r2, #20]
 80076ac:	fb03 f202 	mul.w	r2, r3, r2
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	61da      	str	r2, [r3, #28]
 80076b4:	e001      	b.n	80076ba <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80076b6:	2301      	movs	r3, #1
 80076b8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	78db      	ldrb	r3, [r3, #3]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00a      	beq.n	80076d8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80076c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	8a92      	ldrh	r2, [r2, #20]
 80076c8:	fb03 f202 	mul.w	r2, r3, r2
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	61da      	str	r2, [r3, #28]
 80076d0:	e006      	b.n	80076e0 <USB_HC_StartXfer+0x1a4>
 80076d2:	bf00      	nop
 80076d4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	6a1a      	ldr	r2, [r3, #32]
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	69db      	ldr	r3, [r3, #28]
 80076e4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80076e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076ea:	04d9      	lsls	r1, r3, #19
 80076ec:	4ba3      	ldr	r3, [pc, #652]	@ (800797c <USB_HC_StartXfer+0x440>)
 80076ee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80076f0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	7d9b      	ldrb	r3, [r3, #22]
 80076f6:	075b      	lsls	r3, r3, #29
 80076f8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80076fc:	69f9      	ldr	r1, [r7, #28]
 80076fe:	0148      	lsls	r0, r1, #5
 8007700:	6a39      	ldr	r1, [r7, #32]
 8007702:	4401      	add	r1, r0
 8007704:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007708:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800770a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800770c:	79fb      	ldrb	r3, [r7, #7]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d009      	beq.n	8007726 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	6999      	ldr	r1, [r3, #24]
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	4413      	add	r3, r2
 800771e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007722:	460a      	mov	r2, r1
 8007724:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007726:	6a3b      	ldr	r3, [r7, #32]
 8007728:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	bf0c      	ite	eq
 8007736:	2301      	moveq	r3, #1
 8007738:	2300      	movne	r3, #0
 800773a:	b2db      	uxtb	r3, r3
 800773c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	015a      	lsls	r2, r3, #5
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	4413      	add	r3, r2
 8007746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	69fa      	ldr	r2, [r7, #28]
 800774e:	0151      	lsls	r1, r2, #5
 8007750:	6a3a      	ldr	r2, [r7, #32]
 8007752:	440a      	add	r2, r1
 8007754:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007758:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800775c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	4413      	add	r3, r2
 8007766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	7e7b      	ldrb	r3, [r7, #25]
 800776e:	075b      	lsls	r3, r3, #29
 8007770:	69f9      	ldr	r1, [r7, #28]
 8007772:	0148      	lsls	r0, r1, #5
 8007774:	6a39      	ldr	r1, [r7, #32]
 8007776:	4401      	add	r1, r0
 8007778:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800777c:	4313      	orrs	r3, r2
 800777e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	799b      	ldrb	r3, [r3, #6]
 8007784:	2b01      	cmp	r3, #1
 8007786:	f040 80c3 	bne.w	8007910 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	7c5b      	ldrb	r3, [r3, #17]
 800778e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007794:	4313      	orrs	r3, r2
 8007796:	69fa      	ldr	r2, [r7, #28]
 8007798:	0151      	lsls	r1, r2, #5
 800779a:	6a3a      	ldr	r2, [r7, #32]
 800779c:	440a      	add	r2, r1
 800779e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80077a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80077a6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	6a3b      	ldr	r3, [r7, #32]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	69fa      	ldr	r2, [r7, #28]
 80077b8:	0151      	lsls	r1, r2, #5
 80077ba:	6a3a      	ldr	r2, [r7, #32]
 80077bc:	440a      	add	r2, r1
 80077be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077c2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80077c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	79db      	ldrb	r3, [r3, #7]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d123      	bne.n	8007818 <USB_HC_StartXfer+0x2dc>
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	78db      	ldrb	r3, [r3, #3]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d11f      	bne.n	8007818 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	015a      	lsls	r2, r3, #5
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	4413      	add	r3, r2
 80077e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	69fa      	ldr	r2, [r7, #28]
 80077e8:	0151      	lsls	r1, r2, #5
 80077ea:	6a3a      	ldr	r2, [r7, #32]
 80077ec:	440a      	add	r2, r1
 80077ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077f6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	4413      	add	r3, r2
 8007800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	69fa      	ldr	r2, [r7, #28]
 8007808:	0151      	lsls	r1, r2, #5
 800780a:	6a3a      	ldr	r2, [r7, #32]
 800780c:	440a      	add	r2, r1
 800780e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007816:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	7c9b      	ldrb	r3, [r3, #18]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d003      	beq.n	8007828 <USB_HC_StartXfer+0x2ec>
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	7c9b      	ldrb	r3, [r3, #18]
 8007824:	2b03      	cmp	r3, #3
 8007826:	d117      	bne.n	8007858 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800782c:	2b01      	cmp	r3, #1
 800782e:	d113      	bne.n	8007858 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	78db      	ldrb	r3, [r3, #3]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d10f      	bne.n	8007858 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	6a3b      	ldr	r3, [r7, #32]
 800783e:	4413      	add	r3, r2
 8007840:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	69fa      	ldr	r2, [r7, #28]
 8007848:	0151      	lsls	r1, r2, #5
 800784a:	6a3a      	ldr	r2, [r7, #32]
 800784c:	440a      	add	r2, r1
 800784e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007852:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007856:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	7c9b      	ldrb	r3, [r3, #18]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d162      	bne.n	8007926 <USB_HC_StartXfer+0x3ea>
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	78db      	ldrb	r3, [r3, #3]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d15e      	bne.n	8007926 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	3b01      	subs	r3, #1
 800786e:	2b03      	cmp	r3, #3
 8007870:	d858      	bhi.n	8007924 <USB_HC_StartXfer+0x3e8>
 8007872:	a201      	add	r2, pc, #4	@ (adr r2, 8007878 <USB_HC_StartXfer+0x33c>)
 8007874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007878:	08007889 	.word	0x08007889
 800787c:	080078ab 	.word	0x080078ab
 8007880:	080078cd 	.word	0x080078cd
 8007884:	080078ef 	.word	0x080078ef
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	4413      	add	r3, r2
 8007890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	69fa      	ldr	r2, [r7, #28]
 8007898:	0151      	lsls	r1, r2, #5
 800789a:	6a3a      	ldr	r2, [r7, #32]
 800789c:	440a      	add	r2, r1
 800789e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078a6:	6053      	str	r3, [r2, #4]
          break;
 80078a8:	e03d      	b.n	8007926 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	69fa      	ldr	r2, [r7, #28]
 80078ba:	0151      	lsls	r1, r2, #5
 80078bc:	6a3a      	ldr	r2, [r7, #32]
 80078be:	440a      	add	r2, r1
 80078c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078c4:	f043 030e 	orr.w	r3, r3, #14
 80078c8:	6053      	str	r3, [r2, #4]
          break;
 80078ca:	e02c      	b.n	8007926 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	6a3b      	ldr	r3, [r7, #32]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	69fa      	ldr	r2, [r7, #28]
 80078dc:	0151      	lsls	r1, r2, #5
 80078de:	6a3a      	ldr	r2, [r7, #32]
 80078e0:	440a      	add	r2, r1
 80078e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078ea:	6053      	str	r3, [r2, #4]
          break;
 80078ec:	e01b      	b.n	8007926 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	6a3b      	ldr	r3, [r7, #32]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	69fa      	ldr	r2, [r7, #28]
 80078fe:	0151      	lsls	r1, r2, #5
 8007900:	6a3a      	ldr	r2, [r7, #32]
 8007902:	440a      	add	r2, r1
 8007904:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007908:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800790c:	6053      	str	r3, [r2, #4]
          break;
 800790e:	e00a      	b.n	8007926 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	4413      	add	r3, r2
 8007918:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800791c:	461a      	mov	r2, r3
 800791e:	2300      	movs	r3, #0
 8007920:	6053      	str	r3, [r2, #4]
 8007922:	e000      	b.n	8007926 <USB_HC_StartXfer+0x3ea>
          break;
 8007924:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	4413      	add	r3, r2
 800792e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800793c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	78db      	ldrb	r3, [r3, #3]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d004      	beq.n	8007950 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800794c:	613b      	str	r3, [r7, #16]
 800794e:	e003      	b.n	8007958 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007956:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800795e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	4413      	add	r3, r2
 8007968:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800796c:	461a      	mov	r2, r3
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007972:	79fb      	ldrb	r3, [r7, #7]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	e055      	b.n	8007a28 <USB_HC_StartXfer+0x4ec>
 800797c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	78db      	ldrb	r3, [r3, #3]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d14e      	bne.n	8007a26 <USB_HC_StartXfer+0x4ea>
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d04a      	beq.n	8007a26 <USB_HC_StartXfer+0x4ea>
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	79db      	ldrb	r3, [r3, #7]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d146      	bne.n	8007a26 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	7c9b      	ldrb	r3, [r3, #18]
 800799c:	2b03      	cmp	r3, #3
 800799e:	d831      	bhi.n	8007a04 <USB_HC_StartXfer+0x4c8>
 80079a0:	a201      	add	r2, pc, #4	@ (adr r2, 80079a8 <USB_HC_StartXfer+0x46c>)
 80079a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a6:	bf00      	nop
 80079a8:	080079b9 	.word	0x080079b9
 80079ac:	080079dd 	.word	0x080079dd
 80079b0:	080079b9 	.word	0x080079b9
 80079b4:	080079dd 	.word	0x080079dd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	3303      	adds	r3, #3
 80079be:	089b      	lsrs	r3, r3, #2
 80079c0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80079c2:	8afa      	ldrh	r2, [r7, #22]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d91c      	bls.n	8007a08 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	f043 0220 	orr.w	r2, r3, #32
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80079da:	e015      	b.n	8007a08 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	6a1b      	ldr	r3, [r3, #32]
 80079e0:	3303      	adds	r3, #3
 80079e2:	089b      	lsrs	r3, r3, #2
 80079e4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80079e6:	8afa      	ldrh	r2, [r7, #22]
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d90a      	bls.n	8007a0c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	619a      	str	r2, [r3, #24]
        }
        break;
 8007a02:	e003      	b.n	8007a0c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007a04:	bf00      	nop
 8007a06:	e002      	b.n	8007a0e <USB_HC_StartXfer+0x4d2>
        break;
 8007a08:	bf00      	nop
 8007a0a:	e000      	b.n	8007a0e <USB_HC_StartXfer+0x4d2>
        break;
 8007a0c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	6999      	ldr	r1, [r3, #24]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	785a      	ldrb	r2, [r3, #1]
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	9000      	str	r0, [sp, #0]
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f7ff f9c9 	bl	8006db8 <USB_WritePacket>
  }

  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3728      	adds	r7, #40	@ 0x28
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	b29b      	uxth	r3, r3
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b089      	sub	sp, #36	@ 0x24
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007a62:	78fb      	ldrb	r3, [r7, #3]
 8007a64:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007a66:	2300      	movs	r3, #0
 8007a68:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	015a      	lsls	r2, r3, #5
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	4413      	add	r3, r2
 8007a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	0c9b      	lsrs	r3, r3, #18
 8007a7a:	f003 0303 	and.w	r3, r3, #3
 8007a7e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	015a      	lsls	r2, r3, #5
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	0fdb      	lsrs	r3, r3, #31
 8007a90:	f003 0301 	and.w	r3, r3, #1
 8007a94:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	015a      	lsls	r2, r3, #5
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	0fdb      	lsrs	r3, r3, #31
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f003 0320 	and.w	r3, r3, #32
 8007ab4:	2b20      	cmp	r3, #32
 8007ab6:	d10d      	bne.n	8007ad4 <USB_HC_Halt+0x82>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10a      	bne.n	8007ad4 <USB_HC_Halt+0x82>
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d005      	beq.n	8007ad0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d002      	beq.n	8007ad0 <USB_HC_Halt+0x7e>
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	2b03      	cmp	r3, #3
 8007ace:	d101      	bne.n	8007ad4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	e0d8      	b.n	8007c86 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <USB_HC_Halt+0x8e>
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d173      	bne.n	8007bc8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	69ba      	ldr	r2, [r7, #24]
 8007af0:	0151      	lsls	r1, r2, #5
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	440a      	add	r2, r1
 8007af6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007afa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007afe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f003 0320 	and.w	r3, r3, #32
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d14a      	bne.n	8007ba2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b10:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d133      	bne.n	8007b80 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	69ba      	ldr	r2, [r7, #24]
 8007b28:	0151      	lsls	r1, r2, #5
 8007b2a:	69fa      	ldr	r2, [r7, #28]
 8007b2c:	440a      	add	r2, r1
 8007b2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b36:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	015a      	lsls	r2, r3, #5
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69ba      	ldr	r2, [r7, #24]
 8007b48:	0151      	lsls	r1, r2, #5
 8007b4a:	69fa      	ldr	r2, [r7, #28]
 8007b4c:	440a      	add	r2, r1
 8007b4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b56:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b64:	d82e      	bhi.n	8007bc4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b7c:	d0ec      	beq.n	8007b58 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b7e:	e081      	b.n	8007c84 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	0151      	lsls	r1, r2, #5
 8007b92:	69fa      	ldr	r2, [r7, #28]
 8007b94:	440a      	add	r2, r1
 8007b96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b9e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ba0:	e070      	b.n	8007c84 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	69ba      	ldr	r2, [r7, #24]
 8007bb2:	0151      	lsls	r1, r2, #5
 8007bb4:	69fa      	ldr	r2, [r7, #28]
 8007bb6:	440a      	add	r2, r1
 8007bb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bbc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007bc0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bc2:	e05f      	b.n	8007c84 <USB_HC_Halt+0x232>
            break;
 8007bc4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bc6:	e05d      	b.n	8007c84 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	69ba      	ldr	r2, [r7, #24]
 8007bd8:	0151      	lsls	r1, r2, #5
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	440a      	add	r2, r1
 8007bde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007be2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007be6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d133      	bne.n	8007c60 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	015a      	lsls	r2, r3, #5
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	0151      	lsls	r1, r2, #5
 8007c0a:	69fa      	ldr	r2, [r7, #28]
 8007c0c:	440a      	add	r2, r1
 8007c0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c16:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	69ba      	ldr	r2, [r7, #24]
 8007c28:	0151      	lsls	r1, r2, #5
 8007c2a:	69fa      	ldr	r2, [r7, #28]
 8007c2c:	440a      	add	r2, r1
 8007c2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c36:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c44:	d81d      	bhi.n	8007c82 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c5c:	d0ec      	beq.n	8007c38 <USB_HC_Halt+0x1e6>
 8007c5e:	e011      	b.n	8007c84 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	0151      	lsls	r1, r2, #5
 8007c72:	69fa      	ldr	r2, [r7, #28]
 8007c74:	440a      	add	r2, r1
 8007c76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c7e:	6013      	str	r3, [r2, #0]
 8007c80:	e000      	b.n	8007c84 <USB_HC_Halt+0x232>
          break;
 8007c82:	bf00      	nop
    }
  }

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3724      	adds	r7, #36	@ 0x24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
	...

08007c94 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b087      	sub	sp, #28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007ca4:	78fb      	ldrb	r3, [r7, #3]
 8007ca6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	04da      	lsls	r2, r3, #19
 8007cb0:	4b15      	ldr	r3, [pc, #84]	@ (8007d08 <USB_DoPing+0x74>)
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	0151      	lsls	r1, r2, #5
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	440a      	add	r2, r1
 8007cbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007cc4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	015a      	lsls	r2, r3, #5
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	4413      	add	r3, r2
 8007cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007cdc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ce4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	1ff80000 	.word	0x1ff80000

08007d0c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b088      	sub	sp, #32
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7fe ff8c 	bl	8006c3e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d26:	2110      	movs	r1, #16
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7fe ffe5 	bl	8006cf8 <USB_FlushTxFifo>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7ff f80f 	bl	8006d5c <USB_FlushRxFifo>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007d48:	2300      	movs	r3, #0
 8007d4a:	61bb      	str	r3, [r7, #24]
 8007d4c:	e01f      	b.n	8007d8e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d64:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d6c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d74:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d82:	461a      	mov	r2, r3
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	61bb      	str	r3, [r7, #24]
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	2b0f      	cmp	r3, #15
 8007d92:	d9dc      	bls.n	8007d4e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007d94:	2300      	movs	r3, #0
 8007d96:	61bb      	str	r3, [r7, #24]
 8007d98:	e034      	b.n	8007e04 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007db0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007db8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007dc0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	015a      	lsls	r2, r3, #5
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	4413      	add	r3, r2
 8007dca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dce:	461a      	mov	r2, r3
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007de0:	d80c      	bhi.n	8007dfc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	015a      	lsls	r2, r3, #5
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	4413      	add	r3, r2
 8007dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007df4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007df8:	d0ec      	beq.n	8007dd4 <USB_StopHost+0xc8>
 8007dfa:	e000      	b.n	8007dfe <USB_StopHost+0xf2>
        break;
 8007dfc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	3301      	adds	r3, #1
 8007e02:	61bb      	str	r3, [r7, #24]
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	2b0f      	cmp	r3, #15
 8007e08:	d9c7      	bls.n	8007d9a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e10:	461a      	mov	r2, r3
 8007e12:	f04f 33ff 	mov.w	r3, #4294967295
 8007e16:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e1e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f7fe fefb 	bl	8006c1c <USB_EnableGlobalInt>

  return ret;
 8007e26:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3720      	adds	r7, #32
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007e30:	b590      	push	{r4, r7, lr}
 8007e32:	b089      	sub	sp, #36	@ 0x24
 8007e34:	af04      	add	r7, sp, #16
 8007e36:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007e38:	2301      	movs	r3, #1
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	2102      	movs	r1, #2
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fc85 	bl	800874e <USBH_FindInterface>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	2bff      	cmp	r3, #255	@ 0xff
 8007e4c:	d002      	beq.n	8007e54 <USBH_CDC_InterfaceInit+0x24>
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d901      	bls.n	8007e58 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007e54:	2302      	movs	r3, #2
 8007e56:	e13d      	b.n	80080d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fc5a 	bl	8008716 <USBH_SelectInterface>
 8007e62:	4603      	mov	r3, r0
 8007e64:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007e66:	7bbb      	ldrb	r3, [r7, #14]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d001      	beq.n	8007e70 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	e131      	b.n	80080d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007e76:	2050      	movs	r0, #80	@ 0x50
 8007e78:	f002 fb6c 	bl	800a554 <malloc>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e86:	69db      	ldr	r3, [r3, #28]
 8007e88:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007e90:	2302      	movs	r3, #2
 8007e92:	e11f      	b.n	80080d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007e94:	2250      	movs	r2, #80	@ 0x50
 8007e96:	2100      	movs	r1, #0
 8007e98:	68b8      	ldr	r0, [r7, #8]
 8007e9a:	f003 f974 	bl	800b186 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	211a      	movs	r1, #26
 8007ea4:	fb01 f303 	mul.w	r3, r1, r3
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	b25b      	sxtb	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	da15      	bge.n	8007ee2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	211a      	movs	r1, #26
 8007ebc:	fb01 f303 	mul.w	r3, r1, r3
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007ec6:	781a      	ldrb	r2, [r3, #0]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	211a      	movs	r1, #26
 8007ed2:	fb01 f303 	mul.w	r3, r1, r3
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007edc:	881a      	ldrh	r2, [r3, #0]
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	785b      	ldrb	r3, [r3, #1]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f001 ffbe 	bl	8009e6a <USBH_AllocPipe>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	7819      	ldrb	r1, [r3, #0]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	7858      	ldrb	r0, [r3, #1]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	8952      	ldrh	r2, [r2, #10]
 8007f0e:	9202      	str	r2, [sp, #8]
 8007f10:	2203      	movs	r2, #3
 8007f12:	9201      	str	r2, [sp, #4]
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	4623      	mov	r3, r4
 8007f18:	4602      	mov	r2, r0
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f001 ff76 	bl	8009e0c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	2200      	movs	r2, #0
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f002 fa85 	bl	800a438 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007f2e:	2300      	movs	r3, #0
 8007f30:	2200      	movs	r2, #0
 8007f32:	210a      	movs	r1, #10
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fc0a 	bl	800874e <USBH_FindInterface>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007f3e:	7bfb      	ldrb	r3, [r7, #15]
 8007f40:	2bff      	cmp	r3, #255	@ 0xff
 8007f42:	d002      	beq.n	8007f4a <USBH_CDC_InterfaceInit+0x11a>
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d901      	bls.n	8007f4e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	e0c2      	b.n	80080d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007f4e:	7bfb      	ldrb	r3, [r7, #15]
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	211a      	movs	r1, #26
 8007f54:	fb01 f303 	mul.w	r3, r1, r3
 8007f58:	4413      	add	r3, r2
 8007f5a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	b25b      	sxtb	r3, r3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	da16      	bge.n	8007f94 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f66:	7bfb      	ldrb	r3, [r7, #15]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	211a      	movs	r1, #26
 8007f6c:	fb01 f303 	mul.w	r3, r1, r3
 8007f70:	4413      	add	r3, r2
 8007f72:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007f76:	781a      	ldrb	r2, [r3, #0]
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007f7c:	7bfb      	ldrb	r3, [r7, #15]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	211a      	movs	r1, #26
 8007f82:	fb01 f303 	mul.w	r3, r1, r3
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007f8c:	881a      	ldrh	r2, [r3, #0]
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	835a      	strh	r2, [r3, #26]
 8007f92:	e015      	b.n	8007fc0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	211a      	movs	r1, #26
 8007f9a:	fb01 f303 	mul.w	r3, r1, r3
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007fa4:	781a      	ldrb	r2, [r3, #0]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	211a      	movs	r1, #26
 8007fb0:	fb01 f303 	mul.w	r3, r1, r3
 8007fb4:	4413      	add	r3, r2
 8007fb6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007fba:	881a      	ldrh	r2, [r3, #0]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	211a      	movs	r1, #26
 8007fc6:	fb01 f303 	mul.w	r3, r1, r3
 8007fca:	4413      	add	r3, r2
 8007fcc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	b25b      	sxtb	r3, r3
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	da16      	bge.n	8008006 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	211a      	movs	r1, #26
 8007fde:	fb01 f303 	mul.w	r3, r1, r3
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007fe8:	781a      	ldrb	r2, [r3, #0]
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	211a      	movs	r1, #26
 8007ff4:	fb01 f303 	mul.w	r3, r1, r3
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007ffe:	881a      	ldrh	r2, [r3, #0]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	835a      	strh	r2, [r3, #26]
 8008004:	e015      	b.n	8008032 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008006:	7bfb      	ldrb	r3, [r7, #15]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	211a      	movs	r1, #26
 800800c:	fb01 f303 	mul.w	r3, r1, r3
 8008010:	4413      	add	r3, r2
 8008012:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008016:	781a      	ldrb	r2, [r3, #0]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800801c:	7bfb      	ldrb	r3, [r7, #15]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	211a      	movs	r1, #26
 8008022:	fb01 f303 	mul.w	r3, r1, r3
 8008026:	4413      	add	r3, r2
 8008028:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800802c:	881a      	ldrh	r2, [r3, #0]
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	7b9b      	ldrb	r3, [r3, #14]
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f001 ff16 	bl	8009e6a <USBH_AllocPipe>
 800803e:	4603      	mov	r3, r0
 8008040:	461a      	mov	r2, r3
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	7bdb      	ldrb	r3, [r3, #15]
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f001 ff0c 	bl	8009e6a <USBH_AllocPipe>
 8008052:	4603      	mov	r3, r0
 8008054:	461a      	mov	r2, r3
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	7b59      	ldrb	r1, [r3, #13]
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	7b98      	ldrb	r0, [r3, #14]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	8b12      	ldrh	r2, [r2, #24]
 8008072:	9202      	str	r2, [sp, #8]
 8008074:	2202      	movs	r2, #2
 8008076:	9201      	str	r2, [sp, #4]
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	4623      	mov	r3, r4
 800807c:	4602      	mov	r2, r0
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f001 fec4 	bl	8009e0c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	7b19      	ldrb	r1, [r3, #12]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	7bd8      	ldrb	r0, [r3, #15]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	8b52      	ldrh	r2, [r2, #26]
 800809c:	9202      	str	r2, [sp, #8]
 800809e:	2202      	movs	r2, #2
 80080a0:	9201      	str	r2, [sp, #4]
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	4623      	mov	r3, r4
 80080a6:	4602      	mov	r2, r0
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f001 feaf 	bl	8009e0c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	7b5b      	ldrb	r3, [r3, #13]
 80080ba:	2200      	movs	r2, #0
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f002 f9ba 	bl	800a438 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	7b1b      	ldrb	r3, [r3, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f002 f9b3 	bl	800a438 <USBH_LL_SetToggle>

  return USBH_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd90      	pop	{r4, r7, pc}

080080dc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080ea:	69db      	ldr	r3, [r3, #28]
 80080ec:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00e      	beq.n	8008114 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f001 fea4 	bl	8009e4a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f001 fecf 	bl	8009eac <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	7b1b      	ldrb	r3, [r3, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00e      	beq.n	800813a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	7b1b      	ldrb	r3, [r3, #12]
 8008120:	4619      	mov	r1, r3
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f001 fe91 	bl	8009e4a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	7b1b      	ldrb	r3, [r3, #12]
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f001 febc 	bl	8009eac <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	7b5b      	ldrb	r3, [r3, #13]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00e      	beq.n	8008160 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	7b5b      	ldrb	r3, [r3, #13]
 8008146:	4619      	mov	r1, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f001 fe7e 	bl	8009e4a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	7b5b      	ldrb	r3, [r3, #13]
 8008152:	4619      	mov	r1, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f001 fea9 	bl	8009eac <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008166:	69db      	ldr	r3, [r3, #28]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00b      	beq.n	8008184 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008172:	69db      	ldr	r3, [r3, #28]
 8008174:	4618      	mov	r0, r3
 8008176:	f002 f9f5 	bl	800a564 <free>
    phost->pActiveClass->pData = 0U;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008180:	2200      	movs	r2, #0
 8008182:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b084      	sub	sp, #16
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	3340      	adds	r3, #64	@ 0x40
 80081a4:	4619      	mov	r1, r3
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f8b1 	bl	800830e <GetLineCoding>
 80081ac:	4603      	mov	r3, r0
 80081ae:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80081b0:	7afb      	ldrb	r3, [r7, #11]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d105      	bne.n	80081c2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80081bc:	2102      	movs	r1, #2
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80081c2:	7afb      	ldrb	r3, [r7, #11]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80081d4:	2301      	movs	r3, #1
 80081d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081e2:	69db      	ldr	r3, [r3, #28]
 80081e4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80081ec:	2b04      	cmp	r3, #4
 80081ee:	d877      	bhi.n	80082e0 <USBH_CDC_Process+0x114>
 80081f0:	a201      	add	r2, pc, #4	@ (adr r2, 80081f8 <USBH_CDC_Process+0x2c>)
 80081f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f6:	bf00      	nop
 80081f8:	0800820d 	.word	0x0800820d
 80081fc:	08008213 	.word	0x08008213
 8008200:	08008243 	.word	0x08008243
 8008204:	080082b7 	.word	0x080082b7
 8008208:	080082c5 	.word	0x080082c5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800820c:	2300      	movs	r3, #0
 800820e:	73fb      	strb	r3, [r7, #15]
      break;
 8008210:	e06d      	b.n	80082ee <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f897 	bl	800834c <SetLineCoding>
 800821e:	4603      	mov	r3, r0
 8008220:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008222:	7bbb      	ldrb	r3, [r7, #14]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d104      	bne.n	8008232 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008230:	e058      	b.n	80082e4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008232:	7bbb      	ldrb	r3, [r7, #14]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d055      	beq.n	80082e4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2204      	movs	r2, #4
 800823c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008240:	e050      	b.n	80082e4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	3340      	adds	r3, #64	@ 0x40
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f860 	bl	800830e <GetLineCoding>
 800824e:	4603      	mov	r3, r0
 8008250:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008252:	7bbb      	ldrb	r3, [r7, #14]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d126      	bne.n	80082a6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800826a:	791b      	ldrb	r3, [r3, #4]
 800826c:	429a      	cmp	r2, r3
 800826e:	d13b      	bne.n	80082e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800827a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800827c:	429a      	cmp	r2, r3
 800827e:	d133      	bne.n	80082e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800828a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800828c:	429a      	cmp	r2, r3
 800828e:	d12b      	bne.n	80082e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008298:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800829a:	429a      	cmp	r2, r3
 800829c:	d124      	bne.n	80082e8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f958 	bl	8008554 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80082a4:	e020      	b.n	80082e8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80082a6:	7bbb      	ldrb	r3, [r7, #14]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d01d      	beq.n	80082e8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	2204      	movs	r2, #4
 80082b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80082b4:	e018      	b.n	80082e8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f867 	bl	800838a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f8da 	bl	8008476 <CDC_ProcessReception>
      break;
 80082c2:	e014      	b.n	80082ee <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80082c4:	2100      	movs	r1, #0
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f001 f81a 	bl	8009300 <USBH_ClrFeature>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80082d0:	7bbb      	ldrb	r3, [r7, #14]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10a      	bne.n	80082ec <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80082de:	e005      	b.n	80082ec <USBH_CDC_Process+0x120>

    default:
      break;
 80082e0:	bf00      	nop
 80082e2:	e004      	b.n	80082ee <USBH_CDC_Process+0x122>
      break;
 80082e4:	bf00      	nop
 80082e6:	e002      	b.n	80082ee <USBH_CDC_Process+0x122>
      break;
 80082e8:	bf00      	nop
 80082ea:	e000      	b.n	80082ee <USBH_CDC_Process+0x122>
      break;
 80082ec:	bf00      	nop

  }

  return status;
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b082      	sub	sp, #8
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	22a1      	movs	r2, #161	@ 0xa1
 800831c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2221      	movs	r2, #33	@ 0x21
 8008322:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2207      	movs	r2, #7
 8008334:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2207      	movs	r2, #7
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f001 fb14 	bl	800996a <USBH_CtlReq>
 8008342:	4603      	mov	r3, r0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2221      	movs	r2, #33	@ 0x21
 800835a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2220      	movs	r2, #32
 8008360:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2207      	movs	r2, #7
 8008372:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	2207      	movs	r2, #7
 8008378:	4619      	mov	r1, r3
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f001 faf5 	bl	800996a <USBH_CtlReq>
 8008380:	4603      	mov	r3, r0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b086      	sub	sp, #24
 800838e:	af02      	add	r7, sp, #8
 8008390:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008398:	69db      	ldr	r3, [r3, #28]
 800839a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800839c:	2300      	movs	r3, #0
 800839e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d002      	beq.n	80083b0 <CDC_ProcessTransmission+0x26>
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d023      	beq.n	80083f6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80083ae:	e05e      	b.n	800846e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	8b12      	ldrh	r2, [r2, #24]
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d90b      	bls.n	80083d4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	69d9      	ldr	r1, [r3, #28]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	8b1a      	ldrh	r2, [r3, #24]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	7b5b      	ldrb	r3, [r3, #13]
 80083c8:	2001      	movs	r0, #1
 80083ca:	9000      	str	r0, [sp, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f001 fcda 	bl	8009d86 <USBH_BulkSendData>
 80083d2:	e00b      	b.n	80083ec <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80083dc:	b29a      	uxth	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	7b5b      	ldrb	r3, [r3, #13]
 80083e2:	2001      	movs	r0, #1
 80083e4:	9000      	str	r0, [sp, #0]
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f001 fccd 	bl	8009d86 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2202      	movs	r2, #2
 80083f0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80083f4:	e03b      	b.n	800846e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	7b5b      	ldrb	r3, [r3, #13]
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f001 fff1 	bl	800a3e4 <USBH_LL_GetURBState>
 8008402:	4603      	mov	r3, r0
 8008404:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008406:	7afb      	ldrb	r3, [r7, #11]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d128      	bne.n	800845e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	8b12      	ldrh	r2, [r2, #24]
 8008414:	4293      	cmp	r3, r2
 8008416:	d90e      	bls.n	8008436 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	8b12      	ldrh	r2, [r2, #24]
 8008420:	1a9a      	subs	r2, r3, r2
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	69db      	ldr	r3, [r3, #28]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	8b12      	ldrh	r2, [r2, #24]
 800842e:	441a      	add	r2, r3
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	61da      	str	r2, [r3, #28]
 8008434:	e002      	b.n	800843c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008440:	2b00      	cmp	r3, #0
 8008442:	d004      	beq.n	800844e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800844c:	e00e      	b.n	800846c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f868 	bl	800852c <USBH_CDC_TransmitCallback>
      break;
 800845c:	e006      	b.n	800846c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800845e:	7afb      	ldrb	r3, [r7, #11]
 8008460:	2b02      	cmp	r3, #2
 8008462:	d103      	bne.n	800846c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800846c:	bf00      	nop
  }
}
 800846e:	bf00      	nop
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b086      	sub	sp, #24
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008484:	69db      	ldr	r3, [r3, #28]
 8008486:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008488:	2300      	movs	r3, #0
 800848a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008492:	2b03      	cmp	r3, #3
 8008494:	d002      	beq.n	800849c <CDC_ProcessReception+0x26>
 8008496:	2b04      	cmp	r3, #4
 8008498:	d00e      	beq.n	80084b8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800849a:	e043      	b.n	8008524 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	6a19      	ldr	r1, [r3, #32]
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	8b5a      	ldrh	r2, [r3, #26]
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	7b1b      	ldrb	r3, [r3, #12]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f001 fc91 	bl	8009dd0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2204      	movs	r2, #4
 80084b2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80084b6:	e035      	b.n	8008524 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	7b1b      	ldrb	r3, [r3, #12]
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f001 ff90 	bl	800a3e4 <USBH_LL_GetURBState>
 80084c4:	4603      	mov	r3, r0
 80084c6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80084c8:	7cfb      	ldrb	r3, [r7, #19]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d129      	bne.n	8008522 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	7b1b      	ldrb	r3, [r3, #12]
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f001 fef3 	bl	800a2c0 <USBH_LL_GetLastXferSize>
 80084da:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d016      	beq.n	8008514 <CDC_ProcessReception+0x9e>
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	8b5b      	ldrh	r3, [r3, #26]
 80084ea:	461a      	mov	r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d110      	bne.n	8008514 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	1ad2      	subs	r2, r2, r3
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	6a1a      	ldr	r2, [r3, #32]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	441a      	add	r2, r3
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2203      	movs	r2, #3
 800850e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008512:	e006      	b.n	8008522 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f80f 	bl	8008540 <USBH_CDC_ReceiveCallback>
      break;
 8008522:	bf00      	nop
  }
}
 8008524:	bf00      	nop
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	4613      	mov	r3, r2
 8008574:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800857c:	2302      	movs	r3, #2
 800857e:	e029      	b.n	80085d4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	79fa      	ldrb	r2, [r7, #7]
 8008584:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 f81f 	bl	80085dc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d003      	beq.n	80085cc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f001 fdc3 	bl	800a158 <USBH_LL_Init>

  return USBH_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80085e8:	2300      	movs	r3, #0
 80085ea:	60fb      	str	r3, [r7, #12]
 80085ec:	e009      	b.n	8008602 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	33e0      	adds	r3, #224	@ 0xe0
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	2200      	movs	r2, #0
 80085fa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	3301      	adds	r3, #1
 8008600:	60fb      	str	r3, [r7, #12]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2b0f      	cmp	r3, #15
 8008606:	d9f2      	bls.n	80085ee <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008608:	2300      	movs	r3, #0
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	e009      	b.n	8008622 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4413      	add	r3, r2
 8008614:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008618:	2200      	movs	r2, #0
 800861a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	3301      	adds	r3, #1
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008628:	d3f1      	bcc.n	800860e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2240      	movs	r2, #64	@ 0x40
 800864e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	331c      	adds	r3, #28
 800867a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800867e:	2100      	movs	r1, #0
 8008680:	4618      	mov	r0, r3
 8008682:	f002 fd80 	bl	800b186 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800868c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008690:	2100      	movs	r1, #0
 8008692:	4618      	mov	r0, r3
 8008694:	f002 fd77 	bl	800b186 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800869e:	2212      	movs	r2, #18
 80086a0:	2100      	movs	r1, #0
 80086a2:	4618      	mov	r0, r3
 80086a4:	f002 fd6f 	bl	800b186 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80086ae:	223e      	movs	r2, #62	@ 0x3e
 80086b0:	2100      	movs	r1, #0
 80086b2:	4618      	mov	r0, r3
 80086b4:	f002 fd67 	bl	800b186 <memset>

  return USBH_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b085      	sub	sp, #20
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d016      	beq.n	8008704 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10e      	bne.n	80086fe <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80086e6:	1c59      	adds	r1, r3, #1
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	33de      	adds	r3, #222	@ 0xde
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	73fb      	strb	r3, [r7, #15]
 80086fc:	e004      	b.n	8008708 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80086fe:	2302      	movs	r3, #2
 8008700:	73fb      	strb	r3, [r7, #15]
 8008702:	e001      	b.n	8008708 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008704:	2302      	movs	r3, #2
 8008706:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008708:	7bfb      	ldrb	r3, [r7, #15]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008716:	b480      	push	{r7}
 8008718:	b085      	sub	sp, #20
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	460b      	mov	r3, r1
 8008720:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800872c:	78fa      	ldrb	r2, [r7, #3]
 800872e:	429a      	cmp	r2, r3
 8008730:	d204      	bcs.n	800873c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	78fa      	ldrb	r2, [r7, #3]
 8008736:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800873a:	e001      	b.n	8008740 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800873c:	2302      	movs	r3, #2
 800873e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008740:	7bfb      	ldrb	r3, [r7, #15]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3714      	adds	r7, #20
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800874e:	b480      	push	{r7}
 8008750:	b087      	sub	sp, #28
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	4608      	mov	r0, r1
 8008758:	4611      	mov	r1, r2
 800875a:	461a      	mov	r2, r3
 800875c:	4603      	mov	r3, r0
 800875e:	70fb      	strb	r3, [r7, #3]
 8008760:	460b      	mov	r3, r1
 8008762:	70bb      	strb	r3, [r7, #2]
 8008764:	4613      	mov	r3, r2
 8008766:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008768:	2300      	movs	r3, #0
 800876a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800876c:	2300      	movs	r3, #0
 800876e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008776:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008778:	e025      	b.n	80087c6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800877a:	7dfb      	ldrb	r3, [r7, #23]
 800877c:	221a      	movs	r2, #26
 800877e:	fb02 f303 	mul.w	r3, r2, r3
 8008782:	3308      	adds	r3, #8
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	4413      	add	r3, r2
 8008788:	3302      	adds	r3, #2
 800878a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	795b      	ldrb	r3, [r3, #5]
 8008790:	78fa      	ldrb	r2, [r7, #3]
 8008792:	429a      	cmp	r2, r3
 8008794:	d002      	beq.n	800879c <USBH_FindInterface+0x4e>
 8008796:	78fb      	ldrb	r3, [r7, #3]
 8008798:	2bff      	cmp	r3, #255	@ 0xff
 800879a:	d111      	bne.n	80087c0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80087a0:	78ba      	ldrb	r2, [r7, #2]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d002      	beq.n	80087ac <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80087a6:	78bb      	ldrb	r3, [r7, #2]
 80087a8:	2bff      	cmp	r3, #255	@ 0xff
 80087aa:	d109      	bne.n	80087c0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80087b0:	787a      	ldrb	r2, [r7, #1]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d002      	beq.n	80087bc <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80087b6:	787b      	ldrb	r3, [r7, #1]
 80087b8:	2bff      	cmp	r3, #255	@ 0xff
 80087ba:	d101      	bne.n	80087c0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80087bc:	7dfb      	ldrb	r3, [r7, #23]
 80087be:	e006      	b.n	80087ce <USBH_FindInterface+0x80>
    }
    if_ix++;
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
 80087c2:	3301      	adds	r3, #1
 80087c4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80087c6:	7dfb      	ldrb	r3, [r7, #23]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d9d6      	bls.n	800877a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80087cc:	23ff      	movs	r3, #255	@ 0xff
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	371c      	adds	r7, #28
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f001 fcf4 	bl	800a1d0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80087e8:	2101      	movs	r1, #1
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f001 fe0d 	bl	800a40a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b088      	sub	sp, #32
 8008800:	af04      	add	r7, sp, #16
 8008802:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008804:	2302      	movs	r3, #2
 8008806:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b01      	cmp	r3, #1
 8008816:	d102      	bne.n	800881e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2203      	movs	r2, #3
 800881c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	b2db      	uxtb	r3, r3
 8008824:	2b0b      	cmp	r3, #11
 8008826:	f200 81bb 	bhi.w	8008ba0 <USBH_Process+0x3a4>
 800882a:	a201      	add	r2, pc, #4	@ (adr r2, 8008830 <USBH_Process+0x34>)
 800882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008830:	08008861 	.word	0x08008861
 8008834:	08008893 	.word	0x08008893
 8008838:	080088fb 	.word	0x080088fb
 800883c:	08008b3b 	.word	0x08008b3b
 8008840:	08008ba1 	.word	0x08008ba1
 8008844:	0800899b 	.word	0x0800899b
 8008848:	08008ae1 	.word	0x08008ae1
 800884c:	080089d1 	.word	0x080089d1
 8008850:	080089f1 	.word	0x080089f1
 8008854:	08008a0f 	.word	0x08008a0f
 8008858:	08008a53 	.word	0x08008a53
 800885c:	08008b23 	.word	0x08008b23
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008866:	b2db      	uxtb	r3, r3
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 819b 	beq.w	8008ba4 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008874:	20c8      	movs	r0, #200	@ 0xc8
 8008876:	f001 fe12 	bl	800a49e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f001 fd05 	bl	800a28a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008890:	e188      	b.n	8008ba4 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008898:	2b01      	cmp	r3, #1
 800889a:	d107      	bne.n	80088ac <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2202      	movs	r2, #2
 80088a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80088aa:	e18a      	b.n	8008bc2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80088b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80088b6:	d914      	bls.n	80088e2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80088be:	3301      	adds	r3, #1
 80088c0:	b2da      	uxtb	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	d903      	bls.n	80088da <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	220d      	movs	r2, #13
 80088d6:	701a      	strb	r2, [r3, #0]
      break;
 80088d8:	e173      	b.n	8008bc2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	701a      	strb	r2, [r3, #0]
      break;
 80088e0:	e16f      	b.n	8008bc2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80088e8:	f103 020a 	add.w	r2, r3, #10
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80088f2:	200a      	movs	r0, #10
 80088f4:	f001 fdd3 	bl	800a49e <USBH_Delay>
      break;
 80088f8:	e163      	b.n	8008bc2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800890a:	2104      	movs	r1, #4
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008910:	2064      	movs	r0, #100	@ 0x64
 8008912:	f001 fdc4 	bl	800a49e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f001 fc90 	bl	800a23c <USBH_LL_GetSpeed>
 800891c:	4603      	mov	r3, r0
 800891e:	461a      	mov	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2205      	movs	r2, #5
 800892a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800892c:	2100      	movs	r1, #0
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f001 fa9b 	bl	8009e6a <USBH_AllocPipe>
 8008934:	4603      	mov	r3, r0
 8008936:	461a      	mov	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800893c:	2180      	movs	r1, #128	@ 0x80
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f001 fa93 	bl	8009e6a <USBH_AllocPipe>
 8008944:	4603      	mov	r3, r0
 8008946:	461a      	mov	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	7919      	ldrb	r1, [r3, #4]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008960:	9202      	str	r2, [sp, #8]
 8008962:	2200      	movs	r2, #0
 8008964:	9201      	str	r2, [sp, #4]
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	4603      	mov	r3, r0
 800896a:	2280      	movs	r2, #128	@ 0x80
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f001 fa4d 	bl	8009e0c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	7959      	ldrb	r1, [r3, #5]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008986:	9202      	str	r2, [sp, #8]
 8008988:	2200      	movs	r2, #0
 800898a:	9201      	str	r2, [sp, #4]
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	4603      	mov	r3, r0
 8008990:	2200      	movs	r2, #0
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f001 fa3a 	bl	8009e0c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008998:	e113      	b.n	8008bc2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f916 	bl	8008bcc <USBH_HandleEnum>
 80089a0:	4603      	mov	r3, r0
 80089a2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80089a4:	7bbb      	ldrb	r3, [r7, #14]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f040 80fd 	bne.w	8008ba8 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d103      	bne.n	80089c8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2208      	movs	r2, #8
 80089c4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80089c6:	e0ef      	b.n	8008ba8 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2207      	movs	r2, #7
 80089cc:	701a      	strb	r2, [r3, #0]
      break;
 80089ce:	e0eb      	b.n	8008ba8 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f000 80e8 	beq.w	8008bac <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80089e2:	2101      	movs	r1, #1
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2208      	movs	r2, #8
 80089ec:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80089ee:	e0dd      	b.n	8008bac <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80089f6:	4619      	mov	r1, r3
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fc3a 	bl	8009272 <USBH_SetCfg>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f040 80d5 	bne.w	8008bb0 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2209      	movs	r2, #9
 8008a0a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a0c:	e0d0      	b.n	8008bb0 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008a14:	f003 0320 	and.w	r3, r3, #32
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d016      	beq.n	8008a4a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fc4a 	bl	80092b8 <USBH_SetFeature>
 8008a24:	4603      	mov	r3, r0
 8008a26:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d103      	bne.n	8008a38 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	220a      	movs	r2, #10
 8008a34:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a36:	e0bd      	b.n	8008bb4 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008a38:	7bbb      	ldrb	r3, [r7, #14]
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b03      	cmp	r3, #3
 8008a3e:	f040 80b9 	bne.w	8008bb4 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	220a      	movs	r2, #10
 8008a46:	701a      	strb	r2, [r3, #0]
      break;
 8008a48:	e0b4      	b.n	8008bb4 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	220a      	movs	r2, #10
 8008a4e:	701a      	strb	r2, [r3, #0]
      break;
 8008a50:	e0b0      	b.n	8008bb4 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 80ad 	beq.w	8008bb8 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008a66:	2300      	movs	r3, #0
 8008a68:	73fb      	strb	r3, [r7, #15]
 8008a6a:	e016      	b.n	8008a9a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008a6c:	7bfa      	ldrb	r2, [r7, #15]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	32de      	adds	r2, #222	@ 0xde
 8008a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a76:	791a      	ldrb	r2, [r3, #4]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d108      	bne.n	8008a94 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008a82:	7bfa      	ldrb	r2, [r7, #15]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	32de      	adds	r2, #222	@ 0xde
 8008a88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008a92:	e005      	b.n	8008aa0 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008a94:	7bfb      	ldrb	r3, [r7, #15]
 8008a96:	3301      	adds	r3, #1
 8008a98:	73fb      	strb	r3, [r7, #15]
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d0e5      	beq.n	8008a6c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d016      	beq.n	8008ad8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	4798      	blx	r3
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d109      	bne.n	8008ad0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2206      	movs	r2, #6
 8008ac0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ac8:	2103      	movs	r1, #3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ace:	e073      	b.n	8008bb8 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	220d      	movs	r2, #13
 8008ad4:	701a      	strb	r2, [r3, #0]
      break;
 8008ad6:	e06f      	b.n	8008bb8 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	220d      	movs	r2, #13
 8008adc:	701a      	strb	r2, [r3, #0]
      break;
 8008ade:	e06b      	b.n	8008bb8 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d017      	beq.n	8008b1a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	4798      	blx	r3
 8008af6:	4603      	mov	r3, r0
 8008af8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d103      	bne.n	8008b0a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	220b      	movs	r2, #11
 8008b06:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b08:	e058      	b.n	8008bbc <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d154      	bne.n	8008bbc <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	220d      	movs	r2, #13
 8008b16:	701a      	strb	r2, [r3, #0]
      break;
 8008b18:	e050      	b.n	8008bbc <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	220d      	movs	r2, #13
 8008b1e:	701a      	strb	r2, [r3, #0]
      break;
 8008b20:	e04c      	b.n	8008bbc <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d049      	beq.n	8008bc0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	4798      	blx	r3
      }
      break;
 8008b38:	e042      	b.n	8008bc0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7ff fd4a 	bl	80085dc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d009      	beq.n	8008b66 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d005      	beq.n	8008b7c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b76:	2105      	movs	r1, #5
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d107      	bne.n	8008b98 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f7ff fe22 	bl	80087da <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b96:	e014      	b.n	8008bc2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f001 fb19 	bl	800a1d0 <USBH_LL_Start>
      break;
 8008b9e:	e010      	b.n	8008bc2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008ba0:	bf00      	nop
 8008ba2:	e00e      	b.n	8008bc2 <USBH_Process+0x3c6>
      break;
 8008ba4:	bf00      	nop
 8008ba6:	e00c      	b.n	8008bc2 <USBH_Process+0x3c6>
      break;
 8008ba8:	bf00      	nop
 8008baa:	e00a      	b.n	8008bc2 <USBH_Process+0x3c6>
    break;
 8008bac:	bf00      	nop
 8008bae:	e008      	b.n	8008bc2 <USBH_Process+0x3c6>
      break;
 8008bb0:	bf00      	nop
 8008bb2:	e006      	b.n	8008bc2 <USBH_Process+0x3c6>
      break;
 8008bb4:	bf00      	nop
 8008bb6:	e004      	b.n	8008bc2 <USBH_Process+0x3c6>
      break;
 8008bb8:	bf00      	nop
 8008bba:	e002      	b.n	8008bc2 <USBH_Process+0x3c6>
      break;
 8008bbc:	bf00      	nop
 8008bbe:	e000      	b.n	8008bc2 <USBH_Process+0x3c6>
      break;
 8008bc0:	bf00      	nop
  }
  return USBH_OK;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b088      	sub	sp, #32
 8008bd0:	af04      	add	r7, sp, #16
 8008bd2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	785b      	ldrb	r3, [r3, #1]
 8008be0:	2b07      	cmp	r3, #7
 8008be2:	f200 81bd 	bhi.w	8008f60 <USBH_HandleEnum+0x394>
 8008be6:	a201      	add	r2, pc, #4	@ (adr r2, 8008bec <USBH_HandleEnum+0x20>)
 8008be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bec:	08008c0d 	.word	0x08008c0d
 8008bf0:	08008cc7 	.word	0x08008cc7
 8008bf4:	08008d31 	.word	0x08008d31
 8008bf8:	08008dbb 	.word	0x08008dbb
 8008bfc:	08008e25 	.word	0x08008e25
 8008c00:	08008e95 	.word	0x08008e95
 8008c04:	08008edb 	.word	0x08008edb
 8008c08:	08008f21 	.word	0x08008f21
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008c0c:	2108      	movs	r1, #8
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fa4c 	bl	80090ac <USBH_Get_DevDesc>
 8008c14:	4603      	mov	r3, r0
 8008c16:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c18:	7bbb      	ldrb	r3, [r7, #14]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d12e      	bne.n	8008c7c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	7919      	ldrb	r1, [r3, #4]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008c42:	9202      	str	r2, [sp, #8]
 8008c44:	2200      	movs	r2, #0
 8008c46:	9201      	str	r2, [sp, #4]
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2280      	movs	r2, #128	@ 0x80
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f001 f8dc 	bl	8009e0c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	7959      	ldrb	r1, [r3, #5]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c68:	9202      	str	r2, [sp, #8]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	9201      	str	r2, [sp, #4]
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	4603      	mov	r3, r0
 8008c72:	2200      	movs	r2, #0
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f001 f8c9 	bl	8009e0c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008c7a:	e173      	b.n	8008f64 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	2b03      	cmp	r3, #3
 8008c80:	f040 8170 	bne.w	8008f64 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d903      	bls.n	8008ca6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	220d      	movs	r2, #13
 8008ca2:	701a      	strb	r2, [r3, #0]
      break;
 8008ca4:	e15e      	b.n	8008f64 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	795b      	ldrb	r3, [r3, #5]
 8008caa:	4619      	mov	r1, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f001 f8fd 	bl	8009eac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	791b      	ldrb	r3, [r3, #4]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f001 f8f7 	bl	8009eac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	701a      	strb	r2, [r3, #0]
      break;
 8008cc4:	e14e      	b.n	8008f64 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008cc6:	2112      	movs	r1, #18
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f9ef 	bl	80090ac <USBH_Get_DevDesc>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008cd2:	7bbb      	ldrb	r3, [r7, #14]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d103      	bne.n	8008ce0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2202      	movs	r2, #2
 8008cdc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008cde:	e143      	b.n	8008f68 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ce0:	7bbb      	ldrb	r3, [r7, #14]
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	f040 8140 	bne.w	8008f68 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008cee:	3301      	adds	r3, #1
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008cfe:	2b03      	cmp	r3, #3
 8008d00:	d903      	bls.n	8008d0a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	220d      	movs	r2, #13
 8008d06:	701a      	strb	r2, [r3, #0]
      break;
 8008d08:	e12e      	b.n	8008f68 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	795b      	ldrb	r3, [r3, #5]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f001 f8cb 	bl	8009eac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	791b      	ldrb	r3, [r3, #4]
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f001 f8c5 	bl	8009eac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	701a      	strb	r2, [r3, #0]
      break;
 8008d2e:	e11b      	b.n	8008f68 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008d30:	2101      	movs	r1, #1
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fa79 	bl	800922a <USBH_SetAddress>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d3c:	7bbb      	ldrb	r3, [r7, #14]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d130      	bne.n	8008da4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008d42:	2002      	movs	r0, #2
 8008d44:	f001 fbab 	bl	800a49e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2203      	movs	r2, #3
 8008d54:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	7919      	ldrb	r1, [r3, #4]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008d6a:	9202      	str	r2, [sp, #8]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	9201      	str	r2, [sp, #4]
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	4603      	mov	r3, r0
 8008d74:	2280      	movs	r2, #128	@ 0x80
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f001 f848 	bl	8009e0c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	7959      	ldrb	r1, [r3, #5]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008d90:	9202      	str	r2, [sp, #8]
 8008d92:	2200      	movs	r2, #0
 8008d94:	9201      	str	r2, [sp, #4]
 8008d96:	9300      	str	r3, [sp, #0]
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f001 f835 	bl	8009e0c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008da2:	e0e3      	b.n	8008f6c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008da4:	7bbb      	ldrb	r3, [r7, #14]
 8008da6:	2b03      	cmp	r3, #3
 8008da8:	f040 80e0 	bne.w	8008f6c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	220d      	movs	r2, #13
 8008db0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	705a      	strb	r2, [r3, #1]
      break;
 8008db8:	e0d8      	b.n	8008f6c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008dba:	2109      	movs	r1, #9
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 f9a1 	bl	8009104 <USBH_Get_CfgDesc>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008dc6:	7bbb      	ldrb	r3, [r7, #14]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d103      	bne.n	8008dd4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2204      	movs	r2, #4
 8008dd0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008dd2:	e0cd      	b.n	8008f70 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008dd4:	7bbb      	ldrb	r3, [r7, #14]
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	f040 80ca 	bne.w	8008f70 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008de2:	3301      	adds	r3, #1
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008df2:	2b03      	cmp	r3, #3
 8008df4:	d903      	bls.n	8008dfe <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	220d      	movs	r2, #13
 8008dfa:	701a      	strb	r2, [r3, #0]
      break;
 8008dfc:	e0b8      	b.n	8008f70 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	795b      	ldrb	r3, [r3, #5]
 8008e02:	4619      	mov	r1, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f001 f851 	bl	8009eac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	791b      	ldrb	r3, [r3, #4]
 8008e0e:	4619      	mov	r1, r3
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f001 f84b 	bl	8009eac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	701a      	strb	r2, [r3, #0]
      break;
 8008e22:	e0a5      	b.n	8008f70 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f969 	bl	8009104 <USBH_Get_CfgDesc>
 8008e32:	4603      	mov	r3, r0
 8008e34:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e36:	7bbb      	ldrb	r3, [r7, #14]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d103      	bne.n	8008e44 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2205      	movs	r2, #5
 8008e40:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008e42:	e097      	b.n	8008f74 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e44:	7bbb      	ldrb	r3, [r7, #14]
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	f040 8094 	bne.w	8008f74 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008e52:	3301      	adds	r3, #1
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008e62:	2b03      	cmp	r3, #3
 8008e64:	d903      	bls.n	8008e6e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	220d      	movs	r2, #13
 8008e6a:	701a      	strb	r2, [r3, #0]
      break;
 8008e6c:	e082      	b.n	8008f74 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	795b      	ldrb	r3, [r3, #5]
 8008e72:	4619      	mov	r1, r3
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f001 f819 	bl	8009eac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	791b      	ldrb	r3, [r3, #4]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f001 f813 	bl	8009eac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	701a      	strb	r2, [r3, #0]
      break;
 8008e92:	e06f      	b.n	8008f74 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d019      	beq.n	8008ed2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008eaa:	23ff      	movs	r3, #255	@ 0xff
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f953 	bl	8009158 <USBH_Get_StringDesc>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008eb6:	7bbb      	ldrb	r3, [r7, #14]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d103      	bne.n	8008ec4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2206      	movs	r2, #6
 8008ec0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008ec2:	e059      	b.n	8008f78 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ec4:	7bbb      	ldrb	r3, [r7, #14]
 8008ec6:	2b03      	cmp	r3, #3
 8008ec8:	d156      	bne.n	8008f78 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2206      	movs	r2, #6
 8008ece:	705a      	strb	r2, [r3, #1]
      break;
 8008ed0:	e052      	b.n	8008f78 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2206      	movs	r2, #6
 8008ed6:	705a      	strb	r2, [r3, #1]
      break;
 8008ed8:	e04e      	b.n	8008f78 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d019      	beq.n	8008f18 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008ef0:	23ff      	movs	r3, #255	@ 0xff
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f930 	bl	8009158 <USBH_Get_StringDesc>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008efc:	7bbb      	ldrb	r3, [r7, #14]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d103      	bne.n	8008f0a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2207      	movs	r2, #7
 8008f06:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008f08:	e038      	b.n	8008f7c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f0a:	7bbb      	ldrb	r3, [r7, #14]
 8008f0c:	2b03      	cmp	r3, #3
 8008f0e:	d135      	bne.n	8008f7c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2207      	movs	r2, #7
 8008f14:	705a      	strb	r2, [r3, #1]
      break;
 8008f16:	e031      	b.n	8008f7c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2207      	movs	r2, #7
 8008f1c:	705a      	strb	r2, [r3, #1]
      break;
 8008f1e:	e02d      	b.n	8008f7c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d017      	beq.n	8008f5a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008f36:	23ff      	movs	r3, #255	@ 0xff
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f90d 	bl	8009158 <USBH_Get_StringDesc>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008f42:	7bbb      	ldrb	r3, [r7, #14]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d102      	bne.n	8008f4e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008f4c:	e018      	b.n	8008f80 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f4e:	7bbb      	ldrb	r3, [r7, #14]
 8008f50:	2b03      	cmp	r3, #3
 8008f52:	d115      	bne.n	8008f80 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008f54:	2300      	movs	r3, #0
 8008f56:	73fb      	strb	r3, [r7, #15]
      break;
 8008f58:	e012      	b.n	8008f80 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8008f5e:	e00f      	b.n	8008f80 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008f60:	bf00      	nop
 8008f62:	e00e      	b.n	8008f82 <USBH_HandleEnum+0x3b6>
      break;
 8008f64:	bf00      	nop
 8008f66:	e00c      	b.n	8008f82 <USBH_HandleEnum+0x3b6>
      break;
 8008f68:	bf00      	nop
 8008f6a:	e00a      	b.n	8008f82 <USBH_HandleEnum+0x3b6>
      break;
 8008f6c:	bf00      	nop
 8008f6e:	e008      	b.n	8008f82 <USBH_HandleEnum+0x3b6>
      break;
 8008f70:	bf00      	nop
 8008f72:	e006      	b.n	8008f82 <USBH_HandleEnum+0x3b6>
      break;
 8008f74:	bf00      	nop
 8008f76:	e004      	b.n	8008f82 <USBH_HandleEnum+0x3b6>
      break;
 8008f78:	bf00      	nop
 8008f7a:	e002      	b.n	8008f82 <USBH_HandleEnum+0x3b6>
      break;
 8008f7c:	bf00      	nop
 8008f7e:	e000      	b.n	8008f82 <USBH_HandleEnum+0x3b6>
      break;
 8008f80:	bf00      	nop
  }
  return Status;
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008f9e:	bf00      	nop
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b082      	sub	sp, #8
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008fb8:	1c5a      	adds	r2, r3, #1
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f804 	bl	8008fce <USBH_HandleSof>
}
 8008fc6:	bf00      	nop
 8008fc8:	3708      	adds	r7, #8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b082      	sub	sp, #8
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2b0b      	cmp	r3, #11
 8008fde:	d10a      	bne.n	8008ff6 <USBH_HandleSof+0x28>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d005      	beq.n	8008ff6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ff0:	699b      	ldr	r3, [r3, #24]
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	4798      	blx	r3
  }
}
 8008ff6:	bf00      	nop
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b083      	sub	sp, #12
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800900e:	bf00      	nop
}
 8009010:	370c      	adds	r7, #12
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800901a:	b480      	push	{r7}
 800901c:	b083      	sub	sp, #12
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800902a:	bf00      	nop
}
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009036:	b480      	push	{r7}
 8009038:	b083      	sub	sp, #12
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f001 f8be 	bl	800a206 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	791b      	ldrb	r3, [r3, #4]
 800908e:	4619      	mov	r1, r3
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 ff0b 	bl	8009eac <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	795b      	ldrb	r3, [r3, #5]
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 ff05 	bl	8009eac <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b086      	sub	sp, #24
 80090b0:	af02      	add	r7, sp, #8
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80090b8:	887b      	ldrh	r3, [r7, #2]
 80090ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090be:	d901      	bls.n	80090c4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e01b      	b.n	80090fc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80090ca:	887b      	ldrh	r3, [r7, #2]
 80090cc:	9300      	str	r3, [sp, #0]
 80090ce:	4613      	mov	r3, r2
 80090d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80090d4:	2100      	movs	r1, #0
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f872 	bl	80091c0 <USBH_GetDescriptor>
 80090dc:	4603      	mov	r3, r0
 80090de:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d109      	bne.n	80090fa <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80090ec:	887a      	ldrh	r2, [r7, #2]
 80090ee:	4619      	mov	r1, r3
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f929 	bl	8009348 <USBH_ParseDevDesc>
 80090f6:	4603      	mov	r3, r0
 80090f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af02      	add	r7, sp, #8
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	331c      	adds	r3, #28
 8009114:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009116:	887b      	ldrh	r3, [r7, #2]
 8009118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800911c:	d901      	bls.n	8009122 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800911e:	2303      	movs	r3, #3
 8009120:	e016      	b.n	8009150 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009122:	887b      	ldrh	r3, [r7, #2]
 8009124:	9300      	str	r3, [sp, #0]
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800912c:	2100      	movs	r1, #0
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f846 	bl	80091c0 <USBH_GetDescriptor>
 8009134:	4603      	mov	r3, r0
 8009136:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009138:	7bfb      	ldrb	r3, [r7, #15]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d107      	bne.n	800914e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800913e:	887b      	ldrh	r3, [r7, #2]
 8009140:	461a      	mov	r2, r3
 8009142:	68b9      	ldr	r1, [r7, #8]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f9af 	bl	80094a8 <USBH_ParseCfgDesc>
 800914a:	4603      	mov	r3, r0
 800914c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800914e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b088      	sub	sp, #32
 800915c:	af02      	add	r7, sp, #8
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	607a      	str	r2, [r7, #4]
 8009162:	461a      	mov	r2, r3
 8009164:	460b      	mov	r3, r1
 8009166:	72fb      	strb	r3, [r7, #11]
 8009168:	4613      	mov	r3, r2
 800916a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800916c:	893b      	ldrh	r3, [r7, #8]
 800916e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009172:	d802      	bhi.n	800917a <USBH_Get_StringDesc+0x22>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d101      	bne.n	800917e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800917a:	2303      	movs	r3, #3
 800917c:	e01c      	b.n	80091b8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800917e:	7afb      	ldrb	r3, [r7, #11]
 8009180:	b29b      	uxth	r3, r3
 8009182:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009186:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800918e:	893b      	ldrh	r3, [r7, #8]
 8009190:	9300      	str	r3, [sp, #0]
 8009192:	460b      	mov	r3, r1
 8009194:	2100      	movs	r1, #0
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f000 f812 	bl	80091c0 <USBH_GetDescriptor>
 800919c:	4603      	mov	r3, r0
 800919e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80091a0:	7dfb      	ldrb	r3, [r7, #23]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d107      	bne.n	80091b6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80091ac:	893a      	ldrh	r2, [r7, #8]
 80091ae:	6879      	ldr	r1, [r7, #4]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f000 fb8d 	bl	80098d0 <USBH_ParseStringDesc>
  }

  return status;
 80091b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3718      	adds	r7, #24
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	607b      	str	r3, [r7, #4]
 80091ca:	460b      	mov	r3, r1
 80091cc:	72fb      	strb	r3, [r7, #11]
 80091ce:	4613      	mov	r3, r2
 80091d0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	789b      	ldrb	r3, [r3, #2]
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d11c      	bne.n	8009214 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80091da:	7afb      	ldrb	r3, [r7, #11]
 80091dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80091e0:	b2da      	uxtb	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2206      	movs	r2, #6
 80091ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	893a      	ldrh	r2, [r7, #8]
 80091f0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80091f2:	893b      	ldrh	r3, [r7, #8]
 80091f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80091f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091fc:	d104      	bne.n	8009208 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f240 4209 	movw	r2, #1033	@ 0x409
 8009204:	829a      	strh	r2, [r3, #20]
 8009206:	e002      	b.n	800920e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2200      	movs	r2, #0
 800920c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	8b3a      	ldrh	r2, [r7, #24]
 8009212:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009214:	8b3b      	ldrh	r3, [r7, #24]
 8009216:	461a      	mov	r2, r3
 8009218:	6879      	ldr	r1, [r7, #4]
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	f000 fba5 	bl	800996a <USBH_CtlReq>
 8009220:	4603      	mov	r3, r0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b082      	sub	sp, #8
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	460b      	mov	r3, r1
 8009234:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	789b      	ldrb	r3, [r3, #2]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d10f      	bne.n	800925e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2205      	movs	r2, #5
 8009248:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800924a:	78fb      	ldrb	r3, [r7, #3]
 800924c:	b29a      	uxth	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800925e:	2200      	movs	r2, #0
 8009260:	2100      	movs	r1, #0
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fb81 	bl	800996a <USBH_CtlReq>
 8009268:	4603      	mov	r3, r0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3708      	adds	r7, #8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b082      	sub	sp, #8
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
 800927a:	460b      	mov	r3, r1
 800927c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	789b      	ldrb	r3, [r3, #2]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d10e      	bne.n	80092a4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2209      	movs	r2, #9
 8009290:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	887a      	ldrh	r2, [r7, #2]
 8009296:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80092a4:	2200      	movs	r2, #0
 80092a6:	2100      	movs	r1, #0
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fb5e 	bl	800996a <USBH_CtlReq>
 80092ae:	4603      	mov	r3, r0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	460b      	mov	r3, r1
 80092c2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	789b      	ldrb	r3, [r3, #2]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d10f      	bne.n	80092ec <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2203      	movs	r2, #3
 80092d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80092d8:	78fb      	ldrb	r3, [r7, #3]
 80092da:	b29a      	uxth	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80092ec:	2200      	movs	r2, #0
 80092ee:	2100      	movs	r1, #0
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fb3a 	bl	800996a <USBH_CtlReq>
 80092f6:	4603      	mov	r3, r0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	460b      	mov	r3, r1
 800930a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	789b      	ldrb	r3, [r3, #2]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d10f      	bne.n	8009334 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2202      	movs	r2, #2
 8009318:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009326:	78fb      	ldrb	r3, [r7, #3]
 8009328:	b29a      	uxth	r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009334:	2200      	movs	r2, #0
 8009336:	2100      	movs	r1, #0
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 fb16 	bl	800996a <USBH_CtlReq>
 800933e:	4603      	mov	r3, r0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009348:	b480      	push	{r7}
 800934a:	b087      	sub	sp, #28
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	4613      	mov	r3, r2
 8009354:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800935c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800935e:	2300      	movs	r3, #0
 8009360:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d101      	bne.n	800936c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009368:	2302      	movs	r3, #2
 800936a:	e094      	b.n	8009496 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	781a      	ldrb	r2, [r3, #0]
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	785a      	ldrb	r2, [r3, #1]
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	3302      	adds	r3, #2
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	461a      	mov	r2, r3
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	3303      	adds	r3, #3
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	021b      	lsls	r3, r3, #8
 800938c:	b29b      	uxth	r3, r3
 800938e:	4313      	orrs	r3, r2
 8009390:	b29a      	uxth	r2, r3
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	791a      	ldrb	r2, [r3, #4]
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	795a      	ldrb	r2, [r3, #5]
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	799a      	ldrb	r2, [r3, #6]
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	79da      	ldrb	r2, [r3, #7]
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d004      	beq.n	80093ca <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d11b      	bne.n	8009402 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	79db      	ldrb	r3, [r3, #7]
 80093ce:	2b20      	cmp	r3, #32
 80093d0:	dc0f      	bgt.n	80093f2 <USBH_ParseDevDesc+0xaa>
 80093d2:	2b08      	cmp	r3, #8
 80093d4:	db0f      	blt.n	80093f6 <USBH_ParseDevDesc+0xae>
 80093d6:	3b08      	subs	r3, #8
 80093d8:	4a32      	ldr	r2, [pc, #200]	@ (80094a4 <USBH_ParseDevDesc+0x15c>)
 80093da:	fa22 f303 	lsr.w	r3, r2, r3
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	bf14      	ite	ne
 80093e6:	2301      	movne	r3, #1
 80093e8:	2300      	moveq	r3, #0
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d106      	bne.n	80093fe <USBH_ParseDevDesc+0xb6>
 80093f0:	e001      	b.n	80093f6 <USBH_ParseDevDesc+0xae>
 80093f2:	2b40      	cmp	r3, #64	@ 0x40
 80093f4:	d003      	beq.n	80093fe <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	2208      	movs	r2, #8
 80093fa:	71da      	strb	r2, [r3, #7]
        break;
 80093fc:	e000      	b.n	8009400 <USBH_ParseDevDesc+0xb8>
        break;
 80093fe:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009400:	e00e      	b.n	8009420 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009408:	2b02      	cmp	r3, #2
 800940a:	d107      	bne.n	800941c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	79db      	ldrb	r3, [r3, #7]
 8009410:	2b08      	cmp	r3, #8
 8009412:	d005      	beq.n	8009420 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	2208      	movs	r2, #8
 8009418:	71da      	strb	r2, [r3, #7]
 800941a:	e001      	b.n	8009420 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800941c:	2303      	movs	r3, #3
 800941e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009420:	88fb      	ldrh	r3, [r7, #6]
 8009422:	2b08      	cmp	r3, #8
 8009424:	d936      	bls.n	8009494 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	3308      	adds	r3, #8
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	461a      	mov	r2, r3
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	3309      	adds	r3, #9
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	021b      	lsls	r3, r3, #8
 8009436:	b29b      	uxth	r3, r3
 8009438:	4313      	orrs	r3, r2
 800943a:	b29a      	uxth	r2, r3
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	330a      	adds	r3, #10
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	461a      	mov	r2, r3
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	330b      	adds	r3, #11
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	021b      	lsls	r3, r3, #8
 8009450:	b29b      	uxth	r3, r3
 8009452:	4313      	orrs	r3, r2
 8009454:	b29a      	uxth	r2, r3
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	330c      	adds	r3, #12
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	461a      	mov	r2, r3
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	330d      	adds	r3, #13
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	021b      	lsls	r3, r3, #8
 800946a:	b29b      	uxth	r3, r3
 800946c:	4313      	orrs	r3, r2
 800946e:	b29a      	uxth	r2, r3
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	7b9a      	ldrb	r2, [r3, #14]
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	7bda      	ldrb	r2, [r3, #15]
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	7c1a      	ldrb	r2, [r3, #16]
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	7c5a      	ldrb	r2, [r3, #17]
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009494:	7dfb      	ldrb	r3, [r7, #23]
}
 8009496:	4618      	mov	r0, r3
 8009498:	371c      	adds	r7, #28
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	01000101 	.word	0x01000101

080094a8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b08c      	sub	sp, #48	@ 0x30
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	4613      	mov	r3, r2
 80094b4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80094bc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80094c4:	2300      	movs	r3, #0
 80094c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80094ca:	2300      	movs	r3, #0
 80094cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80094d6:	2302      	movs	r3, #2
 80094d8:	e0da      	b.n	8009690 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80094de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	2b09      	cmp	r3, #9
 80094e4:	d002      	beq.n	80094ec <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80094e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e8:	2209      	movs	r2, #9
 80094ea:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	781a      	ldrb	r2, [r3, #0]
 80094f0:	6a3b      	ldr	r3, [r7, #32]
 80094f2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	785a      	ldrb	r2, [r3, #1]
 80094f8:	6a3b      	ldr	r3, [r7, #32]
 80094fa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	3302      	adds	r3, #2
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	3303      	adds	r3, #3
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	021b      	lsls	r3, r3, #8
 800950c:	b29b      	uxth	r3, r3
 800950e:	4313      	orrs	r3, r2
 8009510:	b29b      	uxth	r3, r3
 8009512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009516:	bf28      	it	cs
 8009518:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800951c:	b29a      	uxth	r2, r3
 800951e:	6a3b      	ldr	r3, [r7, #32]
 8009520:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	791a      	ldrb	r2, [r3, #4]
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	795a      	ldrb	r2, [r3, #5]
 800952e:	6a3b      	ldr	r3, [r7, #32]
 8009530:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	799a      	ldrb	r2, [r3, #6]
 8009536:	6a3b      	ldr	r3, [r7, #32]
 8009538:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	79da      	ldrb	r2, [r3, #7]
 800953e:	6a3b      	ldr	r3, [r7, #32]
 8009540:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	7a1a      	ldrb	r2, [r3, #8]
 8009546:	6a3b      	ldr	r3, [r7, #32]
 8009548:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800954a:	88fb      	ldrh	r3, [r7, #6]
 800954c:	2b09      	cmp	r3, #9
 800954e:	f240 809d 	bls.w	800968c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009552:	2309      	movs	r3, #9
 8009554:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009556:	2300      	movs	r3, #0
 8009558:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800955a:	e081      	b.n	8009660 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800955c:	f107 0316 	add.w	r3, r7, #22
 8009560:	4619      	mov	r1, r3
 8009562:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009564:	f000 f9e7 	bl	8009936 <USBH_GetNextDesc>
 8009568:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800956a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800956c:	785b      	ldrb	r3, [r3, #1]
 800956e:	2b04      	cmp	r3, #4
 8009570:	d176      	bne.n	8009660 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	2b09      	cmp	r3, #9
 8009578:	d002      	beq.n	8009580 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800957a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800957c:	2209      	movs	r2, #9
 800957e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009584:	221a      	movs	r2, #26
 8009586:	fb02 f303 	mul.w	r3, r2, r3
 800958a:	3308      	adds	r3, #8
 800958c:	6a3a      	ldr	r2, [r7, #32]
 800958e:	4413      	add	r3, r2
 8009590:	3302      	adds	r3, #2
 8009592:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009594:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009596:	69f8      	ldr	r0, [r7, #28]
 8009598:	f000 f87e 	bl	8009698 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800959c:	2300      	movs	r3, #0
 800959e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80095a2:	2300      	movs	r3, #0
 80095a4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80095a6:	e043      	b.n	8009630 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80095a8:	f107 0316 	add.w	r3, r7, #22
 80095ac:	4619      	mov	r1, r3
 80095ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095b0:	f000 f9c1 	bl	8009936 <USBH_GetNextDesc>
 80095b4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80095b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b8:	785b      	ldrb	r3, [r3, #1]
 80095ba:	2b05      	cmp	r3, #5
 80095bc:	d138      	bne.n	8009630 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	795b      	ldrb	r3, [r3, #5]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d113      	bne.n	80095ee <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d003      	beq.n	80095d6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	799b      	ldrb	r3, [r3, #6]
 80095d2:	2b03      	cmp	r3, #3
 80095d4:	d10b      	bne.n	80095ee <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	79db      	ldrb	r3, [r3, #7]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10b      	bne.n	80095f6 <USBH_ParseCfgDesc+0x14e>
 80095de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	2b09      	cmp	r3, #9
 80095e4:	d007      	beq.n	80095f6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80095e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e8:	2209      	movs	r2, #9
 80095ea:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80095ec:	e003      	b.n	80095f6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80095ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f0:	2207      	movs	r2, #7
 80095f2:	701a      	strb	r2, [r3, #0]
 80095f4:	e000      	b.n	80095f8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80095f6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80095f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095fc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009600:	3201      	adds	r2, #1
 8009602:	00d2      	lsls	r2, r2, #3
 8009604:	211a      	movs	r1, #26
 8009606:	fb01 f303 	mul.w	r3, r1, r3
 800960a:	4413      	add	r3, r2
 800960c:	3308      	adds	r3, #8
 800960e:	6a3a      	ldr	r2, [r7, #32]
 8009610:	4413      	add	r3, r2
 8009612:	3304      	adds	r3, #4
 8009614:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009616:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009618:	69b9      	ldr	r1, [r7, #24]
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f000 f870 	bl	8009700 <USBH_ParseEPDesc>
 8009620:	4603      	mov	r3, r0
 8009622:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009626:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800962a:	3301      	adds	r3, #1
 800962c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	791b      	ldrb	r3, [r3, #4]
 8009634:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009638:	429a      	cmp	r2, r3
 800963a:	d204      	bcs.n	8009646 <USBH_ParseCfgDesc+0x19e>
 800963c:	6a3b      	ldr	r3, [r7, #32]
 800963e:	885a      	ldrh	r2, [r3, #2]
 8009640:	8afb      	ldrh	r3, [r7, #22]
 8009642:	429a      	cmp	r2, r3
 8009644:	d8b0      	bhi.n	80095a8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	791b      	ldrb	r3, [r3, #4]
 800964a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800964e:	429a      	cmp	r2, r3
 8009650:	d201      	bcs.n	8009656 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009652:	2303      	movs	r3, #3
 8009654:	e01c      	b.n	8009690 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009656:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800965a:	3301      	adds	r3, #1
 800965c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009660:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009664:	2b01      	cmp	r3, #1
 8009666:	d805      	bhi.n	8009674 <USBH_ParseCfgDesc+0x1cc>
 8009668:	6a3b      	ldr	r3, [r7, #32]
 800966a:	885a      	ldrh	r2, [r3, #2]
 800966c:	8afb      	ldrh	r3, [r7, #22]
 800966e:	429a      	cmp	r2, r3
 8009670:	f63f af74 	bhi.w	800955c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	791b      	ldrb	r3, [r3, #4]
 8009678:	2b02      	cmp	r3, #2
 800967a:	bf28      	it	cs
 800967c:	2302      	movcs	r3, #2
 800967e:	b2db      	uxtb	r3, r3
 8009680:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009684:	429a      	cmp	r2, r3
 8009686:	d201      	bcs.n	800968c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009688:	2303      	movs	r3, #3
 800968a:	e001      	b.n	8009690 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800968c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009690:	4618      	mov	r0, r3
 8009692:	3730      	adds	r7, #48	@ 0x30
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	781a      	ldrb	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	785a      	ldrb	r2, [r3, #1]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	789a      	ldrb	r2, [r3, #2]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	78da      	ldrb	r2, [r3, #3]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	3304      	adds	r3, #4
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	bf28      	it	cs
 80096cc:	2302      	movcs	r3, #2
 80096ce:	b2da      	uxtb	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	795a      	ldrb	r2, [r3, #5]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	799a      	ldrb	r2, [r3, #6]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	79da      	ldrb	r2, [r3, #7]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	7a1a      	ldrb	r2, [r3, #8]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	721a      	strb	r2, [r3, #8]
}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009700:	b480      	push	{r7}
 8009702:	b087      	sub	sp, #28
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	781a      	ldrb	r2, [r3, #0]
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	785a      	ldrb	r2, [r3, #1]
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	789a      	ldrb	r2, [r3, #2]
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	78da      	ldrb	r2, [r3, #3]
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	3304      	adds	r3, #4
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	3305      	adds	r3, #5
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	021b      	lsls	r3, r3, #8
 8009740:	b29b      	uxth	r3, r3
 8009742:	4313      	orrs	r3, r2
 8009744:	b29a      	uxth	r2, r3
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	799a      	ldrb	r2, [r3, #6]
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	889b      	ldrh	r3, [r3, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d009      	beq.n	800976e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800975e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009762:	d804      	bhi.n	800976e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009768:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800976c:	d901      	bls.n	8009772 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800976e:	2303      	movs	r3, #3
 8009770:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009778:	2b00      	cmp	r3, #0
 800977a:	d136      	bne.n	80097ea <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	78db      	ldrb	r3, [r3, #3]
 8009780:	f003 0303 	and.w	r3, r3, #3
 8009784:	2b02      	cmp	r3, #2
 8009786:	d108      	bne.n	800979a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	889b      	ldrh	r3, [r3, #4]
 800978c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009790:	f240 8097 	bls.w	80098c2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009794:	2303      	movs	r3, #3
 8009796:	75fb      	strb	r3, [r7, #23]
 8009798:	e093      	b.n	80098c2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	78db      	ldrb	r3, [r3, #3]
 800979e:	f003 0303 	and.w	r3, r3, #3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d107      	bne.n	80097b6 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	889b      	ldrh	r3, [r3, #4]
 80097aa:	2b40      	cmp	r3, #64	@ 0x40
 80097ac:	f240 8089 	bls.w	80098c2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80097b0:	2303      	movs	r3, #3
 80097b2:	75fb      	strb	r3, [r7, #23]
 80097b4:	e085      	b.n	80098c2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	78db      	ldrb	r3, [r3, #3]
 80097ba:	f003 0303 	and.w	r3, r3, #3
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d005      	beq.n	80097ce <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	78db      	ldrb	r3, [r3, #3]
 80097c6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80097ca:	2b03      	cmp	r3, #3
 80097cc:	d10a      	bne.n	80097e4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	799b      	ldrb	r3, [r3, #6]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d003      	beq.n	80097de <USBH_ParseEPDesc+0xde>
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	799b      	ldrb	r3, [r3, #6]
 80097da:	2b10      	cmp	r3, #16
 80097dc:	d970      	bls.n	80098c0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80097de:	2303      	movs	r3, #3
 80097e0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80097e2:	e06d      	b.n	80098c0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80097e4:	2303      	movs	r3, #3
 80097e6:	75fb      	strb	r3, [r7, #23]
 80097e8:	e06b      	b.n	80098c2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d13c      	bne.n	800986e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	78db      	ldrb	r3, [r3, #3]
 80097f8:	f003 0303 	and.w	r3, r3, #3
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d005      	beq.n	800980c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	78db      	ldrb	r3, [r3, #3]
 8009804:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009808:	2b00      	cmp	r3, #0
 800980a:	d106      	bne.n	800981a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	889b      	ldrh	r3, [r3, #4]
 8009810:	2b40      	cmp	r3, #64	@ 0x40
 8009812:	d956      	bls.n	80098c2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009814:	2303      	movs	r3, #3
 8009816:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009818:	e053      	b.n	80098c2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	78db      	ldrb	r3, [r3, #3]
 800981e:	f003 0303 	and.w	r3, r3, #3
 8009822:	2b01      	cmp	r3, #1
 8009824:	d10e      	bne.n	8009844 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	799b      	ldrb	r3, [r3, #6]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d007      	beq.n	800983e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009832:	2b10      	cmp	r3, #16
 8009834:	d803      	bhi.n	800983e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800983a:	2b40      	cmp	r3, #64	@ 0x40
 800983c:	d941      	bls.n	80098c2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800983e:	2303      	movs	r3, #3
 8009840:	75fb      	strb	r3, [r7, #23]
 8009842:	e03e      	b.n	80098c2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	78db      	ldrb	r3, [r3, #3]
 8009848:	f003 0303 	and.w	r3, r3, #3
 800984c:	2b03      	cmp	r3, #3
 800984e:	d10b      	bne.n	8009868 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	799b      	ldrb	r3, [r3, #6]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d004      	beq.n	8009862 <USBH_ParseEPDesc+0x162>
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	889b      	ldrh	r3, [r3, #4]
 800985c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009860:	d32f      	bcc.n	80098c2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009862:	2303      	movs	r3, #3
 8009864:	75fb      	strb	r3, [r7, #23]
 8009866:	e02c      	b.n	80098c2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009868:	2303      	movs	r3, #3
 800986a:	75fb      	strb	r3, [r7, #23]
 800986c:	e029      	b.n	80098c2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009874:	2b02      	cmp	r3, #2
 8009876:	d120      	bne.n	80098ba <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	78db      	ldrb	r3, [r3, #3]
 800987c:	f003 0303 	and.w	r3, r3, #3
 8009880:	2b00      	cmp	r3, #0
 8009882:	d106      	bne.n	8009892 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	889b      	ldrh	r3, [r3, #4]
 8009888:	2b08      	cmp	r3, #8
 800988a:	d01a      	beq.n	80098c2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800988c:	2303      	movs	r3, #3
 800988e:	75fb      	strb	r3, [r7, #23]
 8009890:	e017      	b.n	80098c2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	78db      	ldrb	r3, [r3, #3]
 8009896:	f003 0303 	and.w	r3, r3, #3
 800989a:	2b03      	cmp	r3, #3
 800989c:	d10a      	bne.n	80098b4 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	799b      	ldrb	r3, [r3, #6]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <USBH_ParseEPDesc+0x1ae>
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	889b      	ldrh	r3, [r3, #4]
 80098aa:	2b08      	cmp	r3, #8
 80098ac:	d909      	bls.n	80098c2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80098ae:	2303      	movs	r3, #3
 80098b0:	75fb      	strb	r3, [r7, #23]
 80098b2:	e006      	b.n	80098c2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80098b4:	2303      	movs	r3, #3
 80098b6:	75fb      	strb	r3, [r7, #23]
 80098b8:	e003      	b.n	80098c2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80098ba:	2303      	movs	r3, #3
 80098bc:	75fb      	strb	r3, [r7, #23]
 80098be:	e000      	b.n	80098c2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80098c0:	bf00      	nop
  }

  return status;
 80098c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	371c      	adds	r7, #28
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b087      	sub	sp, #28
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	4613      	mov	r3, r2
 80098dc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	3301      	adds	r3, #1
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	2b03      	cmp	r3, #3
 80098e6:	d120      	bne.n	800992a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	1e9a      	subs	r2, r3, #2
 80098ee:	88fb      	ldrh	r3, [r7, #6]
 80098f0:	4293      	cmp	r3, r2
 80098f2:	bf28      	it	cs
 80098f4:	4613      	movcs	r3, r2
 80098f6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	3302      	adds	r3, #2
 80098fc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80098fe:	2300      	movs	r3, #0
 8009900:	82fb      	strh	r3, [r7, #22]
 8009902:	e00b      	b.n	800991c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009904:	8afb      	ldrh	r3, [r7, #22]
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	4413      	add	r3, r2
 800990a:	781a      	ldrb	r2, [r3, #0]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	3301      	adds	r3, #1
 8009914:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009916:	8afb      	ldrh	r3, [r7, #22]
 8009918:	3302      	adds	r3, #2
 800991a:	82fb      	strh	r3, [r7, #22]
 800991c:	8afa      	ldrh	r2, [r7, #22]
 800991e:	8abb      	ldrh	r3, [r7, #20]
 8009920:	429a      	cmp	r2, r3
 8009922:	d3ef      	bcc.n	8009904 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	2200      	movs	r2, #0
 8009928:	701a      	strb	r2, [r3, #0]
  }
}
 800992a:	bf00      	nop
 800992c:	371c      	adds	r7, #28
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr

08009936 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009936:	b480      	push	{r7}
 8009938:	b085      	sub	sp, #20
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	881b      	ldrh	r3, [r3, #0]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	7812      	ldrb	r2, [r2, #0]
 8009948:	4413      	add	r3, r2
 800994a:	b29a      	uxth	r2, r3
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4413      	add	r3, r2
 800995a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800995c:	68fb      	ldr	r3, [r7, #12]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3714      	adds	r7, #20
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr

0800996a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b086      	sub	sp, #24
 800996e:	af00      	add	r7, sp, #0
 8009970:	60f8      	str	r0, [r7, #12]
 8009972:	60b9      	str	r1, [r7, #8]
 8009974:	4613      	mov	r3, r2
 8009976:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009978:	2301      	movs	r3, #1
 800997a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	789b      	ldrb	r3, [r3, #2]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d002      	beq.n	800998a <USBH_CtlReq+0x20>
 8009984:	2b02      	cmp	r3, #2
 8009986:	d00f      	beq.n	80099a8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009988:	e027      	b.n	80099da <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	88fa      	ldrh	r2, [r7, #6]
 8009994:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2201      	movs	r2, #1
 800999a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2202      	movs	r2, #2
 80099a0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80099a2:	2301      	movs	r3, #1
 80099a4:	75fb      	strb	r3, [r7, #23]
      break;
 80099a6:	e018      	b.n	80099da <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	f000 f81b 	bl	80099e4 <USBH_HandleControl>
 80099ae:	4603      	mov	r3, r0
 80099b0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80099b2:	7dfb      	ldrb	r3, [r7, #23]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d002      	beq.n	80099be <USBH_CtlReq+0x54>
 80099b8:	7dfb      	ldrb	r3, [r7, #23]
 80099ba:	2b03      	cmp	r3, #3
 80099bc:	d106      	bne.n	80099cc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2201      	movs	r2, #1
 80099c2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	761a      	strb	r2, [r3, #24]
      break;
 80099ca:	e005      	b.n	80099d8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80099cc:	7dfb      	ldrb	r3, [r7, #23]
 80099ce:	2b02      	cmp	r3, #2
 80099d0:	d102      	bne.n	80099d8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2201      	movs	r2, #1
 80099d6:	709a      	strb	r2, [r3, #2]
      break;
 80099d8:	bf00      	nop
  }
  return status;
 80099da:	7dfb      	ldrb	r3, [r7, #23]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3718      	adds	r7, #24
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af02      	add	r7, sp, #8
 80099ea:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80099ec:	2301      	movs	r3, #1
 80099ee:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80099f0:	2300      	movs	r3, #0
 80099f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	7e1b      	ldrb	r3, [r3, #24]
 80099f8:	3b01      	subs	r3, #1
 80099fa:	2b0a      	cmp	r3, #10
 80099fc:	f200 8156 	bhi.w	8009cac <USBH_HandleControl+0x2c8>
 8009a00:	a201      	add	r2, pc, #4	@ (adr r2, 8009a08 <USBH_HandleControl+0x24>)
 8009a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a06:	bf00      	nop
 8009a08:	08009a35 	.word	0x08009a35
 8009a0c:	08009a4f 	.word	0x08009a4f
 8009a10:	08009ab9 	.word	0x08009ab9
 8009a14:	08009adf 	.word	0x08009adf
 8009a18:	08009b17 	.word	0x08009b17
 8009a1c:	08009b41 	.word	0x08009b41
 8009a20:	08009b93 	.word	0x08009b93
 8009a24:	08009bb5 	.word	0x08009bb5
 8009a28:	08009bf1 	.word	0x08009bf1
 8009a2c:	08009c17 	.word	0x08009c17
 8009a30:	08009c55 	.word	0x08009c55
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f103 0110 	add.w	r1, r3, #16
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	795b      	ldrb	r3, [r3, #5]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 f943 	bl	8009ccc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2202      	movs	r2, #2
 8009a4a:	761a      	strb	r2, [r3, #24]
      break;
 8009a4c:	e139      	b.n	8009cc2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	795b      	ldrb	r3, [r3, #5]
 8009a52:	4619      	mov	r1, r3
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fcc5 	bl	800a3e4 <USBH_LL_GetURBState>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009a5e:	7bbb      	ldrb	r3, [r7, #14]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d11e      	bne.n	8009aa2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	7c1b      	ldrb	r3, [r3, #16]
 8009a68:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009a6c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	8adb      	ldrh	r3, [r3, #22]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00a      	beq.n	8009a8c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009a76:	7b7b      	ldrb	r3, [r7, #13]
 8009a78:	2b80      	cmp	r3, #128	@ 0x80
 8009a7a:	d103      	bne.n	8009a84 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2203      	movs	r2, #3
 8009a80:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009a82:	e115      	b.n	8009cb0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2205      	movs	r2, #5
 8009a88:	761a      	strb	r2, [r3, #24]
      break;
 8009a8a:	e111      	b.n	8009cb0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009a8c:	7b7b      	ldrb	r3, [r7, #13]
 8009a8e:	2b80      	cmp	r3, #128	@ 0x80
 8009a90:	d103      	bne.n	8009a9a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2209      	movs	r2, #9
 8009a96:	761a      	strb	r2, [r3, #24]
      break;
 8009a98:	e10a      	b.n	8009cb0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2207      	movs	r2, #7
 8009a9e:	761a      	strb	r2, [r3, #24]
      break;
 8009aa0:	e106      	b.n	8009cb0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009aa2:	7bbb      	ldrb	r3, [r7, #14]
 8009aa4:	2b04      	cmp	r3, #4
 8009aa6:	d003      	beq.n	8009ab0 <USBH_HandleControl+0xcc>
 8009aa8:	7bbb      	ldrb	r3, [r7, #14]
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	f040 8100 	bne.w	8009cb0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	220b      	movs	r2, #11
 8009ab4:	761a      	strb	r2, [r3, #24]
      break;
 8009ab6:	e0fb      	b.n	8009cb0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6899      	ldr	r1, [r3, #8]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	899a      	ldrh	r2, [r3, #12]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	791b      	ldrb	r3, [r3, #4]
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f93a 	bl	8009d4a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2204      	movs	r2, #4
 8009ada:	761a      	strb	r2, [r3, #24]
      break;
 8009adc:	e0f1      	b.n	8009cc2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	791b      	ldrb	r3, [r3, #4]
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fc7d 	bl	800a3e4 <USBH_LL_GetURBState>
 8009aea:	4603      	mov	r3, r0
 8009aec:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009aee:	7bbb      	ldrb	r3, [r7, #14]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d102      	bne.n	8009afa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2209      	movs	r2, #9
 8009af8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009afa:	7bbb      	ldrb	r3, [r7, #14]
 8009afc:	2b05      	cmp	r3, #5
 8009afe:	d102      	bne.n	8009b06 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009b00:	2303      	movs	r3, #3
 8009b02:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009b04:	e0d6      	b.n	8009cb4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009b06:	7bbb      	ldrb	r3, [r7, #14]
 8009b08:	2b04      	cmp	r3, #4
 8009b0a:	f040 80d3 	bne.w	8009cb4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	220b      	movs	r2, #11
 8009b12:	761a      	strb	r2, [r3, #24]
      break;
 8009b14:	e0ce      	b.n	8009cb4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6899      	ldr	r1, [r3, #8]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	899a      	ldrh	r2, [r3, #12]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	795b      	ldrb	r3, [r3, #5]
 8009b22:	2001      	movs	r0, #1
 8009b24:	9000      	str	r0, [sp, #0]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f8ea 	bl	8009d00 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2206      	movs	r2, #6
 8009b3c:	761a      	strb	r2, [r3, #24]
      break;
 8009b3e:	e0c0      	b.n	8009cc2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	795b      	ldrb	r3, [r3, #5]
 8009b44:	4619      	mov	r1, r3
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fc4c 	bl	800a3e4 <USBH_LL_GetURBState>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009b50:	7bbb      	ldrb	r3, [r7, #14]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d103      	bne.n	8009b5e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2207      	movs	r2, #7
 8009b5a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009b5c:	e0ac      	b.n	8009cb8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009b5e:	7bbb      	ldrb	r3, [r7, #14]
 8009b60:	2b05      	cmp	r3, #5
 8009b62:	d105      	bne.n	8009b70 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	220c      	movs	r2, #12
 8009b68:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8009b6e:	e0a3      	b.n	8009cb8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009b70:	7bbb      	ldrb	r3, [r7, #14]
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d103      	bne.n	8009b7e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2205      	movs	r2, #5
 8009b7a:	761a      	strb	r2, [r3, #24]
      break;
 8009b7c:	e09c      	b.n	8009cb8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009b7e:	7bbb      	ldrb	r3, [r7, #14]
 8009b80:	2b04      	cmp	r3, #4
 8009b82:	f040 8099 	bne.w	8009cb8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	220b      	movs	r2, #11
 8009b8a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b90:	e092      	b.n	8009cb8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	791b      	ldrb	r3, [r3, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	2100      	movs	r1, #0
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 f8d5 	bl	8009d4a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2208      	movs	r2, #8
 8009bb0:	761a      	strb	r2, [r3, #24]

      break;
 8009bb2:	e086      	b.n	8009cc2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	791b      	ldrb	r3, [r3, #4]
 8009bb8:	4619      	mov	r1, r3
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 fc12 	bl	800a3e4 <USBH_LL_GetURBState>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009bc4:	7bbb      	ldrb	r3, [r7, #14]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d105      	bne.n	8009bd6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	220d      	movs	r2, #13
 8009bce:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009bd4:	e072      	b.n	8009cbc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009bd6:	7bbb      	ldrb	r3, [r7, #14]
 8009bd8:	2b04      	cmp	r3, #4
 8009bda:	d103      	bne.n	8009be4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	220b      	movs	r2, #11
 8009be0:	761a      	strb	r2, [r3, #24]
      break;
 8009be2:	e06b      	b.n	8009cbc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009be4:	7bbb      	ldrb	r3, [r7, #14]
 8009be6:	2b05      	cmp	r3, #5
 8009be8:	d168      	bne.n	8009cbc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009bea:	2303      	movs	r3, #3
 8009bec:	73fb      	strb	r3, [r7, #15]
      break;
 8009bee:	e065      	b.n	8009cbc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	795b      	ldrb	r3, [r3, #5]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	9200      	str	r2, [sp, #0]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 f87f 	bl	8009d00 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	220a      	movs	r2, #10
 8009c12:	761a      	strb	r2, [r3, #24]
      break;
 8009c14:	e055      	b.n	8009cc2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	795b      	ldrb	r3, [r3, #5]
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 fbe1 	bl	800a3e4 <USBH_LL_GetURBState>
 8009c22:	4603      	mov	r3, r0
 8009c24:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009c26:	7bbb      	ldrb	r3, [r7, #14]
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d105      	bne.n	8009c38 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	220d      	movs	r2, #13
 8009c34:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009c36:	e043      	b.n	8009cc0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009c38:	7bbb      	ldrb	r3, [r7, #14]
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d103      	bne.n	8009c46 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2209      	movs	r2, #9
 8009c42:	761a      	strb	r2, [r3, #24]
      break;
 8009c44:	e03c      	b.n	8009cc0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009c46:	7bbb      	ldrb	r3, [r7, #14]
 8009c48:	2b04      	cmp	r3, #4
 8009c4a:	d139      	bne.n	8009cc0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	220b      	movs	r2, #11
 8009c50:	761a      	strb	r2, [r3, #24]
      break;
 8009c52:	e035      	b.n	8009cc0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	7e5b      	ldrb	r3, [r3, #25]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	765a      	strb	r2, [r3, #25]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	7e5b      	ldrb	r3, [r3, #25]
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d806      	bhi.n	8009c76 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2201      	movs	r2, #1
 8009c72:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009c74:	e025      	b.n	8009cc2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c7c:	2106      	movs	r1, #6
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	795b      	ldrb	r3, [r3, #5]
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 f90c 	bl	8009eac <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	791b      	ldrb	r3, [r3, #4]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 f906 	bl	8009eac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009ca6:	2302      	movs	r3, #2
 8009ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8009caa:	e00a      	b.n	8009cc2 <USBH_HandleControl+0x2de>

    default:
      break;
 8009cac:	bf00      	nop
 8009cae:	e008      	b.n	8009cc2 <USBH_HandleControl+0x2de>
      break;
 8009cb0:	bf00      	nop
 8009cb2:	e006      	b.n	8009cc2 <USBH_HandleControl+0x2de>
      break;
 8009cb4:	bf00      	nop
 8009cb6:	e004      	b.n	8009cc2 <USBH_HandleControl+0x2de>
      break;
 8009cb8:	bf00      	nop
 8009cba:	e002      	b.n	8009cc2 <USBH_HandleControl+0x2de>
      break;
 8009cbc:	bf00      	nop
 8009cbe:	e000      	b.n	8009cc2 <USBH_HandleControl+0x2de>
      break;
 8009cc0:	bf00      	nop
  }

  return status;
 8009cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b088      	sub	sp, #32
 8009cd0:	af04      	add	r7, sp, #16
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009cda:	79f9      	ldrb	r1, [r7, #7]
 8009cdc:	2300      	movs	r3, #0
 8009cde:	9303      	str	r3, [sp, #12]
 8009ce0:	2308      	movs	r3, #8
 8009ce2:	9302      	str	r3, [sp, #8]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	9301      	str	r3, [sp, #4]
 8009ce8:	2300      	movs	r3, #0
 8009cea:	9300      	str	r3, [sp, #0]
 8009cec:	2300      	movs	r3, #0
 8009cee:	2200      	movs	r2, #0
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f000 fb46 	bl	800a382 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b088      	sub	sp, #32
 8009d04:	af04      	add	r7, sp, #16
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	4611      	mov	r1, r2
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	460b      	mov	r3, r1
 8009d10:	80fb      	strh	r3, [r7, #6]
 8009d12:	4613      	mov	r3, r2
 8009d14:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d001      	beq.n	8009d24 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009d20:	2300      	movs	r3, #0
 8009d22:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d24:	7979      	ldrb	r1, [r7, #5]
 8009d26:	7e3b      	ldrb	r3, [r7, #24]
 8009d28:	9303      	str	r3, [sp, #12]
 8009d2a:	88fb      	ldrh	r3, [r7, #6]
 8009d2c:	9302      	str	r3, [sp, #8]
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	9301      	str	r3, [sp, #4]
 8009d32:	2301      	movs	r3, #1
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	2300      	movs	r3, #0
 8009d38:	2200      	movs	r2, #0
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f000 fb21 	bl	800a382 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b088      	sub	sp, #32
 8009d4e:	af04      	add	r7, sp, #16
 8009d50:	60f8      	str	r0, [r7, #12]
 8009d52:	60b9      	str	r1, [r7, #8]
 8009d54:	4611      	mov	r1, r2
 8009d56:	461a      	mov	r2, r3
 8009d58:	460b      	mov	r3, r1
 8009d5a:	80fb      	strh	r3, [r7, #6]
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d60:	7979      	ldrb	r1, [r7, #5]
 8009d62:	2300      	movs	r3, #0
 8009d64:	9303      	str	r3, [sp, #12]
 8009d66:	88fb      	ldrh	r3, [r7, #6]
 8009d68:	9302      	str	r3, [sp, #8]
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	9301      	str	r3, [sp, #4]
 8009d6e:	2301      	movs	r3, #1
 8009d70:	9300      	str	r3, [sp, #0]
 8009d72:	2300      	movs	r3, #0
 8009d74:	2201      	movs	r2, #1
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f000 fb03 	bl	800a382 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009d7c:	2300      	movs	r3, #0

}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b088      	sub	sp, #32
 8009d8a:	af04      	add	r7, sp, #16
 8009d8c:	60f8      	str	r0, [r7, #12]
 8009d8e:	60b9      	str	r1, [r7, #8]
 8009d90:	4611      	mov	r1, r2
 8009d92:	461a      	mov	r2, r3
 8009d94:	460b      	mov	r3, r1
 8009d96:	80fb      	strh	r3, [r7, #6]
 8009d98:	4613      	mov	r3, r2
 8009d9a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009da6:	2300      	movs	r3, #0
 8009da8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009daa:	7979      	ldrb	r1, [r7, #5]
 8009dac:	7e3b      	ldrb	r3, [r7, #24]
 8009dae:	9303      	str	r3, [sp, #12]
 8009db0:	88fb      	ldrh	r3, [r7, #6]
 8009db2:	9302      	str	r3, [sp, #8]
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	9301      	str	r3, [sp, #4]
 8009db8:	2301      	movs	r3, #1
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	2302      	movs	r3, #2
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f000 fade 	bl	800a382 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b088      	sub	sp, #32
 8009dd4:	af04      	add	r7, sp, #16
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	4611      	mov	r1, r2
 8009ddc:	461a      	mov	r2, r3
 8009dde:	460b      	mov	r3, r1
 8009de0:	80fb      	strh	r3, [r7, #6]
 8009de2:	4613      	mov	r3, r2
 8009de4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009de6:	7979      	ldrb	r1, [r7, #5]
 8009de8:	2300      	movs	r3, #0
 8009dea:	9303      	str	r3, [sp, #12]
 8009dec:	88fb      	ldrh	r3, [r7, #6]
 8009dee:	9302      	str	r3, [sp, #8]
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	9301      	str	r3, [sp, #4]
 8009df4:	2301      	movs	r3, #1
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	2302      	movs	r3, #2
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f000 fac0 	bl	800a382 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af04      	add	r7, sp, #16
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	4608      	mov	r0, r1
 8009e16:	4611      	mov	r1, r2
 8009e18:	461a      	mov	r2, r3
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	70fb      	strb	r3, [r7, #3]
 8009e1e:	460b      	mov	r3, r1
 8009e20:	70bb      	strb	r3, [r7, #2]
 8009e22:	4613      	mov	r3, r2
 8009e24:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009e26:	7878      	ldrb	r0, [r7, #1]
 8009e28:	78ba      	ldrb	r2, [r7, #2]
 8009e2a:	78f9      	ldrb	r1, [r7, #3]
 8009e2c:	8b3b      	ldrh	r3, [r7, #24]
 8009e2e:	9302      	str	r3, [sp, #8]
 8009e30:	7d3b      	ldrb	r3, [r7, #20]
 8009e32:	9301      	str	r3, [sp, #4]
 8009e34:	7c3b      	ldrb	r3, [r7, #16]
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	4603      	mov	r3, r0
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fa53 	bl	800a2e6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b082      	sub	sp, #8
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
 8009e52:	460b      	mov	r3, r1
 8009e54:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009e56:	78fb      	ldrb	r3, [r7, #3]
 8009e58:	4619      	mov	r1, r3
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 fa72 	bl	800a344 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3708      	adds	r7, #8
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b084      	sub	sp, #16
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
 8009e72:	460b      	mov	r3, r1
 8009e74:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f836 	bl	8009ee8 <USBH_GetFreePipe>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009e80:	89fb      	ldrh	r3, [r7, #14]
 8009e82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d00a      	beq.n	8009ea0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009e8a:	78fa      	ldrb	r2, [r7, #3]
 8009e8c:	89fb      	ldrh	r3, [r7, #14]
 8009e8e:	f003 030f 	and.w	r3, r3, #15
 8009e92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009e96:	6879      	ldr	r1, [r7, #4]
 8009e98:	33e0      	adds	r3, #224	@ 0xe0
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	440b      	add	r3, r1
 8009e9e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009ea0:	89fb      	ldrh	r3, [r7, #14]
 8009ea2:	b2db      	uxtb	r3, r3
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009eb8:	78fb      	ldrb	r3, [r7, #3]
 8009eba:	2b0f      	cmp	r3, #15
 8009ebc:	d80d      	bhi.n	8009eda <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009ebe:	78fb      	ldrb	r3, [r7, #3]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	33e0      	adds	r3, #224	@ 0xe0
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4413      	add	r3, r2
 8009ec8:	685a      	ldr	r2, [r3, #4]
 8009eca:	78fb      	ldrb	r3, [r7, #3]
 8009ecc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009ed0:	6879      	ldr	r1, [r7, #4]
 8009ed2:	33e0      	adds	r3, #224	@ 0xe0
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	440b      	add	r3, r1
 8009ed8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	73fb      	strb	r3, [r7, #15]
 8009ef8:	e00f      	b.n	8009f1a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009efa:	7bfb      	ldrb	r3, [r7, #15]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	33e0      	adds	r3, #224	@ 0xe0
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	4413      	add	r3, r2
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d102      	bne.n	8009f14 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	e007      	b.n	8009f24 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009f14:	7bfb      	ldrb	r3, [r7, #15]
 8009f16:	3301      	adds	r3, #1
 8009f18:	73fb      	strb	r3, [r7, #15]
 8009f1a:	7bfb      	ldrb	r3, [r7, #15]
 8009f1c:	2b0f      	cmp	r3, #15
 8009f1e:	d9ec      	bls.n	8009efa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009f20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3714      	adds	r7, #20
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009f34:	2201      	movs	r2, #1
 8009f36:	490e      	ldr	r1, [pc, #56]	@ (8009f70 <MX_USB_HOST_Init+0x40>)
 8009f38:	480e      	ldr	r0, [pc, #56]	@ (8009f74 <MX_USB_HOST_Init+0x44>)
 8009f3a:	f7fe fb15 	bl	8008568 <USBH_Init>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d001      	beq.n	8009f48 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009f44:	f7f7 fa50 	bl	80013e8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009f48:	490b      	ldr	r1, [pc, #44]	@ (8009f78 <MX_USB_HOST_Init+0x48>)
 8009f4a:	480a      	ldr	r0, [pc, #40]	@ (8009f74 <MX_USB_HOST_Init+0x44>)
 8009f4c:	f7fe fbb9 	bl	80086c2 <USBH_RegisterClass>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d001      	beq.n	8009f5a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009f56:	f7f7 fa47 	bl	80013e8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009f5a:	4806      	ldr	r0, [pc, #24]	@ (8009f74 <MX_USB_HOST_Init+0x44>)
 8009f5c:	f7fe fc3d 	bl	80087da <USBH_Start>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009f66:	f7f7 fa3f 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009f6a:	bf00      	nop
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	08009f91 	.word	0x08009f91
 8009f74:	2000039c 	.word	0x2000039c
 8009f78:	2000000c 	.word	0x2000000c

08009f7c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009f80:	4802      	ldr	r0, [pc, #8]	@ (8009f8c <MX_USB_HOST_Process+0x10>)
 8009f82:	f7fe fc3b 	bl	80087fc <USBH_Process>
}
 8009f86:	bf00      	nop
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	2000039c 	.word	0x2000039c

08009f90 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009f9c:	78fb      	ldrb	r3, [r7, #3]
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	2b04      	cmp	r3, #4
 8009fa2:	d819      	bhi.n	8009fd8 <USBH_UserProcess+0x48>
 8009fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8009fac <USBH_UserProcess+0x1c>)
 8009fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009faa:	bf00      	nop
 8009fac:	08009fd9 	.word	0x08009fd9
 8009fb0:	08009fc9 	.word	0x08009fc9
 8009fb4:	08009fd9 	.word	0x08009fd9
 8009fb8:	08009fd1 	.word	0x08009fd1
 8009fbc:	08009fc1 	.word	0x08009fc1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009fc0:	4b09      	ldr	r3, [pc, #36]	@ (8009fe8 <USBH_UserProcess+0x58>)
 8009fc2:	2203      	movs	r2, #3
 8009fc4:	701a      	strb	r2, [r3, #0]
  break;
 8009fc6:	e008      	b.n	8009fda <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009fc8:	4b07      	ldr	r3, [pc, #28]	@ (8009fe8 <USBH_UserProcess+0x58>)
 8009fca:	2202      	movs	r2, #2
 8009fcc:	701a      	strb	r2, [r3, #0]
  break;
 8009fce:	e004      	b.n	8009fda <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009fd0:	4b05      	ldr	r3, [pc, #20]	@ (8009fe8 <USBH_UserProcess+0x58>)
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	701a      	strb	r2, [r3, #0]
  break;
 8009fd6:	e000      	b.n	8009fda <USBH_UserProcess+0x4a>

  default:
  break;
 8009fd8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009fda:	bf00      	nop
 8009fdc:	370c      	adds	r7, #12
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	20000774 	.word	0x20000774

08009fec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b08a      	sub	sp, #40	@ 0x28
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ff4:	f107 0314 	add.w	r3, r7, #20
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	601a      	str	r2, [r3, #0]
 8009ffc:	605a      	str	r2, [r3, #4]
 8009ffe:	609a      	str	r2, [r3, #8]
 800a000:	60da      	str	r2, [r3, #12]
 800a002:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a00c:	d147      	bne.n	800a09e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a00e:	2300      	movs	r3, #0
 800a010:	613b      	str	r3, [r7, #16]
 800a012:	4b25      	ldr	r3, [pc, #148]	@ (800a0a8 <HAL_HCD_MspInit+0xbc>)
 800a014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a016:	4a24      	ldr	r2, [pc, #144]	@ (800a0a8 <HAL_HCD_MspInit+0xbc>)
 800a018:	f043 0301 	orr.w	r3, r3, #1
 800a01c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a01e:	4b22      	ldr	r3, [pc, #136]	@ (800a0a8 <HAL_HCD_MspInit+0xbc>)
 800a020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a022:	f003 0301 	and.w	r3, r3, #1
 800a026:	613b      	str	r3, [r7, #16]
 800a028:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a02a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a02e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a030:	2300      	movs	r3, #0
 800a032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a034:	2300      	movs	r3, #0
 800a036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a038:	f107 0314 	add.w	r3, r7, #20
 800a03c:	4619      	mov	r1, r3
 800a03e:	481b      	ldr	r0, [pc, #108]	@ (800a0ac <HAL_HCD_MspInit+0xc0>)
 800a040:	f7f7 ff38 	bl	8001eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a044:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a04a:	2302      	movs	r3, #2
 800a04c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a04e:	2300      	movs	r3, #0
 800a050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a052:	2300      	movs	r3, #0
 800a054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a056:	230a      	movs	r3, #10
 800a058:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a05a:	f107 0314 	add.w	r3, r7, #20
 800a05e:	4619      	mov	r1, r3
 800a060:	4812      	ldr	r0, [pc, #72]	@ (800a0ac <HAL_HCD_MspInit+0xc0>)
 800a062:	f7f7 ff27 	bl	8001eb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a066:	4b10      	ldr	r3, [pc, #64]	@ (800a0a8 <HAL_HCD_MspInit+0xbc>)
 800a068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a06a:	4a0f      	ldr	r2, [pc, #60]	@ (800a0a8 <HAL_HCD_MspInit+0xbc>)
 800a06c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a070:	6353      	str	r3, [r2, #52]	@ 0x34
 800a072:	2300      	movs	r3, #0
 800a074:	60fb      	str	r3, [r7, #12]
 800a076:	4b0c      	ldr	r3, [pc, #48]	@ (800a0a8 <HAL_HCD_MspInit+0xbc>)
 800a078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a07a:	4a0b      	ldr	r2, [pc, #44]	@ (800a0a8 <HAL_HCD_MspInit+0xbc>)
 800a07c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a080:	6453      	str	r3, [r2, #68]	@ 0x44
 800a082:	4b09      	ldr	r3, [pc, #36]	@ (800a0a8 <HAL_HCD_MspInit+0xbc>)
 800a084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a08a:	60fb      	str	r3, [r7, #12]
 800a08c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a08e:	2200      	movs	r2, #0
 800a090:	2100      	movs	r1, #0
 800a092:	2043      	movs	r0, #67	@ 0x43
 800a094:	f7f7 fe45 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a098:	2043      	movs	r0, #67	@ 0x43
 800a09a:	f7f7 fe5e 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a09e:	bf00      	nop
 800a0a0:	3728      	adds	r7, #40	@ 0x28
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	40023800 	.word	0x40023800
 800a0ac:	40020000 	.word	0x40020000

0800a0b0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe ff73 	bl	8008faa <USBH_LL_IncTimer>
}
 800a0c4:	bf00      	nop
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fe ffab 	bl	8009036 <USBH_LL_Connect>
}
 800a0e0:	bf00      	nop
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7fe ffb4 	bl	8009064 <USBH_LL_Disconnect>
}
 800a0fc:	bf00      	nop
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	460b      	mov	r3, r1
 800a10e:	70fb      	strb	r3, [r7, #3]
 800a110:	4613      	mov	r3, r2
 800a112:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a114:	bf00      	nop
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a12e:	4618      	mov	r0, r3
 800a130:	f7fe ff65 	bl	8008ffe <USBH_LL_PortEnabled>
}
 800a134:	bf00      	nop
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fe ff65 	bl	800901a <USBH_LL_PortDisabled>
}
 800a150:	bf00      	nop
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a166:	2b01      	cmp	r3, #1
 800a168:	d12a      	bne.n	800a1c0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a16a:	4a18      	ldr	r2, [pc, #96]	@ (800a1cc <USBH_LL_Init+0x74>)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4a15      	ldr	r2, [pc, #84]	@ (800a1cc <USBH_LL_Init+0x74>)
 800a176:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a17a:	4b14      	ldr	r3, [pc, #80]	@ (800a1cc <USBH_LL_Init+0x74>)
 800a17c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a180:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a182:	4b12      	ldr	r3, [pc, #72]	@ (800a1cc <USBH_LL_Init+0x74>)
 800a184:	2208      	movs	r2, #8
 800a186:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a188:	4b10      	ldr	r3, [pc, #64]	@ (800a1cc <USBH_LL_Init+0x74>)
 800a18a:	2201      	movs	r2, #1
 800a18c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a18e:	4b0f      	ldr	r3, [pc, #60]	@ (800a1cc <USBH_LL_Init+0x74>)
 800a190:	2200      	movs	r2, #0
 800a192:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a194:	4b0d      	ldr	r3, [pc, #52]	@ (800a1cc <USBH_LL_Init+0x74>)
 800a196:	2202      	movs	r2, #2
 800a198:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a19a:	4b0c      	ldr	r3, [pc, #48]	@ (800a1cc <USBH_LL_Init+0x74>)
 800a19c:	2200      	movs	r2, #0
 800a19e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a1a0:	480a      	ldr	r0, [pc, #40]	@ (800a1cc <USBH_LL_Init+0x74>)
 800a1a2:	f7f8 f83c 	bl	800221e <HAL_HCD_Init>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d001      	beq.n	800a1b0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a1ac:	f7f7 f91c 	bl	80013e8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a1b0:	4806      	ldr	r0, [pc, #24]	@ (800a1cc <USBH_LL_Init+0x74>)
 800a1b2:	f7f8 fc9d 	bl	8002af0 <HAL_HCD_GetCurrentFrame>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7fe fee6 	bl	8008f8c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3708      	adds	r7, #8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	20000778 	.word	0x20000778

0800a1d0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7f8 fc0a 	bl	8002a00 <HAL_HCD_Start>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a1f0:	7bfb      	ldrb	r3, [r7, #15]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 f95e 	bl	800a4b4 <USBH_Get_USB_Status>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b084      	sub	sp, #16
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a20e:	2300      	movs	r3, #0
 800a210:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a212:	2300      	movs	r3, #0
 800a214:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7f8 fc12 	bl	8002a46 <HAL_HCD_Stop>
 800a222:	4603      	mov	r3, r0
 800a224:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a226:	7bfb      	ldrb	r3, [r7, #15]
 800a228:	4618      	mov	r0, r3
 800a22a:	f000 f943 	bl	800a4b4 <USBH_Get_USB_Status>
 800a22e:	4603      	mov	r3, r0
 800a230:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a232:	7bbb      	ldrb	r3, [r7, #14]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a244:	2301      	movs	r3, #1
 800a246:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a24e:	4618      	mov	r0, r3
 800a250:	f7f8 fc5c 	bl	8002b0c <HAL_HCD_GetCurrentSpeed>
 800a254:	4603      	mov	r3, r0
 800a256:	2b02      	cmp	r3, #2
 800a258:	d00c      	beq.n	800a274 <USBH_LL_GetSpeed+0x38>
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	d80d      	bhi.n	800a27a <USBH_LL_GetSpeed+0x3e>
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d002      	beq.n	800a268 <USBH_LL_GetSpeed+0x2c>
 800a262:	2b01      	cmp	r3, #1
 800a264:	d003      	beq.n	800a26e <USBH_LL_GetSpeed+0x32>
 800a266:	e008      	b.n	800a27a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a268:	2300      	movs	r3, #0
 800a26a:	73fb      	strb	r3, [r7, #15]
    break;
 800a26c:	e008      	b.n	800a280 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a26e:	2301      	movs	r3, #1
 800a270:	73fb      	strb	r3, [r7, #15]
    break;
 800a272:	e005      	b.n	800a280 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a274:	2302      	movs	r3, #2
 800a276:	73fb      	strb	r3, [r7, #15]
    break;
 800a278:	e002      	b.n	800a280 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a27a:	2301      	movs	r3, #1
 800a27c:	73fb      	strb	r3, [r7, #15]
    break;
 800a27e:	bf00      	nop
  }
  return  speed;
 800a280:	7bfb      	ldrb	r3, [r7, #15]
}
 800a282:	4618      	mov	r0, r3
 800a284:	3710      	adds	r7, #16
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b084      	sub	sp, #16
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a292:	2300      	movs	r3, #0
 800a294:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a296:	2300      	movs	r3, #0
 800a298:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7f8 fbed 	bl	8002a80 <HAL_HCD_ResetPort>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a2aa:	7bfb      	ldrb	r3, [r7, #15]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f000 f901 	bl	800a4b4 <USBH_Get_USB_Status>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3710      	adds	r7, #16
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a2d2:	78fa      	ldrb	r2, [r7, #3]
 800a2d4:	4611      	mov	r1, r2
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7f8 fbf5 	bl	8002ac6 <HAL_HCD_HC_GetXferCount>
 800a2dc:	4603      	mov	r3, r0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a2e6:	b590      	push	{r4, r7, lr}
 800a2e8:	b089      	sub	sp, #36	@ 0x24
 800a2ea:	af04      	add	r7, sp, #16
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	4608      	mov	r0, r1
 800a2f0:	4611      	mov	r1, r2
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	70fb      	strb	r3, [r7, #3]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	70bb      	strb	r3, [r7, #2]
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a300:	2300      	movs	r3, #0
 800a302:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a30e:	787c      	ldrb	r4, [r7, #1]
 800a310:	78ba      	ldrb	r2, [r7, #2]
 800a312:	78f9      	ldrb	r1, [r7, #3]
 800a314:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a316:	9302      	str	r3, [sp, #8]
 800a318:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a31c:	9301      	str	r3, [sp, #4]
 800a31e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	4623      	mov	r3, r4
 800a326:	f7f7 ffe1 	bl	80022ec <HAL_HCD_HC_Init>
 800a32a:	4603      	mov	r3, r0
 800a32c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a32e:	7bfb      	ldrb	r3, [r7, #15]
 800a330:	4618      	mov	r0, r3
 800a332:	f000 f8bf 	bl	800a4b4 <USBH_Get_USB_Status>
 800a336:	4603      	mov	r3, r0
 800a338:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a33a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	bd90      	pop	{r4, r7, pc}

0800a344 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a350:	2300      	movs	r3, #0
 800a352:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a354:	2300      	movs	r3, #0
 800a356:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a35e:	78fa      	ldrb	r2, [r7, #3]
 800a360:	4611      	mov	r1, r2
 800a362:	4618      	mov	r0, r3
 800a364:	f7f8 f87a 	bl	800245c <HAL_HCD_HC_Halt>
 800a368:	4603      	mov	r3, r0
 800a36a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a36c:	7bfb      	ldrb	r3, [r7, #15]
 800a36e:	4618      	mov	r0, r3
 800a370:	f000 f8a0 	bl	800a4b4 <USBH_Get_USB_Status>
 800a374:	4603      	mov	r3, r0
 800a376:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a378:	7bbb      	ldrb	r3, [r7, #14]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a382:	b590      	push	{r4, r7, lr}
 800a384:	b089      	sub	sp, #36	@ 0x24
 800a386:	af04      	add	r7, sp, #16
 800a388:	6078      	str	r0, [r7, #4]
 800a38a:	4608      	mov	r0, r1
 800a38c:	4611      	mov	r1, r2
 800a38e:	461a      	mov	r2, r3
 800a390:	4603      	mov	r3, r0
 800a392:	70fb      	strb	r3, [r7, #3]
 800a394:	460b      	mov	r3, r1
 800a396:	70bb      	strb	r3, [r7, #2]
 800a398:	4613      	mov	r3, r2
 800a39a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a3aa:	787c      	ldrb	r4, [r7, #1]
 800a3ac:	78ba      	ldrb	r2, [r7, #2]
 800a3ae:	78f9      	ldrb	r1, [r7, #3]
 800a3b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a3b4:	9303      	str	r3, [sp, #12]
 800a3b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a3b8:	9302      	str	r3, [sp, #8]
 800a3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3bc:	9301      	str	r3, [sp, #4]
 800a3be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	4623      	mov	r3, r4
 800a3c6:	f7f8 f86d 	bl	80024a4 <HAL_HCD_HC_SubmitRequest>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a3ce:	7bfb      	ldrb	r3, [r7, #15]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f000 f86f 	bl	800a4b4 <USBH_Get_USB_Status>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3da:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd90      	pop	{r4, r7, pc}

0800a3e4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a3f6:	78fa      	ldrb	r2, [r7, #3]
 800a3f8:	4611      	mov	r1, r2
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7f8 fb4e 	bl	8002a9c <HAL_HCD_HC_GetURBState>
 800a400:	4603      	mov	r3, r0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3708      	adds	r7, #8
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b082      	sub	sp, #8
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
 800a412:	460b      	mov	r3, r1
 800a414:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d103      	bne.n	800a428 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a420:	78fb      	ldrb	r3, [r7, #3]
 800a422:	4618      	mov	r0, r3
 800a424:	f000 f872 	bl	800a50c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a428:	20c8      	movs	r0, #200	@ 0xc8
 800a42a:	f7f7 fb7b 	bl	8001b24 <HAL_Delay>
  return USBH_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	460b      	mov	r3, r1
 800a442:	70fb      	strb	r3, [r7, #3]
 800a444:	4613      	mov	r3, r2
 800a446:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a44e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a450:	78fa      	ldrb	r2, [r7, #3]
 800a452:	68f9      	ldr	r1, [r7, #12]
 800a454:	4613      	mov	r3, r2
 800a456:	011b      	lsls	r3, r3, #4
 800a458:	1a9b      	subs	r3, r3, r2
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	440b      	add	r3, r1
 800a45e:	3317      	adds	r3, #23
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00a      	beq.n	800a47c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a466:	78fa      	ldrb	r2, [r7, #3]
 800a468:	68f9      	ldr	r1, [r7, #12]
 800a46a:	4613      	mov	r3, r2
 800a46c:	011b      	lsls	r3, r3, #4
 800a46e:	1a9b      	subs	r3, r3, r2
 800a470:	009b      	lsls	r3, r3, #2
 800a472:	440b      	add	r3, r1
 800a474:	333c      	adds	r3, #60	@ 0x3c
 800a476:	78ba      	ldrb	r2, [r7, #2]
 800a478:	701a      	strb	r2, [r3, #0]
 800a47a:	e009      	b.n	800a490 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a47c:	78fa      	ldrb	r2, [r7, #3]
 800a47e:	68f9      	ldr	r1, [r7, #12]
 800a480:	4613      	mov	r3, r2
 800a482:	011b      	lsls	r3, r3, #4
 800a484:	1a9b      	subs	r3, r3, r2
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	440b      	add	r3, r1
 800a48a:	333d      	adds	r3, #61	@ 0x3d
 800a48c:	78ba      	ldrb	r2, [r7, #2]
 800a48e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3714      	adds	r7, #20
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr

0800a49e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b082      	sub	sp, #8
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7f7 fb3c 	bl	8001b24 <HAL_Delay>
}
 800a4ac:	bf00      	nop
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a4c2:	79fb      	ldrb	r3, [r7, #7]
 800a4c4:	2b03      	cmp	r3, #3
 800a4c6:	d817      	bhi.n	800a4f8 <USBH_Get_USB_Status+0x44>
 800a4c8:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d0 <USBH_Get_USB_Status+0x1c>)
 800a4ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ce:	bf00      	nop
 800a4d0:	0800a4e1 	.word	0x0800a4e1
 800a4d4:	0800a4e7 	.word	0x0800a4e7
 800a4d8:	0800a4ed 	.word	0x0800a4ed
 800a4dc:	0800a4f3 	.word	0x0800a4f3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4e4:	e00b      	b.n	800a4fe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a4e6:	2302      	movs	r3, #2
 800a4e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ea:	e008      	b.n	800a4fe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a4f0:	e005      	b.n	800a4fe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a4f2:	2302      	movs	r3, #2
 800a4f4:	73fb      	strb	r3, [r7, #15]
    break;
 800a4f6:	e002      	b.n	800a4fe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a4f8:	2302      	movs	r3, #2
 800a4fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a4fc:	bf00      	nop
  }
  return usb_status;
 800a4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3714      	adds	r7, #20
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	4603      	mov	r3, r0
 800a514:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a516:	79fb      	ldrb	r3, [r7, #7]
 800a518:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a51a:	79fb      	ldrb	r3, [r7, #7]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d102      	bne.n	800a526 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a520:	2300      	movs	r3, #0
 800a522:	73fb      	strb	r3, [r7, #15]
 800a524:	e001      	b.n	800a52a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a526:	2301      	movs	r3, #1
 800a528:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a52a:	7bfb      	ldrb	r3, [r7, #15]
 800a52c:	461a      	mov	r2, r3
 800a52e:	2101      	movs	r1, #1
 800a530:	4803      	ldr	r0, [pc, #12]	@ (800a540 <MX_DriverVbusFS+0x34>)
 800a532:	f7f7 fe5b 	bl	80021ec <HAL_GPIO_WritePin>
}
 800a536:	bf00      	nop
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	40020800 	.word	0x40020800

0800a544 <abort>:
 800a544:	b508      	push	{r3, lr}
 800a546:	2006      	movs	r0, #6
 800a548:	f000 fe4e 	bl	800b1e8 <raise>
 800a54c:	2001      	movs	r0, #1
 800a54e:	f7f7 f98d 	bl	800186c <_exit>
	...

0800a554 <malloc>:
 800a554:	4b02      	ldr	r3, [pc, #8]	@ (800a560 <malloc+0xc>)
 800a556:	4601      	mov	r1, r0
 800a558:	6818      	ldr	r0, [r3, #0]
 800a55a:	f000 b82d 	b.w	800a5b8 <_malloc_r>
 800a55e:	bf00      	nop
 800a560:	20000038 	.word	0x20000038

0800a564 <free>:
 800a564:	4b02      	ldr	r3, [pc, #8]	@ (800a570 <free+0xc>)
 800a566:	4601      	mov	r1, r0
 800a568:	6818      	ldr	r0, [r3, #0]
 800a56a:	f001 bd49 	b.w	800c000 <_free_r>
 800a56e:	bf00      	nop
 800a570:	20000038 	.word	0x20000038

0800a574 <sbrk_aligned>:
 800a574:	b570      	push	{r4, r5, r6, lr}
 800a576:	4e0f      	ldr	r6, [pc, #60]	@ (800a5b4 <sbrk_aligned+0x40>)
 800a578:	460c      	mov	r4, r1
 800a57a:	6831      	ldr	r1, [r6, #0]
 800a57c:	4605      	mov	r5, r0
 800a57e:	b911      	cbnz	r1, 800a586 <sbrk_aligned+0x12>
 800a580:	f000 fe86 	bl	800b290 <_sbrk_r>
 800a584:	6030      	str	r0, [r6, #0]
 800a586:	4621      	mov	r1, r4
 800a588:	4628      	mov	r0, r5
 800a58a:	f000 fe81 	bl	800b290 <_sbrk_r>
 800a58e:	1c43      	adds	r3, r0, #1
 800a590:	d103      	bne.n	800a59a <sbrk_aligned+0x26>
 800a592:	f04f 34ff 	mov.w	r4, #4294967295
 800a596:	4620      	mov	r0, r4
 800a598:	bd70      	pop	{r4, r5, r6, pc}
 800a59a:	1cc4      	adds	r4, r0, #3
 800a59c:	f024 0403 	bic.w	r4, r4, #3
 800a5a0:	42a0      	cmp	r0, r4
 800a5a2:	d0f8      	beq.n	800a596 <sbrk_aligned+0x22>
 800a5a4:	1a21      	subs	r1, r4, r0
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	f000 fe72 	bl	800b290 <_sbrk_r>
 800a5ac:	3001      	adds	r0, #1
 800a5ae:	d1f2      	bne.n	800a596 <sbrk_aligned+0x22>
 800a5b0:	e7ef      	b.n	800a592 <sbrk_aligned+0x1e>
 800a5b2:	bf00      	nop
 800a5b4:	20000b58 	.word	0x20000b58

0800a5b8 <_malloc_r>:
 800a5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5bc:	1ccd      	adds	r5, r1, #3
 800a5be:	f025 0503 	bic.w	r5, r5, #3
 800a5c2:	3508      	adds	r5, #8
 800a5c4:	2d0c      	cmp	r5, #12
 800a5c6:	bf38      	it	cc
 800a5c8:	250c      	movcc	r5, #12
 800a5ca:	2d00      	cmp	r5, #0
 800a5cc:	4606      	mov	r6, r0
 800a5ce:	db01      	blt.n	800a5d4 <_malloc_r+0x1c>
 800a5d0:	42a9      	cmp	r1, r5
 800a5d2:	d904      	bls.n	800a5de <_malloc_r+0x26>
 800a5d4:	230c      	movs	r3, #12
 800a5d6:	6033      	str	r3, [r6, #0]
 800a5d8:	2000      	movs	r0, #0
 800a5da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a6b4 <_malloc_r+0xfc>
 800a5e2:	f000 f869 	bl	800a6b8 <__malloc_lock>
 800a5e6:	f8d8 3000 	ldr.w	r3, [r8]
 800a5ea:	461c      	mov	r4, r3
 800a5ec:	bb44      	cbnz	r4, 800a640 <_malloc_r+0x88>
 800a5ee:	4629      	mov	r1, r5
 800a5f0:	4630      	mov	r0, r6
 800a5f2:	f7ff ffbf 	bl	800a574 <sbrk_aligned>
 800a5f6:	1c43      	adds	r3, r0, #1
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	d158      	bne.n	800a6ae <_malloc_r+0xf6>
 800a5fc:	f8d8 4000 	ldr.w	r4, [r8]
 800a600:	4627      	mov	r7, r4
 800a602:	2f00      	cmp	r7, #0
 800a604:	d143      	bne.n	800a68e <_malloc_r+0xd6>
 800a606:	2c00      	cmp	r4, #0
 800a608:	d04b      	beq.n	800a6a2 <_malloc_r+0xea>
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	4639      	mov	r1, r7
 800a60e:	4630      	mov	r0, r6
 800a610:	eb04 0903 	add.w	r9, r4, r3
 800a614:	f000 fe3c 	bl	800b290 <_sbrk_r>
 800a618:	4581      	cmp	r9, r0
 800a61a:	d142      	bne.n	800a6a2 <_malloc_r+0xea>
 800a61c:	6821      	ldr	r1, [r4, #0]
 800a61e:	1a6d      	subs	r5, r5, r1
 800a620:	4629      	mov	r1, r5
 800a622:	4630      	mov	r0, r6
 800a624:	f7ff ffa6 	bl	800a574 <sbrk_aligned>
 800a628:	3001      	adds	r0, #1
 800a62a:	d03a      	beq.n	800a6a2 <_malloc_r+0xea>
 800a62c:	6823      	ldr	r3, [r4, #0]
 800a62e:	442b      	add	r3, r5
 800a630:	6023      	str	r3, [r4, #0]
 800a632:	f8d8 3000 	ldr.w	r3, [r8]
 800a636:	685a      	ldr	r2, [r3, #4]
 800a638:	bb62      	cbnz	r2, 800a694 <_malloc_r+0xdc>
 800a63a:	f8c8 7000 	str.w	r7, [r8]
 800a63e:	e00f      	b.n	800a660 <_malloc_r+0xa8>
 800a640:	6822      	ldr	r2, [r4, #0]
 800a642:	1b52      	subs	r2, r2, r5
 800a644:	d420      	bmi.n	800a688 <_malloc_r+0xd0>
 800a646:	2a0b      	cmp	r2, #11
 800a648:	d917      	bls.n	800a67a <_malloc_r+0xc2>
 800a64a:	1961      	adds	r1, r4, r5
 800a64c:	42a3      	cmp	r3, r4
 800a64e:	6025      	str	r5, [r4, #0]
 800a650:	bf18      	it	ne
 800a652:	6059      	strne	r1, [r3, #4]
 800a654:	6863      	ldr	r3, [r4, #4]
 800a656:	bf08      	it	eq
 800a658:	f8c8 1000 	streq.w	r1, [r8]
 800a65c:	5162      	str	r2, [r4, r5]
 800a65e:	604b      	str	r3, [r1, #4]
 800a660:	4630      	mov	r0, r6
 800a662:	f000 f82f 	bl	800a6c4 <__malloc_unlock>
 800a666:	f104 000b 	add.w	r0, r4, #11
 800a66a:	1d23      	adds	r3, r4, #4
 800a66c:	f020 0007 	bic.w	r0, r0, #7
 800a670:	1ac2      	subs	r2, r0, r3
 800a672:	bf1c      	itt	ne
 800a674:	1a1b      	subne	r3, r3, r0
 800a676:	50a3      	strne	r3, [r4, r2]
 800a678:	e7af      	b.n	800a5da <_malloc_r+0x22>
 800a67a:	6862      	ldr	r2, [r4, #4]
 800a67c:	42a3      	cmp	r3, r4
 800a67e:	bf0c      	ite	eq
 800a680:	f8c8 2000 	streq.w	r2, [r8]
 800a684:	605a      	strne	r2, [r3, #4]
 800a686:	e7eb      	b.n	800a660 <_malloc_r+0xa8>
 800a688:	4623      	mov	r3, r4
 800a68a:	6864      	ldr	r4, [r4, #4]
 800a68c:	e7ae      	b.n	800a5ec <_malloc_r+0x34>
 800a68e:	463c      	mov	r4, r7
 800a690:	687f      	ldr	r7, [r7, #4]
 800a692:	e7b6      	b.n	800a602 <_malloc_r+0x4a>
 800a694:	461a      	mov	r2, r3
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	42a3      	cmp	r3, r4
 800a69a:	d1fb      	bne.n	800a694 <_malloc_r+0xdc>
 800a69c:	2300      	movs	r3, #0
 800a69e:	6053      	str	r3, [r2, #4]
 800a6a0:	e7de      	b.n	800a660 <_malloc_r+0xa8>
 800a6a2:	230c      	movs	r3, #12
 800a6a4:	6033      	str	r3, [r6, #0]
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	f000 f80c 	bl	800a6c4 <__malloc_unlock>
 800a6ac:	e794      	b.n	800a5d8 <_malloc_r+0x20>
 800a6ae:	6005      	str	r5, [r0, #0]
 800a6b0:	e7d6      	b.n	800a660 <_malloc_r+0xa8>
 800a6b2:	bf00      	nop
 800a6b4:	20000b5c 	.word	0x20000b5c

0800a6b8 <__malloc_lock>:
 800a6b8:	4801      	ldr	r0, [pc, #4]	@ (800a6c0 <__malloc_lock+0x8>)
 800a6ba:	f000 be36 	b.w	800b32a <__retarget_lock_acquire_recursive>
 800a6be:	bf00      	nop
 800a6c0:	20000ca0 	.word	0x20000ca0

0800a6c4 <__malloc_unlock>:
 800a6c4:	4801      	ldr	r0, [pc, #4]	@ (800a6cc <__malloc_unlock+0x8>)
 800a6c6:	f000 be31 	b.w	800b32c <__retarget_lock_release_recursive>
 800a6ca:	bf00      	nop
 800a6cc:	20000ca0 	.word	0x20000ca0

0800a6d0 <__cvt>:
 800a6d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d4:	ec57 6b10 	vmov	r6, r7, d0
 800a6d8:	2f00      	cmp	r7, #0
 800a6da:	460c      	mov	r4, r1
 800a6dc:	4619      	mov	r1, r3
 800a6de:	463b      	mov	r3, r7
 800a6e0:	bfbb      	ittet	lt
 800a6e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a6e6:	461f      	movlt	r7, r3
 800a6e8:	2300      	movge	r3, #0
 800a6ea:	232d      	movlt	r3, #45	@ 0x2d
 800a6ec:	700b      	strb	r3, [r1, #0]
 800a6ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a6f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a6f4:	4691      	mov	r9, r2
 800a6f6:	f023 0820 	bic.w	r8, r3, #32
 800a6fa:	bfbc      	itt	lt
 800a6fc:	4632      	movlt	r2, r6
 800a6fe:	4616      	movlt	r6, r2
 800a700:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a704:	d005      	beq.n	800a712 <__cvt+0x42>
 800a706:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a70a:	d100      	bne.n	800a70e <__cvt+0x3e>
 800a70c:	3401      	adds	r4, #1
 800a70e:	2102      	movs	r1, #2
 800a710:	e000      	b.n	800a714 <__cvt+0x44>
 800a712:	2103      	movs	r1, #3
 800a714:	ab03      	add	r3, sp, #12
 800a716:	9301      	str	r3, [sp, #4]
 800a718:	ab02      	add	r3, sp, #8
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	ec47 6b10 	vmov	d0, r6, r7
 800a720:	4653      	mov	r3, sl
 800a722:	4622      	mov	r2, r4
 800a724:	f000 fe9c 	bl	800b460 <_dtoa_r>
 800a728:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a72c:	4605      	mov	r5, r0
 800a72e:	d119      	bne.n	800a764 <__cvt+0x94>
 800a730:	f019 0f01 	tst.w	r9, #1
 800a734:	d00e      	beq.n	800a754 <__cvt+0x84>
 800a736:	eb00 0904 	add.w	r9, r0, r4
 800a73a:	2200      	movs	r2, #0
 800a73c:	2300      	movs	r3, #0
 800a73e:	4630      	mov	r0, r6
 800a740:	4639      	mov	r1, r7
 800a742:	f7f6 f9c1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a746:	b108      	cbz	r0, 800a74c <__cvt+0x7c>
 800a748:	f8cd 900c 	str.w	r9, [sp, #12]
 800a74c:	2230      	movs	r2, #48	@ 0x30
 800a74e:	9b03      	ldr	r3, [sp, #12]
 800a750:	454b      	cmp	r3, r9
 800a752:	d31e      	bcc.n	800a792 <__cvt+0xc2>
 800a754:	9b03      	ldr	r3, [sp, #12]
 800a756:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a758:	1b5b      	subs	r3, r3, r5
 800a75a:	4628      	mov	r0, r5
 800a75c:	6013      	str	r3, [r2, #0]
 800a75e:	b004      	add	sp, #16
 800a760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a764:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a768:	eb00 0904 	add.w	r9, r0, r4
 800a76c:	d1e5      	bne.n	800a73a <__cvt+0x6a>
 800a76e:	7803      	ldrb	r3, [r0, #0]
 800a770:	2b30      	cmp	r3, #48	@ 0x30
 800a772:	d10a      	bne.n	800a78a <__cvt+0xba>
 800a774:	2200      	movs	r2, #0
 800a776:	2300      	movs	r3, #0
 800a778:	4630      	mov	r0, r6
 800a77a:	4639      	mov	r1, r7
 800a77c:	f7f6 f9a4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a780:	b918      	cbnz	r0, 800a78a <__cvt+0xba>
 800a782:	f1c4 0401 	rsb	r4, r4, #1
 800a786:	f8ca 4000 	str.w	r4, [sl]
 800a78a:	f8da 3000 	ldr.w	r3, [sl]
 800a78e:	4499      	add	r9, r3
 800a790:	e7d3      	b.n	800a73a <__cvt+0x6a>
 800a792:	1c59      	adds	r1, r3, #1
 800a794:	9103      	str	r1, [sp, #12]
 800a796:	701a      	strb	r2, [r3, #0]
 800a798:	e7d9      	b.n	800a74e <__cvt+0x7e>

0800a79a <__exponent>:
 800a79a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a79c:	2900      	cmp	r1, #0
 800a79e:	bfba      	itte	lt
 800a7a0:	4249      	neglt	r1, r1
 800a7a2:	232d      	movlt	r3, #45	@ 0x2d
 800a7a4:	232b      	movge	r3, #43	@ 0x2b
 800a7a6:	2909      	cmp	r1, #9
 800a7a8:	7002      	strb	r2, [r0, #0]
 800a7aa:	7043      	strb	r3, [r0, #1]
 800a7ac:	dd29      	ble.n	800a802 <__exponent+0x68>
 800a7ae:	f10d 0307 	add.w	r3, sp, #7
 800a7b2:	461d      	mov	r5, r3
 800a7b4:	270a      	movs	r7, #10
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	fbb1 f6f7 	udiv	r6, r1, r7
 800a7bc:	fb07 1416 	mls	r4, r7, r6, r1
 800a7c0:	3430      	adds	r4, #48	@ 0x30
 800a7c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	2c63      	cmp	r4, #99	@ 0x63
 800a7ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800a7ce:	4631      	mov	r1, r6
 800a7d0:	dcf1      	bgt.n	800a7b6 <__exponent+0x1c>
 800a7d2:	3130      	adds	r1, #48	@ 0x30
 800a7d4:	1e94      	subs	r4, r2, #2
 800a7d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a7da:	1c41      	adds	r1, r0, #1
 800a7dc:	4623      	mov	r3, r4
 800a7de:	42ab      	cmp	r3, r5
 800a7e0:	d30a      	bcc.n	800a7f8 <__exponent+0x5e>
 800a7e2:	f10d 0309 	add.w	r3, sp, #9
 800a7e6:	1a9b      	subs	r3, r3, r2
 800a7e8:	42ac      	cmp	r4, r5
 800a7ea:	bf88      	it	hi
 800a7ec:	2300      	movhi	r3, #0
 800a7ee:	3302      	adds	r3, #2
 800a7f0:	4403      	add	r3, r0
 800a7f2:	1a18      	subs	r0, r3, r0
 800a7f4:	b003      	add	sp, #12
 800a7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a7fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a800:	e7ed      	b.n	800a7de <__exponent+0x44>
 800a802:	2330      	movs	r3, #48	@ 0x30
 800a804:	3130      	adds	r1, #48	@ 0x30
 800a806:	7083      	strb	r3, [r0, #2]
 800a808:	70c1      	strb	r1, [r0, #3]
 800a80a:	1d03      	adds	r3, r0, #4
 800a80c:	e7f1      	b.n	800a7f2 <__exponent+0x58>
	...

0800a810 <_printf_float>:
 800a810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a814:	b08d      	sub	sp, #52	@ 0x34
 800a816:	460c      	mov	r4, r1
 800a818:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a81c:	4616      	mov	r6, r2
 800a81e:	461f      	mov	r7, r3
 800a820:	4605      	mov	r5, r0
 800a822:	f000 fce9 	bl	800b1f8 <_localeconv_r>
 800a826:	6803      	ldr	r3, [r0, #0]
 800a828:	9304      	str	r3, [sp, #16]
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7f5 fd20 	bl	8000270 <strlen>
 800a830:	2300      	movs	r3, #0
 800a832:	930a      	str	r3, [sp, #40]	@ 0x28
 800a834:	f8d8 3000 	ldr.w	r3, [r8]
 800a838:	9005      	str	r0, [sp, #20]
 800a83a:	3307      	adds	r3, #7
 800a83c:	f023 0307 	bic.w	r3, r3, #7
 800a840:	f103 0208 	add.w	r2, r3, #8
 800a844:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a848:	f8d4 b000 	ldr.w	fp, [r4]
 800a84c:	f8c8 2000 	str.w	r2, [r8]
 800a850:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a854:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a858:	9307      	str	r3, [sp, #28]
 800a85a:	f8cd 8018 	str.w	r8, [sp, #24]
 800a85e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a862:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a866:	4b9c      	ldr	r3, [pc, #624]	@ (800aad8 <_printf_float+0x2c8>)
 800a868:	f04f 32ff 	mov.w	r2, #4294967295
 800a86c:	f7f6 f95e 	bl	8000b2c <__aeabi_dcmpun>
 800a870:	bb70      	cbnz	r0, 800a8d0 <_printf_float+0xc0>
 800a872:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a876:	4b98      	ldr	r3, [pc, #608]	@ (800aad8 <_printf_float+0x2c8>)
 800a878:	f04f 32ff 	mov.w	r2, #4294967295
 800a87c:	f7f6 f938 	bl	8000af0 <__aeabi_dcmple>
 800a880:	bb30      	cbnz	r0, 800a8d0 <_printf_float+0xc0>
 800a882:	2200      	movs	r2, #0
 800a884:	2300      	movs	r3, #0
 800a886:	4640      	mov	r0, r8
 800a888:	4649      	mov	r1, r9
 800a88a:	f7f6 f927 	bl	8000adc <__aeabi_dcmplt>
 800a88e:	b110      	cbz	r0, 800a896 <_printf_float+0x86>
 800a890:	232d      	movs	r3, #45	@ 0x2d
 800a892:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a896:	4a91      	ldr	r2, [pc, #580]	@ (800aadc <_printf_float+0x2cc>)
 800a898:	4b91      	ldr	r3, [pc, #580]	@ (800aae0 <_printf_float+0x2d0>)
 800a89a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a89e:	bf8c      	ite	hi
 800a8a0:	4690      	movhi	r8, r2
 800a8a2:	4698      	movls	r8, r3
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	6123      	str	r3, [r4, #16]
 800a8a8:	f02b 0304 	bic.w	r3, fp, #4
 800a8ac:	6023      	str	r3, [r4, #0]
 800a8ae:	f04f 0900 	mov.w	r9, #0
 800a8b2:	9700      	str	r7, [sp, #0]
 800a8b4:	4633      	mov	r3, r6
 800a8b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	f000 f9d2 	bl	800ac64 <_printf_common>
 800a8c0:	3001      	adds	r0, #1
 800a8c2:	f040 808d 	bne.w	800a9e0 <_printf_float+0x1d0>
 800a8c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ca:	b00d      	add	sp, #52	@ 0x34
 800a8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d0:	4642      	mov	r2, r8
 800a8d2:	464b      	mov	r3, r9
 800a8d4:	4640      	mov	r0, r8
 800a8d6:	4649      	mov	r1, r9
 800a8d8:	f7f6 f928 	bl	8000b2c <__aeabi_dcmpun>
 800a8dc:	b140      	cbz	r0, 800a8f0 <_printf_float+0xe0>
 800a8de:	464b      	mov	r3, r9
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	bfbc      	itt	lt
 800a8e4:	232d      	movlt	r3, #45	@ 0x2d
 800a8e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a8ea:	4a7e      	ldr	r2, [pc, #504]	@ (800aae4 <_printf_float+0x2d4>)
 800a8ec:	4b7e      	ldr	r3, [pc, #504]	@ (800aae8 <_printf_float+0x2d8>)
 800a8ee:	e7d4      	b.n	800a89a <_printf_float+0x8a>
 800a8f0:	6863      	ldr	r3, [r4, #4]
 800a8f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a8f6:	9206      	str	r2, [sp, #24]
 800a8f8:	1c5a      	adds	r2, r3, #1
 800a8fa:	d13b      	bne.n	800a974 <_printf_float+0x164>
 800a8fc:	2306      	movs	r3, #6
 800a8fe:	6063      	str	r3, [r4, #4]
 800a900:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a904:	2300      	movs	r3, #0
 800a906:	6022      	str	r2, [r4, #0]
 800a908:	9303      	str	r3, [sp, #12]
 800a90a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a90c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a910:	ab09      	add	r3, sp, #36	@ 0x24
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	6861      	ldr	r1, [r4, #4]
 800a916:	ec49 8b10 	vmov	d0, r8, r9
 800a91a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a91e:	4628      	mov	r0, r5
 800a920:	f7ff fed6 	bl	800a6d0 <__cvt>
 800a924:	9b06      	ldr	r3, [sp, #24]
 800a926:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a928:	2b47      	cmp	r3, #71	@ 0x47
 800a92a:	4680      	mov	r8, r0
 800a92c:	d129      	bne.n	800a982 <_printf_float+0x172>
 800a92e:	1cc8      	adds	r0, r1, #3
 800a930:	db02      	blt.n	800a938 <_printf_float+0x128>
 800a932:	6863      	ldr	r3, [r4, #4]
 800a934:	4299      	cmp	r1, r3
 800a936:	dd41      	ble.n	800a9bc <_printf_float+0x1ac>
 800a938:	f1aa 0a02 	sub.w	sl, sl, #2
 800a93c:	fa5f fa8a 	uxtb.w	sl, sl
 800a940:	3901      	subs	r1, #1
 800a942:	4652      	mov	r2, sl
 800a944:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a948:	9109      	str	r1, [sp, #36]	@ 0x24
 800a94a:	f7ff ff26 	bl	800a79a <__exponent>
 800a94e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a950:	1813      	adds	r3, r2, r0
 800a952:	2a01      	cmp	r2, #1
 800a954:	4681      	mov	r9, r0
 800a956:	6123      	str	r3, [r4, #16]
 800a958:	dc02      	bgt.n	800a960 <_printf_float+0x150>
 800a95a:	6822      	ldr	r2, [r4, #0]
 800a95c:	07d2      	lsls	r2, r2, #31
 800a95e:	d501      	bpl.n	800a964 <_printf_float+0x154>
 800a960:	3301      	adds	r3, #1
 800a962:	6123      	str	r3, [r4, #16]
 800a964:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d0a2      	beq.n	800a8b2 <_printf_float+0xa2>
 800a96c:	232d      	movs	r3, #45	@ 0x2d
 800a96e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a972:	e79e      	b.n	800a8b2 <_printf_float+0xa2>
 800a974:	9a06      	ldr	r2, [sp, #24]
 800a976:	2a47      	cmp	r2, #71	@ 0x47
 800a978:	d1c2      	bne.n	800a900 <_printf_float+0xf0>
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1c0      	bne.n	800a900 <_printf_float+0xf0>
 800a97e:	2301      	movs	r3, #1
 800a980:	e7bd      	b.n	800a8fe <_printf_float+0xee>
 800a982:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a986:	d9db      	bls.n	800a940 <_printf_float+0x130>
 800a988:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a98c:	d118      	bne.n	800a9c0 <_printf_float+0x1b0>
 800a98e:	2900      	cmp	r1, #0
 800a990:	6863      	ldr	r3, [r4, #4]
 800a992:	dd0b      	ble.n	800a9ac <_printf_float+0x19c>
 800a994:	6121      	str	r1, [r4, #16]
 800a996:	b913      	cbnz	r3, 800a99e <_printf_float+0x18e>
 800a998:	6822      	ldr	r2, [r4, #0]
 800a99a:	07d0      	lsls	r0, r2, #31
 800a99c:	d502      	bpl.n	800a9a4 <_printf_float+0x194>
 800a99e:	3301      	adds	r3, #1
 800a9a0:	440b      	add	r3, r1
 800a9a2:	6123      	str	r3, [r4, #16]
 800a9a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a9a6:	f04f 0900 	mov.w	r9, #0
 800a9aa:	e7db      	b.n	800a964 <_printf_float+0x154>
 800a9ac:	b913      	cbnz	r3, 800a9b4 <_printf_float+0x1a4>
 800a9ae:	6822      	ldr	r2, [r4, #0]
 800a9b0:	07d2      	lsls	r2, r2, #31
 800a9b2:	d501      	bpl.n	800a9b8 <_printf_float+0x1a8>
 800a9b4:	3302      	adds	r3, #2
 800a9b6:	e7f4      	b.n	800a9a2 <_printf_float+0x192>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e7f2      	b.n	800a9a2 <_printf_float+0x192>
 800a9bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a9c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9c2:	4299      	cmp	r1, r3
 800a9c4:	db05      	blt.n	800a9d2 <_printf_float+0x1c2>
 800a9c6:	6823      	ldr	r3, [r4, #0]
 800a9c8:	6121      	str	r1, [r4, #16]
 800a9ca:	07d8      	lsls	r0, r3, #31
 800a9cc:	d5ea      	bpl.n	800a9a4 <_printf_float+0x194>
 800a9ce:	1c4b      	adds	r3, r1, #1
 800a9d0:	e7e7      	b.n	800a9a2 <_printf_float+0x192>
 800a9d2:	2900      	cmp	r1, #0
 800a9d4:	bfd4      	ite	le
 800a9d6:	f1c1 0202 	rsble	r2, r1, #2
 800a9da:	2201      	movgt	r2, #1
 800a9dc:	4413      	add	r3, r2
 800a9de:	e7e0      	b.n	800a9a2 <_printf_float+0x192>
 800a9e0:	6823      	ldr	r3, [r4, #0]
 800a9e2:	055a      	lsls	r2, r3, #21
 800a9e4:	d407      	bmi.n	800a9f6 <_printf_float+0x1e6>
 800a9e6:	6923      	ldr	r3, [r4, #16]
 800a9e8:	4642      	mov	r2, r8
 800a9ea:	4631      	mov	r1, r6
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	47b8      	blx	r7
 800a9f0:	3001      	adds	r0, #1
 800a9f2:	d12b      	bne.n	800aa4c <_printf_float+0x23c>
 800a9f4:	e767      	b.n	800a8c6 <_printf_float+0xb6>
 800a9f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a9fa:	f240 80dd 	bls.w	800abb8 <_printf_float+0x3a8>
 800a9fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aa02:	2200      	movs	r2, #0
 800aa04:	2300      	movs	r3, #0
 800aa06:	f7f6 f85f 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	d033      	beq.n	800aa76 <_printf_float+0x266>
 800aa0e:	4a37      	ldr	r2, [pc, #220]	@ (800aaec <_printf_float+0x2dc>)
 800aa10:	2301      	movs	r3, #1
 800aa12:	4631      	mov	r1, r6
 800aa14:	4628      	mov	r0, r5
 800aa16:	47b8      	blx	r7
 800aa18:	3001      	adds	r0, #1
 800aa1a:	f43f af54 	beq.w	800a8c6 <_printf_float+0xb6>
 800aa1e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aa22:	4543      	cmp	r3, r8
 800aa24:	db02      	blt.n	800aa2c <_printf_float+0x21c>
 800aa26:	6823      	ldr	r3, [r4, #0]
 800aa28:	07d8      	lsls	r0, r3, #31
 800aa2a:	d50f      	bpl.n	800aa4c <_printf_float+0x23c>
 800aa2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa30:	4631      	mov	r1, r6
 800aa32:	4628      	mov	r0, r5
 800aa34:	47b8      	blx	r7
 800aa36:	3001      	adds	r0, #1
 800aa38:	f43f af45 	beq.w	800a8c6 <_printf_float+0xb6>
 800aa3c:	f04f 0900 	mov.w	r9, #0
 800aa40:	f108 38ff 	add.w	r8, r8, #4294967295
 800aa44:	f104 0a1a 	add.w	sl, r4, #26
 800aa48:	45c8      	cmp	r8, r9
 800aa4a:	dc09      	bgt.n	800aa60 <_printf_float+0x250>
 800aa4c:	6823      	ldr	r3, [r4, #0]
 800aa4e:	079b      	lsls	r3, r3, #30
 800aa50:	f100 8103 	bmi.w	800ac5a <_printf_float+0x44a>
 800aa54:	68e0      	ldr	r0, [r4, #12]
 800aa56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa58:	4298      	cmp	r0, r3
 800aa5a:	bfb8      	it	lt
 800aa5c:	4618      	movlt	r0, r3
 800aa5e:	e734      	b.n	800a8ca <_printf_float+0xba>
 800aa60:	2301      	movs	r3, #1
 800aa62:	4652      	mov	r2, sl
 800aa64:	4631      	mov	r1, r6
 800aa66:	4628      	mov	r0, r5
 800aa68:	47b8      	blx	r7
 800aa6a:	3001      	adds	r0, #1
 800aa6c:	f43f af2b 	beq.w	800a8c6 <_printf_float+0xb6>
 800aa70:	f109 0901 	add.w	r9, r9, #1
 800aa74:	e7e8      	b.n	800aa48 <_printf_float+0x238>
 800aa76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	dc39      	bgt.n	800aaf0 <_printf_float+0x2e0>
 800aa7c:	4a1b      	ldr	r2, [pc, #108]	@ (800aaec <_printf_float+0x2dc>)
 800aa7e:	2301      	movs	r3, #1
 800aa80:	4631      	mov	r1, r6
 800aa82:	4628      	mov	r0, r5
 800aa84:	47b8      	blx	r7
 800aa86:	3001      	adds	r0, #1
 800aa88:	f43f af1d 	beq.w	800a8c6 <_printf_float+0xb6>
 800aa8c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800aa90:	ea59 0303 	orrs.w	r3, r9, r3
 800aa94:	d102      	bne.n	800aa9c <_printf_float+0x28c>
 800aa96:	6823      	ldr	r3, [r4, #0]
 800aa98:	07d9      	lsls	r1, r3, #31
 800aa9a:	d5d7      	bpl.n	800aa4c <_printf_float+0x23c>
 800aa9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaa0:	4631      	mov	r1, r6
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	47b8      	blx	r7
 800aaa6:	3001      	adds	r0, #1
 800aaa8:	f43f af0d 	beq.w	800a8c6 <_printf_float+0xb6>
 800aaac:	f04f 0a00 	mov.w	sl, #0
 800aab0:	f104 0b1a 	add.w	fp, r4, #26
 800aab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aab6:	425b      	negs	r3, r3
 800aab8:	4553      	cmp	r3, sl
 800aaba:	dc01      	bgt.n	800aac0 <_printf_float+0x2b0>
 800aabc:	464b      	mov	r3, r9
 800aabe:	e793      	b.n	800a9e8 <_printf_float+0x1d8>
 800aac0:	2301      	movs	r3, #1
 800aac2:	465a      	mov	r2, fp
 800aac4:	4631      	mov	r1, r6
 800aac6:	4628      	mov	r0, r5
 800aac8:	47b8      	blx	r7
 800aaca:	3001      	adds	r0, #1
 800aacc:	f43f aefb 	beq.w	800a8c6 <_printf_float+0xb6>
 800aad0:	f10a 0a01 	add.w	sl, sl, #1
 800aad4:	e7ee      	b.n	800aab4 <_printf_float+0x2a4>
 800aad6:	bf00      	nop
 800aad8:	7fefffff 	.word	0x7fefffff
 800aadc:	0800ce98 	.word	0x0800ce98
 800aae0:	0800ce94 	.word	0x0800ce94
 800aae4:	0800cea0 	.word	0x0800cea0
 800aae8:	0800ce9c 	.word	0x0800ce9c
 800aaec:	0800cea4 	.word	0x0800cea4
 800aaf0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aaf2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aaf6:	4553      	cmp	r3, sl
 800aaf8:	bfa8      	it	ge
 800aafa:	4653      	movge	r3, sl
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	4699      	mov	r9, r3
 800ab00:	dc36      	bgt.n	800ab70 <_printf_float+0x360>
 800ab02:	f04f 0b00 	mov.w	fp, #0
 800ab06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab0a:	f104 021a 	add.w	r2, r4, #26
 800ab0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ab10:	9306      	str	r3, [sp, #24]
 800ab12:	eba3 0309 	sub.w	r3, r3, r9
 800ab16:	455b      	cmp	r3, fp
 800ab18:	dc31      	bgt.n	800ab7e <_printf_float+0x36e>
 800ab1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab1c:	459a      	cmp	sl, r3
 800ab1e:	dc3a      	bgt.n	800ab96 <_printf_float+0x386>
 800ab20:	6823      	ldr	r3, [r4, #0]
 800ab22:	07da      	lsls	r2, r3, #31
 800ab24:	d437      	bmi.n	800ab96 <_printf_float+0x386>
 800ab26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab28:	ebaa 0903 	sub.w	r9, sl, r3
 800ab2c:	9b06      	ldr	r3, [sp, #24]
 800ab2e:	ebaa 0303 	sub.w	r3, sl, r3
 800ab32:	4599      	cmp	r9, r3
 800ab34:	bfa8      	it	ge
 800ab36:	4699      	movge	r9, r3
 800ab38:	f1b9 0f00 	cmp.w	r9, #0
 800ab3c:	dc33      	bgt.n	800aba6 <_printf_float+0x396>
 800ab3e:	f04f 0800 	mov.w	r8, #0
 800ab42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab46:	f104 0b1a 	add.w	fp, r4, #26
 800ab4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab4c:	ebaa 0303 	sub.w	r3, sl, r3
 800ab50:	eba3 0309 	sub.w	r3, r3, r9
 800ab54:	4543      	cmp	r3, r8
 800ab56:	f77f af79 	ble.w	800aa4c <_printf_float+0x23c>
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	465a      	mov	r2, fp
 800ab5e:	4631      	mov	r1, r6
 800ab60:	4628      	mov	r0, r5
 800ab62:	47b8      	blx	r7
 800ab64:	3001      	adds	r0, #1
 800ab66:	f43f aeae 	beq.w	800a8c6 <_printf_float+0xb6>
 800ab6a:	f108 0801 	add.w	r8, r8, #1
 800ab6e:	e7ec      	b.n	800ab4a <_printf_float+0x33a>
 800ab70:	4642      	mov	r2, r8
 800ab72:	4631      	mov	r1, r6
 800ab74:	4628      	mov	r0, r5
 800ab76:	47b8      	blx	r7
 800ab78:	3001      	adds	r0, #1
 800ab7a:	d1c2      	bne.n	800ab02 <_printf_float+0x2f2>
 800ab7c:	e6a3      	b.n	800a8c6 <_printf_float+0xb6>
 800ab7e:	2301      	movs	r3, #1
 800ab80:	4631      	mov	r1, r6
 800ab82:	4628      	mov	r0, r5
 800ab84:	9206      	str	r2, [sp, #24]
 800ab86:	47b8      	blx	r7
 800ab88:	3001      	adds	r0, #1
 800ab8a:	f43f ae9c 	beq.w	800a8c6 <_printf_float+0xb6>
 800ab8e:	9a06      	ldr	r2, [sp, #24]
 800ab90:	f10b 0b01 	add.w	fp, fp, #1
 800ab94:	e7bb      	b.n	800ab0e <_printf_float+0x2fe>
 800ab96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	47b8      	blx	r7
 800aba0:	3001      	adds	r0, #1
 800aba2:	d1c0      	bne.n	800ab26 <_printf_float+0x316>
 800aba4:	e68f      	b.n	800a8c6 <_printf_float+0xb6>
 800aba6:	9a06      	ldr	r2, [sp, #24]
 800aba8:	464b      	mov	r3, r9
 800abaa:	4442      	add	r2, r8
 800abac:	4631      	mov	r1, r6
 800abae:	4628      	mov	r0, r5
 800abb0:	47b8      	blx	r7
 800abb2:	3001      	adds	r0, #1
 800abb4:	d1c3      	bne.n	800ab3e <_printf_float+0x32e>
 800abb6:	e686      	b.n	800a8c6 <_printf_float+0xb6>
 800abb8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800abbc:	f1ba 0f01 	cmp.w	sl, #1
 800abc0:	dc01      	bgt.n	800abc6 <_printf_float+0x3b6>
 800abc2:	07db      	lsls	r3, r3, #31
 800abc4:	d536      	bpl.n	800ac34 <_printf_float+0x424>
 800abc6:	2301      	movs	r3, #1
 800abc8:	4642      	mov	r2, r8
 800abca:	4631      	mov	r1, r6
 800abcc:	4628      	mov	r0, r5
 800abce:	47b8      	blx	r7
 800abd0:	3001      	adds	r0, #1
 800abd2:	f43f ae78 	beq.w	800a8c6 <_printf_float+0xb6>
 800abd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abda:	4631      	mov	r1, r6
 800abdc:	4628      	mov	r0, r5
 800abde:	47b8      	blx	r7
 800abe0:	3001      	adds	r0, #1
 800abe2:	f43f ae70 	beq.w	800a8c6 <_printf_float+0xb6>
 800abe6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800abea:	2200      	movs	r2, #0
 800abec:	2300      	movs	r3, #0
 800abee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abf2:	f7f5 ff69 	bl	8000ac8 <__aeabi_dcmpeq>
 800abf6:	b9c0      	cbnz	r0, 800ac2a <_printf_float+0x41a>
 800abf8:	4653      	mov	r3, sl
 800abfa:	f108 0201 	add.w	r2, r8, #1
 800abfe:	4631      	mov	r1, r6
 800ac00:	4628      	mov	r0, r5
 800ac02:	47b8      	blx	r7
 800ac04:	3001      	adds	r0, #1
 800ac06:	d10c      	bne.n	800ac22 <_printf_float+0x412>
 800ac08:	e65d      	b.n	800a8c6 <_printf_float+0xb6>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	465a      	mov	r2, fp
 800ac0e:	4631      	mov	r1, r6
 800ac10:	4628      	mov	r0, r5
 800ac12:	47b8      	blx	r7
 800ac14:	3001      	adds	r0, #1
 800ac16:	f43f ae56 	beq.w	800a8c6 <_printf_float+0xb6>
 800ac1a:	f108 0801 	add.w	r8, r8, #1
 800ac1e:	45d0      	cmp	r8, sl
 800ac20:	dbf3      	blt.n	800ac0a <_printf_float+0x3fa>
 800ac22:	464b      	mov	r3, r9
 800ac24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ac28:	e6df      	b.n	800a9ea <_printf_float+0x1da>
 800ac2a:	f04f 0800 	mov.w	r8, #0
 800ac2e:	f104 0b1a 	add.w	fp, r4, #26
 800ac32:	e7f4      	b.n	800ac1e <_printf_float+0x40e>
 800ac34:	2301      	movs	r3, #1
 800ac36:	4642      	mov	r2, r8
 800ac38:	e7e1      	b.n	800abfe <_printf_float+0x3ee>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	464a      	mov	r2, r9
 800ac3e:	4631      	mov	r1, r6
 800ac40:	4628      	mov	r0, r5
 800ac42:	47b8      	blx	r7
 800ac44:	3001      	adds	r0, #1
 800ac46:	f43f ae3e 	beq.w	800a8c6 <_printf_float+0xb6>
 800ac4a:	f108 0801 	add.w	r8, r8, #1
 800ac4e:	68e3      	ldr	r3, [r4, #12]
 800ac50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac52:	1a5b      	subs	r3, r3, r1
 800ac54:	4543      	cmp	r3, r8
 800ac56:	dcf0      	bgt.n	800ac3a <_printf_float+0x42a>
 800ac58:	e6fc      	b.n	800aa54 <_printf_float+0x244>
 800ac5a:	f04f 0800 	mov.w	r8, #0
 800ac5e:	f104 0919 	add.w	r9, r4, #25
 800ac62:	e7f4      	b.n	800ac4e <_printf_float+0x43e>

0800ac64 <_printf_common>:
 800ac64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac68:	4616      	mov	r6, r2
 800ac6a:	4698      	mov	r8, r3
 800ac6c:	688a      	ldr	r2, [r1, #8]
 800ac6e:	690b      	ldr	r3, [r1, #16]
 800ac70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac74:	4293      	cmp	r3, r2
 800ac76:	bfb8      	it	lt
 800ac78:	4613      	movlt	r3, r2
 800ac7a:	6033      	str	r3, [r6, #0]
 800ac7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ac80:	4607      	mov	r7, r0
 800ac82:	460c      	mov	r4, r1
 800ac84:	b10a      	cbz	r2, 800ac8a <_printf_common+0x26>
 800ac86:	3301      	adds	r3, #1
 800ac88:	6033      	str	r3, [r6, #0]
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	0699      	lsls	r1, r3, #26
 800ac8e:	bf42      	ittt	mi
 800ac90:	6833      	ldrmi	r3, [r6, #0]
 800ac92:	3302      	addmi	r3, #2
 800ac94:	6033      	strmi	r3, [r6, #0]
 800ac96:	6825      	ldr	r5, [r4, #0]
 800ac98:	f015 0506 	ands.w	r5, r5, #6
 800ac9c:	d106      	bne.n	800acac <_printf_common+0x48>
 800ac9e:	f104 0a19 	add.w	sl, r4, #25
 800aca2:	68e3      	ldr	r3, [r4, #12]
 800aca4:	6832      	ldr	r2, [r6, #0]
 800aca6:	1a9b      	subs	r3, r3, r2
 800aca8:	42ab      	cmp	r3, r5
 800acaa:	dc26      	bgt.n	800acfa <_printf_common+0x96>
 800acac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800acb0:	6822      	ldr	r2, [r4, #0]
 800acb2:	3b00      	subs	r3, #0
 800acb4:	bf18      	it	ne
 800acb6:	2301      	movne	r3, #1
 800acb8:	0692      	lsls	r2, r2, #26
 800acba:	d42b      	bmi.n	800ad14 <_printf_common+0xb0>
 800acbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800acc0:	4641      	mov	r1, r8
 800acc2:	4638      	mov	r0, r7
 800acc4:	47c8      	blx	r9
 800acc6:	3001      	adds	r0, #1
 800acc8:	d01e      	beq.n	800ad08 <_printf_common+0xa4>
 800acca:	6823      	ldr	r3, [r4, #0]
 800accc:	6922      	ldr	r2, [r4, #16]
 800acce:	f003 0306 	and.w	r3, r3, #6
 800acd2:	2b04      	cmp	r3, #4
 800acd4:	bf02      	ittt	eq
 800acd6:	68e5      	ldreq	r5, [r4, #12]
 800acd8:	6833      	ldreq	r3, [r6, #0]
 800acda:	1aed      	subeq	r5, r5, r3
 800acdc:	68a3      	ldr	r3, [r4, #8]
 800acde:	bf0c      	ite	eq
 800ace0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ace4:	2500      	movne	r5, #0
 800ace6:	4293      	cmp	r3, r2
 800ace8:	bfc4      	itt	gt
 800acea:	1a9b      	subgt	r3, r3, r2
 800acec:	18ed      	addgt	r5, r5, r3
 800acee:	2600      	movs	r6, #0
 800acf0:	341a      	adds	r4, #26
 800acf2:	42b5      	cmp	r5, r6
 800acf4:	d11a      	bne.n	800ad2c <_printf_common+0xc8>
 800acf6:	2000      	movs	r0, #0
 800acf8:	e008      	b.n	800ad0c <_printf_common+0xa8>
 800acfa:	2301      	movs	r3, #1
 800acfc:	4652      	mov	r2, sl
 800acfe:	4641      	mov	r1, r8
 800ad00:	4638      	mov	r0, r7
 800ad02:	47c8      	blx	r9
 800ad04:	3001      	adds	r0, #1
 800ad06:	d103      	bne.n	800ad10 <_printf_common+0xac>
 800ad08:	f04f 30ff 	mov.w	r0, #4294967295
 800ad0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad10:	3501      	adds	r5, #1
 800ad12:	e7c6      	b.n	800aca2 <_printf_common+0x3e>
 800ad14:	18e1      	adds	r1, r4, r3
 800ad16:	1c5a      	adds	r2, r3, #1
 800ad18:	2030      	movs	r0, #48	@ 0x30
 800ad1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad1e:	4422      	add	r2, r4
 800ad20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ad24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ad28:	3302      	adds	r3, #2
 800ad2a:	e7c7      	b.n	800acbc <_printf_common+0x58>
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	4622      	mov	r2, r4
 800ad30:	4641      	mov	r1, r8
 800ad32:	4638      	mov	r0, r7
 800ad34:	47c8      	blx	r9
 800ad36:	3001      	adds	r0, #1
 800ad38:	d0e6      	beq.n	800ad08 <_printf_common+0xa4>
 800ad3a:	3601      	adds	r6, #1
 800ad3c:	e7d9      	b.n	800acf2 <_printf_common+0x8e>
	...

0800ad40 <_printf_i>:
 800ad40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad44:	7e0f      	ldrb	r7, [r1, #24]
 800ad46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ad48:	2f78      	cmp	r7, #120	@ 0x78
 800ad4a:	4691      	mov	r9, r2
 800ad4c:	4680      	mov	r8, r0
 800ad4e:	460c      	mov	r4, r1
 800ad50:	469a      	mov	sl, r3
 800ad52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad56:	d807      	bhi.n	800ad68 <_printf_i+0x28>
 800ad58:	2f62      	cmp	r7, #98	@ 0x62
 800ad5a:	d80a      	bhi.n	800ad72 <_printf_i+0x32>
 800ad5c:	2f00      	cmp	r7, #0
 800ad5e:	f000 80d1 	beq.w	800af04 <_printf_i+0x1c4>
 800ad62:	2f58      	cmp	r7, #88	@ 0x58
 800ad64:	f000 80b8 	beq.w	800aed8 <_printf_i+0x198>
 800ad68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad70:	e03a      	b.n	800ade8 <_printf_i+0xa8>
 800ad72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad76:	2b15      	cmp	r3, #21
 800ad78:	d8f6      	bhi.n	800ad68 <_printf_i+0x28>
 800ad7a:	a101      	add	r1, pc, #4	@ (adr r1, 800ad80 <_printf_i+0x40>)
 800ad7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad80:	0800add9 	.word	0x0800add9
 800ad84:	0800aded 	.word	0x0800aded
 800ad88:	0800ad69 	.word	0x0800ad69
 800ad8c:	0800ad69 	.word	0x0800ad69
 800ad90:	0800ad69 	.word	0x0800ad69
 800ad94:	0800ad69 	.word	0x0800ad69
 800ad98:	0800aded 	.word	0x0800aded
 800ad9c:	0800ad69 	.word	0x0800ad69
 800ada0:	0800ad69 	.word	0x0800ad69
 800ada4:	0800ad69 	.word	0x0800ad69
 800ada8:	0800ad69 	.word	0x0800ad69
 800adac:	0800aeeb 	.word	0x0800aeeb
 800adb0:	0800ae17 	.word	0x0800ae17
 800adb4:	0800aea5 	.word	0x0800aea5
 800adb8:	0800ad69 	.word	0x0800ad69
 800adbc:	0800ad69 	.word	0x0800ad69
 800adc0:	0800af0d 	.word	0x0800af0d
 800adc4:	0800ad69 	.word	0x0800ad69
 800adc8:	0800ae17 	.word	0x0800ae17
 800adcc:	0800ad69 	.word	0x0800ad69
 800add0:	0800ad69 	.word	0x0800ad69
 800add4:	0800aead 	.word	0x0800aead
 800add8:	6833      	ldr	r3, [r6, #0]
 800adda:	1d1a      	adds	r2, r3, #4
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	6032      	str	r2, [r6, #0]
 800ade0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ade4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ade8:	2301      	movs	r3, #1
 800adea:	e09c      	b.n	800af26 <_printf_i+0x1e6>
 800adec:	6833      	ldr	r3, [r6, #0]
 800adee:	6820      	ldr	r0, [r4, #0]
 800adf0:	1d19      	adds	r1, r3, #4
 800adf2:	6031      	str	r1, [r6, #0]
 800adf4:	0606      	lsls	r6, r0, #24
 800adf6:	d501      	bpl.n	800adfc <_printf_i+0xbc>
 800adf8:	681d      	ldr	r5, [r3, #0]
 800adfa:	e003      	b.n	800ae04 <_printf_i+0xc4>
 800adfc:	0645      	lsls	r5, r0, #25
 800adfe:	d5fb      	bpl.n	800adf8 <_printf_i+0xb8>
 800ae00:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae04:	2d00      	cmp	r5, #0
 800ae06:	da03      	bge.n	800ae10 <_printf_i+0xd0>
 800ae08:	232d      	movs	r3, #45	@ 0x2d
 800ae0a:	426d      	negs	r5, r5
 800ae0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae10:	4858      	ldr	r0, [pc, #352]	@ (800af74 <_printf_i+0x234>)
 800ae12:	230a      	movs	r3, #10
 800ae14:	e011      	b.n	800ae3a <_printf_i+0xfa>
 800ae16:	6821      	ldr	r1, [r4, #0]
 800ae18:	6833      	ldr	r3, [r6, #0]
 800ae1a:	0608      	lsls	r0, r1, #24
 800ae1c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ae20:	d402      	bmi.n	800ae28 <_printf_i+0xe8>
 800ae22:	0649      	lsls	r1, r1, #25
 800ae24:	bf48      	it	mi
 800ae26:	b2ad      	uxthmi	r5, r5
 800ae28:	2f6f      	cmp	r7, #111	@ 0x6f
 800ae2a:	4852      	ldr	r0, [pc, #328]	@ (800af74 <_printf_i+0x234>)
 800ae2c:	6033      	str	r3, [r6, #0]
 800ae2e:	bf14      	ite	ne
 800ae30:	230a      	movne	r3, #10
 800ae32:	2308      	moveq	r3, #8
 800ae34:	2100      	movs	r1, #0
 800ae36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ae3a:	6866      	ldr	r6, [r4, #4]
 800ae3c:	60a6      	str	r6, [r4, #8]
 800ae3e:	2e00      	cmp	r6, #0
 800ae40:	db05      	blt.n	800ae4e <_printf_i+0x10e>
 800ae42:	6821      	ldr	r1, [r4, #0]
 800ae44:	432e      	orrs	r6, r5
 800ae46:	f021 0104 	bic.w	r1, r1, #4
 800ae4a:	6021      	str	r1, [r4, #0]
 800ae4c:	d04b      	beq.n	800aee6 <_printf_i+0x1a6>
 800ae4e:	4616      	mov	r6, r2
 800ae50:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae54:	fb03 5711 	mls	r7, r3, r1, r5
 800ae58:	5dc7      	ldrb	r7, [r0, r7]
 800ae5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae5e:	462f      	mov	r7, r5
 800ae60:	42bb      	cmp	r3, r7
 800ae62:	460d      	mov	r5, r1
 800ae64:	d9f4      	bls.n	800ae50 <_printf_i+0x110>
 800ae66:	2b08      	cmp	r3, #8
 800ae68:	d10b      	bne.n	800ae82 <_printf_i+0x142>
 800ae6a:	6823      	ldr	r3, [r4, #0]
 800ae6c:	07df      	lsls	r7, r3, #31
 800ae6e:	d508      	bpl.n	800ae82 <_printf_i+0x142>
 800ae70:	6923      	ldr	r3, [r4, #16]
 800ae72:	6861      	ldr	r1, [r4, #4]
 800ae74:	4299      	cmp	r1, r3
 800ae76:	bfde      	ittt	le
 800ae78:	2330      	movle	r3, #48	@ 0x30
 800ae7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae82:	1b92      	subs	r2, r2, r6
 800ae84:	6122      	str	r2, [r4, #16]
 800ae86:	f8cd a000 	str.w	sl, [sp]
 800ae8a:	464b      	mov	r3, r9
 800ae8c:	aa03      	add	r2, sp, #12
 800ae8e:	4621      	mov	r1, r4
 800ae90:	4640      	mov	r0, r8
 800ae92:	f7ff fee7 	bl	800ac64 <_printf_common>
 800ae96:	3001      	adds	r0, #1
 800ae98:	d14a      	bne.n	800af30 <_printf_i+0x1f0>
 800ae9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae9e:	b004      	add	sp, #16
 800aea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aea4:	6823      	ldr	r3, [r4, #0]
 800aea6:	f043 0320 	orr.w	r3, r3, #32
 800aeaa:	6023      	str	r3, [r4, #0]
 800aeac:	4832      	ldr	r0, [pc, #200]	@ (800af78 <_printf_i+0x238>)
 800aeae:	2778      	movs	r7, #120	@ 0x78
 800aeb0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aeb4:	6823      	ldr	r3, [r4, #0]
 800aeb6:	6831      	ldr	r1, [r6, #0]
 800aeb8:	061f      	lsls	r7, r3, #24
 800aeba:	f851 5b04 	ldr.w	r5, [r1], #4
 800aebe:	d402      	bmi.n	800aec6 <_printf_i+0x186>
 800aec0:	065f      	lsls	r7, r3, #25
 800aec2:	bf48      	it	mi
 800aec4:	b2ad      	uxthmi	r5, r5
 800aec6:	6031      	str	r1, [r6, #0]
 800aec8:	07d9      	lsls	r1, r3, #31
 800aeca:	bf44      	itt	mi
 800aecc:	f043 0320 	orrmi.w	r3, r3, #32
 800aed0:	6023      	strmi	r3, [r4, #0]
 800aed2:	b11d      	cbz	r5, 800aedc <_printf_i+0x19c>
 800aed4:	2310      	movs	r3, #16
 800aed6:	e7ad      	b.n	800ae34 <_printf_i+0xf4>
 800aed8:	4826      	ldr	r0, [pc, #152]	@ (800af74 <_printf_i+0x234>)
 800aeda:	e7e9      	b.n	800aeb0 <_printf_i+0x170>
 800aedc:	6823      	ldr	r3, [r4, #0]
 800aede:	f023 0320 	bic.w	r3, r3, #32
 800aee2:	6023      	str	r3, [r4, #0]
 800aee4:	e7f6      	b.n	800aed4 <_printf_i+0x194>
 800aee6:	4616      	mov	r6, r2
 800aee8:	e7bd      	b.n	800ae66 <_printf_i+0x126>
 800aeea:	6833      	ldr	r3, [r6, #0]
 800aeec:	6825      	ldr	r5, [r4, #0]
 800aeee:	6961      	ldr	r1, [r4, #20]
 800aef0:	1d18      	adds	r0, r3, #4
 800aef2:	6030      	str	r0, [r6, #0]
 800aef4:	062e      	lsls	r6, r5, #24
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	d501      	bpl.n	800aefe <_printf_i+0x1be>
 800aefa:	6019      	str	r1, [r3, #0]
 800aefc:	e002      	b.n	800af04 <_printf_i+0x1c4>
 800aefe:	0668      	lsls	r0, r5, #25
 800af00:	d5fb      	bpl.n	800aefa <_printf_i+0x1ba>
 800af02:	8019      	strh	r1, [r3, #0]
 800af04:	2300      	movs	r3, #0
 800af06:	6123      	str	r3, [r4, #16]
 800af08:	4616      	mov	r6, r2
 800af0a:	e7bc      	b.n	800ae86 <_printf_i+0x146>
 800af0c:	6833      	ldr	r3, [r6, #0]
 800af0e:	1d1a      	adds	r2, r3, #4
 800af10:	6032      	str	r2, [r6, #0]
 800af12:	681e      	ldr	r6, [r3, #0]
 800af14:	6862      	ldr	r2, [r4, #4]
 800af16:	2100      	movs	r1, #0
 800af18:	4630      	mov	r0, r6
 800af1a:	f7f5 f959 	bl	80001d0 <memchr>
 800af1e:	b108      	cbz	r0, 800af24 <_printf_i+0x1e4>
 800af20:	1b80      	subs	r0, r0, r6
 800af22:	6060      	str	r0, [r4, #4]
 800af24:	6863      	ldr	r3, [r4, #4]
 800af26:	6123      	str	r3, [r4, #16]
 800af28:	2300      	movs	r3, #0
 800af2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af2e:	e7aa      	b.n	800ae86 <_printf_i+0x146>
 800af30:	6923      	ldr	r3, [r4, #16]
 800af32:	4632      	mov	r2, r6
 800af34:	4649      	mov	r1, r9
 800af36:	4640      	mov	r0, r8
 800af38:	47d0      	blx	sl
 800af3a:	3001      	adds	r0, #1
 800af3c:	d0ad      	beq.n	800ae9a <_printf_i+0x15a>
 800af3e:	6823      	ldr	r3, [r4, #0]
 800af40:	079b      	lsls	r3, r3, #30
 800af42:	d413      	bmi.n	800af6c <_printf_i+0x22c>
 800af44:	68e0      	ldr	r0, [r4, #12]
 800af46:	9b03      	ldr	r3, [sp, #12]
 800af48:	4298      	cmp	r0, r3
 800af4a:	bfb8      	it	lt
 800af4c:	4618      	movlt	r0, r3
 800af4e:	e7a6      	b.n	800ae9e <_printf_i+0x15e>
 800af50:	2301      	movs	r3, #1
 800af52:	4632      	mov	r2, r6
 800af54:	4649      	mov	r1, r9
 800af56:	4640      	mov	r0, r8
 800af58:	47d0      	blx	sl
 800af5a:	3001      	adds	r0, #1
 800af5c:	d09d      	beq.n	800ae9a <_printf_i+0x15a>
 800af5e:	3501      	adds	r5, #1
 800af60:	68e3      	ldr	r3, [r4, #12]
 800af62:	9903      	ldr	r1, [sp, #12]
 800af64:	1a5b      	subs	r3, r3, r1
 800af66:	42ab      	cmp	r3, r5
 800af68:	dcf2      	bgt.n	800af50 <_printf_i+0x210>
 800af6a:	e7eb      	b.n	800af44 <_printf_i+0x204>
 800af6c:	2500      	movs	r5, #0
 800af6e:	f104 0619 	add.w	r6, r4, #25
 800af72:	e7f5      	b.n	800af60 <_printf_i+0x220>
 800af74:	0800cea6 	.word	0x0800cea6
 800af78:	0800ceb7 	.word	0x0800ceb7

0800af7c <std>:
 800af7c:	2300      	movs	r3, #0
 800af7e:	b510      	push	{r4, lr}
 800af80:	4604      	mov	r4, r0
 800af82:	e9c0 3300 	strd	r3, r3, [r0]
 800af86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af8a:	6083      	str	r3, [r0, #8]
 800af8c:	8181      	strh	r1, [r0, #12]
 800af8e:	6643      	str	r3, [r0, #100]	@ 0x64
 800af90:	81c2      	strh	r2, [r0, #14]
 800af92:	6183      	str	r3, [r0, #24]
 800af94:	4619      	mov	r1, r3
 800af96:	2208      	movs	r2, #8
 800af98:	305c      	adds	r0, #92	@ 0x5c
 800af9a:	f000 f8f4 	bl	800b186 <memset>
 800af9e:	4b0d      	ldr	r3, [pc, #52]	@ (800afd4 <std+0x58>)
 800afa0:	6263      	str	r3, [r4, #36]	@ 0x24
 800afa2:	4b0d      	ldr	r3, [pc, #52]	@ (800afd8 <std+0x5c>)
 800afa4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800afa6:	4b0d      	ldr	r3, [pc, #52]	@ (800afdc <std+0x60>)
 800afa8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800afaa:	4b0d      	ldr	r3, [pc, #52]	@ (800afe0 <std+0x64>)
 800afac:	6323      	str	r3, [r4, #48]	@ 0x30
 800afae:	4b0d      	ldr	r3, [pc, #52]	@ (800afe4 <std+0x68>)
 800afb0:	6224      	str	r4, [r4, #32]
 800afb2:	429c      	cmp	r4, r3
 800afb4:	d006      	beq.n	800afc4 <std+0x48>
 800afb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800afba:	4294      	cmp	r4, r2
 800afbc:	d002      	beq.n	800afc4 <std+0x48>
 800afbe:	33d0      	adds	r3, #208	@ 0xd0
 800afc0:	429c      	cmp	r4, r3
 800afc2:	d105      	bne.n	800afd0 <std+0x54>
 800afc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800afc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afcc:	f000 b9ac 	b.w	800b328 <__retarget_lock_init_recursive>
 800afd0:	bd10      	pop	{r4, pc}
 800afd2:	bf00      	nop
 800afd4:	0800b101 	.word	0x0800b101
 800afd8:	0800b123 	.word	0x0800b123
 800afdc:	0800b15b 	.word	0x0800b15b
 800afe0:	0800b17f 	.word	0x0800b17f
 800afe4:	20000b60 	.word	0x20000b60

0800afe8 <stdio_exit_handler>:
 800afe8:	4a02      	ldr	r2, [pc, #8]	@ (800aff4 <stdio_exit_handler+0xc>)
 800afea:	4903      	ldr	r1, [pc, #12]	@ (800aff8 <stdio_exit_handler+0x10>)
 800afec:	4803      	ldr	r0, [pc, #12]	@ (800affc <stdio_exit_handler+0x14>)
 800afee:	f000 b869 	b.w	800b0c4 <_fwalk_sglue>
 800aff2:	bf00      	nop
 800aff4:	2000002c 	.word	0x2000002c
 800aff8:	0800c891 	.word	0x0800c891
 800affc:	2000003c 	.word	0x2000003c

0800b000 <cleanup_stdio>:
 800b000:	6841      	ldr	r1, [r0, #4]
 800b002:	4b0c      	ldr	r3, [pc, #48]	@ (800b034 <cleanup_stdio+0x34>)
 800b004:	4299      	cmp	r1, r3
 800b006:	b510      	push	{r4, lr}
 800b008:	4604      	mov	r4, r0
 800b00a:	d001      	beq.n	800b010 <cleanup_stdio+0x10>
 800b00c:	f001 fc40 	bl	800c890 <_fflush_r>
 800b010:	68a1      	ldr	r1, [r4, #8]
 800b012:	4b09      	ldr	r3, [pc, #36]	@ (800b038 <cleanup_stdio+0x38>)
 800b014:	4299      	cmp	r1, r3
 800b016:	d002      	beq.n	800b01e <cleanup_stdio+0x1e>
 800b018:	4620      	mov	r0, r4
 800b01a:	f001 fc39 	bl	800c890 <_fflush_r>
 800b01e:	68e1      	ldr	r1, [r4, #12]
 800b020:	4b06      	ldr	r3, [pc, #24]	@ (800b03c <cleanup_stdio+0x3c>)
 800b022:	4299      	cmp	r1, r3
 800b024:	d004      	beq.n	800b030 <cleanup_stdio+0x30>
 800b026:	4620      	mov	r0, r4
 800b028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b02c:	f001 bc30 	b.w	800c890 <_fflush_r>
 800b030:	bd10      	pop	{r4, pc}
 800b032:	bf00      	nop
 800b034:	20000b60 	.word	0x20000b60
 800b038:	20000bc8 	.word	0x20000bc8
 800b03c:	20000c30 	.word	0x20000c30

0800b040 <global_stdio_init.part.0>:
 800b040:	b510      	push	{r4, lr}
 800b042:	4b0b      	ldr	r3, [pc, #44]	@ (800b070 <global_stdio_init.part.0+0x30>)
 800b044:	4c0b      	ldr	r4, [pc, #44]	@ (800b074 <global_stdio_init.part.0+0x34>)
 800b046:	4a0c      	ldr	r2, [pc, #48]	@ (800b078 <global_stdio_init.part.0+0x38>)
 800b048:	601a      	str	r2, [r3, #0]
 800b04a:	4620      	mov	r0, r4
 800b04c:	2200      	movs	r2, #0
 800b04e:	2104      	movs	r1, #4
 800b050:	f7ff ff94 	bl	800af7c <std>
 800b054:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b058:	2201      	movs	r2, #1
 800b05a:	2109      	movs	r1, #9
 800b05c:	f7ff ff8e 	bl	800af7c <std>
 800b060:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b064:	2202      	movs	r2, #2
 800b066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b06a:	2112      	movs	r1, #18
 800b06c:	f7ff bf86 	b.w	800af7c <std>
 800b070:	20000c98 	.word	0x20000c98
 800b074:	20000b60 	.word	0x20000b60
 800b078:	0800afe9 	.word	0x0800afe9

0800b07c <__sfp_lock_acquire>:
 800b07c:	4801      	ldr	r0, [pc, #4]	@ (800b084 <__sfp_lock_acquire+0x8>)
 800b07e:	f000 b954 	b.w	800b32a <__retarget_lock_acquire_recursive>
 800b082:	bf00      	nop
 800b084:	20000ca1 	.word	0x20000ca1

0800b088 <__sfp_lock_release>:
 800b088:	4801      	ldr	r0, [pc, #4]	@ (800b090 <__sfp_lock_release+0x8>)
 800b08a:	f000 b94f 	b.w	800b32c <__retarget_lock_release_recursive>
 800b08e:	bf00      	nop
 800b090:	20000ca1 	.word	0x20000ca1

0800b094 <__sinit>:
 800b094:	b510      	push	{r4, lr}
 800b096:	4604      	mov	r4, r0
 800b098:	f7ff fff0 	bl	800b07c <__sfp_lock_acquire>
 800b09c:	6a23      	ldr	r3, [r4, #32]
 800b09e:	b11b      	cbz	r3, 800b0a8 <__sinit+0x14>
 800b0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0a4:	f7ff bff0 	b.w	800b088 <__sfp_lock_release>
 800b0a8:	4b04      	ldr	r3, [pc, #16]	@ (800b0bc <__sinit+0x28>)
 800b0aa:	6223      	str	r3, [r4, #32]
 800b0ac:	4b04      	ldr	r3, [pc, #16]	@ (800b0c0 <__sinit+0x2c>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d1f5      	bne.n	800b0a0 <__sinit+0xc>
 800b0b4:	f7ff ffc4 	bl	800b040 <global_stdio_init.part.0>
 800b0b8:	e7f2      	b.n	800b0a0 <__sinit+0xc>
 800b0ba:	bf00      	nop
 800b0bc:	0800b001 	.word	0x0800b001
 800b0c0:	20000c98 	.word	0x20000c98

0800b0c4 <_fwalk_sglue>:
 800b0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0c8:	4607      	mov	r7, r0
 800b0ca:	4688      	mov	r8, r1
 800b0cc:	4614      	mov	r4, r2
 800b0ce:	2600      	movs	r6, #0
 800b0d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0d4:	f1b9 0901 	subs.w	r9, r9, #1
 800b0d8:	d505      	bpl.n	800b0e6 <_fwalk_sglue+0x22>
 800b0da:	6824      	ldr	r4, [r4, #0]
 800b0dc:	2c00      	cmp	r4, #0
 800b0de:	d1f7      	bne.n	800b0d0 <_fwalk_sglue+0xc>
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0e6:	89ab      	ldrh	r3, [r5, #12]
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d907      	bls.n	800b0fc <_fwalk_sglue+0x38>
 800b0ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	d003      	beq.n	800b0fc <_fwalk_sglue+0x38>
 800b0f4:	4629      	mov	r1, r5
 800b0f6:	4638      	mov	r0, r7
 800b0f8:	47c0      	blx	r8
 800b0fa:	4306      	orrs	r6, r0
 800b0fc:	3568      	adds	r5, #104	@ 0x68
 800b0fe:	e7e9      	b.n	800b0d4 <_fwalk_sglue+0x10>

0800b100 <__sread>:
 800b100:	b510      	push	{r4, lr}
 800b102:	460c      	mov	r4, r1
 800b104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b108:	f000 f89c 	bl	800b244 <_read_r>
 800b10c:	2800      	cmp	r0, #0
 800b10e:	bfab      	itete	ge
 800b110:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b112:	89a3      	ldrhlt	r3, [r4, #12]
 800b114:	181b      	addge	r3, r3, r0
 800b116:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b11a:	bfac      	ite	ge
 800b11c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b11e:	81a3      	strhlt	r3, [r4, #12]
 800b120:	bd10      	pop	{r4, pc}

0800b122 <__swrite>:
 800b122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b126:	461f      	mov	r7, r3
 800b128:	898b      	ldrh	r3, [r1, #12]
 800b12a:	05db      	lsls	r3, r3, #23
 800b12c:	4605      	mov	r5, r0
 800b12e:	460c      	mov	r4, r1
 800b130:	4616      	mov	r6, r2
 800b132:	d505      	bpl.n	800b140 <__swrite+0x1e>
 800b134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b138:	2302      	movs	r3, #2
 800b13a:	2200      	movs	r2, #0
 800b13c:	f000 f870 	bl	800b220 <_lseek_r>
 800b140:	89a3      	ldrh	r3, [r4, #12]
 800b142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b146:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b14a:	81a3      	strh	r3, [r4, #12]
 800b14c:	4632      	mov	r2, r6
 800b14e:	463b      	mov	r3, r7
 800b150:	4628      	mov	r0, r5
 800b152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b156:	f000 b8ab 	b.w	800b2b0 <_write_r>

0800b15a <__sseek>:
 800b15a:	b510      	push	{r4, lr}
 800b15c:	460c      	mov	r4, r1
 800b15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b162:	f000 f85d 	bl	800b220 <_lseek_r>
 800b166:	1c43      	adds	r3, r0, #1
 800b168:	89a3      	ldrh	r3, [r4, #12]
 800b16a:	bf15      	itete	ne
 800b16c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b16e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b172:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b176:	81a3      	strheq	r3, [r4, #12]
 800b178:	bf18      	it	ne
 800b17a:	81a3      	strhne	r3, [r4, #12]
 800b17c:	bd10      	pop	{r4, pc}

0800b17e <__sclose>:
 800b17e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b182:	f000 b83d 	b.w	800b200 <_close_r>

0800b186 <memset>:
 800b186:	4402      	add	r2, r0
 800b188:	4603      	mov	r3, r0
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d100      	bne.n	800b190 <memset+0xa>
 800b18e:	4770      	bx	lr
 800b190:	f803 1b01 	strb.w	r1, [r3], #1
 800b194:	e7f9      	b.n	800b18a <memset+0x4>

0800b196 <_raise_r>:
 800b196:	291f      	cmp	r1, #31
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	4605      	mov	r5, r0
 800b19c:	460c      	mov	r4, r1
 800b19e:	d904      	bls.n	800b1aa <_raise_r+0x14>
 800b1a0:	2316      	movs	r3, #22
 800b1a2:	6003      	str	r3, [r0, #0]
 800b1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a8:	bd38      	pop	{r3, r4, r5, pc}
 800b1aa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b1ac:	b112      	cbz	r2, 800b1b4 <_raise_r+0x1e>
 800b1ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1b2:	b94b      	cbnz	r3, 800b1c8 <_raise_r+0x32>
 800b1b4:	4628      	mov	r0, r5
 800b1b6:	f000 f869 	bl	800b28c <_getpid_r>
 800b1ba:	4622      	mov	r2, r4
 800b1bc:	4601      	mov	r1, r0
 800b1be:	4628      	mov	r0, r5
 800b1c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1c4:	f000 b850 	b.w	800b268 <_kill_r>
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d00a      	beq.n	800b1e2 <_raise_r+0x4c>
 800b1cc:	1c59      	adds	r1, r3, #1
 800b1ce:	d103      	bne.n	800b1d8 <_raise_r+0x42>
 800b1d0:	2316      	movs	r3, #22
 800b1d2:	6003      	str	r3, [r0, #0]
 800b1d4:	2001      	movs	r0, #1
 800b1d6:	e7e7      	b.n	800b1a8 <_raise_r+0x12>
 800b1d8:	2100      	movs	r1, #0
 800b1da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b1de:	4620      	mov	r0, r4
 800b1e0:	4798      	blx	r3
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	e7e0      	b.n	800b1a8 <_raise_r+0x12>
	...

0800b1e8 <raise>:
 800b1e8:	4b02      	ldr	r3, [pc, #8]	@ (800b1f4 <raise+0xc>)
 800b1ea:	4601      	mov	r1, r0
 800b1ec:	6818      	ldr	r0, [r3, #0]
 800b1ee:	f7ff bfd2 	b.w	800b196 <_raise_r>
 800b1f2:	bf00      	nop
 800b1f4:	20000038 	.word	0x20000038

0800b1f8 <_localeconv_r>:
 800b1f8:	4800      	ldr	r0, [pc, #0]	@ (800b1fc <_localeconv_r+0x4>)
 800b1fa:	4770      	bx	lr
 800b1fc:	20000178 	.word	0x20000178

0800b200 <_close_r>:
 800b200:	b538      	push	{r3, r4, r5, lr}
 800b202:	4d06      	ldr	r5, [pc, #24]	@ (800b21c <_close_r+0x1c>)
 800b204:	2300      	movs	r3, #0
 800b206:	4604      	mov	r4, r0
 800b208:	4608      	mov	r0, r1
 800b20a:	602b      	str	r3, [r5, #0]
 800b20c:	f7f6 fb72 	bl	80018f4 <_close>
 800b210:	1c43      	adds	r3, r0, #1
 800b212:	d102      	bne.n	800b21a <_close_r+0x1a>
 800b214:	682b      	ldr	r3, [r5, #0]
 800b216:	b103      	cbz	r3, 800b21a <_close_r+0x1a>
 800b218:	6023      	str	r3, [r4, #0]
 800b21a:	bd38      	pop	{r3, r4, r5, pc}
 800b21c:	20000c9c 	.word	0x20000c9c

0800b220 <_lseek_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4d07      	ldr	r5, [pc, #28]	@ (800b240 <_lseek_r+0x20>)
 800b224:	4604      	mov	r4, r0
 800b226:	4608      	mov	r0, r1
 800b228:	4611      	mov	r1, r2
 800b22a:	2200      	movs	r2, #0
 800b22c:	602a      	str	r2, [r5, #0]
 800b22e:	461a      	mov	r2, r3
 800b230:	f7f6 fb87 	bl	8001942 <_lseek>
 800b234:	1c43      	adds	r3, r0, #1
 800b236:	d102      	bne.n	800b23e <_lseek_r+0x1e>
 800b238:	682b      	ldr	r3, [r5, #0]
 800b23a:	b103      	cbz	r3, 800b23e <_lseek_r+0x1e>
 800b23c:	6023      	str	r3, [r4, #0]
 800b23e:	bd38      	pop	{r3, r4, r5, pc}
 800b240:	20000c9c 	.word	0x20000c9c

0800b244 <_read_r>:
 800b244:	b538      	push	{r3, r4, r5, lr}
 800b246:	4d07      	ldr	r5, [pc, #28]	@ (800b264 <_read_r+0x20>)
 800b248:	4604      	mov	r4, r0
 800b24a:	4608      	mov	r0, r1
 800b24c:	4611      	mov	r1, r2
 800b24e:	2200      	movs	r2, #0
 800b250:	602a      	str	r2, [r5, #0]
 800b252:	461a      	mov	r2, r3
 800b254:	f7f6 fb15 	bl	8001882 <_read>
 800b258:	1c43      	adds	r3, r0, #1
 800b25a:	d102      	bne.n	800b262 <_read_r+0x1e>
 800b25c:	682b      	ldr	r3, [r5, #0]
 800b25e:	b103      	cbz	r3, 800b262 <_read_r+0x1e>
 800b260:	6023      	str	r3, [r4, #0]
 800b262:	bd38      	pop	{r3, r4, r5, pc}
 800b264:	20000c9c 	.word	0x20000c9c

0800b268 <_kill_r>:
 800b268:	b538      	push	{r3, r4, r5, lr}
 800b26a:	4d07      	ldr	r5, [pc, #28]	@ (800b288 <_kill_r+0x20>)
 800b26c:	2300      	movs	r3, #0
 800b26e:	4604      	mov	r4, r0
 800b270:	4608      	mov	r0, r1
 800b272:	4611      	mov	r1, r2
 800b274:	602b      	str	r3, [r5, #0]
 800b276:	f7f6 fae9 	bl	800184c <_kill>
 800b27a:	1c43      	adds	r3, r0, #1
 800b27c:	d102      	bne.n	800b284 <_kill_r+0x1c>
 800b27e:	682b      	ldr	r3, [r5, #0]
 800b280:	b103      	cbz	r3, 800b284 <_kill_r+0x1c>
 800b282:	6023      	str	r3, [r4, #0]
 800b284:	bd38      	pop	{r3, r4, r5, pc}
 800b286:	bf00      	nop
 800b288:	20000c9c 	.word	0x20000c9c

0800b28c <_getpid_r>:
 800b28c:	f7f6 bad6 	b.w	800183c <_getpid>

0800b290 <_sbrk_r>:
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	4d06      	ldr	r5, [pc, #24]	@ (800b2ac <_sbrk_r+0x1c>)
 800b294:	2300      	movs	r3, #0
 800b296:	4604      	mov	r4, r0
 800b298:	4608      	mov	r0, r1
 800b29a:	602b      	str	r3, [r5, #0]
 800b29c:	f7f6 fb5e 	bl	800195c <_sbrk>
 800b2a0:	1c43      	adds	r3, r0, #1
 800b2a2:	d102      	bne.n	800b2aa <_sbrk_r+0x1a>
 800b2a4:	682b      	ldr	r3, [r5, #0]
 800b2a6:	b103      	cbz	r3, 800b2aa <_sbrk_r+0x1a>
 800b2a8:	6023      	str	r3, [r4, #0]
 800b2aa:	bd38      	pop	{r3, r4, r5, pc}
 800b2ac:	20000c9c 	.word	0x20000c9c

0800b2b0 <_write_r>:
 800b2b0:	b538      	push	{r3, r4, r5, lr}
 800b2b2:	4d07      	ldr	r5, [pc, #28]	@ (800b2d0 <_write_r+0x20>)
 800b2b4:	4604      	mov	r4, r0
 800b2b6:	4608      	mov	r0, r1
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	602a      	str	r2, [r5, #0]
 800b2be:	461a      	mov	r2, r3
 800b2c0:	f7f6 fafc 	bl	80018bc <_write>
 800b2c4:	1c43      	adds	r3, r0, #1
 800b2c6:	d102      	bne.n	800b2ce <_write_r+0x1e>
 800b2c8:	682b      	ldr	r3, [r5, #0]
 800b2ca:	b103      	cbz	r3, 800b2ce <_write_r+0x1e>
 800b2cc:	6023      	str	r3, [r4, #0]
 800b2ce:	bd38      	pop	{r3, r4, r5, pc}
 800b2d0:	20000c9c 	.word	0x20000c9c

0800b2d4 <__errno>:
 800b2d4:	4b01      	ldr	r3, [pc, #4]	@ (800b2dc <__errno+0x8>)
 800b2d6:	6818      	ldr	r0, [r3, #0]
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	20000038 	.word	0x20000038

0800b2e0 <__libc_init_array>:
 800b2e0:	b570      	push	{r4, r5, r6, lr}
 800b2e2:	4d0d      	ldr	r5, [pc, #52]	@ (800b318 <__libc_init_array+0x38>)
 800b2e4:	4c0d      	ldr	r4, [pc, #52]	@ (800b31c <__libc_init_array+0x3c>)
 800b2e6:	1b64      	subs	r4, r4, r5
 800b2e8:	10a4      	asrs	r4, r4, #2
 800b2ea:	2600      	movs	r6, #0
 800b2ec:	42a6      	cmp	r6, r4
 800b2ee:	d109      	bne.n	800b304 <__libc_init_array+0x24>
 800b2f0:	4d0b      	ldr	r5, [pc, #44]	@ (800b320 <__libc_init_array+0x40>)
 800b2f2:	4c0c      	ldr	r4, [pc, #48]	@ (800b324 <__libc_init_array+0x44>)
 800b2f4:	f001 fdb2 	bl	800ce5c <_init>
 800b2f8:	1b64      	subs	r4, r4, r5
 800b2fa:	10a4      	asrs	r4, r4, #2
 800b2fc:	2600      	movs	r6, #0
 800b2fe:	42a6      	cmp	r6, r4
 800b300:	d105      	bne.n	800b30e <__libc_init_array+0x2e>
 800b302:	bd70      	pop	{r4, r5, r6, pc}
 800b304:	f855 3b04 	ldr.w	r3, [r5], #4
 800b308:	4798      	blx	r3
 800b30a:	3601      	adds	r6, #1
 800b30c:	e7ee      	b.n	800b2ec <__libc_init_array+0xc>
 800b30e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b312:	4798      	blx	r3
 800b314:	3601      	adds	r6, #1
 800b316:	e7f2      	b.n	800b2fe <__libc_init_array+0x1e>
 800b318:	0800d214 	.word	0x0800d214
 800b31c:	0800d214 	.word	0x0800d214
 800b320:	0800d214 	.word	0x0800d214
 800b324:	0800d218 	.word	0x0800d218

0800b328 <__retarget_lock_init_recursive>:
 800b328:	4770      	bx	lr

0800b32a <__retarget_lock_acquire_recursive>:
 800b32a:	4770      	bx	lr

0800b32c <__retarget_lock_release_recursive>:
 800b32c:	4770      	bx	lr

0800b32e <memcpy>:
 800b32e:	440a      	add	r2, r1
 800b330:	4291      	cmp	r1, r2
 800b332:	f100 33ff 	add.w	r3, r0, #4294967295
 800b336:	d100      	bne.n	800b33a <memcpy+0xc>
 800b338:	4770      	bx	lr
 800b33a:	b510      	push	{r4, lr}
 800b33c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b340:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b344:	4291      	cmp	r1, r2
 800b346:	d1f9      	bne.n	800b33c <memcpy+0xe>
 800b348:	bd10      	pop	{r4, pc}

0800b34a <quorem>:
 800b34a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b34e:	6903      	ldr	r3, [r0, #16]
 800b350:	690c      	ldr	r4, [r1, #16]
 800b352:	42a3      	cmp	r3, r4
 800b354:	4607      	mov	r7, r0
 800b356:	db7e      	blt.n	800b456 <quorem+0x10c>
 800b358:	3c01      	subs	r4, #1
 800b35a:	f101 0814 	add.w	r8, r1, #20
 800b35e:	00a3      	lsls	r3, r4, #2
 800b360:	f100 0514 	add.w	r5, r0, #20
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b36a:	9301      	str	r3, [sp, #4]
 800b36c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b370:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b374:	3301      	adds	r3, #1
 800b376:	429a      	cmp	r2, r3
 800b378:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b37c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b380:	d32e      	bcc.n	800b3e0 <quorem+0x96>
 800b382:	f04f 0a00 	mov.w	sl, #0
 800b386:	46c4      	mov	ip, r8
 800b388:	46ae      	mov	lr, r5
 800b38a:	46d3      	mov	fp, sl
 800b38c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b390:	b298      	uxth	r0, r3
 800b392:	fb06 a000 	mla	r0, r6, r0, sl
 800b396:	0c02      	lsrs	r2, r0, #16
 800b398:	0c1b      	lsrs	r3, r3, #16
 800b39a:	fb06 2303 	mla	r3, r6, r3, r2
 800b39e:	f8de 2000 	ldr.w	r2, [lr]
 800b3a2:	b280      	uxth	r0, r0
 800b3a4:	b292      	uxth	r2, r2
 800b3a6:	1a12      	subs	r2, r2, r0
 800b3a8:	445a      	add	r2, fp
 800b3aa:	f8de 0000 	ldr.w	r0, [lr]
 800b3ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b3b8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b3bc:	b292      	uxth	r2, r2
 800b3be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b3c2:	45e1      	cmp	r9, ip
 800b3c4:	f84e 2b04 	str.w	r2, [lr], #4
 800b3c8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b3cc:	d2de      	bcs.n	800b38c <quorem+0x42>
 800b3ce:	9b00      	ldr	r3, [sp, #0]
 800b3d0:	58eb      	ldr	r3, [r5, r3]
 800b3d2:	b92b      	cbnz	r3, 800b3e0 <quorem+0x96>
 800b3d4:	9b01      	ldr	r3, [sp, #4]
 800b3d6:	3b04      	subs	r3, #4
 800b3d8:	429d      	cmp	r5, r3
 800b3da:	461a      	mov	r2, r3
 800b3dc:	d32f      	bcc.n	800b43e <quorem+0xf4>
 800b3de:	613c      	str	r4, [r7, #16]
 800b3e0:	4638      	mov	r0, r7
 800b3e2:	f001 f8c9 	bl	800c578 <__mcmp>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	db25      	blt.n	800b436 <quorem+0xec>
 800b3ea:	4629      	mov	r1, r5
 800b3ec:	2000      	movs	r0, #0
 800b3ee:	f858 2b04 	ldr.w	r2, [r8], #4
 800b3f2:	f8d1 c000 	ldr.w	ip, [r1]
 800b3f6:	fa1f fe82 	uxth.w	lr, r2
 800b3fa:	fa1f f38c 	uxth.w	r3, ip
 800b3fe:	eba3 030e 	sub.w	r3, r3, lr
 800b402:	4403      	add	r3, r0
 800b404:	0c12      	lsrs	r2, r2, #16
 800b406:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b40a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b40e:	b29b      	uxth	r3, r3
 800b410:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b414:	45c1      	cmp	r9, r8
 800b416:	f841 3b04 	str.w	r3, [r1], #4
 800b41a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b41e:	d2e6      	bcs.n	800b3ee <quorem+0xa4>
 800b420:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b424:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b428:	b922      	cbnz	r2, 800b434 <quorem+0xea>
 800b42a:	3b04      	subs	r3, #4
 800b42c:	429d      	cmp	r5, r3
 800b42e:	461a      	mov	r2, r3
 800b430:	d30b      	bcc.n	800b44a <quorem+0x100>
 800b432:	613c      	str	r4, [r7, #16]
 800b434:	3601      	adds	r6, #1
 800b436:	4630      	mov	r0, r6
 800b438:	b003      	add	sp, #12
 800b43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b43e:	6812      	ldr	r2, [r2, #0]
 800b440:	3b04      	subs	r3, #4
 800b442:	2a00      	cmp	r2, #0
 800b444:	d1cb      	bne.n	800b3de <quorem+0x94>
 800b446:	3c01      	subs	r4, #1
 800b448:	e7c6      	b.n	800b3d8 <quorem+0x8e>
 800b44a:	6812      	ldr	r2, [r2, #0]
 800b44c:	3b04      	subs	r3, #4
 800b44e:	2a00      	cmp	r2, #0
 800b450:	d1ef      	bne.n	800b432 <quorem+0xe8>
 800b452:	3c01      	subs	r4, #1
 800b454:	e7ea      	b.n	800b42c <quorem+0xe2>
 800b456:	2000      	movs	r0, #0
 800b458:	e7ee      	b.n	800b438 <quorem+0xee>
 800b45a:	0000      	movs	r0, r0
 800b45c:	0000      	movs	r0, r0
	...

0800b460 <_dtoa_r>:
 800b460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b464:	69c7      	ldr	r7, [r0, #28]
 800b466:	b097      	sub	sp, #92	@ 0x5c
 800b468:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b46c:	ec55 4b10 	vmov	r4, r5, d0
 800b470:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b472:	9107      	str	r1, [sp, #28]
 800b474:	4681      	mov	r9, r0
 800b476:	920c      	str	r2, [sp, #48]	@ 0x30
 800b478:	9311      	str	r3, [sp, #68]	@ 0x44
 800b47a:	b97f      	cbnz	r7, 800b49c <_dtoa_r+0x3c>
 800b47c:	2010      	movs	r0, #16
 800b47e:	f7ff f869 	bl	800a554 <malloc>
 800b482:	4602      	mov	r2, r0
 800b484:	f8c9 001c 	str.w	r0, [r9, #28]
 800b488:	b920      	cbnz	r0, 800b494 <_dtoa_r+0x34>
 800b48a:	4ba9      	ldr	r3, [pc, #676]	@ (800b730 <_dtoa_r+0x2d0>)
 800b48c:	21ef      	movs	r1, #239	@ 0xef
 800b48e:	48a9      	ldr	r0, [pc, #676]	@ (800b734 <_dtoa_r+0x2d4>)
 800b490:	f001 fa26 	bl	800c8e0 <__assert_func>
 800b494:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b498:	6007      	str	r7, [r0, #0]
 800b49a:	60c7      	str	r7, [r0, #12]
 800b49c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b4a0:	6819      	ldr	r1, [r3, #0]
 800b4a2:	b159      	cbz	r1, 800b4bc <_dtoa_r+0x5c>
 800b4a4:	685a      	ldr	r2, [r3, #4]
 800b4a6:	604a      	str	r2, [r1, #4]
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	4093      	lsls	r3, r2
 800b4ac:	608b      	str	r3, [r1, #8]
 800b4ae:	4648      	mov	r0, r9
 800b4b0:	f000 fe30 	bl	800c114 <_Bfree>
 800b4b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	601a      	str	r2, [r3, #0]
 800b4bc:	1e2b      	subs	r3, r5, #0
 800b4be:	bfb9      	ittee	lt
 800b4c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b4c4:	9305      	strlt	r3, [sp, #20]
 800b4c6:	2300      	movge	r3, #0
 800b4c8:	6033      	strge	r3, [r6, #0]
 800b4ca:	9f05      	ldr	r7, [sp, #20]
 800b4cc:	4b9a      	ldr	r3, [pc, #616]	@ (800b738 <_dtoa_r+0x2d8>)
 800b4ce:	bfbc      	itt	lt
 800b4d0:	2201      	movlt	r2, #1
 800b4d2:	6032      	strlt	r2, [r6, #0]
 800b4d4:	43bb      	bics	r3, r7
 800b4d6:	d112      	bne.n	800b4fe <_dtoa_r+0x9e>
 800b4d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b4da:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b4de:	6013      	str	r3, [r2, #0]
 800b4e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b4e4:	4323      	orrs	r3, r4
 800b4e6:	f000 855a 	beq.w	800bf9e <_dtoa_r+0xb3e>
 800b4ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b4ec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b74c <_dtoa_r+0x2ec>
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f000 855c 	beq.w	800bfae <_dtoa_r+0xb4e>
 800b4f6:	f10a 0303 	add.w	r3, sl, #3
 800b4fa:	f000 bd56 	b.w	800bfaa <_dtoa_r+0xb4a>
 800b4fe:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b502:	2200      	movs	r2, #0
 800b504:	ec51 0b17 	vmov	r0, r1, d7
 800b508:	2300      	movs	r3, #0
 800b50a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b50e:	f7f5 fadb 	bl	8000ac8 <__aeabi_dcmpeq>
 800b512:	4680      	mov	r8, r0
 800b514:	b158      	cbz	r0, 800b52e <_dtoa_r+0xce>
 800b516:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b518:	2301      	movs	r3, #1
 800b51a:	6013      	str	r3, [r2, #0]
 800b51c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b51e:	b113      	cbz	r3, 800b526 <_dtoa_r+0xc6>
 800b520:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b522:	4b86      	ldr	r3, [pc, #536]	@ (800b73c <_dtoa_r+0x2dc>)
 800b524:	6013      	str	r3, [r2, #0]
 800b526:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b750 <_dtoa_r+0x2f0>
 800b52a:	f000 bd40 	b.w	800bfae <_dtoa_r+0xb4e>
 800b52e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b532:	aa14      	add	r2, sp, #80	@ 0x50
 800b534:	a915      	add	r1, sp, #84	@ 0x54
 800b536:	4648      	mov	r0, r9
 800b538:	f001 f8ce 	bl	800c6d8 <__d2b>
 800b53c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b540:	9002      	str	r0, [sp, #8]
 800b542:	2e00      	cmp	r6, #0
 800b544:	d078      	beq.n	800b638 <_dtoa_r+0x1d8>
 800b546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b548:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b54c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b550:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b554:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b558:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b55c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b560:	4619      	mov	r1, r3
 800b562:	2200      	movs	r2, #0
 800b564:	4b76      	ldr	r3, [pc, #472]	@ (800b740 <_dtoa_r+0x2e0>)
 800b566:	f7f4 fe8f 	bl	8000288 <__aeabi_dsub>
 800b56a:	a36b      	add	r3, pc, #428	@ (adr r3, 800b718 <_dtoa_r+0x2b8>)
 800b56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b570:	f7f5 f842 	bl	80005f8 <__aeabi_dmul>
 800b574:	a36a      	add	r3, pc, #424	@ (adr r3, 800b720 <_dtoa_r+0x2c0>)
 800b576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57a:	f7f4 fe87 	bl	800028c <__adddf3>
 800b57e:	4604      	mov	r4, r0
 800b580:	4630      	mov	r0, r6
 800b582:	460d      	mov	r5, r1
 800b584:	f7f4 ffce 	bl	8000524 <__aeabi_i2d>
 800b588:	a367      	add	r3, pc, #412	@ (adr r3, 800b728 <_dtoa_r+0x2c8>)
 800b58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58e:	f7f5 f833 	bl	80005f8 <__aeabi_dmul>
 800b592:	4602      	mov	r2, r0
 800b594:	460b      	mov	r3, r1
 800b596:	4620      	mov	r0, r4
 800b598:	4629      	mov	r1, r5
 800b59a:	f7f4 fe77 	bl	800028c <__adddf3>
 800b59e:	4604      	mov	r4, r0
 800b5a0:	460d      	mov	r5, r1
 800b5a2:	f7f5 fad9 	bl	8000b58 <__aeabi_d2iz>
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	4607      	mov	r7, r0
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	f7f5 fa94 	bl	8000adc <__aeabi_dcmplt>
 800b5b4:	b140      	cbz	r0, 800b5c8 <_dtoa_r+0x168>
 800b5b6:	4638      	mov	r0, r7
 800b5b8:	f7f4 ffb4 	bl	8000524 <__aeabi_i2d>
 800b5bc:	4622      	mov	r2, r4
 800b5be:	462b      	mov	r3, r5
 800b5c0:	f7f5 fa82 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5c4:	b900      	cbnz	r0, 800b5c8 <_dtoa_r+0x168>
 800b5c6:	3f01      	subs	r7, #1
 800b5c8:	2f16      	cmp	r7, #22
 800b5ca:	d852      	bhi.n	800b672 <_dtoa_r+0x212>
 800b5cc:	4b5d      	ldr	r3, [pc, #372]	@ (800b744 <_dtoa_r+0x2e4>)
 800b5ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b5da:	f7f5 fa7f 	bl	8000adc <__aeabi_dcmplt>
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	d049      	beq.n	800b676 <_dtoa_r+0x216>
 800b5e2:	3f01      	subs	r7, #1
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b5e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b5ea:	1b9b      	subs	r3, r3, r6
 800b5ec:	1e5a      	subs	r2, r3, #1
 800b5ee:	bf45      	ittet	mi
 800b5f0:	f1c3 0301 	rsbmi	r3, r3, #1
 800b5f4:	9300      	strmi	r3, [sp, #0]
 800b5f6:	2300      	movpl	r3, #0
 800b5f8:	2300      	movmi	r3, #0
 800b5fa:	9206      	str	r2, [sp, #24]
 800b5fc:	bf54      	ite	pl
 800b5fe:	9300      	strpl	r3, [sp, #0]
 800b600:	9306      	strmi	r3, [sp, #24]
 800b602:	2f00      	cmp	r7, #0
 800b604:	db39      	blt.n	800b67a <_dtoa_r+0x21a>
 800b606:	9b06      	ldr	r3, [sp, #24]
 800b608:	970d      	str	r7, [sp, #52]	@ 0x34
 800b60a:	443b      	add	r3, r7
 800b60c:	9306      	str	r3, [sp, #24]
 800b60e:	2300      	movs	r3, #0
 800b610:	9308      	str	r3, [sp, #32]
 800b612:	9b07      	ldr	r3, [sp, #28]
 800b614:	2b09      	cmp	r3, #9
 800b616:	d863      	bhi.n	800b6e0 <_dtoa_r+0x280>
 800b618:	2b05      	cmp	r3, #5
 800b61a:	bfc4      	itt	gt
 800b61c:	3b04      	subgt	r3, #4
 800b61e:	9307      	strgt	r3, [sp, #28]
 800b620:	9b07      	ldr	r3, [sp, #28]
 800b622:	f1a3 0302 	sub.w	r3, r3, #2
 800b626:	bfcc      	ite	gt
 800b628:	2400      	movgt	r4, #0
 800b62a:	2401      	movle	r4, #1
 800b62c:	2b03      	cmp	r3, #3
 800b62e:	d863      	bhi.n	800b6f8 <_dtoa_r+0x298>
 800b630:	e8df f003 	tbb	[pc, r3]
 800b634:	2b375452 	.word	0x2b375452
 800b638:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b63c:	441e      	add	r6, r3
 800b63e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b642:	2b20      	cmp	r3, #32
 800b644:	bfc1      	itttt	gt
 800b646:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b64a:	409f      	lslgt	r7, r3
 800b64c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b650:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b654:	bfd6      	itet	le
 800b656:	f1c3 0320 	rsble	r3, r3, #32
 800b65a:	ea47 0003 	orrgt.w	r0, r7, r3
 800b65e:	fa04 f003 	lslle.w	r0, r4, r3
 800b662:	f7f4 ff4f 	bl	8000504 <__aeabi_ui2d>
 800b666:	2201      	movs	r2, #1
 800b668:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b66c:	3e01      	subs	r6, #1
 800b66e:	9212      	str	r2, [sp, #72]	@ 0x48
 800b670:	e776      	b.n	800b560 <_dtoa_r+0x100>
 800b672:	2301      	movs	r3, #1
 800b674:	e7b7      	b.n	800b5e6 <_dtoa_r+0x186>
 800b676:	9010      	str	r0, [sp, #64]	@ 0x40
 800b678:	e7b6      	b.n	800b5e8 <_dtoa_r+0x188>
 800b67a:	9b00      	ldr	r3, [sp, #0]
 800b67c:	1bdb      	subs	r3, r3, r7
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	427b      	negs	r3, r7
 800b682:	9308      	str	r3, [sp, #32]
 800b684:	2300      	movs	r3, #0
 800b686:	930d      	str	r3, [sp, #52]	@ 0x34
 800b688:	e7c3      	b.n	800b612 <_dtoa_r+0x1b2>
 800b68a:	2301      	movs	r3, #1
 800b68c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b68e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b690:	eb07 0b03 	add.w	fp, r7, r3
 800b694:	f10b 0301 	add.w	r3, fp, #1
 800b698:	2b01      	cmp	r3, #1
 800b69a:	9303      	str	r3, [sp, #12]
 800b69c:	bfb8      	it	lt
 800b69e:	2301      	movlt	r3, #1
 800b6a0:	e006      	b.n	800b6b0 <_dtoa_r+0x250>
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	dd28      	ble.n	800b6fe <_dtoa_r+0x29e>
 800b6ac:	469b      	mov	fp, r3
 800b6ae:	9303      	str	r3, [sp, #12]
 800b6b0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	2204      	movs	r2, #4
 800b6b8:	f102 0514 	add.w	r5, r2, #20
 800b6bc:	429d      	cmp	r5, r3
 800b6be:	d926      	bls.n	800b70e <_dtoa_r+0x2ae>
 800b6c0:	6041      	str	r1, [r0, #4]
 800b6c2:	4648      	mov	r0, r9
 800b6c4:	f000 fce6 	bl	800c094 <_Balloc>
 800b6c8:	4682      	mov	sl, r0
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	d142      	bne.n	800b754 <_dtoa_r+0x2f4>
 800b6ce:	4b1e      	ldr	r3, [pc, #120]	@ (800b748 <_dtoa_r+0x2e8>)
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	f240 11af 	movw	r1, #431	@ 0x1af
 800b6d6:	e6da      	b.n	800b48e <_dtoa_r+0x2e>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	e7e3      	b.n	800b6a4 <_dtoa_r+0x244>
 800b6dc:	2300      	movs	r3, #0
 800b6de:	e7d5      	b.n	800b68c <_dtoa_r+0x22c>
 800b6e0:	2401      	movs	r4, #1
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	9307      	str	r3, [sp, #28]
 800b6e6:	9409      	str	r4, [sp, #36]	@ 0x24
 800b6e8:	f04f 3bff 	mov.w	fp, #4294967295
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f8cd b00c 	str.w	fp, [sp, #12]
 800b6f2:	2312      	movs	r3, #18
 800b6f4:	920c      	str	r2, [sp, #48]	@ 0x30
 800b6f6:	e7db      	b.n	800b6b0 <_dtoa_r+0x250>
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6fc:	e7f4      	b.n	800b6e8 <_dtoa_r+0x288>
 800b6fe:	f04f 0b01 	mov.w	fp, #1
 800b702:	f8cd b00c 	str.w	fp, [sp, #12]
 800b706:	465b      	mov	r3, fp
 800b708:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b70c:	e7d0      	b.n	800b6b0 <_dtoa_r+0x250>
 800b70e:	3101      	adds	r1, #1
 800b710:	0052      	lsls	r2, r2, #1
 800b712:	e7d1      	b.n	800b6b8 <_dtoa_r+0x258>
 800b714:	f3af 8000 	nop.w
 800b718:	636f4361 	.word	0x636f4361
 800b71c:	3fd287a7 	.word	0x3fd287a7
 800b720:	8b60c8b3 	.word	0x8b60c8b3
 800b724:	3fc68a28 	.word	0x3fc68a28
 800b728:	509f79fb 	.word	0x509f79fb
 800b72c:	3fd34413 	.word	0x3fd34413
 800b730:	0800ced5 	.word	0x0800ced5
 800b734:	0800ceec 	.word	0x0800ceec
 800b738:	7ff00000 	.word	0x7ff00000
 800b73c:	0800cea5 	.word	0x0800cea5
 800b740:	3ff80000 	.word	0x3ff80000
 800b744:	0800d040 	.word	0x0800d040
 800b748:	0800cf44 	.word	0x0800cf44
 800b74c:	0800ced1 	.word	0x0800ced1
 800b750:	0800cea4 	.word	0x0800cea4
 800b754:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b758:	6018      	str	r0, [r3, #0]
 800b75a:	9b03      	ldr	r3, [sp, #12]
 800b75c:	2b0e      	cmp	r3, #14
 800b75e:	f200 80a1 	bhi.w	800b8a4 <_dtoa_r+0x444>
 800b762:	2c00      	cmp	r4, #0
 800b764:	f000 809e 	beq.w	800b8a4 <_dtoa_r+0x444>
 800b768:	2f00      	cmp	r7, #0
 800b76a:	dd33      	ble.n	800b7d4 <_dtoa_r+0x374>
 800b76c:	4b9c      	ldr	r3, [pc, #624]	@ (800b9e0 <_dtoa_r+0x580>)
 800b76e:	f007 020f 	and.w	r2, r7, #15
 800b772:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b776:	ed93 7b00 	vldr	d7, [r3]
 800b77a:	05f8      	lsls	r0, r7, #23
 800b77c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b780:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b784:	d516      	bpl.n	800b7b4 <_dtoa_r+0x354>
 800b786:	4b97      	ldr	r3, [pc, #604]	@ (800b9e4 <_dtoa_r+0x584>)
 800b788:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b78c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b790:	f7f5 f85c 	bl	800084c <__aeabi_ddiv>
 800b794:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b798:	f004 040f 	and.w	r4, r4, #15
 800b79c:	2603      	movs	r6, #3
 800b79e:	4d91      	ldr	r5, [pc, #580]	@ (800b9e4 <_dtoa_r+0x584>)
 800b7a0:	b954      	cbnz	r4, 800b7b8 <_dtoa_r+0x358>
 800b7a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b7a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7aa:	f7f5 f84f 	bl	800084c <__aeabi_ddiv>
 800b7ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b7b2:	e028      	b.n	800b806 <_dtoa_r+0x3a6>
 800b7b4:	2602      	movs	r6, #2
 800b7b6:	e7f2      	b.n	800b79e <_dtoa_r+0x33e>
 800b7b8:	07e1      	lsls	r1, r4, #31
 800b7ba:	d508      	bpl.n	800b7ce <_dtoa_r+0x36e>
 800b7bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b7c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b7c4:	f7f4 ff18 	bl	80005f8 <__aeabi_dmul>
 800b7c8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b7cc:	3601      	adds	r6, #1
 800b7ce:	1064      	asrs	r4, r4, #1
 800b7d0:	3508      	adds	r5, #8
 800b7d2:	e7e5      	b.n	800b7a0 <_dtoa_r+0x340>
 800b7d4:	f000 80af 	beq.w	800b936 <_dtoa_r+0x4d6>
 800b7d8:	427c      	negs	r4, r7
 800b7da:	4b81      	ldr	r3, [pc, #516]	@ (800b9e0 <_dtoa_r+0x580>)
 800b7dc:	4d81      	ldr	r5, [pc, #516]	@ (800b9e4 <_dtoa_r+0x584>)
 800b7de:	f004 020f 	and.w	r2, r4, #15
 800b7e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b7ee:	f7f4 ff03 	bl	80005f8 <__aeabi_dmul>
 800b7f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b7f6:	1124      	asrs	r4, r4, #4
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	2602      	movs	r6, #2
 800b7fc:	2c00      	cmp	r4, #0
 800b7fe:	f040 808f 	bne.w	800b920 <_dtoa_r+0x4c0>
 800b802:	2b00      	cmp	r3, #0
 800b804:	d1d3      	bne.n	800b7ae <_dtoa_r+0x34e>
 800b806:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b808:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f000 8094 	beq.w	800b93a <_dtoa_r+0x4da>
 800b812:	4b75      	ldr	r3, [pc, #468]	@ (800b9e8 <_dtoa_r+0x588>)
 800b814:	2200      	movs	r2, #0
 800b816:	4620      	mov	r0, r4
 800b818:	4629      	mov	r1, r5
 800b81a:	f7f5 f95f 	bl	8000adc <__aeabi_dcmplt>
 800b81e:	2800      	cmp	r0, #0
 800b820:	f000 808b 	beq.w	800b93a <_dtoa_r+0x4da>
 800b824:	9b03      	ldr	r3, [sp, #12]
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 8087 	beq.w	800b93a <_dtoa_r+0x4da>
 800b82c:	f1bb 0f00 	cmp.w	fp, #0
 800b830:	dd34      	ble.n	800b89c <_dtoa_r+0x43c>
 800b832:	4620      	mov	r0, r4
 800b834:	4b6d      	ldr	r3, [pc, #436]	@ (800b9ec <_dtoa_r+0x58c>)
 800b836:	2200      	movs	r2, #0
 800b838:	4629      	mov	r1, r5
 800b83a:	f7f4 fedd 	bl	80005f8 <__aeabi_dmul>
 800b83e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b842:	f107 38ff 	add.w	r8, r7, #4294967295
 800b846:	3601      	adds	r6, #1
 800b848:	465c      	mov	r4, fp
 800b84a:	4630      	mov	r0, r6
 800b84c:	f7f4 fe6a 	bl	8000524 <__aeabi_i2d>
 800b850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b854:	f7f4 fed0 	bl	80005f8 <__aeabi_dmul>
 800b858:	4b65      	ldr	r3, [pc, #404]	@ (800b9f0 <_dtoa_r+0x590>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	f7f4 fd16 	bl	800028c <__adddf3>
 800b860:	4605      	mov	r5, r0
 800b862:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b866:	2c00      	cmp	r4, #0
 800b868:	d16a      	bne.n	800b940 <_dtoa_r+0x4e0>
 800b86a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b86e:	4b61      	ldr	r3, [pc, #388]	@ (800b9f4 <_dtoa_r+0x594>)
 800b870:	2200      	movs	r2, #0
 800b872:	f7f4 fd09 	bl	8000288 <__aeabi_dsub>
 800b876:	4602      	mov	r2, r0
 800b878:	460b      	mov	r3, r1
 800b87a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b87e:	462a      	mov	r2, r5
 800b880:	4633      	mov	r3, r6
 800b882:	f7f5 f949 	bl	8000b18 <__aeabi_dcmpgt>
 800b886:	2800      	cmp	r0, #0
 800b888:	f040 8298 	bne.w	800bdbc <_dtoa_r+0x95c>
 800b88c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b890:	462a      	mov	r2, r5
 800b892:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b896:	f7f5 f921 	bl	8000adc <__aeabi_dcmplt>
 800b89a:	bb38      	cbnz	r0, 800b8ec <_dtoa_r+0x48c>
 800b89c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b8a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b8a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	f2c0 8157 	blt.w	800bb5a <_dtoa_r+0x6fa>
 800b8ac:	2f0e      	cmp	r7, #14
 800b8ae:	f300 8154 	bgt.w	800bb5a <_dtoa_r+0x6fa>
 800b8b2:	4b4b      	ldr	r3, [pc, #300]	@ (800b9e0 <_dtoa_r+0x580>)
 800b8b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b8b8:	ed93 7b00 	vldr	d7, [r3]
 800b8bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	ed8d 7b00 	vstr	d7, [sp]
 800b8c4:	f280 80e5 	bge.w	800ba92 <_dtoa_r+0x632>
 800b8c8:	9b03      	ldr	r3, [sp, #12]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	f300 80e1 	bgt.w	800ba92 <_dtoa_r+0x632>
 800b8d0:	d10c      	bne.n	800b8ec <_dtoa_r+0x48c>
 800b8d2:	4b48      	ldr	r3, [pc, #288]	@ (800b9f4 <_dtoa_r+0x594>)
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	ec51 0b17 	vmov	r0, r1, d7
 800b8da:	f7f4 fe8d 	bl	80005f8 <__aeabi_dmul>
 800b8de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8e2:	f7f5 f90f 	bl	8000b04 <__aeabi_dcmpge>
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	f000 8266 	beq.w	800bdb8 <_dtoa_r+0x958>
 800b8ec:	2400      	movs	r4, #0
 800b8ee:	4625      	mov	r5, r4
 800b8f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b8f2:	4656      	mov	r6, sl
 800b8f4:	ea6f 0803 	mvn.w	r8, r3
 800b8f8:	2700      	movs	r7, #0
 800b8fa:	4621      	mov	r1, r4
 800b8fc:	4648      	mov	r0, r9
 800b8fe:	f000 fc09 	bl	800c114 <_Bfree>
 800b902:	2d00      	cmp	r5, #0
 800b904:	f000 80bd 	beq.w	800ba82 <_dtoa_r+0x622>
 800b908:	b12f      	cbz	r7, 800b916 <_dtoa_r+0x4b6>
 800b90a:	42af      	cmp	r7, r5
 800b90c:	d003      	beq.n	800b916 <_dtoa_r+0x4b6>
 800b90e:	4639      	mov	r1, r7
 800b910:	4648      	mov	r0, r9
 800b912:	f000 fbff 	bl	800c114 <_Bfree>
 800b916:	4629      	mov	r1, r5
 800b918:	4648      	mov	r0, r9
 800b91a:	f000 fbfb 	bl	800c114 <_Bfree>
 800b91e:	e0b0      	b.n	800ba82 <_dtoa_r+0x622>
 800b920:	07e2      	lsls	r2, r4, #31
 800b922:	d505      	bpl.n	800b930 <_dtoa_r+0x4d0>
 800b924:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b928:	f7f4 fe66 	bl	80005f8 <__aeabi_dmul>
 800b92c:	3601      	adds	r6, #1
 800b92e:	2301      	movs	r3, #1
 800b930:	1064      	asrs	r4, r4, #1
 800b932:	3508      	adds	r5, #8
 800b934:	e762      	b.n	800b7fc <_dtoa_r+0x39c>
 800b936:	2602      	movs	r6, #2
 800b938:	e765      	b.n	800b806 <_dtoa_r+0x3a6>
 800b93a:	9c03      	ldr	r4, [sp, #12]
 800b93c:	46b8      	mov	r8, r7
 800b93e:	e784      	b.n	800b84a <_dtoa_r+0x3ea>
 800b940:	4b27      	ldr	r3, [pc, #156]	@ (800b9e0 <_dtoa_r+0x580>)
 800b942:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b944:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b948:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b94c:	4454      	add	r4, sl
 800b94e:	2900      	cmp	r1, #0
 800b950:	d054      	beq.n	800b9fc <_dtoa_r+0x59c>
 800b952:	4929      	ldr	r1, [pc, #164]	@ (800b9f8 <_dtoa_r+0x598>)
 800b954:	2000      	movs	r0, #0
 800b956:	f7f4 ff79 	bl	800084c <__aeabi_ddiv>
 800b95a:	4633      	mov	r3, r6
 800b95c:	462a      	mov	r2, r5
 800b95e:	f7f4 fc93 	bl	8000288 <__aeabi_dsub>
 800b962:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b966:	4656      	mov	r6, sl
 800b968:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b96c:	f7f5 f8f4 	bl	8000b58 <__aeabi_d2iz>
 800b970:	4605      	mov	r5, r0
 800b972:	f7f4 fdd7 	bl	8000524 <__aeabi_i2d>
 800b976:	4602      	mov	r2, r0
 800b978:	460b      	mov	r3, r1
 800b97a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b97e:	f7f4 fc83 	bl	8000288 <__aeabi_dsub>
 800b982:	3530      	adds	r5, #48	@ 0x30
 800b984:	4602      	mov	r2, r0
 800b986:	460b      	mov	r3, r1
 800b988:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b98c:	f806 5b01 	strb.w	r5, [r6], #1
 800b990:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b994:	f7f5 f8a2 	bl	8000adc <__aeabi_dcmplt>
 800b998:	2800      	cmp	r0, #0
 800b99a:	d172      	bne.n	800ba82 <_dtoa_r+0x622>
 800b99c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9a0:	4911      	ldr	r1, [pc, #68]	@ (800b9e8 <_dtoa_r+0x588>)
 800b9a2:	2000      	movs	r0, #0
 800b9a4:	f7f4 fc70 	bl	8000288 <__aeabi_dsub>
 800b9a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b9ac:	f7f5 f896 	bl	8000adc <__aeabi_dcmplt>
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	f040 80b4 	bne.w	800bb1e <_dtoa_r+0x6be>
 800b9b6:	42a6      	cmp	r6, r4
 800b9b8:	f43f af70 	beq.w	800b89c <_dtoa_r+0x43c>
 800b9bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b9c0:	4b0a      	ldr	r3, [pc, #40]	@ (800b9ec <_dtoa_r+0x58c>)
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f7f4 fe18 	bl	80005f8 <__aeabi_dmul>
 800b9c8:	4b08      	ldr	r3, [pc, #32]	@ (800b9ec <_dtoa_r+0x58c>)
 800b9ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9d4:	f7f4 fe10 	bl	80005f8 <__aeabi_dmul>
 800b9d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9dc:	e7c4      	b.n	800b968 <_dtoa_r+0x508>
 800b9de:	bf00      	nop
 800b9e0:	0800d040 	.word	0x0800d040
 800b9e4:	0800d018 	.word	0x0800d018
 800b9e8:	3ff00000 	.word	0x3ff00000
 800b9ec:	40240000 	.word	0x40240000
 800b9f0:	401c0000 	.word	0x401c0000
 800b9f4:	40140000 	.word	0x40140000
 800b9f8:	3fe00000 	.word	0x3fe00000
 800b9fc:	4631      	mov	r1, r6
 800b9fe:	4628      	mov	r0, r5
 800ba00:	f7f4 fdfa 	bl	80005f8 <__aeabi_dmul>
 800ba04:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ba08:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ba0a:	4656      	mov	r6, sl
 800ba0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba10:	f7f5 f8a2 	bl	8000b58 <__aeabi_d2iz>
 800ba14:	4605      	mov	r5, r0
 800ba16:	f7f4 fd85 	bl	8000524 <__aeabi_i2d>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba22:	f7f4 fc31 	bl	8000288 <__aeabi_dsub>
 800ba26:	3530      	adds	r5, #48	@ 0x30
 800ba28:	f806 5b01 	strb.w	r5, [r6], #1
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	460b      	mov	r3, r1
 800ba30:	42a6      	cmp	r6, r4
 800ba32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba36:	f04f 0200 	mov.w	r2, #0
 800ba3a:	d124      	bne.n	800ba86 <_dtoa_r+0x626>
 800ba3c:	4baf      	ldr	r3, [pc, #700]	@ (800bcfc <_dtoa_r+0x89c>)
 800ba3e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ba42:	f7f4 fc23 	bl	800028c <__adddf3>
 800ba46:	4602      	mov	r2, r0
 800ba48:	460b      	mov	r3, r1
 800ba4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba4e:	f7f5 f863 	bl	8000b18 <__aeabi_dcmpgt>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	d163      	bne.n	800bb1e <_dtoa_r+0x6be>
 800ba56:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ba5a:	49a8      	ldr	r1, [pc, #672]	@ (800bcfc <_dtoa_r+0x89c>)
 800ba5c:	2000      	movs	r0, #0
 800ba5e:	f7f4 fc13 	bl	8000288 <__aeabi_dsub>
 800ba62:	4602      	mov	r2, r0
 800ba64:	460b      	mov	r3, r1
 800ba66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba6a:	f7f5 f837 	bl	8000adc <__aeabi_dcmplt>
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	f43f af14 	beq.w	800b89c <_dtoa_r+0x43c>
 800ba74:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ba76:	1e73      	subs	r3, r6, #1
 800ba78:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ba7e:	2b30      	cmp	r3, #48	@ 0x30
 800ba80:	d0f8      	beq.n	800ba74 <_dtoa_r+0x614>
 800ba82:	4647      	mov	r7, r8
 800ba84:	e03b      	b.n	800bafe <_dtoa_r+0x69e>
 800ba86:	4b9e      	ldr	r3, [pc, #632]	@ (800bd00 <_dtoa_r+0x8a0>)
 800ba88:	f7f4 fdb6 	bl	80005f8 <__aeabi_dmul>
 800ba8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba90:	e7bc      	b.n	800ba0c <_dtoa_r+0x5ac>
 800ba92:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ba96:	4656      	mov	r6, sl
 800ba98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	4629      	mov	r1, r5
 800baa0:	f7f4 fed4 	bl	800084c <__aeabi_ddiv>
 800baa4:	f7f5 f858 	bl	8000b58 <__aeabi_d2iz>
 800baa8:	4680      	mov	r8, r0
 800baaa:	f7f4 fd3b 	bl	8000524 <__aeabi_i2d>
 800baae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bab2:	f7f4 fda1 	bl	80005f8 <__aeabi_dmul>
 800bab6:	4602      	mov	r2, r0
 800bab8:	460b      	mov	r3, r1
 800baba:	4620      	mov	r0, r4
 800babc:	4629      	mov	r1, r5
 800babe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bac2:	f7f4 fbe1 	bl	8000288 <__aeabi_dsub>
 800bac6:	f806 4b01 	strb.w	r4, [r6], #1
 800baca:	9d03      	ldr	r5, [sp, #12]
 800bacc:	eba6 040a 	sub.w	r4, r6, sl
 800bad0:	42a5      	cmp	r5, r4
 800bad2:	4602      	mov	r2, r0
 800bad4:	460b      	mov	r3, r1
 800bad6:	d133      	bne.n	800bb40 <_dtoa_r+0x6e0>
 800bad8:	f7f4 fbd8 	bl	800028c <__adddf3>
 800badc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bae0:	4604      	mov	r4, r0
 800bae2:	460d      	mov	r5, r1
 800bae4:	f7f5 f818 	bl	8000b18 <__aeabi_dcmpgt>
 800bae8:	b9c0      	cbnz	r0, 800bb1c <_dtoa_r+0x6bc>
 800baea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800baee:	4620      	mov	r0, r4
 800baf0:	4629      	mov	r1, r5
 800baf2:	f7f4 ffe9 	bl	8000ac8 <__aeabi_dcmpeq>
 800baf6:	b110      	cbz	r0, 800bafe <_dtoa_r+0x69e>
 800baf8:	f018 0f01 	tst.w	r8, #1
 800bafc:	d10e      	bne.n	800bb1c <_dtoa_r+0x6bc>
 800bafe:	9902      	ldr	r1, [sp, #8]
 800bb00:	4648      	mov	r0, r9
 800bb02:	f000 fb07 	bl	800c114 <_Bfree>
 800bb06:	2300      	movs	r3, #0
 800bb08:	7033      	strb	r3, [r6, #0]
 800bb0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bb0c:	3701      	adds	r7, #1
 800bb0e:	601f      	str	r7, [r3, #0]
 800bb10:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	f000 824b 	beq.w	800bfae <_dtoa_r+0xb4e>
 800bb18:	601e      	str	r6, [r3, #0]
 800bb1a:	e248      	b.n	800bfae <_dtoa_r+0xb4e>
 800bb1c:	46b8      	mov	r8, r7
 800bb1e:	4633      	mov	r3, r6
 800bb20:	461e      	mov	r6, r3
 800bb22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb26:	2a39      	cmp	r2, #57	@ 0x39
 800bb28:	d106      	bne.n	800bb38 <_dtoa_r+0x6d8>
 800bb2a:	459a      	cmp	sl, r3
 800bb2c:	d1f8      	bne.n	800bb20 <_dtoa_r+0x6c0>
 800bb2e:	2230      	movs	r2, #48	@ 0x30
 800bb30:	f108 0801 	add.w	r8, r8, #1
 800bb34:	f88a 2000 	strb.w	r2, [sl]
 800bb38:	781a      	ldrb	r2, [r3, #0]
 800bb3a:	3201      	adds	r2, #1
 800bb3c:	701a      	strb	r2, [r3, #0]
 800bb3e:	e7a0      	b.n	800ba82 <_dtoa_r+0x622>
 800bb40:	4b6f      	ldr	r3, [pc, #444]	@ (800bd00 <_dtoa_r+0x8a0>)
 800bb42:	2200      	movs	r2, #0
 800bb44:	f7f4 fd58 	bl	80005f8 <__aeabi_dmul>
 800bb48:	2200      	movs	r2, #0
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	4604      	mov	r4, r0
 800bb4e:	460d      	mov	r5, r1
 800bb50:	f7f4 ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb54:	2800      	cmp	r0, #0
 800bb56:	d09f      	beq.n	800ba98 <_dtoa_r+0x638>
 800bb58:	e7d1      	b.n	800bafe <_dtoa_r+0x69e>
 800bb5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb5c:	2a00      	cmp	r2, #0
 800bb5e:	f000 80ea 	beq.w	800bd36 <_dtoa_r+0x8d6>
 800bb62:	9a07      	ldr	r2, [sp, #28]
 800bb64:	2a01      	cmp	r2, #1
 800bb66:	f300 80cd 	bgt.w	800bd04 <_dtoa_r+0x8a4>
 800bb6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bb6c:	2a00      	cmp	r2, #0
 800bb6e:	f000 80c1 	beq.w	800bcf4 <_dtoa_r+0x894>
 800bb72:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bb76:	9c08      	ldr	r4, [sp, #32]
 800bb78:	9e00      	ldr	r6, [sp, #0]
 800bb7a:	9a00      	ldr	r2, [sp, #0]
 800bb7c:	441a      	add	r2, r3
 800bb7e:	9200      	str	r2, [sp, #0]
 800bb80:	9a06      	ldr	r2, [sp, #24]
 800bb82:	2101      	movs	r1, #1
 800bb84:	441a      	add	r2, r3
 800bb86:	4648      	mov	r0, r9
 800bb88:	9206      	str	r2, [sp, #24]
 800bb8a:	f000 fb77 	bl	800c27c <__i2b>
 800bb8e:	4605      	mov	r5, r0
 800bb90:	b166      	cbz	r6, 800bbac <_dtoa_r+0x74c>
 800bb92:	9b06      	ldr	r3, [sp, #24]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	dd09      	ble.n	800bbac <_dtoa_r+0x74c>
 800bb98:	42b3      	cmp	r3, r6
 800bb9a:	9a00      	ldr	r2, [sp, #0]
 800bb9c:	bfa8      	it	ge
 800bb9e:	4633      	movge	r3, r6
 800bba0:	1ad2      	subs	r2, r2, r3
 800bba2:	9200      	str	r2, [sp, #0]
 800bba4:	9a06      	ldr	r2, [sp, #24]
 800bba6:	1af6      	subs	r6, r6, r3
 800bba8:	1ad3      	subs	r3, r2, r3
 800bbaa:	9306      	str	r3, [sp, #24]
 800bbac:	9b08      	ldr	r3, [sp, #32]
 800bbae:	b30b      	cbz	r3, 800bbf4 <_dtoa_r+0x794>
 800bbb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	f000 80c6 	beq.w	800bd44 <_dtoa_r+0x8e4>
 800bbb8:	2c00      	cmp	r4, #0
 800bbba:	f000 80c0 	beq.w	800bd3e <_dtoa_r+0x8de>
 800bbbe:	4629      	mov	r1, r5
 800bbc0:	4622      	mov	r2, r4
 800bbc2:	4648      	mov	r0, r9
 800bbc4:	f000 fc12 	bl	800c3ec <__pow5mult>
 800bbc8:	9a02      	ldr	r2, [sp, #8]
 800bbca:	4601      	mov	r1, r0
 800bbcc:	4605      	mov	r5, r0
 800bbce:	4648      	mov	r0, r9
 800bbd0:	f000 fb6a 	bl	800c2a8 <__multiply>
 800bbd4:	9902      	ldr	r1, [sp, #8]
 800bbd6:	4680      	mov	r8, r0
 800bbd8:	4648      	mov	r0, r9
 800bbda:	f000 fa9b 	bl	800c114 <_Bfree>
 800bbde:	9b08      	ldr	r3, [sp, #32]
 800bbe0:	1b1b      	subs	r3, r3, r4
 800bbe2:	9308      	str	r3, [sp, #32]
 800bbe4:	f000 80b1 	beq.w	800bd4a <_dtoa_r+0x8ea>
 800bbe8:	9a08      	ldr	r2, [sp, #32]
 800bbea:	4641      	mov	r1, r8
 800bbec:	4648      	mov	r0, r9
 800bbee:	f000 fbfd 	bl	800c3ec <__pow5mult>
 800bbf2:	9002      	str	r0, [sp, #8]
 800bbf4:	2101      	movs	r1, #1
 800bbf6:	4648      	mov	r0, r9
 800bbf8:	f000 fb40 	bl	800c27c <__i2b>
 800bbfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bbfe:	4604      	mov	r4, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	f000 81d8 	beq.w	800bfb6 <_dtoa_r+0xb56>
 800bc06:	461a      	mov	r2, r3
 800bc08:	4601      	mov	r1, r0
 800bc0a:	4648      	mov	r0, r9
 800bc0c:	f000 fbee 	bl	800c3ec <__pow5mult>
 800bc10:	9b07      	ldr	r3, [sp, #28]
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	4604      	mov	r4, r0
 800bc16:	f300 809f 	bgt.w	800bd58 <_dtoa_r+0x8f8>
 800bc1a:	9b04      	ldr	r3, [sp, #16]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f040 8097 	bne.w	800bd50 <_dtoa_r+0x8f0>
 800bc22:	9b05      	ldr	r3, [sp, #20]
 800bc24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f040 8093 	bne.w	800bd54 <_dtoa_r+0x8f4>
 800bc2e:	9b05      	ldr	r3, [sp, #20]
 800bc30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc34:	0d1b      	lsrs	r3, r3, #20
 800bc36:	051b      	lsls	r3, r3, #20
 800bc38:	b133      	cbz	r3, 800bc48 <_dtoa_r+0x7e8>
 800bc3a:	9b00      	ldr	r3, [sp, #0]
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	9b06      	ldr	r3, [sp, #24]
 800bc42:	3301      	adds	r3, #1
 800bc44:	9306      	str	r3, [sp, #24]
 800bc46:	2301      	movs	r3, #1
 800bc48:	9308      	str	r3, [sp, #32]
 800bc4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f000 81b8 	beq.w	800bfc2 <_dtoa_r+0xb62>
 800bc52:	6923      	ldr	r3, [r4, #16]
 800bc54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bc58:	6918      	ldr	r0, [r3, #16]
 800bc5a:	f000 fac3 	bl	800c1e4 <__hi0bits>
 800bc5e:	f1c0 0020 	rsb	r0, r0, #32
 800bc62:	9b06      	ldr	r3, [sp, #24]
 800bc64:	4418      	add	r0, r3
 800bc66:	f010 001f 	ands.w	r0, r0, #31
 800bc6a:	f000 8082 	beq.w	800bd72 <_dtoa_r+0x912>
 800bc6e:	f1c0 0320 	rsb	r3, r0, #32
 800bc72:	2b04      	cmp	r3, #4
 800bc74:	dd73      	ble.n	800bd5e <_dtoa_r+0x8fe>
 800bc76:	9b00      	ldr	r3, [sp, #0]
 800bc78:	f1c0 001c 	rsb	r0, r0, #28
 800bc7c:	4403      	add	r3, r0
 800bc7e:	9300      	str	r3, [sp, #0]
 800bc80:	9b06      	ldr	r3, [sp, #24]
 800bc82:	4403      	add	r3, r0
 800bc84:	4406      	add	r6, r0
 800bc86:	9306      	str	r3, [sp, #24]
 800bc88:	9b00      	ldr	r3, [sp, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	dd05      	ble.n	800bc9a <_dtoa_r+0x83a>
 800bc8e:	9902      	ldr	r1, [sp, #8]
 800bc90:	461a      	mov	r2, r3
 800bc92:	4648      	mov	r0, r9
 800bc94:	f000 fc04 	bl	800c4a0 <__lshift>
 800bc98:	9002      	str	r0, [sp, #8]
 800bc9a:	9b06      	ldr	r3, [sp, #24]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	dd05      	ble.n	800bcac <_dtoa_r+0x84c>
 800bca0:	4621      	mov	r1, r4
 800bca2:	461a      	mov	r2, r3
 800bca4:	4648      	mov	r0, r9
 800bca6:	f000 fbfb 	bl	800c4a0 <__lshift>
 800bcaa:	4604      	mov	r4, r0
 800bcac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d061      	beq.n	800bd76 <_dtoa_r+0x916>
 800bcb2:	9802      	ldr	r0, [sp, #8]
 800bcb4:	4621      	mov	r1, r4
 800bcb6:	f000 fc5f 	bl	800c578 <__mcmp>
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	da5b      	bge.n	800bd76 <_dtoa_r+0x916>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	9902      	ldr	r1, [sp, #8]
 800bcc2:	220a      	movs	r2, #10
 800bcc4:	4648      	mov	r0, r9
 800bcc6:	f000 fa47 	bl	800c158 <__multadd>
 800bcca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bccc:	9002      	str	r0, [sp, #8]
 800bcce:	f107 38ff 	add.w	r8, r7, #4294967295
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f000 8177 	beq.w	800bfc6 <_dtoa_r+0xb66>
 800bcd8:	4629      	mov	r1, r5
 800bcda:	2300      	movs	r3, #0
 800bcdc:	220a      	movs	r2, #10
 800bcde:	4648      	mov	r0, r9
 800bce0:	f000 fa3a 	bl	800c158 <__multadd>
 800bce4:	f1bb 0f00 	cmp.w	fp, #0
 800bce8:	4605      	mov	r5, r0
 800bcea:	dc6f      	bgt.n	800bdcc <_dtoa_r+0x96c>
 800bcec:	9b07      	ldr	r3, [sp, #28]
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	dc49      	bgt.n	800bd86 <_dtoa_r+0x926>
 800bcf2:	e06b      	b.n	800bdcc <_dtoa_r+0x96c>
 800bcf4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bcf6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bcfa:	e73c      	b.n	800bb76 <_dtoa_r+0x716>
 800bcfc:	3fe00000 	.word	0x3fe00000
 800bd00:	40240000 	.word	0x40240000
 800bd04:	9b03      	ldr	r3, [sp, #12]
 800bd06:	1e5c      	subs	r4, r3, #1
 800bd08:	9b08      	ldr	r3, [sp, #32]
 800bd0a:	42a3      	cmp	r3, r4
 800bd0c:	db09      	blt.n	800bd22 <_dtoa_r+0x8c2>
 800bd0e:	1b1c      	subs	r4, r3, r4
 800bd10:	9b03      	ldr	r3, [sp, #12]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	f6bf af30 	bge.w	800bb78 <_dtoa_r+0x718>
 800bd18:	9b00      	ldr	r3, [sp, #0]
 800bd1a:	9a03      	ldr	r2, [sp, #12]
 800bd1c:	1a9e      	subs	r6, r3, r2
 800bd1e:	2300      	movs	r3, #0
 800bd20:	e72b      	b.n	800bb7a <_dtoa_r+0x71a>
 800bd22:	9b08      	ldr	r3, [sp, #32]
 800bd24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bd26:	9408      	str	r4, [sp, #32]
 800bd28:	1ae3      	subs	r3, r4, r3
 800bd2a:	441a      	add	r2, r3
 800bd2c:	9e00      	ldr	r6, [sp, #0]
 800bd2e:	9b03      	ldr	r3, [sp, #12]
 800bd30:	920d      	str	r2, [sp, #52]	@ 0x34
 800bd32:	2400      	movs	r4, #0
 800bd34:	e721      	b.n	800bb7a <_dtoa_r+0x71a>
 800bd36:	9c08      	ldr	r4, [sp, #32]
 800bd38:	9e00      	ldr	r6, [sp, #0]
 800bd3a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800bd3c:	e728      	b.n	800bb90 <_dtoa_r+0x730>
 800bd3e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800bd42:	e751      	b.n	800bbe8 <_dtoa_r+0x788>
 800bd44:	9a08      	ldr	r2, [sp, #32]
 800bd46:	9902      	ldr	r1, [sp, #8]
 800bd48:	e750      	b.n	800bbec <_dtoa_r+0x78c>
 800bd4a:	f8cd 8008 	str.w	r8, [sp, #8]
 800bd4e:	e751      	b.n	800bbf4 <_dtoa_r+0x794>
 800bd50:	2300      	movs	r3, #0
 800bd52:	e779      	b.n	800bc48 <_dtoa_r+0x7e8>
 800bd54:	9b04      	ldr	r3, [sp, #16]
 800bd56:	e777      	b.n	800bc48 <_dtoa_r+0x7e8>
 800bd58:	2300      	movs	r3, #0
 800bd5a:	9308      	str	r3, [sp, #32]
 800bd5c:	e779      	b.n	800bc52 <_dtoa_r+0x7f2>
 800bd5e:	d093      	beq.n	800bc88 <_dtoa_r+0x828>
 800bd60:	9a00      	ldr	r2, [sp, #0]
 800bd62:	331c      	adds	r3, #28
 800bd64:	441a      	add	r2, r3
 800bd66:	9200      	str	r2, [sp, #0]
 800bd68:	9a06      	ldr	r2, [sp, #24]
 800bd6a:	441a      	add	r2, r3
 800bd6c:	441e      	add	r6, r3
 800bd6e:	9206      	str	r2, [sp, #24]
 800bd70:	e78a      	b.n	800bc88 <_dtoa_r+0x828>
 800bd72:	4603      	mov	r3, r0
 800bd74:	e7f4      	b.n	800bd60 <_dtoa_r+0x900>
 800bd76:	9b03      	ldr	r3, [sp, #12]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	46b8      	mov	r8, r7
 800bd7c:	dc20      	bgt.n	800bdc0 <_dtoa_r+0x960>
 800bd7e:	469b      	mov	fp, r3
 800bd80:	9b07      	ldr	r3, [sp, #28]
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	dd1e      	ble.n	800bdc4 <_dtoa_r+0x964>
 800bd86:	f1bb 0f00 	cmp.w	fp, #0
 800bd8a:	f47f adb1 	bne.w	800b8f0 <_dtoa_r+0x490>
 800bd8e:	4621      	mov	r1, r4
 800bd90:	465b      	mov	r3, fp
 800bd92:	2205      	movs	r2, #5
 800bd94:	4648      	mov	r0, r9
 800bd96:	f000 f9df 	bl	800c158 <__multadd>
 800bd9a:	4601      	mov	r1, r0
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	9802      	ldr	r0, [sp, #8]
 800bda0:	f000 fbea 	bl	800c578 <__mcmp>
 800bda4:	2800      	cmp	r0, #0
 800bda6:	f77f ada3 	ble.w	800b8f0 <_dtoa_r+0x490>
 800bdaa:	4656      	mov	r6, sl
 800bdac:	2331      	movs	r3, #49	@ 0x31
 800bdae:	f806 3b01 	strb.w	r3, [r6], #1
 800bdb2:	f108 0801 	add.w	r8, r8, #1
 800bdb6:	e59f      	b.n	800b8f8 <_dtoa_r+0x498>
 800bdb8:	9c03      	ldr	r4, [sp, #12]
 800bdba:	46b8      	mov	r8, r7
 800bdbc:	4625      	mov	r5, r4
 800bdbe:	e7f4      	b.n	800bdaa <_dtoa_r+0x94a>
 800bdc0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800bdc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	f000 8101 	beq.w	800bfce <_dtoa_r+0xb6e>
 800bdcc:	2e00      	cmp	r6, #0
 800bdce:	dd05      	ble.n	800bddc <_dtoa_r+0x97c>
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	4632      	mov	r2, r6
 800bdd4:	4648      	mov	r0, r9
 800bdd6:	f000 fb63 	bl	800c4a0 <__lshift>
 800bdda:	4605      	mov	r5, r0
 800bddc:	9b08      	ldr	r3, [sp, #32]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d05c      	beq.n	800be9c <_dtoa_r+0xa3c>
 800bde2:	6869      	ldr	r1, [r5, #4]
 800bde4:	4648      	mov	r0, r9
 800bde6:	f000 f955 	bl	800c094 <_Balloc>
 800bdea:	4606      	mov	r6, r0
 800bdec:	b928      	cbnz	r0, 800bdfa <_dtoa_r+0x99a>
 800bdee:	4b82      	ldr	r3, [pc, #520]	@ (800bff8 <_dtoa_r+0xb98>)
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bdf6:	f7ff bb4a 	b.w	800b48e <_dtoa_r+0x2e>
 800bdfa:	692a      	ldr	r2, [r5, #16]
 800bdfc:	3202      	adds	r2, #2
 800bdfe:	0092      	lsls	r2, r2, #2
 800be00:	f105 010c 	add.w	r1, r5, #12
 800be04:	300c      	adds	r0, #12
 800be06:	f7ff fa92 	bl	800b32e <memcpy>
 800be0a:	2201      	movs	r2, #1
 800be0c:	4631      	mov	r1, r6
 800be0e:	4648      	mov	r0, r9
 800be10:	f000 fb46 	bl	800c4a0 <__lshift>
 800be14:	f10a 0301 	add.w	r3, sl, #1
 800be18:	9300      	str	r3, [sp, #0]
 800be1a:	eb0a 030b 	add.w	r3, sl, fp
 800be1e:	9308      	str	r3, [sp, #32]
 800be20:	9b04      	ldr	r3, [sp, #16]
 800be22:	f003 0301 	and.w	r3, r3, #1
 800be26:	462f      	mov	r7, r5
 800be28:	9306      	str	r3, [sp, #24]
 800be2a:	4605      	mov	r5, r0
 800be2c:	9b00      	ldr	r3, [sp, #0]
 800be2e:	9802      	ldr	r0, [sp, #8]
 800be30:	4621      	mov	r1, r4
 800be32:	f103 3bff 	add.w	fp, r3, #4294967295
 800be36:	f7ff fa88 	bl	800b34a <quorem>
 800be3a:	4603      	mov	r3, r0
 800be3c:	3330      	adds	r3, #48	@ 0x30
 800be3e:	9003      	str	r0, [sp, #12]
 800be40:	4639      	mov	r1, r7
 800be42:	9802      	ldr	r0, [sp, #8]
 800be44:	9309      	str	r3, [sp, #36]	@ 0x24
 800be46:	f000 fb97 	bl	800c578 <__mcmp>
 800be4a:	462a      	mov	r2, r5
 800be4c:	9004      	str	r0, [sp, #16]
 800be4e:	4621      	mov	r1, r4
 800be50:	4648      	mov	r0, r9
 800be52:	f000 fbad 	bl	800c5b0 <__mdiff>
 800be56:	68c2      	ldr	r2, [r0, #12]
 800be58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be5a:	4606      	mov	r6, r0
 800be5c:	bb02      	cbnz	r2, 800bea0 <_dtoa_r+0xa40>
 800be5e:	4601      	mov	r1, r0
 800be60:	9802      	ldr	r0, [sp, #8]
 800be62:	f000 fb89 	bl	800c578 <__mcmp>
 800be66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be68:	4602      	mov	r2, r0
 800be6a:	4631      	mov	r1, r6
 800be6c:	4648      	mov	r0, r9
 800be6e:	920c      	str	r2, [sp, #48]	@ 0x30
 800be70:	9309      	str	r3, [sp, #36]	@ 0x24
 800be72:	f000 f94f 	bl	800c114 <_Bfree>
 800be76:	9b07      	ldr	r3, [sp, #28]
 800be78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800be7a:	9e00      	ldr	r6, [sp, #0]
 800be7c:	ea42 0103 	orr.w	r1, r2, r3
 800be80:	9b06      	ldr	r3, [sp, #24]
 800be82:	4319      	orrs	r1, r3
 800be84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be86:	d10d      	bne.n	800bea4 <_dtoa_r+0xa44>
 800be88:	2b39      	cmp	r3, #57	@ 0x39
 800be8a:	d027      	beq.n	800bedc <_dtoa_r+0xa7c>
 800be8c:	9a04      	ldr	r2, [sp, #16]
 800be8e:	2a00      	cmp	r2, #0
 800be90:	dd01      	ble.n	800be96 <_dtoa_r+0xa36>
 800be92:	9b03      	ldr	r3, [sp, #12]
 800be94:	3331      	adds	r3, #49	@ 0x31
 800be96:	f88b 3000 	strb.w	r3, [fp]
 800be9a:	e52e      	b.n	800b8fa <_dtoa_r+0x49a>
 800be9c:	4628      	mov	r0, r5
 800be9e:	e7b9      	b.n	800be14 <_dtoa_r+0x9b4>
 800bea0:	2201      	movs	r2, #1
 800bea2:	e7e2      	b.n	800be6a <_dtoa_r+0xa0a>
 800bea4:	9904      	ldr	r1, [sp, #16]
 800bea6:	2900      	cmp	r1, #0
 800bea8:	db04      	blt.n	800beb4 <_dtoa_r+0xa54>
 800beaa:	9807      	ldr	r0, [sp, #28]
 800beac:	4301      	orrs	r1, r0
 800beae:	9806      	ldr	r0, [sp, #24]
 800beb0:	4301      	orrs	r1, r0
 800beb2:	d120      	bne.n	800bef6 <_dtoa_r+0xa96>
 800beb4:	2a00      	cmp	r2, #0
 800beb6:	ddee      	ble.n	800be96 <_dtoa_r+0xa36>
 800beb8:	9902      	ldr	r1, [sp, #8]
 800beba:	9300      	str	r3, [sp, #0]
 800bebc:	2201      	movs	r2, #1
 800bebe:	4648      	mov	r0, r9
 800bec0:	f000 faee 	bl	800c4a0 <__lshift>
 800bec4:	4621      	mov	r1, r4
 800bec6:	9002      	str	r0, [sp, #8]
 800bec8:	f000 fb56 	bl	800c578 <__mcmp>
 800becc:	2800      	cmp	r0, #0
 800bece:	9b00      	ldr	r3, [sp, #0]
 800bed0:	dc02      	bgt.n	800bed8 <_dtoa_r+0xa78>
 800bed2:	d1e0      	bne.n	800be96 <_dtoa_r+0xa36>
 800bed4:	07da      	lsls	r2, r3, #31
 800bed6:	d5de      	bpl.n	800be96 <_dtoa_r+0xa36>
 800bed8:	2b39      	cmp	r3, #57	@ 0x39
 800beda:	d1da      	bne.n	800be92 <_dtoa_r+0xa32>
 800bedc:	2339      	movs	r3, #57	@ 0x39
 800bede:	f88b 3000 	strb.w	r3, [fp]
 800bee2:	4633      	mov	r3, r6
 800bee4:	461e      	mov	r6, r3
 800bee6:	3b01      	subs	r3, #1
 800bee8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800beec:	2a39      	cmp	r2, #57	@ 0x39
 800beee:	d04e      	beq.n	800bf8e <_dtoa_r+0xb2e>
 800bef0:	3201      	adds	r2, #1
 800bef2:	701a      	strb	r2, [r3, #0]
 800bef4:	e501      	b.n	800b8fa <_dtoa_r+0x49a>
 800bef6:	2a00      	cmp	r2, #0
 800bef8:	dd03      	ble.n	800bf02 <_dtoa_r+0xaa2>
 800befa:	2b39      	cmp	r3, #57	@ 0x39
 800befc:	d0ee      	beq.n	800bedc <_dtoa_r+0xa7c>
 800befe:	3301      	adds	r3, #1
 800bf00:	e7c9      	b.n	800be96 <_dtoa_r+0xa36>
 800bf02:	9a00      	ldr	r2, [sp, #0]
 800bf04:	9908      	ldr	r1, [sp, #32]
 800bf06:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bf0a:	428a      	cmp	r2, r1
 800bf0c:	d028      	beq.n	800bf60 <_dtoa_r+0xb00>
 800bf0e:	9902      	ldr	r1, [sp, #8]
 800bf10:	2300      	movs	r3, #0
 800bf12:	220a      	movs	r2, #10
 800bf14:	4648      	mov	r0, r9
 800bf16:	f000 f91f 	bl	800c158 <__multadd>
 800bf1a:	42af      	cmp	r7, r5
 800bf1c:	9002      	str	r0, [sp, #8]
 800bf1e:	f04f 0300 	mov.w	r3, #0
 800bf22:	f04f 020a 	mov.w	r2, #10
 800bf26:	4639      	mov	r1, r7
 800bf28:	4648      	mov	r0, r9
 800bf2a:	d107      	bne.n	800bf3c <_dtoa_r+0xadc>
 800bf2c:	f000 f914 	bl	800c158 <__multadd>
 800bf30:	4607      	mov	r7, r0
 800bf32:	4605      	mov	r5, r0
 800bf34:	9b00      	ldr	r3, [sp, #0]
 800bf36:	3301      	adds	r3, #1
 800bf38:	9300      	str	r3, [sp, #0]
 800bf3a:	e777      	b.n	800be2c <_dtoa_r+0x9cc>
 800bf3c:	f000 f90c 	bl	800c158 <__multadd>
 800bf40:	4629      	mov	r1, r5
 800bf42:	4607      	mov	r7, r0
 800bf44:	2300      	movs	r3, #0
 800bf46:	220a      	movs	r2, #10
 800bf48:	4648      	mov	r0, r9
 800bf4a:	f000 f905 	bl	800c158 <__multadd>
 800bf4e:	4605      	mov	r5, r0
 800bf50:	e7f0      	b.n	800bf34 <_dtoa_r+0xad4>
 800bf52:	f1bb 0f00 	cmp.w	fp, #0
 800bf56:	bfcc      	ite	gt
 800bf58:	465e      	movgt	r6, fp
 800bf5a:	2601      	movle	r6, #1
 800bf5c:	4456      	add	r6, sl
 800bf5e:	2700      	movs	r7, #0
 800bf60:	9902      	ldr	r1, [sp, #8]
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	2201      	movs	r2, #1
 800bf66:	4648      	mov	r0, r9
 800bf68:	f000 fa9a 	bl	800c4a0 <__lshift>
 800bf6c:	4621      	mov	r1, r4
 800bf6e:	9002      	str	r0, [sp, #8]
 800bf70:	f000 fb02 	bl	800c578 <__mcmp>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	dcb4      	bgt.n	800bee2 <_dtoa_r+0xa82>
 800bf78:	d102      	bne.n	800bf80 <_dtoa_r+0xb20>
 800bf7a:	9b00      	ldr	r3, [sp, #0]
 800bf7c:	07db      	lsls	r3, r3, #31
 800bf7e:	d4b0      	bmi.n	800bee2 <_dtoa_r+0xa82>
 800bf80:	4633      	mov	r3, r6
 800bf82:	461e      	mov	r6, r3
 800bf84:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf88:	2a30      	cmp	r2, #48	@ 0x30
 800bf8a:	d0fa      	beq.n	800bf82 <_dtoa_r+0xb22>
 800bf8c:	e4b5      	b.n	800b8fa <_dtoa_r+0x49a>
 800bf8e:	459a      	cmp	sl, r3
 800bf90:	d1a8      	bne.n	800bee4 <_dtoa_r+0xa84>
 800bf92:	2331      	movs	r3, #49	@ 0x31
 800bf94:	f108 0801 	add.w	r8, r8, #1
 800bf98:	f88a 3000 	strb.w	r3, [sl]
 800bf9c:	e4ad      	b.n	800b8fa <_dtoa_r+0x49a>
 800bf9e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bfa0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800bffc <_dtoa_r+0xb9c>
 800bfa4:	b11b      	cbz	r3, 800bfae <_dtoa_r+0xb4e>
 800bfa6:	f10a 0308 	add.w	r3, sl, #8
 800bfaa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bfac:	6013      	str	r3, [r2, #0]
 800bfae:	4650      	mov	r0, sl
 800bfb0:	b017      	add	sp, #92	@ 0x5c
 800bfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb6:	9b07      	ldr	r3, [sp, #28]
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	f77f ae2e 	ble.w	800bc1a <_dtoa_r+0x7ba>
 800bfbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bfc0:	9308      	str	r3, [sp, #32]
 800bfc2:	2001      	movs	r0, #1
 800bfc4:	e64d      	b.n	800bc62 <_dtoa_r+0x802>
 800bfc6:	f1bb 0f00 	cmp.w	fp, #0
 800bfca:	f77f aed9 	ble.w	800bd80 <_dtoa_r+0x920>
 800bfce:	4656      	mov	r6, sl
 800bfd0:	9802      	ldr	r0, [sp, #8]
 800bfd2:	4621      	mov	r1, r4
 800bfd4:	f7ff f9b9 	bl	800b34a <quorem>
 800bfd8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800bfdc:	f806 3b01 	strb.w	r3, [r6], #1
 800bfe0:	eba6 020a 	sub.w	r2, r6, sl
 800bfe4:	4593      	cmp	fp, r2
 800bfe6:	ddb4      	ble.n	800bf52 <_dtoa_r+0xaf2>
 800bfe8:	9902      	ldr	r1, [sp, #8]
 800bfea:	2300      	movs	r3, #0
 800bfec:	220a      	movs	r2, #10
 800bfee:	4648      	mov	r0, r9
 800bff0:	f000 f8b2 	bl	800c158 <__multadd>
 800bff4:	9002      	str	r0, [sp, #8]
 800bff6:	e7eb      	b.n	800bfd0 <_dtoa_r+0xb70>
 800bff8:	0800cf44 	.word	0x0800cf44
 800bffc:	0800cec8 	.word	0x0800cec8

0800c000 <_free_r>:
 800c000:	b538      	push	{r3, r4, r5, lr}
 800c002:	4605      	mov	r5, r0
 800c004:	2900      	cmp	r1, #0
 800c006:	d041      	beq.n	800c08c <_free_r+0x8c>
 800c008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c00c:	1f0c      	subs	r4, r1, #4
 800c00e:	2b00      	cmp	r3, #0
 800c010:	bfb8      	it	lt
 800c012:	18e4      	addlt	r4, r4, r3
 800c014:	f7fe fb50 	bl	800a6b8 <__malloc_lock>
 800c018:	4a1d      	ldr	r2, [pc, #116]	@ (800c090 <_free_r+0x90>)
 800c01a:	6813      	ldr	r3, [r2, #0]
 800c01c:	b933      	cbnz	r3, 800c02c <_free_r+0x2c>
 800c01e:	6063      	str	r3, [r4, #4]
 800c020:	6014      	str	r4, [r2, #0]
 800c022:	4628      	mov	r0, r5
 800c024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c028:	f7fe bb4c 	b.w	800a6c4 <__malloc_unlock>
 800c02c:	42a3      	cmp	r3, r4
 800c02e:	d908      	bls.n	800c042 <_free_r+0x42>
 800c030:	6820      	ldr	r0, [r4, #0]
 800c032:	1821      	adds	r1, r4, r0
 800c034:	428b      	cmp	r3, r1
 800c036:	bf01      	itttt	eq
 800c038:	6819      	ldreq	r1, [r3, #0]
 800c03a:	685b      	ldreq	r3, [r3, #4]
 800c03c:	1809      	addeq	r1, r1, r0
 800c03e:	6021      	streq	r1, [r4, #0]
 800c040:	e7ed      	b.n	800c01e <_free_r+0x1e>
 800c042:	461a      	mov	r2, r3
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	b10b      	cbz	r3, 800c04c <_free_r+0x4c>
 800c048:	42a3      	cmp	r3, r4
 800c04a:	d9fa      	bls.n	800c042 <_free_r+0x42>
 800c04c:	6811      	ldr	r1, [r2, #0]
 800c04e:	1850      	adds	r0, r2, r1
 800c050:	42a0      	cmp	r0, r4
 800c052:	d10b      	bne.n	800c06c <_free_r+0x6c>
 800c054:	6820      	ldr	r0, [r4, #0]
 800c056:	4401      	add	r1, r0
 800c058:	1850      	adds	r0, r2, r1
 800c05a:	4283      	cmp	r3, r0
 800c05c:	6011      	str	r1, [r2, #0]
 800c05e:	d1e0      	bne.n	800c022 <_free_r+0x22>
 800c060:	6818      	ldr	r0, [r3, #0]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	6053      	str	r3, [r2, #4]
 800c066:	4408      	add	r0, r1
 800c068:	6010      	str	r0, [r2, #0]
 800c06a:	e7da      	b.n	800c022 <_free_r+0x22>
 800c06c:	d902      	bls.n	800c074 <_free_r+0x74>
 800c06e:	230c      	movs	r3, #12
 800c070:	602b      	str	r3, [r5, #0]
 800c072:	e7d6      	b.n	800c022 <_free_r+0x22>
 800c074:	6820      	ldr	r0, [r4, #0]
 800c076:	1821      	adds	r1, r4, r0
 800c078:	428b      	cmp	r3, r1
 800c07a:	bf04      	itt	eq
 800c07c:	6819      	ldreq	r1, [r3, #0]
 800c07e:	685b      	ldreq	r3, [r3, #4]
 800c080:	6063      	str	r3, [r4, #4]
 800c082:	bf04      	itt	eq
 800c084:	1809      	addeq	r1, r1, r0
 800c086:	6021      	streq	r1, [r4, #0]
 800c088:	6054      	str	r4, [r2, #4]
 800c08a:	e7ca      	b.n	800c022 <_free_r+0x22>
 800c08c:	bd38      	pop	{r3, r4, r5, pc}
 800c08e:	bf00      	nop
 800c090:	20000b5c 	.word	0x20000b5c

0800c094 <_Balloc>:
 800c094:	b570      	push	{r4, r5, r6, lr}
 800c096:	69c6      	ldr	r6, [r0, #28]
 800c098:	4604      	mov	r4, r0
 800c09a:	460d      	mov	r5, r1
 800c09c:	b976      	cbnz	r6, 800c0bc <_Balloc+0x28>
 800c09e:	2010      	movs	r0, #16
 800c0a0:	f7fe fa58 	bl	800a554 <malloc>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	61e0      	str	r0, [r4, #28]
 800c0a8:	b920      	cbnz	r0, 800c0b4 <_Balloc+0x20>
 800c0aa:	4b18      	ldr	r3, [pc, #96]	@ (800c10c <_Balloc+0x78>)
 800c0ac:	4818      	ldr	r0, [pc, #96]	@ (800c110 <_Balloc+0x7c>)
 800c0ae:	216b      	movs	r1, #107	@ 0x6b
 800c0b0:	f000 fc16 	bl	800c8e0 <__assert_func>
 800c0b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0b8:	6006      	str	r6, [r0, #0]
 800c0ba:	60c6      	str	r6, [r0, #12]
 800c0bc:	69e6      	ldr	r6, [r4, #28]
 800c0be:	68f3      	ldr	r3, [r6, #12]
 800c0c0:	b183      	cbz	r3, 800c0e4 <_Balloc+0x50>
 800c0c2:	69e3      	ldr	r3, [r4, #28]
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0ca:	b9b8      	cbnz	r0, 800c0fc <_Balloc+0x68>
 800c0cc:	2101      	movs	r1, #1
 800c0ce:	fa01 f605 	lsl.w	r6, r1, r5
 800c0d2:	1d72      	adds	r2, r6, #5
 800c0d4:	0092      	lsls	r2, r2, #2
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	f000 fc20 	bl	800c91c <_calloc_r>
 800c0dc:	b160      	cbz	r0, 800c0f8 <_Balloc+0x64>
 800c0de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c0e2:	e00e      	b.n	800c102 <_Balloc+0x6e>
 800c0e4:	2221      	movs	r2, #33	@ 0x21
 800c0e6:	2104      	movs	r1, #4
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	f000 fc17 	bl	800c91c <_calloc_r>
 800c0ee:	69e3      	ldr	r3, [r4, #28]
 800c0f0:	60f0      	str	r0, [r6, #12]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d1e4      	bne.n	800c0c2 <_Balloc+0x2e>
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	bd70      	pop	{r4, r5, r6, pc}
 800c0fc:	6802      	ldr	r2, [r0, #0]
 800c0fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c102:	2300      	movs	r3, #0
 800c104:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c108:	e7f7      	b.n	800c0fa <_Balloc+0x66>
 800c10a:	bf00      	nop
 800c10c:	0800ced5 	.word	0x0800ced5
 800c110:	0800cf55 	.word	0x0800cf55

0800c114 <_Bfree>:
 800c114:	b570      	push	{r4, r5, r6, lr}
 800c116:	69c6      	ldr	r6, [r0, #28]
 800c118:	4605      	mov	r5, r0
 800c11a:	460c      	mov	r4, r1
 800c11c:	b976      	cbnz	r6, 800c13c <_Bfree+0x28>
 800c11e:	2010      	movs	r0, #16
 800c120:	f7fe fa18 	bl	800a554 <malloc>
 800c124:	4602      	mov	r2, r0
 800c126:	61e8      	str	r0, [r5, #28]
 800c128:	b920      	cbnz	r0, 800c134 <_Bfree+0x20>
 800c12a:	4b09      	ldr	r3, [pc, #36]	@ (800c150 <_Bfree+0x3c>)
 800c12c:	4809      	ldr	r0, [pc, #36]	@ (800c154 <_Bfree+0x40>)
 800c12e:	218f      	movs	r1, #143	@ 0x8f
 800c130:	f000 fbd6 	bl	800c8e0 <__assert_func>
 800c134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c138:	6006      	str	r6, [r0, #0]
 800c13a:	60c6      	str	r6, [r0, #12]
 800c13c:	b13c      	cbz	r4, 800c14e <_Bfree+0x3a>
 800c13e:	69eb      	ldr	r3, [r5, #28]
 800c140:	6862      	ldr	r2, [r4, #4]
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c148:	6021      	str	r1, [r4, #0]
 800c14a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c14e:	bd70      	pop	{r4, r5, r6, pc}
 800c150:	0800ced5 	.word	0x0800ced5
 800c154:	0800cf55 	.word	0x0800cf55

0800c158 <__multadd>:
 800c158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c15c:	690d      	ldr	r5, [r1, #16]
 800c15e:	4607      	mov	r7, r0
 800c160:	460c      	mov	r4, r1
 800c162:	461e      	mov	r6, r3
 800c164:	f101 0c14 	add.w	ip, r1, #20
 800c168:	2000      	movs	r0, #0
 800c16a:	f8dc 3000 	ldr.w	r3, [ip]
 800c16e:	b299      	uxth	r1, r3
 800c170:	fb02 6101 	mla	r1, r2, r1, r6
 800c174:	0c1e      	lsrs	r6, r3, #16
 800c176:	0c0b      	lsrs	r3, r1, #16
 800c178:	fb02 3306 	mla	r3, r2, r6, r3
 800c17c:	b289      	uxth	r1, r1
 800c17e:	3001      	adds	r0, #1
 800c180:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c184:	4285      	cmp	r5, r0
 800c186:	f84c 1b04 	str.w	r1, [ip], #4
 800c18a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c18e:	dcec      	bgt.n	800c16a <__multadd+0x12>
 800c190:	b30e      	cbz	r6, 800c1d6 <__multadd+0x7e>
 800c192:	68a3      	ldr	r3, [r4, #8]
 800c194:	42ab      	cmp	r3, r5
 800c196:	dc19      	bgt.n	800c1cc <__multadd+0x74>
 800c198:	6861      	ldr	r1, [r4, #4]
 800c19a:	4638      	mov	r0, r7
 800c19c:	3101      	adds	r1, #1
 800c19e:	f7ff ff79 	bl	800c094 <_Balloc>
 800c1a2:	4680      	mov	r8, r0
 800c1a4:	b928      	cbnz	r0, 800c1b2 <__multadd+0x5a>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	4b0c      	ldr	r3, [pc, #48]	@ (800c1dc <__multadd+0x84>)
 800c1aa:	480d      	ldr	r0, [pc, #52]	@ (800c1e0 <__multadd+0x88>)
 800c1ac:	21ba      	movs	r1, #186	@ 0xba
 800c1ae:	f000 fb97 	bl	800c8e0 <__assert_func>
 800c1b2:	6922      	ldr	r2, [r4, #16]
 800c1b4:	3202      	adds	r2, #2
 800c1b6:	f104 010c 	add.w	r1, r4, #12
 800c1ba:	0092      	lsls	r2, r2, #2
 800c1bc:	300c      	adds	r0, #12
 800c1be:	f7ff f8b6 	bl	800b32e <memcpy>
 800c1c2:	4621      	mov	r1, r4
 800c1c4:	4638      	mov	r0, r7
 800c1c6:	f7ff ffa5 	bl	800c114 <_Bfree>
 800c1ca:	4644      	mov	r4, r8
 800c1cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c1d0:	3501      	adds	r5, #1
 800c1d2:	615e      	str	r6, [r3, #20]
 800c1d4:	6125      	str	r5, [r4, #16]
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1dc:	0800cf44 	.word	0x0800cf44
 800c1e0:	0800cf55 	.word	0x0800cf55

0800c1e4 <__hi0bits>:
 800c1e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	bf36      	itet	cc
 800c1ec:	0403      	lslcc	r3, r0, #16
 800c1ee:	2000      	movcs	r0, #0
 800c1f0:	2010      	movcc	r0, #16
 800c1f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c1f6:	bf3c      	itt	cc
 800c1f8:	021b      	lslcc	r3, r3, #8
 800c1fa:	3008      	addcc	r0, #8
 800c1fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c200:	bf3c      	itt	cc
 800c202:	011b      	lslcc	r3, r3, #4
 800c204:	3004      	addcc	r0, #4
 800c206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c20a:	bf3c      	itt	cc
 800c20c:	009b      	lslcc	r3, r3, #2
 800c20e:	3002      	addcc	r0, #2
 800c210:	2b00      	cmp	r3, #0
 800c212:	db05      	blt.n	800c220 <__hi0bits+0x3c>
 800c214:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c218:	f100 0001 	add.w	r0, r0, #1
 800c21c:	bf08      	it	eq
 800c21e:	2020      	moveq	r0, #32
 800c220:	4770      	bx	lr

0800c222 <__lo0bits>:
 800c222:	6803      	ldr	r3, [r0, #0]
 800c224:	4602      	mov	r2, r0
 800c226:	f013 0007 	ands.w	r0, r3, #7
 800c22a:	d00b      	beq.n	800c244 <__lo0bits+0x22>
 800c22c:	07d9      	lsls	r1, r3, #31
 800c22e:	d421      	bmi.n	800c274 <__lo0bits+0x52>
 800c230:	0798      	lsls	r0, r3, #30
 800c232:	bf49      	itett	mi
 800c234:	085b      	lsrmi	r3, r3, #1
 800c236:	089b      	lsrpl	r3, r3, #2
 800c238:	2001      	movmi	r0, #1
 800c23a:	6013      	strmi	r3, [r2, #0]
 800c23c:	bf5c      	itt	pl
 800c23e:	6013      	strpl	r3, [r2, #0]
 800c240:	2002      	movpl	r0, #2
 800c242:	4770      	bx	lr
 800c244:	b299      	uxth	r1, r3
 800c246:	b909      	cbnz	r1, 800c24c <__lo0bits+0x2a>
 800c248:	0c1b      	lsrs	r3, r3, #16
 800c24a:	2010      	movs	r0, #16
 800c24c:	b2d9      	uxtb	r1, r3
 800c24e:	b909      	cbnz	r1, 800c254 <__lo0bits+0x32>
 800c250:	3008      	adds	r0, #8
 800c252:	0a1b      	lsrs	r3, r3, #8
 800c254:	0719      	lsls	r1, r3, #28
 800c256:	bf04      	itt	eq
 800c258:	091b      	lsreq	r3, r3, #4
 800c25a:	3004      	addeq	r0, #4
 800c25c:	0799      	lsls	r1, r3, #30
 800c25e:	bf04      	itt	eq
 800c260:	089b      	lsreq	r3, r3, #2
 800c262:	3002      	addeq	r0, #2
 800c264:	07d9      	lsls	r1, r3, #31
 800c266:	d403      	bmi.n	800c270 <__lo0bits+0x4e>
 800c268:	085b      	lsrs	r3, r3, #1
 800c26a:	f100 0001 	add.w	r0, r0, #1
 800c26e:	d003      	beq.n	800c278 <__lo0bits+0x56>
 800c270:	6013      	str	r3, [r2, #0]
 800c272:	4770      	bx	lr
 800c274:	2000      	movs	r0, #0
 800c276:	4770      	bx	lr
 800c278:	2020      	movs	r0, #32
 800c27a:	4770      	bx	lr

0800c27c <__i2b>:
 800c27c:	b510      	push	{r4, lr}
 800c27e:	460c      	mov	r4, r1
 800c280:	2101      	movs	r1, #1
 800c282:	f7ff ff07 	bl	800c094 <_Balloc>
 800c286:	4602      	mov	r2, r0
 800c288:	b928      	cbnz	r0, 800c296 <__i2b+0x1a>
 800c28a:	4b05      	ldr	r3, [pc, #20]	@ (800c2a0 <__i2b+0x24>)
 800c28c:	4805      	ldr	r0, [pc, #20]	@ (800c2a4 <__i2b+0x28>)
 800c28e:	f240 1145 	movw	r1, #325	@ 0x145
 800c292:	f000 fb25 	bl	800c8e0 <__assert_func>
 800c296:	2301      	movs	r3, #1
 800c298:	6144      	str	r4, [r0, #20]
 800c29a:	6103      	str	r3, [r0, #16]
 800c29c:	bd10      	pop	{r4, pc}
 800c29e:	bf00      	nop
 800c2a0:	0800cf44 	.word	0x0800cf44
 800c2a4:	0800cf55 	.word	0x0800cf55

0800c2a8 <__multiply>:
 800c2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ac:	4617      	mov	r7, r2
 800c2ae:	690a      	ldr	r2, [r1, #16]
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	bfa8      	it	ge
 800c2b6:	463b      	movge	r3, r7
 800c2b8:	4689      	mov	r9, r1
 800c2ba:	bfa4      	itt	ge
 800c2bc:	460f      	movge	r7, r1
 800c2be:	4699      	movge	r9, r3
 800c2c0:	693d      	ldr	r5, [r7, #16]
 800c2c2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	6879      	ldr	r1, [r7, #4]
 800c2ca:	eb05 060a 	add.w	r6, r5, sl
 800c2ce:	42b3      	cmp	r3, r6
 800c2d0:	b085      	sub	sp, #20
 800c2d2:	bfb8      	it	lt
 800c2d4:	3101      	addlt	r1, #1
 800c2d6:	f7ff fedd 	bl	800c094 <_Balloc>
 800c2da:	b930      	cbnz	r0, 800c2ea <__multiply+0x42>
 800c2dc:	4602      	mov	r2, r0
 800c2de:	4b41      	ldr	r3, [pc, #260]	@ (800c3e4 <__multiply+0x13c>)
 800c2e0:	4841      	ldr	r0, [pc, #260]	@ (800c3e8 <__multiply+0x140>)
 800c2e2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c2e6:	f000 fafb 	bl	800c8e0 <__assert_func>
 800c2ea:	f100 0414 	add.w	r4, r0, #20
 800c2ee:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c2f2:	4623      	mov	r3, r4
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	4573      	cmp	r3, lr
 800c2f8:	d320      	bcc.n	800c33c <__multiply+0x94>
 800c2fa:	f107 0814 	add.w	r8, r7, #20
 800c2fe:	f109 0114 	add.w	r1, r9, #20
 800c302:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c306:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c30a:	9302      	str	r3, [sp, #8]
 800c30c:	1beb      	subs	r3, r5, r7
 800c30e:	3b15      	subs	r3, #21
 800c310:	f023 0303 	bic.w	r3, r3, #3
 800c314:	3304      	adds	r3, #4
 800c316:	3715      	adds	r7, #21
 800c318:	42bd      	cmp	r5, r7
 800c31a:	bf38      	it	cc
 800c31c:	2304      	movcc	r3, #4
 800c31e:	9301      	str	r3, [sp, #4]
 800c320:	9b02      	ldr	r3, [sp, #8]
 800c322:	9103      	str	r1, [sp, #12]
 800c324:	428b      	cmp	r3, r1
 800c326:	d80c      	bhi.n	800c342 <__multiply+0x9a>
 800c328:	2e00      	cmp	r6, #0
 800c32a:	dd03      	ble.n	800c334 <__multiply+0x8c>
 800c32c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c330:	2b00      	cmp	r3, #0
 800c332:	d055      	beq.n	800c3e0 <__multiply+0x138>
 800c334:	6106      	str	r6, [r0, #16]
 800c336:	b005      	add	sp, #20
 800c338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c33c:	f843 2b04 	str.w	r2, [r3], #4
 800c340:	e7d9      	b.n	800c2f6 <__multiply+0x4e>
 800c342:	f8b1 a000 	ldrh.w	sl, [r1]
 800c346:	f1ba 0f00 	cmp.w	sl, #0
 800c34a:	d01f      	beq.n	800c38c <__multiply+0xe4>
 800c34c:	46c4      	mov	ip, r8
 800c34e:	46a1      	mov	r9, r4
 800c350:	2700      	movs	r7, #0
 800c352:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c356:	f8d9 3000 	ldr.w	r3, [r9]
 800c35a:	fa1f fb82 	uxth.w	fp, r2
 800c35e:	b29b      	uxth	r3, r3
 800c360:	fb0a 330b 	mla	r3, sl, fp, r3
 800c364:	443b      	add	r3, r7
 800c366:	f8d9 7000 	ldr.w	r7, [r9]
 800c36a:	0c12      	lsrs	r2, r2, #16
 800c36c:	0c3f      	lsrs	r7, r7, #16
 800c36e:	fb0a 7202 	mla	r2, sl, r2, r7
 800c372:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c376:	b29b      	uxth	r3, r3
 800c378:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c37c:	4565      	cmp	r5, ip
 800c37e:	f849 3b04 	str.w	r3, [r9], #4
 800c382:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c386:	d8e4      	bhi.n	800c352 <__multiply+0xaa>
 800c388:	9b01      	ldr	r3, [sp, #4]
 800c38a:	50e7      	str	r7, [r4, r3]
 800c38c:	9b03      	ldr	r3, [sp, #12]
 800c38e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c392:	3104      	adds	r1, #4
 800c394:	f1b9 0f00 	cmp.w	r9, #0
 800c398:	d020      	beq.n	800c3dc <__multiply+0x134>
 800c39a:	6823      	ldr	r3, [r4, #0]
 800c39c:	4647      	mov	r7, r8
 800c39e:	46a4      	mov	ip, r4
 800c3a0:	f04f 0a00 	mov.w	sl, #0
 800c3a4:	f8b7 b000 	ldrh.w	fp, [r7]
 800c3a8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c3ac:	fb09 220b 	mla	r2, r9, fp, r2
 800c3b0:	4452      	add	r2, sl
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3b8:	f84c 3b04 	str.w	r3, [ip], #4
 800c3bc:	f857 3b04 	ldr.w	r3, [r7], #4
 800c3c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c3c4:	f8bc 3000 	ldrh.w	r3, [ip]
 800c3c8:	fb09 330a 	mla	r3, r9, sl, r3
 800c3cc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c3d0:	42bd      	cmp	r5, r7
 800c3d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c3d6:	d8e5      	bhi.n	800c3a4 <__multiply+0xfc>
 800c3d8:	9a01      	ldr	r2, [sp, #4]
 800c3da:	50a3      	str	r3, [r4, r2]
 800c3dc:	3404      	adds	r4, #4
 800c3de:	e79f      	b.n	800c320 <__multiply+0x78>
 800c3e0:	3e01      	subs	r6, #1
 800c3e2:	e7a1      	b.n	800c328 <__multiply+0x80>
 800c3e4:	0800cf44 	.word	0x0800cf44
 800c3e8:	0800cf55 	.word	0x0800cf55

0800c3ec <__pow5mult>:
 800c3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3f0:	4615      	mov	r5, r2
 800c3f2:	f012 0203 	ands.w	r2, r2, #3
 800c3f6:	4607      	mov	r7, r0
 800c3f8:	460e      	mov	r6, r1
 800c3fa:	d007      	beq.n	800c40c <__pow5mult+0x20>
 800c3fc:	4c25      	ldr	r4, [pc, #148]	@ (800c494 <__pow5mult+0xa8>)
 800c3fe:	3a01      	subs	r2, #1
 800c400:	2300      	movs	r3, #0
 800c402:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c406:	f7ff fea7 	bl	800c158 <__multadd>
 800c40a:	4606      	mov	r6, r0
 800c40c:	10ad      	asrs	r5, r5, #2
 800c40e:	d03d      	beq.n	800c48c <__pow5mult+0xa0>
 800c410:	69fc      	ldr	r4, [r7, #28]
 800c412:	b97c      	cbnz	r4, 800c434 <__pow5mult+0x48>
 800c414:	2010      	movs	r0, #16
 800c416:	f7fe f89d 	bl	800a554 <malloc>
 800c41a:	4602      	mov	r2, r0
 800c41c:	61f8      	str	r0, [r7, #28]
 800c41e:	b928      	cbnz	r0, 800c42c <__pow5mult+0x40>
 800c420:	4b1d      	ldr	r3, [pc, #116]	@ (800c498 <__pow5mult+0xac>)
 800c422:	481e      	ldr	r0, [pc, #120]	@ (800c49c <__pow5mult+0xb0>)
 800c424:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c428:	f000 fa5a 	bl	800c8e0 <__assert_func>
 800c42c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c430:	6004      	str	r4, [r0, #0]
 800c432:	60c4      	str	r4, [r0, #12]
 800c434:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c438:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c43c:	b94c      	cbnz	r4, 800c452 <__pow5mult+0x66>
 800c43e:	f240 2171 	movw	r1, #625	@ 0x271
 800c442:	4638      	mov	r0, r7
 800c444:	f7ff ff1a 	bl	800c27c <__i2b>
 800c448:	2300      	movs	r3, #0
 800c44a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c44e:	4604      	mov	r4, r0
 800c450:	6003      	str	r3, [r0, #0]
 800c452:	f04f 0900 	mov.w	r9, #0
 800c456:	07eb      	lsls	r3, r5, #31
 800c458:	d50a      	bpl.n	800c470 <__pow5mult+0x84>
 800c45a:	4631      	mov	r1, r6
 800c45c:	4622      	mov	r2, r4
 800c45e:	4638      	mov	r0, r7
 800c460:	f7ff ff22 	bl	800c2a8 <__multiply>
 800c464:	4631      	mov	r1, r6
 800c466:	4680      	mov	r8, r0
 800c468:	4638      	mov	r0, r7
 800c46a:	f7ff fe53 	bl	800c114 <_Bfree>
 800c46e:	4646      	mov	r6, r8
 800c470:	106d      	asrs	r5, r5, #1
 800c472:	d00b      	beq.n	800c48c <__pow5mult+0xa0>
 800c474:	6820      	ldr	r0, [r4, #0]
 800c476:	b938      	cbnz	r0, 800c488 <__pow5mult+0x9c>
 800c478:	4622      	mov	r2, r4
 800c47a:	4621      	mov	r1, r4
 800c47c:	4638      	mov	r0, r7
 800c47e:	f7ff ff13 	bl	800c2a8 <__multiply>
 800c482:	6020      	str	r0, [r4, #0]
 800c484:	f8c0 9000 	str.w	r9, [r0]
 800c488:	4604      	mov	r4, r0
 800c48a:	e7e4      	b.n	800c456 <__pow5mult+0x6a>
 800c48c:	4630      	mov	r0, r6
 800c48e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c492:	bf00      	nop
 800c494:	0800d008 	.word	0x0800d008
 800c498:	0800ced5 	.word	0x0800ced5
 800c49c:	0800cf55 	.word	0x0800cf55

0800c4a0 <__lshift>:
 800c4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4a4:	460c      	mov	r4, r1
 800c4a6:	6849      	ldr	r1, [r1, #4]
 800c4a8:	6923      	ldr	r3, [r4, #16]
 800c4aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c4ae:	68a3      	ldr	r3, [r4, #8]
 800c4b0:	4607      	mov	r7, r0
 800c4b2:	4691      	mov	r9, r2
 800c4b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c4b8:	f108 0601 	add.w	r6, r8, #1
 800c4bc:	42b3      	cmp	r3, r6
 800c4be:	db0b      	blt.n	800c4d8 <__lshift+0x38>
 800c4c0:	4638      	mov	r0, r7
 800c4c2:	f7ff fde7 	bl	800c094 <_Balloc>
 800c4c6:	4605      	mov	r5, r0
 800c4c8:	b948      	cbnz	r0, 800c4de <__lshift+0x3e>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	4b28      	ldr	r3, [pc, #160]	@ (800c570 <__lshift+0xd0>)
 800c4ce:	4829      	ldr	r0, [pc, #164]	@ (800c574 <__lshift+0xd4>)
 800c4d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c4d4:	f000 fa04 	bl	800c8e0 <__assert_func>
 800c4d8:	3101      	adds	r1, #1
 800c4da:	005b      	lsls	r3, r3, #1
 800c4dc:	e7ee      	b.n	800c4bc <__lshift+0x1c>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	f100 0114 	add.w	r1, r0, #20
 800c4e4:	f100 0210 	add.w	r2, r0, #16
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	4553      	cmp	r3, sl
 800c4ec:	db33      	blt.n	800c556 <__lshift+0xb6>
 800c4ee:	6920      	ldr	r0, [r4, #16]
 800c4f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c4f4:	f104 0314 	add.w	r3, r4, #20
 800c4f8:	f019 091f 	ands.w	r9, r9, #31
 800c4fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c500:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c504:	d02b      	beq.n	800c55e <__lshift+0xbe>
 800c506:	f1c9 0e20 	rsb	lr, r9, #32
 800c50a:	468a      	mov	sl, r1
 800c50c:	2200      	movs	r2, #0
 800c50e:	6818      	ldr	r0, [r3, #0]
 800c510:	fa00 f009 	lsl.w	r0, r0, r9
 800c514:	4310      	orrs	r0, r2
 800c516:	f84a 0b04 	str.w	r0, [sl], #4
 800c51a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c51e:	459c      	cmp	ip, r3
 800c520:	fa22 f20e 	lsr.w	r2, r2, lr
 800c524:	d8f3      	bhi.n	800c50e <__lshift+0x6e>
 800c526:	ebac 0304 	sub.w	r3, ip, r4
 800c52a:	3b15      	subs	r3, #21
 800c52c:	f023 0303 	bic.w	r3, r3, #3
 800c530:	3304      	adds	r3, #4
 800c532:	f104 0015 	add.w	r0, r4, #21
 800c536:	4560      	cmp	r0, ip
 800c538:	bf88      	it	hi
 800c53a:	2304      	movhi	r3, #4
 800c53c:	50ca      	str	r2, [r1, r3]
 800c53e:	b10a      	cbz	r2, 800c544 <__lshift+0xa4>
 800c540:	f108 0602 	add.w	r6, r8, #2
 800c544:	3e01      	subs	r6, #1
 800c546:	4638      	mov	r0, r7
 800c548:	612e      	str	r6, [r5, #16]
 800c54a:	4621      	mov	r1, r4
 800c54c:	f7ff fde2 	bl	800c114 <_Bfree>
 800c550:	4628      	mov	r0, r5
 800c552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c556:	f842 0f04 	str.w	r0, [r2, #4]!
 800c55a:	3301      	adds	r3, #1
 800c55c:	e7c5      	b.n	800c4ea <__lshift+0x4a>
 800c55e:	3904      	subs	r1, #4
 800c560:	f853 2b04 	ldr.w	r2, [r3], #4
 800c564:	f841 2f04 	str.w	r2, [r1, #4]!
 800c568:	459c      	cmp	ip, r3
 800c56a:	d8f9      	bhi.n	800c560 <__lshift+0xc0>
 800c56c:	e7ea      	b.n	800c544 <__lshift+0xa4>
 800c56e:	bf00      	nop
 800c570:	0800cf44 	.word	0x0800cf44
 800c574:	0800cf55 	.word	0x0800cf55

0800c578 <__mcmp>:
 800c578:	690a      	ldr	r2, [r1, #16]
 800c57a:	4603      	mov	r3, r0
 800c57c:	6900      	ldr	r0, [r0, #16]
 800c57e:	1a80      	subs	r0, r0, r2
 800c580:	b530      	push	{r4, r5, lr}
 800c582:	d10e      	bne.n	800c5a2 <__mcmp+0x2a>
 800c584:	3314      	adds	r3, #20
 800c586:	3114      	adds	r1, #20
 800c588:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c58c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c590:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c594:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c598:	4295      	cmp	r5, r2
 800c59a:	d003      	beq.n	800c5a4 <__mcmp+0x2c>
 800c59c:	d205      	bcs.n	800c5aa <__mcmp+0x32>
 800c59e:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a2:	bd30      	pop	{r4, r5, pc}
 800c5a4:	42a3      	cmp	r3, r4
 800c5a6:	d3f3      	bcc.n	800c590 <__mcmp+0x18>
 800c5a8:	e7fb      	b.n	800c5a2 <__mcmp+0x2a>
 800c5aa:	2001      	movs	r0, #1
 800c5ac:	e7f9      	b.n	800c5a2 <__mcmp+0x2a>
	...

0800c5b0 <__mdiff>:
 800c5b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b4:	4689      	mov	r9, r1
 800c5b6:	4606      	mov	r6, r0
 800c5b8:	4611      	mov	r1, r2
 800c5ba:	4648      	mov	r0, r9
 800c5bc:	4614      	mov	r4, r2
 800c5be:	f7ff ffdb 	bl	800c578 <__mcmp>
 800c5c2:	1e05      	subs	r5, r0, #0
 800c5c4:	d112      	bne.n	800c5ec <__mdiff+0x3c>
 800c5c6:	4629      	mov	r1, r5
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	f7ff fd63 	bl	800c094 <_Balloc>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	b928      	cbnz	r0, 800c5de <__mdiff+0x2e>
 800c5d2:	4b3f      	ldr	r3, [pc, #252]	@ (800c6d0 <__mdiff+0x120>)
 800c5d4:	f240 2137 	movw	r1, #567	@ 0x237
 800c5d8:	483e      	ldr	r0, [pc, #248]	@ (800c6d4 <__mdiff+0x124>)
 800c5da:	f000 f981 	bl	800c8e0 <__assert_func>
 800c5de:	2301      	movs	r3, #1
 800c5e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c5e4:	4610      	mov	r0, r2
 800c5e6:	b003      	add	sp, #12
 800c5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ec:	bfbc      	itt	lt
 800c5ee:	464b      	movlt	r3, r9
 800c5f0:	46a1      	movlt	r9, r4
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c5f8:	bfba      	itte	lt
 800c5fa:	461c      	movlt	r4, r3
 800c5fc:	2501      	movlt	r5, #1
 800c5fe:	2500      	movge	r5, #0
 800c600:	f7ff fd48 	bl	800c094 <_Balloc>
 800c604:	4602      	mov	r2, r0
 800c606:	b918      	cbnz	r0, 800c610 <__mdiff+0x60>
 800c608:	4b31      	ldr	r3, [pc, #196]	@ (800c6d0 <__mdiff+0x120>)
 800c60a:	f240 2145 	movw	r1, #581	@ 0x245
 800c60e:	e7e3      	b.n	800c5d8 <__mdiff+0x28>
 800c610:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c614:	6926      	ldr	r6, [r4, #16]
 800c616:	60c5      	str	r5, [r0, #12]
 800c618:	f109 0310 	add.w	r3, r9, #16
 800c61c:	f109 0514 	add.w	r5, r9, #20
 800c620:	f104 0e14 	add.w	lr, r4, #20
 800c624:	f100 0b14 	add.w	fp, r0, #20
 800c628:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c62c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c630:	9301      	str	r3, [sp, #4]
 800c632:	46d9      	mov	r9, fp
 800c634:	f04f 0c00 	mov.w	ip, #0
 800c638:	9b01      	ldr	r3, [sp, #4]
 800c63a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c63e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c642:	9301      	str	r3, [sp, #4]
 800c644:	fa1f f38a 	uxth.w	r3, sl
 800c648:	4619      	mov	r1, r3
 800c64a:	b283      	uxth	r3, r0
 800c64c:	1acb      	subs	r3, r1, r3
 800c64e:	0c00      	lsrs	r0, r0, #16
 800c650:	4463      	add	r3, ip
 800c652:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c656:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c660:	4576      	cmp	r6, lr
 800c662:	f849 3b04 	str.w	r3, [r9], #4
 800c666:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c66a:	d8e5      	bhi.n	800c638 <__mdiff+0x88>
 800c66c:	1b33      	subs	r3, r6, r4
 800c66e:	3b15      	subs	r3, #21
 800c670:	f023 0303 	bic.w	r3, r3, #3
 800c674:	3415      	adds	r4, #21
 800c676:	3304      	adds	r3, #4
 800c678:	42a6      	cmp	r6, r4
 800c67a:	bf38      	it	cc
 800c67c:	2304      	movcc	r3, #4
 800c67e:	441d      	add	r5, r3
 800c680:	445b      	add	r3, fp
 800c682:	461e      	mov	r6, r3
 800c684:	462c      	mov	r4, r5
 800c686:	4544      	cmp	r4, r8
 800c688:	d30e      	bcc.n	800c6a8 <__mdiff+0xf8>
 800c68a:	f108 0103 	add.w	r1, r8, #3
 800c68e:	1b49      	subs	r1, r1, r5
 800c690:	f021 0103 	bic.w	r1, r1, #3
 800c694:	3d03      	subs	r5, #3
 800c696:	45a8      	cmp	r8, r5
 800c698:	bf38      	it	cc
 800c69a:	2100      	movcc	r1, #0
 800c69c:	440b      	add	r3, r1
 800c69e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c6a2:	b191      	cbz	r1, 800c6ca <__mdiff+0x11a>
 800c6a4:	6117      	str	r7, [r2, #16]
 800c6a6:	e79d      	b.n	800c5e4 <__mdiff+0x34>
 800c6a8:	f854 1b04 	ldr.w	r1, [r4], #4
 800c6ac:	46e6      	mov	lr, ip
 800c6ae:	0c08      	lsrs	r0, r1, #16
 800c6b0:	fa1c fc81 	uxtah	ip, ip, r1
 800c6b4:	4471      	add	r1, lr
 800c6b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c6ba:	b289      	uxth	r1, r1
 800c6bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c6c0:	f846 1b04 	str.w	r1, [r6], #4
 800c6c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c6c8:	e7dd      	b.n	800c686 <__mdiff+0xd6>
 800c6ca:	3f01      	subs	r7, #1
 800c6cc:	e7e7      	b.n	800c69e <__mdiff+0xee>
 800c6ce:	bf00      	nop
 800c6d0:	0800cf44 	.word	0x0800cf44
 800c6d4:	0800cf55 	.word	0x0800cf55

0800c6d8 <__d2b>:
 800c6d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c6dc:	460f      	mov	r7, r1
 800c6de:	2101      	movs	r1, #1
 800c6e0:	ec59 8b10 	vmov	r8, r9, d0
 800c6e4:	4616      	mov	r6, r2
 800c6e6:	f7ff fcd5 	bl	800c094 <_Balloc>
 800c6ea:	4604      	mov	r4, r0
 800c6ec:	b930      	cbnz	r0, 800c6fc <__d2b+0x24>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	4b23      	ldr	r3, [pc, #140]	@ (800c780 <__d2b+0xa8>)
 800c6f2:	4824      	ldr	r0, [pc, #144]	@ (800c784 <__d2b+0xac>)
 800c6f4:	f240 310f 	movw	r1, #783	@ 0x30f
 800c6f8:	f000 f8f2 	bl	800c8e0 <__assert_func>
 800c6fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c700:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c704:	b10d      	cbz	r5, 800c70a <__d2b+0x32>
 800c706:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c70a:	9301      	str	r3, [sp, #4]
 800c70c:	f1b8 0300 	subs.w	r3, r8, #0
 800c710:	d023      	beq.n	800c75a <__d2b+0x82>
 800c712:	4668      	mov	r0, sp
 800c714:	9300      	str	r3, [sp, #0]
 800c716:	f7ff fd84 	bl	800c222 <__lo0bits>
 800c71a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c71e:	b1d0      	cbz	r0, 800c756 <__d2b+0x7e>
 800c720:	f1c0 0320 	rsb	r3, r0, #32
 800c724:	fa02 f303 	lsl.w	r3, r2, r3
 800c728:	430b      	orrs	r3, r1
 800c72a:	40c2      	lsrs	r2, r0
 800c72c:	6163      	str	r3, [r4, #20]
 800c72e:	9201      	str	r2, [sp, #4]
 800c730:	9b01      	ldr	r3, [sp, #4]
 800c732:	61a3      	str	r3, [r4, #24]
 800c734:	2b00      	cmp	r3, #0
 800c736:	bf0c      	ite	eq
 800c738:	2201      	moveq	r2, #1
 800c73a:	2202      	movne	r2, #2
 800c73c:	6122      	str	r2, [r4, #16]
 800c73e:	b1a5      	cbz	r5, 800c76a <__d2b+0x92>
 800c740:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c744:	4405      	add	r5, r0
 800c746:	603d      	str	r5, [r7, #0]
 800c748:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c74c:	6030      	str	r0, [r6, #0]
 800c74e:	4620      	mov	r0, r4
 800c750:	b003      	add	sp, #12
 800c752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c756:	6161      	str	r1, [r4, #20]
 800c758:	e7ea      	b.n	800c730 <__d2b+0x58>
 800c75a:	a801      	add	r0, sp, #4
 800c75c:	f7ff fd61 	bl	800c222 <__lo0bits>
 800c760:	9b01      	ldr	r3, [sp, #4]
 800c762:	6163      	str	r3, [r4, #20]
 800c764:	3020      	adds	r0, #32
 800c766:	2201      	movs	r2, #1
 800c768:	e7e8      	b.n	800c73c <__d2b+0x64>
 800c76a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c76e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c772:	6038      	str	r0, [r7, #0]
 800c774:	6918      	ldr	r0, [r3, #16]
 800c776:	f7ff fd35 	bl	800c1e4 <__hi0bits>
 800c77a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c77e:	e7e5      	b.n	800c74c <__d2b+0x74>
 800c780:	0800cf44 	.word	0x0800cf44
 800c784:	0800cf55 	.word	0x0800cf55

0800c788 <__sflush_r>:
 800c788:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c790:	0716      	lsls	r6, r2, #28
 800c792:	4605      	mov	r5, r0
 800c794:	460c      	mov	r4, r1
 800c796:	d454      	bmi.n	800c842 <__sflush_r+0xba>
 800c798:	684b      	ldr	r3, [r1, #4]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	dc02      	bgt.n	800c7a4 <__sflush_r+0x1c>
 800c79e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	dd48      	ble.n	800c836 <__sflush_r+0xae>
 800c7a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c7a6:	2e00      	cmp	r6, #0
 800c7a8:	d045      	beq.n	800c836 <__sflush_r+0xae>
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c7b0:	682f      	ldr	r7, [r5, #0]
 800c7b2:	6a21      	ldr	r1, [r4, #32]
 800c7b4:	602b      	str	r3, [r5, #0]
 800c7b6:	d030      	beq.n	800c81a <__sflush_r+0x92>
 800c7b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c7ba:	89a3      	ldrh	r3, [r4, #12]
 800c7bc:	0759      	lsls	r1, r3, #29
 800c7be:	d505      	bpl.n	800c7cc <__sflush_r+0x44>
 800c7c0:	6863      	ldr	r3, [r4, #4]
 800c7c2:	1ad2      	subs	r2, r2, r3
 800c7c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c7c6:	b10b      	cbz	r3, 800c7cc <__sflush_r+0x44>
 800c7c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c7ca:	1ad2      	subs	r2, r2, r3
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c7d0:	6a21      	ldr	r1, [r4, #32]
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	47b0      	blx	r6
 800c7d6:	1c43      	adds	r3, r0, #1
 800c7d8:	89a3      	ldrh	r3, [r4, #12]
 800c7da:	d106      	bne.n	800c7ea <__sflush_r+0x62>
 800c7dc:	6829      	ldr	r1, [r5, #0]
 800c7de:	291d      	cmp	r1, #29
 800c7e0:	d82b      	bhi.n	800c83a <__sflush_r+0xb2>
 800c7e2:	4a2a      	ldr	r2, [pc, #168]	@ (800c88c <__sflush_r+0x104>)
 800c7e4:	40ca      	lsrs	r2, r1
 800c7e6:	07d6      	lsls	r6, r2, #31
 800c7e8:	d527      	bpl.n	800c83a <__sflush_r+0xb2>
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	6062      	str	r2, [r4, #4]
 800c7ee:	04d9      	lsls	r1, r3, #19
 800c7f0:	6922      	ldr	r2, [r4, #16]
 800c7f2:	6022      	str	r2, [r4, #0]
 800c7f4:	d504      	bpl.n	800c800 <__sflush_r+0x78>
 800c7f6:	1c42      	adds	r2, r0, #1
 800c7f8:	d101      	bne.n	800c7fe <__sflush_r+0x76>
 800c7fa:	682b      	ldr	r3, [r5, #0]
 800c7fc:	b903      	cbnz	r3, 800c800 <__sflush_r+0x78>
 800c7fe:	6560      	str	r0, [r4, #84]	@ 0x54
 800c800:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c802:	602f      	str	r7, [r5, #0]
 800c804:	b1b9      	cbz	r1, 800c836 <__sflush_r+0xae>
 800c806:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c80a:	4299      	cmp	r1, r3
 800c80c:	d002      	beq.n	800c814 <__sflush_r+0x8c>
 800c80e:	4628      	mov	r0, r5
 800c810:	f7ff fbf6 	bl	800c000 <_free_r>
 800c814:	2300      	movs	r3, #0
 800c816:	6363      	str	r3, [r4, #52]	@ 0x34
 800c818:	e00d      	b.n	800c836 <__sflush_r+0xae>
 800c81a:	2301      	movs	r3, #1
 800c81c:	4628      	mov	r0, r5
 800c81e:	47b0      	blx	r6
 800c820:	4602      	mov	r2, r0
 800c822:	1c50      	adds	r0, r2, #1
 800c824:	d1c9      	bne.n	800c7ba <__sflush_r+0x32>
 800c826:	682b      	ldr	r3, [r5, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d0c6      	beq.n	800c7ba <__sflush_r+0x32>
 800c82c:	2b1d      	cmp	r3, #29
 800c82e:	d001      	beq.n	800c834 <__sflush_r+0xac>
 800c830:	2b16      	cmp	r3, #22
 800c832:	d11e      	bne.n	800c872 <__sflush_r+0xea>
 800c834:	602f      	str	r7, [r5, #0]
 800c836:	2000      	movs	r0, #0
 800c838:	e022      	b.n	800c880 <__sflush_r+0xf8>
 800c83a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c83e:	b21b      	sxth	r3, r3
 800c840:	e01b      	b.n	800c87a <__sflush_r+0xf2>
 800c842:	690f      	ldr	r7, [r1, #16]
 800c844:	2f00      	cmp	r7, #0
 800c846:	d0f6      	beq.n	800c836 <__sflush_r+0xae>
 800c848:	0793      	lsls	r3, r2, #30
 800c84a:	680e      	ldr	r6, [r1, #0]
 800c84c:	bf08      	it	eq
 800c84e:	694b      	ldreq	r3, [r1, #20]
 800c850:	600f      	str	r7, [r1, #0]
 800c852:	bf18      	it	ne
 800c854:	2300      	movne	r3, #0
 800c856:	eba6 0807 	sub.w	r8, r6, r7
 800c85a:	608b      	str	r3, [r1, #8]
 800c85c:	f1b8 0f00 	cmp.w	r8, #0
 800c860:	dde9      	ble.n	800c836 <__sflush_r+0xae>
 800c862:	6a21      	ldr	r1, [r4, #32]
 800c864:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c866:	4643      	mov	r3, r8
 800c868:	463a      	mov	r2, r7
 800c86a:	4628      	mov	r0, r5
 800c86c:	47b0      	blx	r6
 800c86e:	2800      	cmp	r0, #0
 800c870:	dc08      	bgt.n	800c884 <__sflush_r+0xfc>
 800c872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c87a:	81a3      	strh	r3, [r4, #12]
 800c87c:	f04f 30ff 	mov.w	r0, #4294967295
 800c880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c884:	4407      	add	r7, r0
 800c886:	eba8 0800 	sub.w	r8, r8, r0
 800c88a:	e7e7      	b.n	800c85c <__sflush_r+0xd4>
 800c88c:	20400001 	.word	0x20400001

0800c890 <_fflush_r>:
 800c890:	b538      	push	{r3, r4, r5, lr}
 800c892:	690b      	ldr	r3, [r1, #16]
 800c894:	4605      	mov	r5, r0
 800c896:	460c      	mov	r4, r1
 800c898:	b913      	cbnz	r3, 800c8a0 <_fflush_r+0x10>
 800c89a:	2500      	movs	r5, #0
 800c89c:	4628      	mov	r0, r5
 800c89e:	bd38      	pop	{r3, r4, r5, pc}
 800c8a0:	b118      	cbz	r0, 800c8aa <_fflush_r+0x1a>
 800c8a2:	6a03      	ldr	r3, [r0, #32]
 800c8a4:	b90b      	cbnz	r3, 800c8aa <_fflush_r+0x1a>
 800c8a6:	f7fe fbf5 	bl	800b094 <__sinit>
 800c8aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d0f3      	beq.n	800c89a <_fflush_r+0xa>
 800c8b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c8b4:	07d0      	lsls	r0, r2, #31
 800c8b6:	d404      	bmi.n	800c8c2 <_fflush_r+0x32>
 800c8b8:	0599      	lsls	r1, r3, #22
 800c8ba:	d402      	bmi.n	800c8c2 <_fflush_r+0x32>
 800c8bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8be:	f7fe fd34 	bl	800b32a <__retarget_lock_acquire_recursive>
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	4621      	mov	r1, r4
 800c8c6:	f7ff ff5f 	bl	800c788 <__sflush_r>
 800c8ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c8cc:	07da      	lsls	r2, r3, #31
 800c8ce:	4605      	mov	r5, r0
 800c8d0:	d4e4      	bmi.n	800c89c <_fflush_r+0xc>
 800c8d2:	89a3      	ldrh	r3, [r4, #12]
 800c8d4:	059b      	lsls	r3, r3, #22
 800c8d6:	d4e1      	bmi.n	800c89c <_fflush_r+0xc>
 800c8d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8da:	f7fe fd27 	bl	800b32c <__retarget_lock_release_recursive>
 800c8de:	e7dd      	b.n	800c89c <_fflush_r+0xc>

0800c8e0 <__assert_func>:
 800c8e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8e2:	4614      	mov	r4, r2
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	4b09      	ldr	r3, [pc, #36]	@ (800c90c <__assert_func+0x2c>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4605      	mov	r5, r0
 800c8ec:	68d8      	ldr	r0, [r3, #12]
 800c8ee:	b14c      	cbz	r4, 800c904 <__assert_func+0x24>
 800c8f0:	4b07      	ldr	r3, [pc, #28]	@ (800c910 <__assert_func+0x30>)
 800c8f2:	9100      	str	r1, [sp, #0]
 800c8f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8f8:	4906      	ldr	r1, [pc, #24]	@ (800c914 <__assert_func+0x34>)
 800c8fa:	462b      	mov	r3, r5
 800c8fc:	f000 f842 	bl	800c984 <fiprintf>
 800c900:	f7fd fe20 	bl	800a544 <abort>
 800c904:	4b04      	ldr	r3, [pc, #16]	@ (800c918 <__assert_func+0x38>)
 800c906:	461c      	mov	r4, r3
 800c908:	e7f3      	b.n	800c8f2 <__assert_func+0x12>
 800c90a:	bf00      	nop
 800c90c:	20000038 	.word	0x20000038
 800c910:	0800cfb8 	.word	0x0800cfb8
 800c914:	0800cfc5 	.word	0x0800cfc5
 800c918:	0800cff3 	.word	0x0800cff3

0800c91c <_calloc_r>:
 800c91c:	b570      	push	{r4, r5, r6, lr}
 800c91e:	fba1 5402 	umull	r5, r4, r1, r2
 800c922:	b934      	cbnz	r4, 800c932 <_calloc_r+0x16>
 800c924:	4629      	mov	r1, r5
 800c926:	f7fd fe47 	bl	800a5b8 <_malloc_r>
 800c92a:	4606      	mov	r6, r0
 800c92c:	b928      	cbnz	r0, 800c93a <_calloc_r+0x1e>
 800c92e:	4630      	mov	r0, r6
 800c930:	bd70      	pop	{r4, r5, r6, pc}
 800c932:	220c      	movs	r2, #12
 800c934:	6002      	str	r2, [r0, #0]
 800c936:	2600      	movs	r6, #0
 800c938:	e7f9      	b.n	800c92e <_calloc_r+0x12>
 800c93a:	462a      	mov	r2, r5
 800c93c:	4621      	mov	r1, r4
 800c93e:	f7fe fc22 	bl	800b186 <memset>
 800c942:	e7f4      	b.n	800c92e <_calloc_r+0x12>

0800c944 <__ascii_mbtowc>:
 800c944:	b082      	sub	sp, #8
 800c946:	b901      	cbnz	r1, 800c94a <__ascii_mbtowc+0x6>
 800c948:	a901      	add	r1, sp, #4
 800c94a:	b142      	cbz	r2, 800c95e <__ascii_mbtowc+0x1a>
 800c94c:	b14b      	cbz	r3, 800c962 <__ascii_mbtowc+0x1e>
 800c94e:	7813      	ldrb	r3, [r2, #0]
 800c950:	600b      	str	r3, [r1, #0]
 800c952:	7812      	ldrb	r2, [r2, #0]
 800c954:	1e10      	subs	r0, r2, #0
 800c956:	bf18      	it	ne
 800c958:	2001      	movne	r0, #1
 800c95a:	b002      	add	sp, #8
 800c95c:	4770      	bx	lr
 800c95e:	4610      	mov	r0, r2
 800c960:	e7fb      	b.n	800c95a <__ascii_mbtowc+0x16>
 800c962:	f06f 0001 	mvn.w	r0, #1
 800c966:	e7f8      	b.n	800c95a <__ascii_mbtowc+0x16>

0800c968 <__ascii_wctomb>:
 800c968:	4603      	mov	r3, r0
 800c96a:	4608      	mov	r0, r1
 800c96c:	b141      	cbz	r1, 800c980 <__ascii_wctomb+0x18>
 800c96e:	2aff      	cmp	r2, #255	@ 0xff
 800c970:	d904      	bls.n	800c97c <__ascii_wctomb+0x14>
 800c972:	228a      	movs	r2, #138	@ 0x8a
 800c974:	601a      	str	r2, [r3, #0]
 800c976:	f04f 30ff 	mov.w	r0, #4294967295
 800c97a:	4770      	bx	lr
 800c97c:	700a      	strb	r2, [r1, #0]
 800c97e:	2001      	movs	r0, #1
 800c980:	4770      	bx	lr
	...

0800c984 <fiprintf>:
 800c984:	b40e      	push	{r1, r2, r3}
 800c986:	b503      	push	{r0, r1, lr}
 800c988:	4601      	mov	r1, r0
 800c98a:	ab03      	add	r3, sp, #12
 800c98c:	4805      	ldr	r0, [pc, #20]	@ (800c9a4 <fiprintf+0x20>)
 800c98e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c992:	6800      	ldr	r0, [r0, #0]
 800c994:	9301      	str	r3, [sp, #4]
 800c996:	f000 f831 	bl	800c9fc <_vfiprintf_r>
 800c99a:	b002      	add	sp, #8
 800c99c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9a0:	b003      	add	sp, #12
 800c9a2:	4770      	bx	lr
 800c9a4:	20000038 	.word	0x20000038

0800c9a8 <__sfputc_r>:
 800c9a8:	6893      	ldr	r3, [r2, #8]
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	b410      	push	{r4}
 800c9b0:	6093      	str	r3, [r2, #8]
 800c9b2:	da08      	bge.n	800c9c6 <__sfputc_r+0x1e>
 800c9b4:	6994      	ldr	r4, [r2, #24]
 800c9b6:	42a3      	cmp	r3, r4
 800c9b8:	db01      	blt.n	800c9be <__sfputc_r+0x16>
 800c9ba:	290a      	cmp	r1, #10
 800c9bc:	d103      	bne.n	800c9c6 <__sfputc_r+0x1e>
 800c9be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9c2:	f000 b933 	b.w	800cc2c <__swbuf_r>
 800c9c6:	6813      	ldr	r3, [r2, #0]
 800c9c8:	1c58      	adds	r0, r3, #1
 800c9ca:	6010      	str	r0, [r2, #0]
 800c9cc:	7019      	strb	r1, [r3, #0]
 800c9ce:	4608      	mov	r0, r1
 800c9d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9d4:	4770      	bx	lr

0800c9d6 <__sfputs_r>:
 800c9d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9d8:	4606      	mov	r6, r0
 800c9da:	460f      	mov	r7, r1
 800c9dc:	4614      	mov	r4, r2
 800c9de:	18d5      	adds	r5, r2, r3
 800c9e0:	42ac      	cmp	r4, r5
 800c9e2:	d101      	bne.n	800c9e8 <__sfputs_r+0x12>
 800c9e4:	2000      	movs	r0, #0
 800c9e6:	e007      	b.n	800c9f8 <__sfputs_r+0x22>
 800c9e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9ec:	463a      	mov	r2, r7
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	f7ff ffda 	bl	800c9a8 <__sfputc_r>
 800c9f4:	1c43      	adds	r3, r0, #1
 800c9f6:	d1f3      	bne.n	800c9e0 <__sfputs_r+0xa>
 800c9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c9fc <_vfiprintf_r>:
 800c9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca00:	460d      	mov	r5, r1
 800ca02:	b09d      	sub	sp, #116	@ 0x74
 800ca04:	4614      	mov	r4, r2
 800ca06:	4698      	mov	r8, r3
 800ca08:	4606      	mov	r6, r0
 800ca0a:	b118      	cbz	r0, 800ca14 <_vfiprintf_r+0x18>
 800ca0c:	6a03      	ldr	r3, [r0, #32]
 800ca0e:	b90b      	cbnz	r3, 800ca14 <_vfiprintf_r+0x18>
 800ca10:	f7fe fb40 	bl	800b094 <__sinit>
 800ca14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca16:	07d9      	lsls	r1, r3, #31
 800ca18:	d405      	bmi.n	800ca26 <_vfiprintf_r+0x2a>
 800ca1a:	89ab      	ldrh	r3, [r5, #12]
 800ca1c:	059a      	lsls	r2, r3, #22
 800ca1e:	d402      	bmi.n	800ca26 <_vfiprintf_r+0x2a>
 800ca20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca22:	f7fe fc82 	bl	800b32a <__retarget_lock_acquire_recursive>
 800ca26:	89ab      	ldrh	r3, [r5, #12]
 800ca28:	071b      	lsls	r3, r3, #28
 800ca2a:	d501      	bpl.n	800ca30 <_vfiprintf_r+0x34>
 800ca2c:	692b      	ldr	r3, [r5, #16]
 800ca2e:	b99b      	cbnz	r3, 800ca58 <_vfiprintf_r+0x5c>
 800ca30:	4629      	mov	r1, r5
 800ca32:	4630      	mov	r0, r6
 800ca34:	f000 f938 	bl	800cca8 <__swsetup_r>
 800ca38:	b170      	cbz	r0, 800ca58 <_vfiprintf_r+0x5c>
 800ca3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca3c:	07dc      	lsls	r4, r3, #31
 800ca3e:	d504      	bpl.n	800ca4a <_vfiprintf_r+0x4e>
 800ca40:	f04f 30ff 	mov.w	r0, #4294967295
 800ca44:	b01d      	add	sp, #116	@ 0x74
 800ca46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca4a:	89ab      	ldrh	r3, [r5, #12]
 800ca4c:	0598      	lsls	r0, r3, #22
 800ca4e:	d4f7      	bmi.n	800ca40 <_vfiprintf_r+0x44>
 800ca50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca52:	f7fe fc6b 	bl	800b32c <__retarget_lock_release_recursive>
 800ca56:	e7f3      	b.n	800ca40 <_vfiprintf_r+0x44>
 800ca58:	2300      	movs	r3, #0
 800ca5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca5c:	2320      	movs	r3, #32
 800ca5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca62:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca66:	2330      	movs	r3, #48	@ 0x30
 800ca68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cc18 <_vfiprintf_r+0x21c>
 800ca6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca70:	f04f 0901 	mov.w	r9, #1
 800ca74:	4623      	mov	r3, r4
 800ca76:	469a      	mov	sl, r3
 800ca78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca7c:	b10a      	cbz	r2, 800ca82 <_vfiprintf_r+0x86>
 800ca7e:	2a25      	cmp	r2, #37	@ 0x25
 800ca80:	d1f9      	bne.n	800ca76 <_vfiprintf_r+0x7a>
 800ca82:	ebba 0b04 	subs.w	fp, sl, r4
 800ca86:	d00b      	beq.n	800caa0 <_vfiprintf_r+0xa4>
 800ca88:	465b      	mov	r3, fp
 800ca8a:	4622      	mov	r2, r4
 800ca8c:	4629      	mov	r1, r5
 800ca8e:	4630      	mov	r0, r6
 800ca90:	f7ff ffa1 	bl	800c9d6 <__sfputs_r>
 800ca94:	3001      	adds	r0, #1
 800ca96:	f000 80a7 	beq.w	800cbe8 <_vfiprintf_r+0x1ec>
 800ca9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca9c:	445a      	add	r2, fp
 800ca9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800caa0:	f89a 3000 	ldrb.w	r3, [sl]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	f000 809f 	beq.w	800cbe8 <_vfiprintf_r+0x1ec>
 800caaa:	2300      	movs	r3, #0
 800caac:	f04f 32ff 	mov.w	r2, #4294967295
 800cab0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cab4:	f10a 0a01 	add.w	sl, sl, #1
 800cab8:	9304      	str	r3, [sp, #16]
 800caba:	9307      	str	r3, [sp, #28]
 800cabc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cac0:	931a      	str	r3, [sp, #104]	@ 0x68
 800cac2:	4654      	mov	r4, sl
 800cac4:	2205      	movs	r2, #5
 800cac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caca:	4853      	ldr	r0, [pc, #332]	@ (800cc18 <_vfiprintf_r+0x21c>)
 800cacc:	f7f3 fb80 	bl	80001d0 <memchr>
 800cad0:	9a04      	ldr	r2, [sp, #16]
 800cad2:	b9d8      	cbnz	r0, 800cb0c <_vfiprintf_r+0x110>
 800cad4:	06d1      	lsls	r1, r2, #27
 800cad6:	bf44      	itt	mi
 800cad8:	2320      	movmi	r3, #32
 800cada:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cade:	0713      	lsls	r3, r2, #28
 800cae0:	bf44      	itt	mi
 800cae2:	232b      	movmi	r3, #43	@ 0x2b
 800cae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cae8:	f89a 3000 	ldrb.w	r3, [sl]
 800caec:	2b2a      	cmp	r3, #42	@ 0x2a
 800caee:	d015      	beq.n	800cb1c <_vfiprintf_r+0x120>
 800caf0:	9a07      	ldr	r2, [sp, #28]
 800caf2:	4654      	mov	r4, sl
 800caf4:	2000      	movs	r0, #0
 800caf6:	f04f 0c0a 	mov.w	ip, #10
 800cafa:	4621      	mov	r1, r4
 800cafc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb00:	3b30      	subs	r3, #48	@ 0x30
 800cb02:	2b09      	cmp	r3, #9
 800cb04:	d94b      	bls.n	800cb9e <_vfiprintf_r+0x1a2>
 800cb06:	b1b0      	cbz	r0, 800cb36 <_vfiprintf_r+0x13a>
 800cb08:	9207      	str	r2, [sp, #28]
 800cb0a:	e014      	b.n	800cb36 <_vfiprintf_r+0x13a>
 800cb0c:	eba0 0308 	sub.w	r3, r0, r8
 800cb10:	fa09 f303 	lsl.w	r3, r9, r3
 800cb14:	4313      	orrs	r3, r2
 800cb16:	9304      	str	r3, [sp, #16]
 800cb18:	46a2      	mov	sl, r4
 800cb1a:	e7d2      	b.n	800cac2 <_vfiprintf_r+0xc6>
 800cb1c:	9b03      	ldr	r3, [sp, #12]
 800cb1e:	1d19      	adds	r1, r3, #4
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	9103      	str	r1, [sp, #12]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	bfbb      	ittet	lt
 800cb28:	425b      	neglt	r3, r3
 800cb2a:	f042 0202 	orrlt.w	r2, r2, #2
 800cb2e:	9307      	strge	r3, [sp, #28]
 800cb30:	9307      	strlt	r3, [sp, #28]
 800cb32:	bfb8      	it	lt
 800cb34:	9204      	strlt	r2, [sp, #16]
 800cb36:	7823      	ldrb	r3, [r4, #0]
 800cb38:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb3a:	d10a      	bne.n	800cb52 <_vfiprintf_r+0x156>
 800cb3c:	7863      	ldrb	r3, [r4, #1]
 800cb3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb40:	d132      	bne.n	800cba8 <_vfiprintf_r+0x1ac>
 800cb42:	9b03      	ldr	r3, [sp, #12]
 800cb44:	1d1a      	adds	r2, r3, #4
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	9203      	str	r2, [sp, #12]
 800cb4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb4e:	3402      	adds	r4, #2
 800cb50:	9305      	str	r3, [sp, #20]
 800cb52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cc28 <_vfiprintf_r+0x22c>
 800cb56:	7821      	ldrb	r1, [r4, #0]
 800cb58:	2203      	movs	r2, #3
 800cb5a:	4650      	mov	r0, sl
 800cb5c:	f7f3 fb38 	bl	80001d0 <memchr>
 800cb60:	b138      	cbz	r0, 800cb72 <_vfiprintf_r+0x176>
 800cb62:	9b04      	ldr	r3, [sp, #16]
 800cb64:	eba0 000a 	sub.w	r0, r0, sl
 800cb68:	2240      	movs	r2, #64	@ 0x40
 800cb6a:	4082      	lsls	r2, r0
 800cb6c:	4313      	orrs	r3, r2
 800cb6e:	3401      	adds	r4, #1
 800cb70:	9304      	str	r3, [sp, #16]
 800cb72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb76:	4829      	ldr	r0, [pc, #164]	@ (800cc1c <_vfiprintf_r+0x220>)
 800cb78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb7c:	2206      	movs	r2, #6
 800cb7e:	f7f3 fb27 	bl	80001d0 <memchr>
 800cb82:	2800      	cmp	r0, #0
 800cb84:	d03f      	beq.n	800cc06 <_vfiprintf_r+0x20a>
 800cb86:	4b26      	ldr	r3, [pc, #152]	@ (800cc20 <_vfiprintf_r+0x224>)
 800cb88:	bb1b      	cbnz	r3, 800cbd2 <_vfiprintf_r+0x1d6>
 800cb8a:	9b03      	ldr	r3, [sp, #12]
 800cb8c:	3307      	adds	r3, #7
 800cb8e:	f023 0307 	bic.w	r3, r3, #7
 800cb92:	3308      	adds	r3, #8
 800cb94:	9303      	str	r3, [sp, #12]
 800cb96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb98:	443b      	add	r3, r7
 800cb9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb9c:	e76a      	b.n	800ca74 <_vfiprintf_r+0x78>
 800cb9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cba2:	460c      	mov	r4, r1
 800cba4:	2001      	movs	r0, #1
 800cba6:	e7a8      	b.n	800cafa <_vfiprintf_r+0xfe>
 800cba8:	2300      	movs	r3, #0
 800cbaa:	3401      	adds	r4, #1
 800cbac:	9305      	str	r3, [sp, #20]
 800cbae:	4619      	mov	r1, r3
 800cbb0:	f04f 0c0a 	mov.w	ip, #10
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbba:	3a30      	subs	r2, #48	@ 0x30
 800cbbc:	2a09      	cmp	r2, #9
 800cbbe:	d903      	bls.n	800cbc8 <_vfiprintf_r+0x1cc>
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d0c6      	beq.n	800cb52 <_vfiprintf_r+0x156>
 800cbc4:	9105      	str	r1, [sp, #20]
 800cbc6:	e7c4      	b.n	800cb52 <_vfiprintf_r+0x156>
 800cbc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbcc:	4604      	mov	r4, r0
 800cbce:	2301      	movs	r3, #1
 800cbd0:	e7f0      	b.n	800cbb4 <_vfiprintf_r+0x1b8>
 800cbd2:	ab03      	add	r3, sp, #12
 800cbd4:	9300      	str	r3, [sp, #0]
 800cbd6:	462a      	mov	r2, r5
 800cbd8:	4b12      	ldr	r3, [pc, #72]	@ (800cc24 <_vfiprintf_r+0x228>)
 800cbda:	a904      	add	r1, sp, #16
 800cbdc:	4630      	mov	r0, r6
 800cbde:	f7fd fe17 	bl	800a810 <_printf_float>
 800cbe2:	4607      	mov	r7, r0
 800cbe4:	1c78      	adds	r0, r7, #1
 800cbe6:	d1d6      	bne.n	800cb96 <_vfiprintf_r+0x19a>
 800cbe8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cbea:	07d9      	lsls	r1, r3, #31
 800cbec:	d405      	bmi.n	800cbfa <_vfiprintf_r+0x1fe>
 800cbee:	89ab      	ldrh	r3, [r5, #12]
 800cbf0:	059a      	lsls	r2, r3, #22
 800cbf2:	d402      	bmi.n	800cbfa <_vfiprintf_r+0x1fe>
 800cbf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbf6:	f7fe fb99 	bl	800b32c <__retarget_lock_release_recursive>
 800cbfa:	89ab      	ldrh	r3, [r5, #12]
 800cbfc:	065b      	lsls	r3, r3, #25
 800cbfe:	f53f af1f 	bmi.w	800ca40 <_vfiprintf_r+0x44>
 800cc02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc04:	e71e      	b.n	800ca44 <_vfiprintf_r+0x48>
 800cc06:	ab03      	add	r3, sp, #12
 800cc08:	9300      	str	r3, [sp, #0]
 800cc0a:	462a      	mov	r2, r5
 800cc0c:	4b05      	ldr	r3, [pc, #20]	@ (800cc24 <_vfiprintf_r+0x228>)
 800cc0e:	a904      	add	r1, sp, #16
 800cc10:	4630      	mov	r0, r6
 800cc12:	f7fe f895 	bl	800ad40 <_printf_i>
 800cc16:	e7e4      	b.n	800cbe2 <_vfiprintf_r+0x1e6>
 800cc18:	0800cff4 	.word	0x0800cff4
 800cc1c:	0800cffe 	.word	0x0800cffe
 800cc20:	0800a811 	.word	0x0800a811
 800cc24:	0800c9d7 	.word	0x0800c9d7
 800cc28:	0800cffa 	.word	0x0800cffa

0800cc2c <__swbuf_r>:
 800cc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc2e:	460e      	mov	r6, r1
 800cc30:	4614      	mov	r4, r2
 800cc32:	4605      	mov	r5, r0
 800cc34:	b118      	cbz	r0, 800cc3e <__swbuf_r+0x12>
 800cc36:	6a03      	ldr	r3, [r0, #32]
 800cc38:	b90b      	cbnz	r3, 800cc3e <__swbuf_r+0x12>
 800cc3a:	f7fe fa2b 	bl	800b094 <__sinit>
 800cc3e:	69a3      	ldr	r3, [r4, #24]
 800cc40:	60a3      	str	r3, [r4, #8]
 800cc42:	89a3      	ldrh	r3, [r4, #12]
 800cc44:	071a      	lsls	r2, r3, #28
 800cc46:	d501      	bpl.n	800cc4c <__swbuf_r+0x20>
 800cc48:	6923      	ldr	r3, [r4, #16]
 800cc4a:	b943      	cbnz	r3, 800cc5e <__swbuf_r+0x32>
 800cc4c:	4621      	mov	r1, r4
 800cc4e:	4628      	mov	r0, r5
 800cc50:	f000 f82a 	bl	800cca8 <__swsetup_r>
 800cc54:	b118      	cbz	r0, 800cc5e <__swbuf_r+0x32>
 800cc56:	f04f 37ff 	mov.w	r7, #4294967295
 800cc5a:	4638      	mov	r0, r7
 800cc5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc5e:	6823      	ldr	r3, [r4, #0]
 800cc60:	6922      	ldr	r2, [r4, #16]
 800cc62:	1a98      	subs	r0, r3, r2
 800cc64:	6963      	ldr	r3, [r4, #20]
 800cc66:	b2f6      	uxtb	r6, r6
 800cc68:	4283      	cmp	r3, r0
 800cc6a:	4637      	mov	r7, r6
 800cc6c:	dc05      	bgt.n	800cc7a <__swbuf_r+0x4e>
 800cc6e:	4621      	mov	r1, r4
 800cc70:	4628      	mov	r0, r5
 800cc72:	f7ff fe0d 	bl	800c890 <_fflush_r>
 800cc76:	2800      	cmp	r0, #0
 800cc78:	d1ed      	bne.n	800cc56 <__swbuf_r+0x2a>
 800cc7a:	68a3      	ldr	r3, [r4, #8]
 800cc7c:	3b01      	subs	r3, #1
 800cc7e:	60a3      	str	r3, [r4, #8]
 800cc80:	6823      	ldr	r3, [r4, #0]
 800cc82:	1c5a      	adds	r2, r3, #1
 800cc84:	6022      	str	r2, [r4, #0]
 800cc86:	701e      	strb	r6, [r3, #0]
 800cc88:	6962      	ldr	r2, [r4, #20]
 800cc8a:	1c43      	adds	r3, r0, #1
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d004      	beq.n	800cc9a <__swbuf_r+0x6e>
 800cc90:	89a3      	ldrh	r3, [r4, #12]
 800cc92:	07db      	lsls	r3, r3, #31
 800cc94:	d5e1      	bpl.n	800cc5a <__swbuf_r+0x2e>
 800cc96:	2e0a      	cmp	r6, #10
 800cc98:	d1df      	bne.n	800cc5a <__swbuf_r+0x2e>
 800cc9a:	4621      	mov	r1, r4
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	f7ff fdf7 	bl	800c890 <_fflush_r>
 800cca2:	2800      	cmp	r0, #0
 800cca4:	d0d9      	beq.n	800cc5a <__swbuf_r+0x2e>
 800cca6:	e7d6      	b.n	800cc56 <__swbuf_r+0x2a>

0800cca8 <__swsetup_r>:
 800cca8:	b538      	push	{r3, r4, r5, lr}
 800ccaa:	4b29      	ldr	r3, [pc, #164]	@ (800cd50 <__swsetup_r+0xa8>)
 800ccac:	4605      	mov	r5, r0
 800ccae:	6818      	ldr	r0, [r3, #0]
 800ccb0:	460c      	mov	r4, r1
 800ccb2:	b118      	cbz	r0, 800ccbc <__swsetup_r+0x14>
 800ccb4:	6a03      	ldr	r3, [r0, #32]
 800ccb6:	b90b      	cbnz	r3, 800ccbc <__swsetup_r+0x14>
 800ccb8:	f7fe f9ec 	bl	800b094 <__sinit>
 800ccbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccc0:	0719      	lsls	r1, r3, #28
 800ccc2:	d422      	bmi.n	800cd0a <__swsetup_r+0x62>
 800ccc4:	06da      	lsls	r2, r3, #27
 800ccc6:	d407      	bmi.n	800ccd8 <__swsetup_r+0x30>
 800ccc8:	2209      	movs	r2, #9
 800ccca:	602a      	str	r2, [r5, #0]
 800cccc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccd0:	81a3      	strh	r3, [r4, #12]
 800ccd2:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd6:	e033      	b.n	800cd40 <__swsetup_r+0x98>
 800ccd8:	0758      	lsls	r0, r3, #29
 800ccda:	d512      	bpl.n	800cd02 <__swsetup_r+0x5a>
 800ccdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ccde:	b141      	cbz	r1, 800ccf2 <__swsetup_r+0x4a>
 800cce0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cce4:	4299      	cmp	r1, r3
 800cce6:	d002      	beq.n	800ccee <__swsetup_r+0x46>
 800cce8:	4628      	mov	r0, r5
 800ccea:	f7ff f989 	bl	800c000 <_free_r>
 800ccee:	2300      	movs	r3, #0
 800ccf0:	6363      	str	r3, [r4, #52]	@ 0x34
 800ccf2:	89a3      	ldrh	r3, [r4, #12]
 800ccf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ccf8:	81a3      	strh	r3, [r4, #12]
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	6063      	str	r3, [r4, #4]
 800ccfe:	6923      	ldr	r3, [r4, #16]
 800cd00:	6023      	str	r3, [r4, #0]
 800cd02:	89a3      	ldrh	r3, [r4, #12]
 800cd04:	f043 0308 	orr.w	r3, r3, #8
 800cd08:	81a3      	strh	r3, [r4, #12]
 800cd0a:	6923      	ldr	r3, [r4, #16]
 800cd0c:	b94b      	cbnz	r3, 800cd22 <__swsetup_r+0x7a>
 800cd0e:	89a3      	ldrh	r3, [r4, #12]
 800cd10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cd14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd18:	d003      	beq.n	800cd22 <__swsetup_r+0x7a>
 800cd1a:	4621      	mov	r1, r4
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	f000 f83f 	bl	800cda0 <__smakebuf_r>
 800cd22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd26:	f013 0201 	ands.w	r2, r3, #1
 800cd2a:	d00a      	beq.n	800cd42 <__swsetup_r+0x9a>
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	60a2      	str	r2, [r4, #8]
 800cd30:	6962      	ldr	r2, [r4, #20]
 800cd32:	4252      	negs	r2, r2
 800cd34:	61a2      	str	r2, [r4, #24]
 800cd36:	6922      	ldr	r2, [r4, #16]
 800cd38:	b942      	cbnz	r2, 800cd4c <__swsetup_r+0xa4>
 800cd3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cd3e:	d1c5      	bne.n	800cccc <__swsetup_r+0x24>
 800cd40:	bd38      	pop	{r3, r4, r5, pc}
 800cd42:	0799      	lsls	r1, r3, #30
 800cd44:	bf58      	it	pl
 800cd46:	6962      	ldrpl	r2, [r4, #20]
 800cd48:	60a2      	str	r2, [r4, #8]
 800cd4a:	e7f4      	b.n	800cd36 <__swsetup_r+0x8e>
 800cd4c:	2000      	movs	r0, #0
 800cd4e:	e7f7      	b.n	800cd40 <__swsetup_r+0x98>
 800cd50:	20000038 	.word	0x20000038

0800cd54 <__swhatbuf_r>:
 800cd54:	b570      	push	{r4, r5, r6, lr}
 800cd56:	460c      	mov	r4, r1
 800cd58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd5c:	2900      	cmp	r1, #0
 800cd5e:	b096      	sub	sp, #88	@ 0x58
 800cd60:	4615      	mov	r5, r2
 800cd62:	461e      	mov	r6, r3
 800cd64:	da0d      	bge.n	800cd82 <__swhatbuf_r+0x2e>
 800cd66:	89a3      	ldrh	r3, [r4, #12]
 800cd68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cd6c:	f04f 0100 	mov.w	r1, #0
 800cd70:	bf14      	ite	ne
 800cd72:	2340      	movne	r3, #64	@ 0x40
 800cd74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cd78:	2000      	movs	r0, #0
 800cd7a:	6031      	str	r1, [r6, #0]
 800cd7c:	602b      	str	r3, [r5, #0]
 800cd7e:	b016      	add	sp, #88	@ 0x58
 800cd80:	bd70      	pop	{r4, r5, r6, pc}
 800cd82:	466a      	mov	r2, sp
 800cd84:	f000 f848 	bl	800ce18 <_fstat_r>
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	dbec      	blt.n	800cd66 <__swhatbuf_r+0x12>
 800cd8c:	9901      	ldr	r1, [sp, #4]
 800cd8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cd92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cd96:	4259      	negs	r1, r3
 800cd98:	4159      	adcs	r1, r3
 800cd9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd9e:	e7eb      	b.n	800cd78 <__swhatbuf_r+0x24>

0800cda0 <__smakebuf_r>:
 800cda0:	898b      	ldrh	r3, [r1, #12]
 800cda2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cda4:	079d      	lsls	r5, r3, #30
 800cda6:	4606      	mov	r6, r0
 800cda8:	460c      	mov	r4, r1
 800cdaa:	d507      	bpl.n	800cdbc <__smakebuf_r+0x1c>
 800cdac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cdb0:	6023      	str	r3, [r4, #0]
 800cdb2:	6123      	str	r3, [r4, #16]
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	6163      	str	r3, [r4, #20]
 800cdb8:	b003      	add	sp, #12
 800cdba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdbc:	ab01      	add	r3, sp, #4
 800cdbe:	466a      	mov	r2, sp
 800cdc0:	f7ff ffc8 	bl	800cd54 <__swhatbuf_r>
 800cdc4:	9f00      	ldr	r7, [sp, #0]
 800cdc6:	4605      	mov	r5, r0
 800cdc8:	4639      	mov	r1, r7
 800cdca:	4630      	mov	r0, r6
 800cdcc:	f7fd fbf4 	bl	800a5b8 <_malloc_r>
 800cdd0:	b948      	cbnz	r0, 800cde6 <__smakebuf_r+0x46>
 800cdd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdd6:	059a      	lsls	r2, r3, #22
 800cdd8:	d4ee      	bmi.n	800cdb8 <__smakebuf_r+0x18>
 800cdda:	f023 0303 	bic.w	r3, r3, #3
 800cdde:	f043 0302 	orr.w	r3, r3, #2
 800cde2:	81a3      	strh	r3, [r4, #12]
 800cde4:	e7e2      	b.n	800cdac <__smakebuf_r+0xc>
 800cde6:	89a3      	ldrh	r3, [r4, #12]
 800cde8:	6020      	str	r0, [r4, #0]
 800cdea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdee:	81a3      	strh	r3, [r4, #12]
 800cdf0:	9b01      	ldr	r3, [sp, #4]
 800cdf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cdf6:	b15b      	cbz	r3, 800ce10 <__smakebuf_r+0x70>
 800cdf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdfc:	4630      	mov	r0, r6
 800cdfe:	f000 f81d 	bl	800ce3c <_isatty_r>
 800ce02:	b128      	cbz	r0, 800ce10 <__smakebuf_r+0x70>
 800ce04:	89a3      	ldrh	r3, [r4, #12]
 800ce06:	f023 0303 	bic.w	r3, r3, #3
 800ce0a:	f043 0301 	orr.w	r3, r3, #1
 800ce0e:	81a3      	strh	r3, [r4, #12]
 800ce10:	89a3      	ldrh	r3, [r4, #12]
 800ce12:	431d      	orrs	r5, r3
 800ce14:	81a5      	strh	r5, [r4, #12]
 800ce16:	e7cf      	b.n	800cdb8 <__smakebuf_r+0x18>

0800ce18 <_fstat_r>:
 800ce18:	b538      	push	{r3, r4, r5, lr}
 800ce1a:	4d07      	ldr	r5, [pc, #28]	@ (800ce38 <_fstat_r+0x20>)
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	4604      	mov	r4, r0
 800ce20:	4608      	mov	r0, r1
 800ce22:	4611      	mov	r1, r2
 800ce24:	602b      	str	r3, [r5, #0]
 800ce26:	f7f4 fd71 	bl	800190c <_fstat>
 800ce2a:	1c43      	adds	r3, r0, #1
 800ce2c:	d102      	bne.n	800ce34 <_fstat_r+0x1c>
 800ce2e:	682b      	ldr	r3, [r5, #0]
 800ce30:	b103      	cbz	r3, 800ce34 <_fstat_r+0x1c>
 800ce32:	6023      	str	r3, [r4, #0]
 800ce34:	bd38      	pop	{r3, r4, r5, pc}
 800ce36:	bf00      	nop
 800ce38:	20000c9c 	.word	0x20000c9c

0800ce3c <_isatty_r>:
 800ce3c:	b538      	push	{r3, r4, r5, lr}
 800ce3e:	4d06      	ldr	r5, [pc, #24]	@ (800ce58 <_isatty_r+0x1c>)
 800ce40:	2300      	movs	r3, #0
 800ce42:	4604      	mov	r4, r0
 800ce44:	4608      	mov	r0, r1
 800ce46:	602b      	str	r3, [r5, #0]
 800ce48:	f7f4 fd70 	bl	800192c <_isatty>
 800ce4c:	1c43      	adds	r3, r0, #1
 800ce4e:	d102      	bne.n	800ce56 <_isatty_r+0x1a>
 800ce50:	682b      	ldr	r3, [r5, #0]
 800ce52:	b103      	cbz	r3, 800ce56 <_isatty_r+0x1a>
 800ce54:	6023      	str	r3, [r4, #0]
 800ce56:	bd38      	pop	{r3, r4, r5, pc}
 800ce58:	20000c9c 	.word	0x20000c9c

0800ce5c <_init>:
 800ce5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce5e:	bf00      	nop
 800ce60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce62:	bc08      	pop	{r3}
 800ce64:	469e      	mov	lr, r3
 800ce66:	4770      	bx	lr

0800ce68 <_fini>:
 800ce68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce6a:	bf00      	nop
 800ce6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce6e:	bc08      	pop	{r3}
 800ce70:	469e      	mov	lr, r3
 800ce72:	4770      	bx	lr
